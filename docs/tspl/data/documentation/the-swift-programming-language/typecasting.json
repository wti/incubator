{"kind":"article","identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Type Casting"},"abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Type casting","type":"text"}]},{"text":" is a way to check the type of an instance,","type":"text"},{"type":"text","text":" "},{"text":"or to treat that instance as a different","type":"text"},{"type":"text","text":" "},{"text":"superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casting in Swift is implemented with the "},{"type":"codeVoice","code":"is"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operators."},{"text":" ","type":"text"},{"type":"text","text":"These two operators provide a simple and expressive way"},{"text":" ","type":"text"},{"type":"text","text":"to check the type of a value or cast a value to a different type."}]},{"inlineContent":[{"type":"text","text":"You can also use type casting to check whether a type conforms to a protocol,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Defining a Class Hierarchy for Type Casting","level":2,"type":"heading","anchor":"Defining-a-Class-Hierarchy-for-Type-Casting"},{"inlineContent":[{"type":"text","text":"You can use type casting with a hierarchy of classes and subclasses"},{"text":" ","type":"text"},{"text":"to check the type of a particular class instance","type":"text"},{"text":" ","type":"text"},{"text":"and to cast that instance to another class within the same hierarchy.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The three code snippets below define a hierarchy of classes"},{"text":" ","type":"text"},{"type":"text","text":"and an array containing instances of those classes,"},{"text":" ","type":"text"},{"type":"text","text":"for use in an example of type casting."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The first snippet defines a new base class called ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This class provides basic functionality for any kind of item that appears","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a digital media library."},{"type":"text","text":" "},{"text":"Specifically, it declares a ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" property of type ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and an "},{"code":"init(name:)","type":"codeVoice"},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"type":"text","text":"(It’s assumed that all media items, including all movies and songs, will have a name.)"}]},{"code":["class MediaItem {","    var name: String","    init(name: String) {","        self.name = name","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next snippet defines two subclasses of "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The first subclass, ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":", encapsulates additional information about a movie or film.","type":"text"},{"type":"text","text":" "},{"text":"It adds a ","type":"text"},{"code":"director","type":"codeVoice"},{"text":" property on top of the base ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":" class,"},{"text":" ","type":"text"},{"text":"with a corresponding initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second subclass, "},{"type":"codeVoice","code":"Song"},{"type":"text","text":", adds an "},{"code":"artist","type":"codeVoice"},{"text":" property and initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on top of the base class:"}]},{"code":["class Movie: MediaItem {","    var director: String","    init(name: String, director: String) {","        self.director = director","        super.init(name: name)","    }","}","","class Song: MediaItem {","    var artist: String","    init(name: String, artist: String) {","        self.artist = artist","        super.init(name: name)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The final snippet creates a constant array called ","type":"text"},{"type":"codeVoice","code":"library"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which contains two "},{"type":"codeVoice","code":"Movie"},{"text":" instances and three ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":" instances.","type":"text"},{"text":" ","type":"text"},{"text":"The type of the ","type":"text"},{"code":"library","type":"codeVoice"},{"type":"text","text":" array is inferred"},{"text":" ","type":"text"},{"type":"text","text":"by initializing it with the contents of an array literal."},{"type":"text","text":" "},{"text":"Swift’s type checker is able to deduce that ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Song"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"a common superclass of "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and so it infers a type of ","type":"text"},{"type":"codeVoice","code":"[MediaItem]"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let library = [","    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),","    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),","    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),","    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),","    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")","]","\/\/ the type of \"library\" is inferred to be [MediaItem]"]},{"inlineContent":[{"type":"text","text":"The items stored in "},{"code":"library","type":"codeVoice"},{"type":"text","text":" are still "},{"code":"Movie","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":" instances behind the scenes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, if you iterate over the contents of this array,"},{"text":" ","type":"text"},{"type":"text","text":"the items you receive back are typed as "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and not as ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In order to work with them as their native type,"},{"type":"text","text":" "},{"type":"text","text":"you need to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"check"}]},{"type":"text","text":" their type,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"downcast"}]},{"type":"text","text":" them to a different type,"},{"text":" ","type":"text"},{"type":"text","text":"as described below."}],"type":"paragraph"},{"type":"heading","anchor":"Checking-Type","level":2,"text":"Checking Type"},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type check operator","type":"text"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"is"},{"type":"text","text":") to check"},{"text":" ","type":"text"},{"text":"whether an instance is of a certain subclass type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The type check operator returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the instance is of that subclass type"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" if it’s not."}]},{"inlineContent":[{"type":"text","text":"The example below defines two variables, "},{"type":"codeVoice","code":"movieCount"},{"text":" and ","type":"text"},{"code":"songCount","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which count the number of ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":" instances in the ","type":"text"},{"code":"library","type":"codeVoice"},{"text":" array:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var movieCount = 0","var songCount = 0","","for item in library {","    if item is Movie {","        movieCount += 1","    } else if item is Song {","        songCount += 1","    }","}","","print(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")","\/\/ Prints \"Media library contains 2 movies and 3 songs\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example iterates through all items in the "},{"type":"codeVoice","code":"library"},{"text":" array.","type":"text"},{"text":" ","type":"text"},{"text":"On each pass, the ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop sets the "},{"code":"item","type":"codeVoice"},{"text":" constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the next "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" in the array."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"item is Movie"},{"type":"text","text":" returns "},{"code":"true","type":"codeVoice"},{"text":" if the current ","type":"text"},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":" "},{"type":"text","text":"is a "},{"type":"codeVoice","code":"Movie"},{"text":" instance and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" if it’s not.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"item is Song"},{"type":"text","text":" checks whether the item is a "},{"type":"codeVoice","code":"Song"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"At the end of the "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, the values of "},{"type":"codeVoice","code":"movieCount"},{"type":"text","text":" and "},{"code":"songCount","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"contain a count of how many "},{"code":"MediaItem","type":"codeVoice"},{"text":" instances were found of each type.","type":"text"}]},{"text":"Downcasting","anchor":"Downcasting","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A constant or variable of a certain class type may actually refer to"},{"type":"text","text":" "},{"text":"an instance of a subclass behind the scenes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Where you believe this is the case,"},{"text":" ","type":"text"},{"type":"text","text":"you can try to "},{"inlineContent":[{"type":"text","text":"downcast"}],"type":"emphasis"},{"text":" to the subclass type","type":"text"},{"text":" ","type":"text"},{"text":"with a ","type":"text"},{"inlineContent":[{"text":"type cast operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":"as?"},{"text":" or ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because downcasting can fail,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the type cast operator comes in two different forms."},{"text":" ","type":"text"},{"type":"text","text":"The conditional form, "},{"code":"as?","type":"codeVoice"},{"type":"text","text":", returns an optional value of the type you are trying to downcast to."},{"type":"text","text":" "},{"type":"text","text":"The forced form, "},{"code":"as!","type":"codeVoice"},{"type":"text","text":", attempts the downcast and force-unwraps the result"},{"text":" ","type":"text"},{"type":"text","text":"as a single compound action."}]},{"type":"paragraph","inlineContent":[{"text":"Use the conditional form of the type cast operator (","type":"text"},{"type":"codeVoice","code":"as?"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"when you aren’t sure if the downcast will succeed."},{"text":" ","type":"text"},{"type":"text","text":"This form of the operator will always return an optional value,"},{"text":" ","type":"text"},{"type":"text","text":"and the value will be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the downcast was not possible."},{"text":" ","type":"text"},{"text":"This enables you to check for a successful downcast.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use the forced form of the type cast operator (","type":"text"},{"type":"codeVoice","code":"as!"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"only when you are sure that the downcast will always succeed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This form of the operator will trigger a runtime error"},{"type":"text","text":" "},{"type":"text","text":"if you try to downcast to an incorrect class type."}]},{"inlineContent":[{"text":"The example below iterates over each ","type":"text"},{"type":"codeVoice","code":"MediaItem"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"library"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and prints an appropriate description for each item."},{"type":"text","text":" "},{"text":"To do this, it needs to access each item as a true ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and not just as a "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This is necessary in order for it to be able to access","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"director","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"artist"},{"text":" property of a ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"code":"Song","type":"codeVoice"},{"type":"text","text":" "},{"text":"for use in the description.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this example, each item in the array might be a "},{"type":"codeVoice","code":"Movie"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or it might be a ","type":"text"},{"code":"Song","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You don’t know in advance which actual class to use for each item,"},{"type":"text","text":" "},{"text":"and so it’s appropriate to use the conditional form of the type cast operator (","type":"text"},{"type":"codeVoice","code":"as?"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to check the downcast each time through the loop:"}],"type":"paragraph"},{"code":["for item in library {","    if let movie = item as? Movie {","        print(\"Movie: \\(movie.name), dir. \\(movie.director)\")","    } else if let song = item as? Song {","        print(\"Song: \\(song.name), by \\(song.artist)\")","    }","}","","\/\/ Movie: Casablanca, dir. Michael Curtiz","\/\/ Song: Blue Suede Shoes, by Elvis Presley","\/\/ Movie: Citizen Kane, dir. Orson Welles","\/\/ Song: The One And Only, by Chesney Hawkes","\/\/ Song: Never Gonna Give You Up, by Rick Astley"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The example starts by trying to downcast the current "},{"code":"item","type":"codeVoice"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Because ","type":"text"},{"code":"item","type":"codeVoice"},{"type":"text","text":" is a "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":" instance, it’s possible that it "},{"inlineContent":[{"text":"might","type":"text"}],"type":"emphasis"},{"text":" be a ","type":"text"},{"code":"Movie","type":"codeVoice"},{"type":"text","text":";"},{"type":"text","text":" "},{"text":"equally, it’s also possible that it might be a ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or even just a base "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Because of this uncertainty, the "},{"type":"codeVoice","code":"as?"},{"text":" form of the type cast operator returns an ","type":"text"},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"when attempting to downcast to a subclass type.","type":"text"},{"type":"text","text":" "},{"text":"The result of ","type":"text"},{"type":"codeVoice","code":"item as? Movie"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"Movie?"},{"type":"text","text":", or “optional "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":"”."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Downcasting to "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":" fails when applied to"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the library array."},{"type":"text","text":" "},{"text":"To cope with this, the example above uses optional binding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to check whether the optional "},{"type":"codeVoice","code":"Movie"},{"text":" actually contains a value","type":"text"},{"text":" ","type":"text"},{"text":"(that is, to find out whether the downcast succeeded.)","type":"text"},{"text":" ","type":"text"},{"text":"This optional binding is written “","type":"text"},{"type":"codeVoice","code":"if let movie = item as? Movie"},{"type":"text","text":"”,"},{"text":" ","type":"text"},{"type":"text","text":"which can be read as:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Try to access "},{"code":"item","type":"codeVoice"},{"text":" as a ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If this is successful,"},{"text":" ","type":"text"},{"text":"set a new temporary constant called ","type":"text"},{"code":"movie","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"the value stored in the returned optional ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":".”"}]},{"inlineContent":[{"type":"text","text":"If the downcasting succeeds, the properties of "},{"type":"codeVoice","code":"movie"},{"text":" are then used","type":"text"},{"type":"text","text":" "},{"text":"to print a description for that ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instance, including the name of its "},{"type":"codeVoice","code":"director"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A similar principle is used to check for "},{"type":"codeVoice","code":"Song"},{"text":" instances,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to print an appropriate description (including "},{"type":"codeVoice","code":"artist"},{"text":" name)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"whenever a "},{"code":"Song","type":"codeVoice"},{"text":" is found in the library.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Casting doesn’t actually modify the instance or change its values."},{"text":" ","type":"text"},{"type":"text","text":"The underlying instance remains the same; it’s simply treated and accessed"},{"text":" ","type":"text"},{"text":"as an instance of the type to which it has been cast.","type":"text"}],"type":"paragraph"}]},{"anchor":"Type-Casting-for-Any-and-AnyObject","text":"Type Casting for Any and AnyObject","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Swift provides two special types for working with nonspecific types:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"Any"},{"type":"text","text":" can represent an instance of any type at all, including function types."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":" can represent an instance of any class type."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" only when you explicitly need"},{"text":" ","type":"text"},{"text":"the behavior and capabilities they provide.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s always better to be specific about the types you expect to work with in your code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of using ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" to work with a mix of different types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including function types and nonclass types."},{"text":" ","type":"text"},{"text":"The example creates an array called ","type":"text"},{"code":"things","type":"codeVoice"},{"text":", which can store values of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var things: [Any] = []","","things.append(0)","things.append(0.0)","things.append(42)","things.append(3.14159)","things.append(\"hello\")","things.append((3.0, 5.0))","things.append(Movie(name: \"Ghostbusters\", director: \"Ivan Reitman\"))","things.append({ (name: String) -> String in \"Hello, \\(name)\" })"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"things","type":"codeVoice"},{"type":"text","text":" array contains"},{"type":"text","text":" "},{"text":"two ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values, two "},{"type":"codeVoice","code":"Double"},{"text":" values, a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a tuple of type "},{"code":"(Double, Double)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the movie “Ghostbusters”,"},{"type":"text","text":" "},{"text":"and a closure expression that takes a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"text":"and returns another ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To discover the specific type of a constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"that’s known only to be of type "},{"type":"codeVoice","code":"Any"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use an "},{"type":"codeVoice","code":"is"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as"},{"type":"text","text":" pattern in a "},{"type":"codeVoice","code":"switch"},{"text":" statement’s cases.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example below iterates over the items in the "},{"type":"codeVoice","code":"things"},{"text":" array","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and queries the type of each item with a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Several of the "},{"code":"switch","type":"codeVoice"},{"text":" statement’s cases bind their matched value to","type":"text"},{"text":" ","type":"text"},{"text":"a constant of the specified type to enable its value to be printed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["for thing in things {","    switch thing {","    case 0 as Int:","        print(\"zero as an Int\")","    case 0 as Double:","        print(\"zero as a Double\")","    case let someInt as Int:","        print(\"an integer value of \\(someInt)\")","    case let someDouble as Double where someDouble > 0:","        print(\"a positive double value of \\(someDouble)\")","    case is Double:","        print(\"some other double value that I don't want to print\")","    case let someString as String:","        print(\"a string value of \\\"\\(someString)\\\"\")","    case let (x, y) as (Double, Double):","        print(\"an (x, y) point at \\(x), \\(y)\")","    case let movie as Movie:","        print(\"a movie called \\(movie.name), dir. \\(movie.director)\")","    case let stringConverter as (String) -> String:","        print(stringConverter(\"Michael\"))","    default:","        print(\"something else\")","    }","}","","\/\/ zero as an Int","\/\/ zero as a Double","\/\/ an integer value of 42","\/\/ a positive double value of 3.14159","\/\/ a string value of \"hello\"","\/\/ an (x, y) point at 3.0, 5.0","\/\/ a movie called Ghostbusters, dir. Ivan Reitman","\/\/ Hello, Michael"],"type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type represents values of any type, including optional types."},{"text":" ","type":"text"},{"text":"Swift gives you a warning if you use an optional value","type":"text"},{"text":" ","type":"text"},{"text":"where a value of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" is expected.","type":"text"},{"type":"text","text":" "},{"text":"If you really do need to use an optional value as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"you can use the ","type":"text"},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator to explicitly cast the optional to "},{"code":"Any","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"as shown below.","type":"text"}],"type":"paragraph"},{"code":["let optionalNumber: Int? = 3","things.append(optionalNumber)        \/\/ Warning","things.append(optionalNumber as Any) \/\/ No warning"],"syntax":"swift","type":"codeListing"}],"style":"note","type":"aside"}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"}}}