{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Type Casting"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Type casting","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a way to check the type of an instance,"},{"type":"text","text":" "},{"text":"or to treat that instance as a different","type":"text"},{"text":" ","type":"text"},{"text":"superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Type casting in Swift is implemented with the ","type":"text"},{"type":"codeVoice","code":"is"},{"type":"text","text":" and "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operators."},{"type":"text","text":" "},{"text":"These two operators provide a simple and expressive way","type":"text"},{"type":"text","text":" "},{"text":"to check the type of a value or cast a value to a different type.","type":"text"}]},{"inlineContent":[{"text":"You can also use type casting to check whether a type conforms to a protocol,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Defining-a-Class-Hierarchy-for-Type-Casting","text":"Defining a Class Hierarchy for Type Casting","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"You can use type casting with a hierarchy of classes and subclasses"},{"type":"text","text":" "},{"type":"text","text":"to check the type of a particular class instance"},{"type":"text","text":" "},{"type":"text","text":"and to cast that instance to another class within the same hierarchy."},{"text":" ","type":"text"},{"type":"text","text":"The three code snippets below define a hierarchy of classes"},{"type":"text","text":" "},{"type":"text","text":"and an array containing instances of those classes,"},{"type":"text","text":" "},{"text":"for use in an example of type casting.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first snippet defines a new base class called "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This class provides basic functionality for any kind of item that appears","type":"text"},{"text":" ","type":"text"},{"text":"in a digital media library.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Specifically, it declares a "},{"code":"name","type":"codeVoice"},{"text":" property of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and an ","type":"text"},{"type":"codeVoice","code":"init(name:)"},{"text":" initializer.","type":"text"},{"type":"text","text":" "},{"text":"(It’s assumed that all media items, including all movies and songs, will have a name.)","type":"text"}]},{"code":["class MediaItem {","    var name: String","    init(name: String) {","        self.name = name","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The next snippet defines two subclasses of "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The first subclass, "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":", encapsulates additional information about a movie or film."},{"type":"text","text":" "},{"text":"It adds a ","type":"text"},{"type":"codeVoice","code":"director"},{"type":"text","text":" property on top of the base "},{"code":"MediaItem","type":"codeVoice"},{"text":" class,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a corresponding initializer."},{"text":" ","type":"text"},{"text":"The second subclass, ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":", adds an ","type":"text"},{"type":"codeVoice","code":"artist"},{"text":" property and initializer","type":"text"},{"text":" ","type":"text"},{"text":"on top of the base class:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class Movie: MediaItem {","    var director: String","    init(name: String, director: String) {","        self.director = director","        super.init(name: name)","    }","}","","class Song: MediaItem {","    var artist: String","    init(name: String, artist: String) {","        self.artist = artist","        super.init(name: name)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final snippet creates a constant array called "},{"type":"codeVoice","code":"library"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which contains two "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instances and three "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances."},{"text":" ","type":"text"},{"type":"text","text":"The type of the "},{"code":"library","type":"codeVoice"},{"text":" array is inferred","type":"text"},{"text":" ","type":"text"},{"text":"by initializing it with the contents of an array literal.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s type checker is able to deduce that "},{"code":"Movie","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":" have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a common superclass of "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and so it infers a type of "},{"type":"codeVoice","code":"[MediaItem]"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"library"},{"text":" array:","type":"text"}]},{"syntax":"swift","code":["let library = [","    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),","    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),","    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),","    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),","    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")","]","\/\/ the type of \"library\" is inferred to be [MediaItem]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The items stored in ","type":"text"},{"type":"codeVoice","code":"library"},{"text":" are still ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" and "},{"code":"Song","type":"codeVoice"},{"type":"text","text":" instances behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"However, if you iterate over the contents of this array,"},{"text":" ","type":"text"},{"text":"the items you receive back are typed as ","type":"text"},{"type":"codeVoice","code":"MediaItem"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and not as "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In order to work with them as their native type,"},{"text":" ","type":"text"},{"text":"you need to ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"check"}]},{"text":" their type,","type":"text"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"inlineContent":[{"type":"text","text":"downcast"}],"type":"emphasis"},{"type":"text","text":" them to a different type,"},{"type":"text","text":" "},{"text":"as described below.","type":"text"}]},{"text":"Checking Type","level":2,"anchor":"Checking-Type","type":"heading"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type check operator"}]},{"type":"text","text":" ("},{"code":"is","type":"codeVoice"},{"type":"text","text":") to check"},{"type":"text","text":" "},{"type":"text","text":"whether an instance is of a certain subclass type."},{"text":" ","type":"text"},{"text":"The type check operator returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the instance is of that subclass type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"false","type":"codeVoice"},{"text":" if it’s not.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines two variables, "},{"code":"movieCount","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"songCount"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which count the number of "},{"type":"codeVoice","code":"Movie"},{"text":" and ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":" instances in the ","type":"text"},{"code":"library","type":"codeVoice"},{"text":" array:","type":"text"}]},{"syntax":"swift","code":["var movieCount = 0","var songCount = 0","","for item in library {","    if item is Movie {","        movieCount += 1","    } else if item is Song {","        songCount += 1","    }","}","","print(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")","\/\/ Prints \"Media library contains 2 movies and 3 songs\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example iterates through all items in the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array."},{"type":"text","text":" "},{"text":"On each pass, the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop sets the "},{"type":"codeVoice","code":"item"},{"text":" constant","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the next "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":" in the array."}]},{"inlineContent":[{"type":"codeVoice","code":"item is Movie"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if the current ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":" "},{"text":"is a ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instance and "},{"code":"false","type":"codeVoice"},{"type":"text","text":" if it’s not."},{"text":" ","type":"text"},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"item is Song"},{"type":"text","text":" checks whether the item is a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"text":"At the end of the ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop, the values of ","type":"text"},{"code":"movieCount","type":"codeVoice"},{"type":"text","text":" and "},{"code":"songCount","type":"codeVoice"},{"type":"text","text":" "},{"text":"contain a count of how many ","type":"text"},{"type":"codeVoice","code":"MediaItem"},{"text":" instances were found of each type.","type":"text"}],"type":"paragraph"},{"anchor":"Downcasting","text":"Downcasting","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A constant or variable of a certain class type may actually refer to"},{"text":" ","type":"text"},{"type":"text","text":"an instance of a subclass behind the scenes."},{"text":" ","type":"text"},{"type":"text","text":"Where you believe this is the case,"},{"type":"text","text":" "},{"text":"you can try to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"downcast","type":"text"}]},{"type":"text","text":" to the subclass type"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"inlineContent":[{"type":"text","text":"type cast operator"}],"type":"emphasis"},{"type":"text","text":" ("},{"code":"as?","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because downcasting can fail,"},{"type":"text","text":" "},{"text":"the type cast operator comes in two different forms.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The conditional form, "},{"code":"as?","type":"codeVoice"},{"text":", returns an optional value of the type you are trying to downcast to.","type":"text"},{"type":"text","text":" "},{"text":"The forced form, ","type":"text"},{"type":"codeVoice","code":"as!"},{"type":"text","text":", attempts the downcast and force-unwraps the result"},{"text":" ","type":"text"},{"type":"text","text":"as a single compound action."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you aren’t sure if the downcast will succeed."},{"text":" ","type":"text"},{"type":"text","text":"This form of the operator will always return an optional value,"},{"text":" ","type":"text"},{"type":"text","text":"and the value will be "},{"code":"nil","type":"codeVoice"},{"text":" if the downcast was not possible.","type":"text"},{"type":"text","text":" "},{"text":"This enables you to check for a successful downcast.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use the forced form of the type cast operator ("},{"type":"codeVoice","code":"as!"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only when you are sure that the downcast will always succeed."},{"text":" ","type":"text"},{"type":"text","text":"This form of the operator will trigger a runtime error"},{"type":"text","text":" "},{"type":"text","text":"if you try to downcast to an incorrect class type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below iterates over each "},{"code":"MediaItem","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"library"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prints an appropriate description for each item."},{"text":" ","type":"text"},{"text":"To do this, it needs to access each item as a true ","type":"text"},{"code":"Movie","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Song"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and not just as a "},{"type":"codeVoice","code":"MediaItem"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This is necessary in order for it to be able to access","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"director"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"artist"},{"text":" property of a ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Song","type":"codeVoice"},{"type":"text","text":" "},{"text":"for use in the description.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In this example, each item in the array might be a ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or it might be a "},{"code":"Song","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You don’t know in advance which actual class to use for each item,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so it’s appropriate to use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to check the downcast each time through the loop:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["for item in library {","    if let movie = item as? Movie {","        print(\"Movie: \\(movie.name), dir. \\(movie.director)\")","    } else if let song = item as? Song {","        print(\"Song: \\(song.name), by \\(song.artist)\")","    }","}","","\/\/ Movie: Casablanca, dir. Michael Curtiz","\/\/ Song: Blue Suede Shoes, by Elvis Presley","\/\/ Movie: Citizen Kane, dir. Orson Welles","\/\/ Song: The One And Only, by Chesney Hawkes","\/\/ Song: Never Gonna Give You Up, by Rick Astley"]},{"inlineContent":[{"type":"text","text":"The example starts by trying to downcast the current "},{"type":"codeVoice","code":"item"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"Movie"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"item"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"MediaItem"},{"text":" instance, it’s possible that it ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"might"}]},{"type":"text","text":" be a "},{"code":"Movie","type":"codeVoice"},{"text":";","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"equally, it’s also possible that it might be a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or even just a base ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because of this uncertainty, the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" form of the type cast operator returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value"},{"text":" ","type":"text"},{"type":"text","text":"when attempting to downcast to a subclass type."},{"type":"text","text":" "},{"text":"The result of ","type":"text"},{"code":"item as? Movie","type":"codeVoice"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"Movie?"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":"”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Downcasting to "},{"code":"Movie","type":"codeVoice"},{"text":" fails when applied to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the library array."},{"type":"text","text":" "},{"text":"To cope with this, the example above uses optional binding","type":"text"},{"text":" ","type":"text"},{"text":"to check whether the optional ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":" actually contains a value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(that is, to find out whether the downcast succeeded.)"},{"text":" ","type":"text"},{"text":"This optional binding is written “","type":"text"},{"code":"if let movie = item as? Movie","type":"codeVoice"},{"type":"text","text":"”,"},{"type":"text","text":" "},{"type":"text","text":"which can be read as:"}]},{"inlineContent":[{"text":"“Try to access ","type":"text"},{"type":"codeVoice","code":"item"},{"text":" as a ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"If this is successful,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"set a new temporary constant called "},{"type":"codeVoice","code":"movie"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"type":"text","text":"the value stored in the returned optional "},{"code":"Movie","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the downcasting succeeds, the properties of "},{"code":"movie","type":"codeVoice"},{"text":" are then used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to print a description for that "},{"code":"Movie","type":"codeVoice"},{"text":" instance, including the name of its ","type":"text"},{"code":"director","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"A similar principle is used to check for "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances,"},{"text":" ","type":"text"},{"text":"and to print an appropriate description (including ","type":"text"},{"code":"artist","type":"codeVoice"},{"text":" name)","type":"text"},{"type":"text","text":" "},{"text":"whenever a ","type":"text"},{"type":"codeVoice","code":"Song"},{"type":"text","text":" is found in the library."}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Casting doesn’t actually modify the instance or change its values."},{"text":" ","type":"text"},{"type":"text","text":"The underlying instance remains the same; it’s simply treated and accessed"},{"text":" ","type":"text"},{"type":"text","text":"as an instance of the type to which it has been cast."}]}]},{"anchor":"Type-Casting-for-Any-and-AnyObject","type":"heading","text":"Type Casting for Any and AnyObject","level":2},{"inlineContent":[{"text":"Swift provides two special types for working with nonspecific types:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Any"},{"type":"text","text":" can represent an instance of any type at all, including function types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyObject"},{"text":" can represent an instance of any class type.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Any"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" only when you explicitly need"},{"text":" ","type":"text"},{"text":"the behavior and capabilities they provide.","type":"text"},{"text":" ","type":"text"},{"text":"It’s always better to be specific about the types you expect to work with in your code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of using ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" to work with a mix of different types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including function types and nonclass types."},{"text":" ","type":"text"},{"text":"The example creates an array called ","type":"text"},{"type":"codeVoice","code":"things"},{"text":", which can store values of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":":","type":"text"}]},{"syntax":"swift","code":["var things: [Any] = []","","things.append(0)","things.append(0.0)","things.append(42)","things.append(3.14159)","things.append(\"hello\")","things.append((3.0, 5.0))","things.append(Movie(name: \"Ghostbusters\", director: \"Ivan Reitman\"))","things.append({ (name: String) -> String in \"Hello, \\(name)\" })"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"things","type":"codeVoice"},{"text":" array contains","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"two "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values, two "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" values, a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"a tuple of type ","type":"text"},{"type":"codeVoice","code":"(Double, Double)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the movie “Ghostbusters”,"},{"type":"text","text":" "},{"type":"text","text":"and a closure expression that takes a "},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and returns another "},{"code":"String","type":"codeVoice"},{"text":" value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To discover the specific type of a constant or variable","type":"text"},{"type":"text","text":" "},{"text":"that’s known only to be of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can use an "},{"code":"is","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as"},{"type":"text","text":" pattern in a "},{"code":"switch","type":"codeVoice"},{"text":" statement’s cases.","type":"text"},{"text":" ","type":"text"},{"text":"The example below iterates over the items in the ","type":"text"},{"code":"things","type":"codeVoice"},{"type":"text","text":" array"},{"type":"text","text":" "},{"type":"text","text":"and queries the type of each item with a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"text":" ","type":"text"},{"text":"Several of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement’s cases bind their matched value to","type":"text"},{"text":" ","type":"text"},{"text":"a constant of the specified type to enable its value to be printed:","type":"text"}]},{"type":"codeListing","code":["for thing in things {","    switch thing {","    case 0 as Int:","        print(\"zero as an Int\")","    case 0 as Double:","        print(\"zero as a Double\")","    case let someInt as Int:","        print(\"an integer value of \\(someInt)\")","    case let someDouble as Double where someDouble > 0:","        print(\"a positive double value of \\(someDouble)\")","    case is Double:","        print(\"some other double value that I don't want to print\")","    case let someString as String:","        print(\"a string value of \\\"\\(someString)\\\"\")","    case let (x, y) as (Double, Double):","        print(\"an (x, y) point at \\(x), \\(y)\")","    case let movie as Movie:","        print(\"a movie called \\(movie.name), dir. \\(movie.director)\")","    case let stringConverter as (String) -> String:","        print(stringConverter(\"Michael\"))","    default:","        print(\"something else\")","    }","}","","\/\/ zero as an Int","\/\/ zero as a Double","\/\/ an integer value of 42","\/\/ a positive double value of 3.14159","\/\/ a string value of \"hello\"","\/\/ an (x, y) point at 3.0, 5.0","\/\/ a movie called Ghostbusters, dir. Ivan Reitman","\/\/ Hello, Michael"],"syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Any"},{"text":" type represents values of any type, including optional types.","type":"text"},{"type":"text","text":" "},{"text":"Swift gives you a warning if you use an optional value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where a value of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" is expected."},{"type":"text","text":" "},{"text":"If you really do need to use an optional value as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operator to explicitly cast the optional to "},{"type":"codeVoice","code":"Any"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"as shown below.","type":"text"}]},{"code":["let optionalNumber: Int? = 3","things.append(optionalNumber)        \/\/ Warning","things.append(optionalNumber as Any) \/\/ No warning"],"syntax":"swift","type":"codeListing"}],"type":"aside","name":"Note","style":"note"}],"kind":"content"}],"kind":"article","abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"kind":"section","title":"Checking for Protocol Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","type":"topic"}}}