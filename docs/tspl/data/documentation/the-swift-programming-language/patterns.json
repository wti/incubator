{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"type":"text","text":" represents the structure of a single value"},{"text":" ","type":"text"},{"type":"text","text":"or a composite value."},{"type":"text","text":" "},{"text":"For example, the structure of a tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" is a comma-separated list of two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements. Because patterns represent the structure of a value rather than any"},{"text":" ","type":"text"},{"text":"one particular value, you can match them with a variety of values.","type":"text"},{"text":" ","type":"text"},{"text":"For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"text":" matches the tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" and any other"},{"text":" ","type":"text"},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"text":" ","type":"text"},{"type":"text","text":"you can extract part or all of a composite value and bind each part"},{"type":"text","text":" "},{"text":"to a constant or variable name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In Swift, there are two basic kinds of patterns:"},{"text":" ","type":"text"},{"type":"text","text":"those that successfully match any kind of value,"},{"type":"text","text":" "},{"text":"and those that may fail to match a specified value at runtime.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The first kind of pattern is used for destructuring values"},{"type":"text","text":" "},{"type":"text","text":"in simple variable, constant, and optional bindings."},{"type":"text","text":" "},{"type":"text","text":"These include wildcard patterns, identifier patterns,"},{"text":" ","type":"text"},{"type":"text","text":"and any value binding or tuple patterns containing"},{"type":"text","text":" "},{"text":"them. You can specify a type annotation for these patterns","type":"text"},{"type":"text","text":" "},{"text":"to constrain them to match only values of a certain type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second kind of pattern is used for full pattern matching,"},{"type":"text","text":" "},{"text":"where the values you’re trying to match against may not be there at runtime.","type":"text"},{"type":"text","text":" "},{"text":"These include enumeration case patterns, optional patterns, expression patterns,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and type-casting patterns. You use these patterns in a case label of a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" "},{"text":"statement, a ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause of a ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"type":"text","text":"or in the case condition of an "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"while","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":", or ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"wildcard-pattern"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-annotation"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-pattern"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type-annotation"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value-binding-pattern"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type-annotation","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"pattern"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"enum-case-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-pattern"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type-casting-pattern"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"expression-pattern","type":"text"}]}],"type":"paragraph"}],"style":"note","name":"Grammar of a pattern","type":"aside"},{"anchor":"Wildcard-Pattern","level":2,"type":"heading","text":"Wildcard Pattern"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"wildcard pattern"}],"type":"emphasis"},{"text":" matches and ignores any value and consists of an underscore","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"_"},{"text":"). Use a wildcard pattern when you don’t care about the values being","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"matched against. For example, the following code iterates through the closed range "},{"type":"codeVoice","code":"1...3"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"ignoring the current value of the range on each iteration of the loop:","type":"text"}],"type":"paragraph"},{"code":["for _ in 1...3 {","    \/\/ Do something three times.","}"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"wildcard-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"_","type":"codeVoice"}],"type":"strong"}]}],"name":"Grammar of a wildcard pattern","type":"aside"},{"anchor":"Identifier-Pattern","type":"heading","text":"Identifier Pattern","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"text":"identifier pattern","type":"text"}],"type":"emphasis"},{"text":" matches any value and binds the matched value to a","type":"text"},{"type":"text","text":" "},{"text":"variable or constant name.","type":"text"},{"type":"text","text":" "},{"text":"For example, in the following constant declaration, ","type":"text"},{"type":"codeVoice","code":"someValue"},{"type":"text","text":" is an identifier pattern"},{"type":"text","text":" "},{"type":"text","text":"that matches the value "},{"type":"codeVoice","code":"42"},{"text":" of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["let someValue = 42"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When the match succeeds, the value "},{"code":"42","type":"codeVoice"},{"type":"text","text":" is bound (assigned)"},{"text":" ","type":"text"},{"type":"text","text":"to the constant name "},{"type":"codeVoice","code":"someValue"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the pattern on the left-hand side of a variable or constant declaration"},{"type":"text","text":" "},{"text":"is an identifier pattern,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the identifier pattern is implicitly a subpattern of a value-binding pattern."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]}]}],"style":"note","name":"Grammar of an identifier pattern","type":"aside"},{"type":"heading","text":"Value-Binding Pattern","level":2,"anchor":"Value-Binding-Pattern"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"value-binding pattern","type":"text"}]},{"type":"text","text":" binds matched values to variable or constant names."},{"type":"text","text":" "},{"type":"text","text":"Value-binding patterns that bind a matched value to the name of a constant"},{"type":"text","text":" "},{"type":"text","text":"begin with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword; those that bind to the name of variable"},{"type":"text","text":" "},{"type":"text","text":"begin with the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" keyword."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Identifiers patterns within a value-binding pattern","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bind new named variables or constants to their matching values. For example,"},{"type":"text","text":" "},{"type":"text","text":"you can decompose the elements of a tuple and bind the value of each element to a"},{"text":" ","type":"text"},{"text":"corresponding identifier pattern.","type":"text"}]},{"code":["let point = (3, 2)","switch point {","\/\/ Bind x and y to the elements of point.","case let (x, y):","    print(\"The point is at (\\(x), \\(y)).\")","}","\/\/ Prints \"The point is at (3, 2).\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"let"},{"text":" distributes to each identifier pattern in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tuple pattern "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":". Because of this behavior, the "},{"code":"switch","type":"codeVoice"},{"text":" cases","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"case let (x, y):"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"case (let x, let y):"},{"text":" match the same values.","type":"text"}],"type":"paragraph"},{"name":"Grammar of a value-binding pattern","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"value-binding-pattern"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"var","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"pattern"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"let"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]}]}],"type":"aside"},{"type":"heading","text":"Tuple Pattern","anchor":"Tuple-Pattern","level":2},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"tuple pattern","type":"text"}]},{"text":" is a comma-separated list of zero or more patterns, enclosed in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parentheses. Tuple patterns match values of corresponding tuple types."}],"type":"paragraph"},{"inlineContent":[{"text":"You can constrain a tuple pattern to match certain kinds of tuple types","type":"text"},{"text":" ","type":"text"},{"text":"by using type annotations.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the tuple pattern ","type":"text"},{"code":"(x, y): (Int, Int)","type":"codeVoice"},{"text":" in the constant declaration","type":"text"},{"type":"text","text":" "},{"code":"let (x, y): (Int, Int) = (1, 2)","type":"codeVoice"},{"text":" matches only tuple types in which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both elements are of type "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a tuple pattern is used as the pattern in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"or in a variable or constant declaration, it can contain only wildcard patterns,","type":"text"},{"type":"text","text":" "},{"text":"identifier patterns, optional patterns, or other tuple patterns that contain those.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the following code isn’t valid because the element "},{"code":"0","type":"codeVoice"},{"text":" in the tuple pattern ","type":"text"},{"code":"(x, 0)","type":"codeVoice"},{"type":"text","text":" is"},{"type":"text","text":" "},{"text":"an expression pattern:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]","\/\/ This code isn't valid.","for (x, 0) in points {","    \/* ... *\/","}"]},{"inlineContent":[{"text":"The parentheses around a tuple pattern that contains a single element have no effect.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The pattern matches values of that single element’s type. For example, the following are"},{"type":"text","text":" "},{"text":"equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let a = 2        \/\/ a: Int = 2","let (a) = 2      \/\/ a: Int = 2","let (a): Int = 2 \/\/ a: Int = 2"]},{"style":"note","type":"aside","name":"Grammar of a tuple pattern","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"tuple-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern-element-list","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"tuple-pattern-element-list"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-pattern-element"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-pattern-element"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern-element-list","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern-element","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]}],"type":"paragraph"}]},{"level":2,"text":"Enumeration Case Pattern","anchor":"Enumeration-Case-Pattern","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"type":"text","text":"enumeration case pattern"}],"type":"emphasis"},{"text":" matches a case of an existing enumeration type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumeration case patterns appear in "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"case labels and in the case conditions of "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"statements."}]},{"inlineContent":[{"text":"If the enumeration case you’re trying to match has any associated values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the corresponding enumeration case pattern must specify a tuple pattern that contains"},{"type":"text","text":" "},{"text":"one element for each associated value. For an example that uses a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"to match enumeration cases containing associated values,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An enumeration case pattern also matches"},{"text":" ","type":"text"},{"text":"values of that case wrapped in an optional.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This simplified syntax lets you omit an optional pattern."},{"text":" ","type":"text"},{"text":"Note that,","type":"text"},{"type":"text","text":" "},{"text":"because ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" is implemented as an enumeration,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".none"},{"type":"text","text":" and "},{"code":".some","type":"codeVoice"},{"text":" can appear","type":"text"},{"text":" ","type":"text"},{"text":"in the same switch as the cases of the enumeration type.","type":"text"}]},{"syntax":"swift","code":["enum SomeEnum { case left, right }","let x: SomeEnum? = .left","switch x {","case .left:","    print(\"Turn left\")","case .right:","    print(\"Turn right\")","case nil:","    print(\"Keep going straight\")","}","\/\/ Prints \"Turn left\""],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"enum-case-pattern","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"."}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum-case-name"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"tuple-pattern"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"}]}],"style":"note","name":"Grammar of an enumeration case pattern","type":"aside"},{"level":2,"text":"Optional Pattern","type":"heading","anchor":"Optional-Pattern"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"text":"optional pattern","type":"text"}],"type":"emphasis"},{"text":" matches values wrapped in a ","type":"text"},{"type":"codeVoice","code":"some(Wrapped)"},{"text":" case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of an "},{"type":"codeVoice","code":"Optional<Wrapped>"},{"text":" enumeration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Optional patterns consist of an identifier pattern followed immediately by a question mark"},{"type":"text","text":" "},{"text":"and appear in the same places as enumeration case patterns.","type":"text"}]},{"inlineContent":[{"text":"Because optional patterns are syntactic sugar for ","type":"text"},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"enumeration case patterns,"},{"text":" ","type":"text"},{"text":"the following are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someOptional: Int? = 42","\/\/ Match using an enumeration case pattern.","if case .some(let x) = someOptional {","    print(x)","}","","\/\/ Match using an optional pattern.","if case let x? = someOptional {","    print(x)","}"]},{"inlineContent":[{"type":"text","text":"The optional pattern provides a convenient way to"},{"text":" ","type":"text"},{"type":"text","text":"iterate over an array of optional values in a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"text":"executing the body of the loop only for non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" elements."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let arrayOfOptionalInts: [Int?] = [nil, 2, 3, nil, 5]","\/\/ Match only non-nil values.","for case let number? in arrayOfOptionalInts {","    print(\"Found a \\(number)\")","}","\/\/ Found a 2","\/\/ Found a 3","\/\/ Found a 5"]},{"type":"aside","name":"Grammar of an optional pattern","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-pattern"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"identifier-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"?"}],"type":"strong"}]}]},{"anchor":"Type-Casting-Patterns","type":"heading","level":2,"text":"Type-Casting Patterns"},{"type":"paragraph","inlineContent":[{"text":"There are two type-casting patterns, the ","type":"text"},{"type":"codeVoice","code":"is"},{"type":"text","text":" pattern and the "},{"type":"codeVoice","code":"as"},{"text":" pattern.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"is"},{"type":"text","text":" pattern appears only in "},{"type":"codeVoice","code":"switch"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"case labels. The "},{"code":"is","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as"},{"type":"text","text":" patterns have the following form:"}]},{"code":["is <#type#>","<#pattern#> as <#type#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"is"},{"text":" pattern matches a value if the type of that value at runtime is the same as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the type specified in the right-hand side of the "},{"type":"codeVoice","code":"is"},{"type":"text","text":" pattern — or a subclass of that type."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"is","type":"codeVoice"},{"type":"text","text":" pattern behaves like the "},{"type":"codeVoice","code":"is"},{"text":" operator in that they both perform a type cast","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but discard the returned type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"as","type":"codeVoice"},{"type":"text","text":" pattern matches a value if the type of that value at runtime is the same as"},{"text":" ","type":"text"},{"type":"text","text":"the type specified in the right-hand side of the "},{"type":"codeVoice","code":"as"},{"text":" pattern — or a subclass of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the match succeeds,"},{"type":"text","text":" "},{"type":"text","text":"the type of the matched value is cast to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" specified in the right-hand side","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"code":"as","type":"codeVoice"},{"text":" pattern.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For an example that uses a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"to match values with ","type":"text"},{"type":"codeVoice","code":"is"},{"text":" and ","type":"text"},{"code":"as","type":"codeVoice"},{"type":"text","text":" patterns,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting#Type-Casting-for-Any-and-AnyObject","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-casting-pattern","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"is-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"as-pattern"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"is-pattern"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"is","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"as-pattern","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"as","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"}],"type":"paragraph"}],"name":"Grammar of a type casting pattern","style":"note"},{"anchor":"Expression-Pattern","level":2,"type":"heading","text":"Expression Pattern"},{"inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"text":"expression pattern","type":"text"}],"type":"emphasis"},{"text":" represents the value of an expression.","type":"text"},{"text":" ","type":"text"},{"text":"Expression patterns appear only in ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"case labels."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The expression represented by the expression pattern"},{"type":"text","text":" "},{"type":"text","text":"is compared with the value of an input expression"},{"type":"text","text":" "},{"type":"text","text":"using the Swift standard library "},{"type":"codeVoice","code":"~="},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The matches succeeds"},{"text":" ","type":"text"},{"type":"text","text":"if the "},{"type":"codeVoice","code":"~="},{"text":" operator returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":". By default, the "},{"type":"codeVoice","code":"~="},{"text":" operator compares","type":"text"},{"text":" ","type":"text"},{"text":"two values of the same type using the ","type":"text"},{"type":"codeVoice","code":"=="},{"text":" operator.","type":"text"},{"type":"text","text":" "},{"text":"It can also match a value with a range of values,","type":"text"},{"text":" ","type":"text"},{"text":"by checking whether the value is contained within the range,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the following example shows."}]},{"type":"codeListing","code":["let point = (1, 2)","switch point {","case (0, 0):","    print(\"(0, 0) is at the origin.\")","case (-2...2, -2...2):","    print(\"(\\(point.0), \\(point.1)) is near the origin.\")","default:","    print(\"The point is at (\\(point.0), \\(point.1)).\")","}","\/\/ Prints \"(1, 2) is near the origin.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can overload the "},{"code":"~=","type":"codeVoice"},{"type":"text","text":" operator to provide custom expression matching behavior."},{"text":" ","type":"text"},{"type":"text","text":"For example, you can rewrite the above example to compare the "},{"code":"point","type":"codeVoice"},{"text":" expression","type":"text"},{"type":"text","text":" "},{"text":"with a string representations of points.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Overload the ~= operator to match a string with an integer.","func ~= (pattern: String, value: Int) -> Bool {","    return pattern == \"\\(value)\"","}","switch point {","case (\"0\", \"0\"):","    print(\"(0, 0) is at the origin.\")","default:","    print(\"The point is at (\\(point.0), \\(point.1)).\")","}","\/\/ Prints \"The point is at (1, 2).\""]},{"type":"aside","style":"note","name":"Grammar of an expression pattern","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"expression-pattern"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"}],"type":"paragraph"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Match and destructure values."}],"metadata":{"title":"Patterns"},"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Associated-Values":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/enumerations#Associated-Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Associated-Values","title":"Associated Values","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting#Type-Casting-for-Any-and-AnyObject":{"url":"\/documentation\/the-swift-programming-language\/typecasting#Type-Casting-for-Any-and-AnyObject","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting#Type-Casting-for-Any-and-AnyObject","title":"Type Casting for Any and AnyObject","kind":"section","abstract":[]}}}