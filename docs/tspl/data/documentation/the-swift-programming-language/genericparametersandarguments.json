{"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and"},{"type":"text","text":" "},{"text":"initializers. When you declare a generic type, function, subscript, or initializer,","type":"text"},{"text":" ","type":"text"},{"text":"you specify the type parameters that the generic type, function, or initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"text":" ","type":"text"},{"text":"are replaced by actual concrete type arguments when an instance of a generic type is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"created or a generic function or initializer is called."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an overview of generics in Swift, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"text":".","type":"text"}]},{"level":2,"anchor":"Generic-Parameter-Clause","type":"heading","text":"Generic Parameter Clause"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter clause"}]},{"type":"text","text":" specifies the type parameters of a generic"},{"type":"text","text":" "},{"text":"type or function, along with any associated constraints and requirements on those parameters.","type":"text"},{"type":"text","text":" "},{"text":"A generic parameter clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"code":["<<#generic parameter list#>>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter list"}]},{"type":"text","text":" is a comma-separated list of generic parameters,"},{"text":" ","type":"text"},{"type":"text","text":"each of which has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["<#type parameter#>: <#constraint#>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A generic parameter consists of a "},{"inlineContent":[{"text":"type parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" followed by"},{"text":" ","type":"text"},{"type":"text","text":"an optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":". A ","type":"text"},{"inlineContent":[{"type":"text","text":"type parameter"}],"type":"emphasis"},{"type":"text","text":" is simply the name"},{"type":"text","text":" "},{"type":"text","text":"of a placeholder type"},{"type":"text","text":" "},{"text":"(for example, ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":", "},{"type":"codeVoice","code":"U"},{"type":"text","text":", "},{"code":"V","type":"codeVoice"},{"type":"text","text":", "},{"code":"Key","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"type":"text","text":", and so on)."},{"text":" ","type":"text"},{"type":"text","text":"You have access to the type parameters (and any of their associated types) in the rest of the"},{"type":"text","text":" "},{"type":"text","text":"type, function, or initializer declaration, including in the signature of the function"},{"type":"text","text":" "},{"text":"or initializer.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":" specifies that a type parameter inherits","type":"text"},{"text":" ","type":"text"},{"text":"from a specific class or conforms to a protocol or protocol composition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, in the generic function below, the generic parameter "},{"type":"codeVoice","code":"T: Comparable"},{"text":" ","type":"text"},{"text":"indicates that any type argument substituted","type":"text"},{"type":"text","text":" "},{"text":"for the type parameter ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" must conform to the "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":", for example, both conform to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this function accepts arguments of either type. In contrast with generic types, you don’t"},{"type":"text","text":" "},{"text":"specify a generic argument clause when you use a generic function or initializer.","type":"text"},{"type":"text","text":" "},{"text":"The type arguments are instead inferred from the type of the arguments passed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the function or initializer."}]},{"syntax":"swift","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"],"type":"codeListing"},{"anchor":"Generic-Where-Clauses","text":"Generic Where Clauses","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can specify additional requirements on type parameters and their associated types"},{"type":"text","text":" "},{"text":"by including a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause right before the opening curly brace","type":"text"},{"text":" ","type":"text"},{"text":"of a type or function’s body.","type":"text"},{"type":"text","text":" "},{"text":"A generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause consists of the ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" keyword,","type":"text"},{"text":" ","type":"text"},{"text":"followed by a comma-separated list of one or more ","type":"text"},{"inlineContent":[{"type":"text","text":"requirements"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["where <#requirements#>"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"text":" in a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause specify that a type parameter inherits from"},{"text":" ","type":"text"},{"text":"a class or conforms to a protocol or protocol composition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Although the generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause provides syntactic"},{"type":"text","text":" "},{"type":"text","text":"sugar for expressing simple constraints on type parameters"},{"type":"text","text":" "},{"text":"(for example, ","type":"text"},{"type":"codeVoice","code":"<T: Comparable>"},{"type":"text","text":" is equivalent to "},{"code":"<T> where T: Comparable","type":"codeVoice"},{"type":"text","text":" and so on),"},{"text":" ","type":"text"},{"type":"text","text":"you can use it to provide more complex constraints on type parameters"},{"text":" ","type":"text"},{"text":"and their associated types. For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can constrain the associated types of type parameters to conform to protocols."},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"<S: Sequence> where S.Iterator.Element: Equatable"},{"text":" ","type":"text"},{"type":"text","text":"specifies that "},{"type":"codeVoice","code":"S"},{"type":"text","text":" conforms to the "},{"code":"Sequence","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"and that the associated type ","type":"text"},{"type":"codeVoice","code":"S.Iterator.Element"},{"text":" ","type":"text"},{"type":"text","text":"conforms to the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This constraint ensures that each element of the sequence is equatable."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also specify the requirement that two types be identical,"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. For example,"},{"text":" ","type":"text"},{"code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"expresses the constraints that "},{"type":"codeVoice","code":"S1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"S2"},{"text":" conform to the ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"and that the elements of both sequences must be of the same type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type argument substituted for a type parameter must"},{"type":"text","text":" "},{"text":"meet all the constraints and requirements placed on the type parameter.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause can appear","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of a declaration that includes type parameters,"},{"type":"text","text":" "},{"type":"text","text":"or as part of a declaration"},{"text":" ","type":"text"},{"type":"text","text":"that’s nested inside of a declaration that includes type parameters."},{"type":"text","text":" "},{"type":"text","text":"The generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause for a nested declaration"},{"text":" ","type":"text"},{"text":"can still refer to the type parameters of the enclosing declaration;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"however,"},{"text":" ","type":"text"},{"type":"text","text":"the requirements from that "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"text":"apply only to the declaration where it’s written.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the enclosing declaration also has a ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause,","type":"text"},{"text":" ","type":"text"},{"text":"the requirements from both clauses are combined.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example below, "},{"code":"startsWithZero()","type":"codeVoice"},{"type":"text","text":" is available"},{"type":"text","text":" "},{"type":"text","text":"only if "},{"code":"Element","type":"codeVoice"},{"text":" conforms to both ","type":"text"},{"type":"codeVoice","code":"SomeProtocol"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Numeric"},{"text":".","type":"text"}]},{"type":"codeListing","code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can overload a generic function or initializer by providing different"},{"type":"text","text":" "},{"text":"constraints, requirements, or both on the type parameters.","type":"text"},{"type":"text","text":" "},{"text":"When you call an overloaded generic function or initializer,","type":"text"},{"type":"text","text":" "},{"text":"the compiler uses these constraints to resolve which overloaded function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or initializer to invoke."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information about generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses and to see an example","type":"text"},{"type":"text","text":" "},{"text":"of one in a generic function declaration,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true},{"text":".","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"generic-parameter-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"<","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-list"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":">","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter-list","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-parameter-list"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-parameter","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol-composition-type"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-where-clause","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"where"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"requirement-list","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"requirement"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement-list","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"same-type-requirement"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"conformance-requirement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"protocol-composition-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"same-type-requirement","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"=="}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}]}],"name":"Grammar of a generic parameter clause","style":"note"},{"text":"Generic Argument Clause","anchor":"Generic-Argument-Clause","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic argument clause"}]},{"text":" specifies the type arguments of a generic","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A generic argument clause is enclosed in angle brackets (<>)"},{"type":"text","text":" "},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["<<#generic argument list#>>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic argument list"}]},{"text":" is a comma-separated list of type arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A "},{"inlineContent":[{"text":"type argument","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the name of an actual concrete type that replaces"},{"type":"text","text":" "},{"type":"text","text":"a corresponding type parameter in the generic parameter clause of a generic type."},{"text":" ","type":"text"},{"type":"text","text":"The result is a specialized version of that generic type."},{"text":" ","type":"text"},{"type":"text","text":"The example below shows a simplified version of the Swift standard library’s"},{"type":"text","text":" "},{"type":"text","text":"generic dictionary type."}]},{"syntax":"swift","type":"codeListing","code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"]},{"inlineContent":[{"text":"The specialized version of the generic ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type, "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":" "},{"text":"is formed by replacing the generic parameters ","type":"text"},{"type":"codeVoice","code":"Key: Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"text":" ","type":"text"},{"text":"with the concrete type arguments ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"text":". Each type argument must satisfy","type":"text"},{"type":"text","text":" "},{"text":"all the constraints of the generic parameter it replaces, including any additional","type":"text"},{"type":"text","text":" "},{"text":"requirements specified in a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause. In the example above,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"Key","type":"codeVoice"},{"type":"text","text":" type parameter is constrained to conform to the "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"text":"and therefore ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" must also conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also replace a type parameter with a type argument that’s itself"},{"text":" ","type":"text"},{"type":"text","text":"a specialized version of a generic type (provided it satisfies the appropriate"},{"type":"text","text":" "},{"type":"text","text":"constraints and requirements). For example, you can replace the type parameter"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" in "},{"code":"Array<Element>","type":"codeVoice"},{"type":"text","text":" with a specialized version of an array, "},{"type":"codeVoice","code":"Array<Int>"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to form an array whose elements are themselves arrays of integers."}]},{"type":"codeListing","syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]},{"inlineContent":[{"type":"text","text":"As mentioned in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you don’t use a generic argument clause to specify the type arguments"},{"type":"text","text":" "},{"type":"text","text":"of a generic function or initializer."}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-argument-clause","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"<"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":">","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"generic-argument","type":"text"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"generic-argument","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]}],"type":"paragraph"}],"type":"aside","name":"Grammar of a generic argument clause"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","interfaceLanguage":"swift"},"kind":"article","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"metadata":{"title":"Generic Parameters and Arguments"},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"topic","title":"Generic Where Clauses","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause","title":"Generic Parameter Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"type":"topic","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","url":"\/documentation\/the-swift-programming-language\/generics","role":"article"}}}