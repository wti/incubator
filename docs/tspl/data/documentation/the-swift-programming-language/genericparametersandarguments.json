{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Generic Parameters and Arguments"},"sections":[],"kind":"article","primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and"},{"type":"text","text":" "},{"text":"initializers. When you declare a generic type, function, subscript, or initializer,","type":"text"},{"type":"text","text":" "},{"text":"you specify the type parameters that the generic type, function, or initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"text":" ","type":"text"},{"text":"are replaced by actual concrete type arguments when an instance of a generic type is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"created or a generic function or initializer is called."}]},{"inlineContent":[{"type":"text","text":"For an overview of generics in Swift, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Generic-Parameter-Clause","text":"Generic Parameter Clause"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter clause"}]},{"type":"text","text":" specifies the type parameters of a generic"},{"type":"text","text":" "},{"type":"text","text":"type or function, along with any associated constraints and requirements on those parameters."},{"text":" ","type":"text"},{"text":"A generic parameter clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["<<#generic parameter list#>>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter list"}]},{"text":" is a comma-separated list of generic parameters,","type":"text"},{"text":" ","type":"text"},{"text":"each of which has the following form:","type":"text"}],"type":"paragraph"},{"code":["<#type parameter#>: <#constraint#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A generic parameter consists of a ","type":"text"},{"inlineContent":[{"text":"type parameter","type":"text"}],"type":"emphasis"},{"text":" followed by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":". A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type parameter"}]},{"type":"text","text":" is simply the name"},{"type":"text","text":" "},{"text":"of a placeholder type","type":"text"},{"text":" ","type":"text"},{"text":"(for example, ","type":"text"},{"code":"T","type":"codeVoice"},{"text":", ","type":"text"},{"code":"U","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"V"},{"type":"text","text":", "},{"code":"Key","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"text":", and so on).","type":"text"},{"text":" ","type":"text"},{"text":"You have access to the type parameters (and any of their associated types) in the rest of the","type":"text"},{"type":"text","text":" "},{"text":"type, function, or initializer declaration, including in the signature of the function","type":"text"},{"type":"text","text":" "},{"text":"or initializer.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"type":"text","text":" specifies that a type parameter inherits"},{"text":" ","type":"text"},{"text":"from a specific class or conforms to a protocol or protocol composition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, in the generic function below, the generic parameter "},{"code":"T: Comparable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"indicates that any type argument substituted"},{"text":" ","type":"text"},{"type":"text","text":"for the type parameter "},{"code":"T","type":"codeVoice"},{"text":" must conform to the ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"]},{"inlineContent":[{"text":"Because ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":", for example, both conform to the "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"this function accepts arguments of either type. In contrast with generic types, you don’t"},{"text":" ","type":"text"},{"type":"text","text":"specify a generic argument clause when you use a generic function or initializer."},{"type":"text","text":" "},{"type":"text","text":"The type arguments are instead inferred from the type of the arguments passed"},{"type":"text","text":" "},{"type":"text","text":"to the function or initializer."}],"type":"paragraph"},{"type":"codeListing","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"],"syntax":"swift"},{"text":"Generic Where Clauses","anchor":"Generic-Where-Clauses","level":3,"type":"heading"},{"inlineContent":[{"text":"You can specify additional requirements on type parameters and their associated types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by including a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause right before the opening curly brace"},{"text":" ","type":"text"},{"type":"text","text":"of a type or function’s body."},{"type":"text","text":" "},{"type":"text","text":"A generic "},{"type":"codeVoice","code":"where"},{"text":" clause consists of the ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" keyword,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"followed by a comma-separated list of one or more "},{"type":"emphasis","inlineContent":[{"text":"requirements","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["where <#requirements#>"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"requirements","type":"text"}]},{"type":"text","text":" in a generic "},{"code":"where","type":"codeVoice"},{"text":" clause specify that a type parameter inherits from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a class or conforms to a protocol or protocol composition."},{"text":" ","type":"text"},{"type":"text","text":"Although the generic "},{"code":"where","type":"codeVoice"},{"text":" clause provides syntactic","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sugar for expressing simple constraints on type parameters"},{"type":"text","text":" "},{"type":"text","text":"(for example, "},{"type":"codeVoice","code":"<T: Comparable>"},{"type":"text","text":" is equivalent to "},{"code":"<T> where T: Comparable","type":"codeVoice"},{"type":"text","text":" and so on),"},{"type":"text","text":" "},{"text":"you can use it to provide more complex constraints on type parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and their associated types. For example,"},{"type":"text","text":" "},{"type":"text","text":"you can constrain the associated types of type parameters to conform to protocols."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"<S: Sequence> where S.Iterator.Element: Equatable"},{"text":" ","type":"text"},{"text":"specifies that ","type":"text"},{"type":"codeVoice","code":"S"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"and that the associated type "},{"code":"S.Iterator.Element","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"conforms to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"text":"This constraint ensures that each element of the sequence is equatable.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also specify the requirement that two types be identical,"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"==","type":"codeVoice"},{"type":"text","text":" operator. For example,"},{"text":" ","type":"text"},{"code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element","type":"codeVoice"},{"text":" ","type":"text"},{"text":"expresses the constraints that ","type":"text"},{"code":"S1","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"S2","type":"codeVoice"},{"text":" conform to the ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"and that the elements of both sequences must be of the same type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Any type argument substituted for a type parameter must"},{"type":"text","text":" "},{"type":"text","text":"meet all the constraints and requirements placed on the type parameter."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause can appear","type":"text"},{"text":" ","type":"text"},{"text":"as part of a declaration that includes type parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or as part of a declaration"},{"text":" ","type":"text"},{"text":"that’s nested inside of a declaration that includes type parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The generic "},{"code":"where","type":"codeVoice"},{"text":" clause for a nested declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can still refer to the type parameters of the enclosing declaration;"},{"text":" ","type":"text"},{"text":"however,","type":"text"},{"type":"text","text":" "},{"text":"the requirements from that ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"text":"apply only to the declaration where it’s written.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the enclosing declaration also has a ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"text":"the requirements from both clauses are combined.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the example below, "},{"type":"codeVoice","code":"startsWithZero()"},{"type":"text","text":" is available"},{"type":"text","text":" "},{"type":"text","text":"only if "},{"code":"Element","type":"codeVoice"},{"text":" conforms to both ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Numeric"},{"type":"text","text":"."}]},{"code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can overload a generic function or initializer by providing different","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constraints, requirements, or both on the type parameters."},{"type":"text","text":" "},{"type":"text","text":"When you call an overloaded generic function or initializer,"},{"type":"text","text":" "},{"type":"text","text":"the compiler uses these constraints to resolve which overloaded function"},{"text":" ","type":"text"},{"text":"or initializer to invoke.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For more information about generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses and to see an example"},{"type":"text","text":" "},{"type":"text","text":"of one in a generic function declaration,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"name":"Grammar of a generic parameter clause","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-clause"}]},{"text":" → ","type":"text"},{"inlineContent":[{"code":"<","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"generic-parameter-list","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":">","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter-list","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-parameter","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"type-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-where-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"where","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"requirement-list","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"requirement-list","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"requirement"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"conformance-requirement"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"same-type-requirement","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"conformance-requirement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"protocol-composition-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"same-type-requirement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"==","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]}]}],"type":"aside","style":"note"},{"type":"heading","level":2,"anchor":"Generic-Argument-Clause","text":"Generic Argument Clause"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"generic argument clause","type":"text"}]},{"type":"text","text":" specifies the type arguments of a generic"},{"text":" ","type":"text"},{"text":"type.","type":"text"},{"text":" ","type":"text"},{"text":"A generic argument clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["<<#generic argument list#>>"]},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"generic argument list"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of type arguments."},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"inlineContent":[{"text":"type argument","type":"text"}],"type":"emphasis"},{"text":" is the name of an actual concrete type that replaces","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a corresponding type parameter in the generic parameter clause of a generic type."},{"text":" ","type":"text"},{"type":"text","text":"The result is a specialized version of that generic type."},{"type":"text","text":" "},{"text":"The example below shows a simplified version of the Swift standard library’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generic dictionary type."}],"type":"paragraph"},{"code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The specialized version of the generic ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type, "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":" "},{"text":"is formed by replacing the generic parameters ","type":"text"},{"type":"codeVoice","code":"Key: Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"text":" ","type":"text"},{"type":"text","text":"with the concrete type arguments "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Int","type":"codeVoice"},{"type":"text","text":". Each type argument must satisfy"},{"type":"text","text":" "},{"text":"all the constraints of the generic parameter it replaces, including any additional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"requirements specified in a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause. In the example above,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Key"},{"type":"text","text":" type parameter is constrained to conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"text":"and therefore ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" must also conform to the "},{"code":"Hashable","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can also replace a type parameter with a type argument that’s itself"},{"text":" ","type":"text"},{"type":"text","text":"a specialized version of a generic type (provided it satisfies the appropriate"},{"type":"text","text":" "},{"type":"text","text":"constraints and requirements). For example, you can replace the type parameter"},{"type":"text","text":" "},{"code":"Element","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"Array<Element>","type":"codeVoice"},{"type":"text","text":" with a specialized version of an array, "},{"type":"codeVoice","code":"Array<Int>"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"to form an array whose elements are themselves arrays of integers."}],"type":"paragraph"},{"syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As mentioned in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"you don’t use a generic argument clause to specify the type arguments","type":"text"},{"text":" ","type":"text"},{"text":"of a generic function or initializer.","type":"text"}]},{"name":"Grammar of a generic argument clause","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-argument-clause","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"<"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":">","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","title":"Generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause":{"abstract":[],"title":"Generic Parameter Clause","type":"topic","kind":"section","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","title":"Generic Where Clauses","abstract":[],"kind":"section","type":"topic"}}}