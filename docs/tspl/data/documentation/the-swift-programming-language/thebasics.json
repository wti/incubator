{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Swift provides many fundamental data types,"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" for integers,"},{"type":"text","text":" "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" for floating-point values,"},{"text":" ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" for Boolean values,"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" for text.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift also provides powerful versions of the three primary collection types,"},{"text":" ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"code":"Set","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses variables to store and refer to values by an identifying name."},{"text":" ","type":"text"},{"text":"Swift also makes extensive use of variables whose values can’t be changed.","type":"text"},{"type":"text","text":" "},{"text":"These are known as constants, and are used throughout Swift to make code safer and clearer in intent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you work with values that don’t need to change."}]},{"type":"paragraph","inlineContent":[{"text":"In addition to familiar types,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift introduces advanced types such as tuples."},{"type":"text","text":" "},{"text":"Tuples enable you to create and pass around groupings of values.","type":"text"},{"text":" ","type":"text"},{"text":"You can use a tuple to return multiple values from a function as a single compound value.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift also introduces optional types,"},{"text":" ","type":"text"},{"text":"which handle the absence of a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Optionals say either “there "},{"type":"emphasis","inlineContent":[{"type":"text","text":"is"}]},{"text":" a value, and it equals ","type":"text"},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":"”"},{"text":" ","type":"text"},{"type":"text","text":"or “there "},{"inlineContent":[{"text":"isn’t","type":"text"}],"type":"emphasis"},{"type":"text","text":" a value at all”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift is a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-safe","type":"text"}]},{"type":"text","text":" language,"},{"type":"text","text":" "},{"text":"which means the language helps you to be clear about the types of values your code can work with.","type":"text"},{"type":"text","text":" "},{"text":"If part of your code requires a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"type safety prevents you from passing it an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" by mistake."},{"text":" ","type":"text"},{"type":"text","text":"Likewise, type safety prevents you from"},{"type":"text","text":" "},{"type":"text","text":"accidentally passing an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"text":"to a piece of code that requires a non-optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Type safety helps you catch and fix errors as early as possible in the development process.","type":"text"}]},{"anchor":"Constants-and-Variables","level":2,"type":"heading","text":"Constants and Variables"},{"inlineContent":[{"text":"Constants and variables associate a name","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"maximumNumberOfLoginAttempts"},{"type":"text","text":" or "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"with a value of a particular type"},{"text":" ","type":"text"},{"type":"text","text":"(such as the number "},{"code":"10","type":"codeVoice"},{"text":" or the string ","type":"text"},{"type":"codeVoice","code":"\"Hello\""},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"The value of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constant"}]},{"type":"text","text":" can’t be changed once it’s set,"},{"type":"text","text":" "},{"text":"whereas a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"variable","type":"text"}]},{"type":"text","text":" can be set to a different value in the future."}],"type":"paragraph"},{"anchor":"Declaring-Constants-and-Variables","level":3,"type":"heading","text":"Declaring Constants and Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables must be declared before they’re used."},{"type":"text","text":" "},{"text":"You declare constants with the ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and variables with the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"Here’s an example of how constants and variables can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to track the number of login attempts a user has made:"}]},{"type":"codeListing","syntax":"swift","code":["let maximumNumberOfLoginAttempts = 10","var currentLoginAttempt = 0"]},{"type":"paragraph","inlineContent":[{"text":"This code can be read as:","type":"text"}]},{"inlineContent":[{"text":"“Declare a new constant called ","type":"text"},{"code":"maximumNumberOfLoginAttempts","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and give it a value of "},{"type":"codeVoice","code":"10"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Then, declare a new variable called ","type":"text"},{"type":"codeVoice","code":"currentLoginAttempt"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and give it an initial value of ","type":"text"},{"code":"0","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"text":"the maximum number of allowed login attempts is declared as a constant,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the maximum value never changes."},{"type":"text","text":" "},{"type":"text","text":"The current login attempt counter is declared as a variable,"},{"text":" ","type":"text"},{"text":"because this value must be incremented after each failed login attempt.","type":"text"}]},{"inlineContent":[{"text":"If a stored value in your code won’t change,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"always declare it as a constant with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"Use variables only for storing values that change.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you declare a constant or a variable,"},{"type":"text","text":" "},{"text":"you can give it a value as part of that declaration,","type":"text"},{"type":"text","text":" "},{"text":"like the examples above.","type":"text"},{"text":" ","type":"text"},{"text":"Alternatively,","type":"text"},{"text":" ","type":"text"},{"text":"you can assign its initial value later in the program,","type":"text"},{"type":"text","text":" "},{"text":"as long as it’s guaranteed to have a value","type":"text"},{"text":" ","type":"text"},{"text":"before the first time you read from it.","type":"text"}]},{"syntax":"swift","code":["var environment = \"development\"","let maximumNumberOfLoginAttempts: Int","\/\/ maximumNumberOfLoginAttempts has no value yet.","","if environment == \"development\" {","    maximumNumberOfLoginAttempts = 100","} else {","    maximumNumberOfLoginAttempts = 10","}","\/\/ Now maximumNumberOfLoginAttempts has a value, and can be read."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"type":"text","text":"the maximum number of login attempts is constant,"},{"text":" ","type":"text"},{"text":"and its value depends on the environment.","type":"text"},{"type":"text","text":" "},{"text":"In the development environment,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it has a value of 100;"},{"text":" ","type":"text"},{"type":"text","text":"in any other environment, its value is 10."},{"text":" ","type":"text"},{"text":"Both branches of the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initialize "},{"code":"maximumNumberOfLoginAttempts","type":"codeVoice"},{"type":"text","text":" with some value,"},{"text":" ","type":"text"},{"text":"guaranteeing that the constant always gets a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about how Swift checks your code"},{"type":"text","text":" "},{"type":"text","text":"when you set an initial value this way,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can declare multiple constants or multiple variables on a single line,"},{"text":" ","type":"text"},{"text":"separated by commas:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var x = 0.0, y = 0.0, z = 0.0"]},{"anchor":"Type-Annotations","type":"heading","level":3,"text":"Type Annotations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a "},{"type":"emphasis","inlineContent":[{"text":"type annotation","type":"text"}]},{"text":" when you declare a constant or variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to be clear about the kind of values the constant or variable can store."},{"text":" ","type":"text"},{"text":"Write a type annotation by placing a colon after the constant or variable name,","type":"text"},{"type":"text","text":" "},{"text":"followed by a space, followed by the name of the type to use.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This example provides a type annotation for a variable called ","type":"text"},{"code":"welcomeMessage","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to indicate that the variable can store "},{"type":"codeVoice","code":"String"},{"text":" values:","type":"text"}]},{"code":["var welcomeMessage: String"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The colon in the declaration means “…of type…,”"},{"type":"text","text":" "},{"type":"text","text":"so the code above can be read as:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"“Declare a variable called ","type":"text"},{"code":"welcomeMessage","type":"codeVoice"},{"text":" that’s of type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":".”"}]},{"inlineContent":[{"text":"The phrase “of type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"” means “can store any "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value.”"},{"text":" ","type":"text"},{"text":"Think of it as meaning “the type of thing” (or “the kind of thing”) that can be stored.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" variable can now be set to any string value without error:"}],"type":"paragraph"},{"syntax":"swift","code":["welcomeMessage = \"Hello\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can define multiple related variables of the same type on a single line,","type":"text"},{"type":"text","text":" "},{"text":"separated by commas, with a single type annotation after the final variable name:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var red, green, blue: Double"]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s rare that you need to write type annotations in practice."},{"text":" ","type":"text"},{"text":"If you provide an initial value for a constant or variable at the point that it’s defined,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift can almost always infer the type to be used for that constant or variable,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In the "},{"code":"welcomeMessage","type":"codeVoice"},{"text":" example above, no initial value is provided,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the type of the "},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" variable is specified with a type annotation"},{"type":"text","text":" "},{"text":"rather than being inferred from an initial value.","type":"text"}]}]},{"type":"heading","text":"Naming Constants and Variables","anchor":"Naming-Constants-and-Variables","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constant and variable names can contain almost any character,"},{"type":"text","text":" "},{"type":"text","text":"including Unicode characters:"}]},{"type":"codeListing","code":["let π = 3.14159","let 你好 = \"你好世界\"","let 🐶🐮 = \"dogcow\""],"syntax":"swift"},{"inlineContent":[{"text":"Constant and variable names can’t contain","type":"text"},{"type":"text","text":" "},{"text":"whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or line- and box-drawing characters."},{"type":"text","text":" "},{"text":"Nor can they begin with a number,","type":"text"},{"type":"text","text":" "},{"text":"although numbers may be included elsewhere within the name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once you’ve declared a constant or variable of a certain type,"},{"text":" ","type":"text"},{"type":"text","text":"you can’t declare it again with the same name,"},{"type":"text","text":" "},{"type":"text","text":"or change it to store values of a different type."},{"type":"text","text":" "},{"type":"text","text":"Nor can you change a constant into a variable"},{"text":" ","type":"text"},{"type":"text","text":"or a variable into a constant."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you need to give a constant or variable the same name as a reserved Swift keyword,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"surround the keyword with backticks ("},{"type":"codeVoice","code":"`"},{"type":"text","text":") when using it as a name."},{"type":"text","text":" "},{"type":"text","text":"However, avoid using keywords as names unless you have absolutely no choice."}]}]},{"type":"paragraph","inlineContent":[{"text":"You can change the value of an existing variable to another value of a compatible type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this example, the value of "},{"code":"friendlyWelcome","type":"codeVoice"},{"type":"text","text":" is changed from"},{"text":" ","type":"text"},{"code":"\"Hello!\"","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"\"Bonjour!\""},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var friendlyWelcome = \"Hello!\"","friendlyWelcome = \"Bonjour!\"","\/\/ friendlyWelcome is now \"Bonjour!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a variable, the value of a constant can’t be changed after it’s set."},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so is reported as an error when your code is compiled:"}]},{"type":"codeListing","code":["let languageName = \"Swift\"","languageName = \"Swift++\"","\/\/ This is a compile-time error: languageName cannot be changed."],"syntax":"swift"},{"anchor":"Printing-Constants-and-Variables","text":"Printing Constants and Variables","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"You can print the current value of a constant or variable with the ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["print(friendlyWelcome)","\/\/ Prints \"Bonjour!\""]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is a global function that prints one or more values"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate output."},{"type":"text","text":" "},{"type":"text","text":"In Xcode, for example,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"type":"text","text":" function prints its output in Xcode’s “console” pane."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"separator"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"terminator"},{"text":" parameter have default values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so you can omit them when you call this function."},{"text":" ","type":"text"},{"text":"By default, the function terminates the line it prints by adding a line break.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To print a value without a line break after it,"},{"text":" ","type":"text"},{"type":"text","text":"pass an empty string as the terminator — for example,"},{"text":" ","type":"text"},{"code":"print(someValue, terminator: \"\")","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For information about parameters with default values,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift uses ","type":"text"},{"inlineContent":[{"type":"text","text":"string interpolation"}],"type":"emphasis"},{"type":"text","text":" to include the name of a constant or variable"},{"type":"text","text":" "},{"text":"as a placeholder in a longer string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to prompt Swift to replace it with the current value of that constant or variable."},{"type":"text","text":" "},{"text":"Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:","type":"text"}]},{"code":["print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")","\/\/ Prints \"The current value of friendlyWelcome is Bonjour!\""],"syntax":"swift","type":"codeListing"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"All options you can use with string interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note"},{"text":"Comments","level":2,"anchor":"Comments","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use comments to include nonexecutable text in your code,","type":"text"},{"type":"text","text":" "},{"text":"as a note or reminder to yourself.","type":"text"},{"text":" ","type":"text"},{"text":"Comments are ignored by the Swift compiler when your code is compiled.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Comments in Swift are very similar to comments in C.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Single-line comments begin with two forward-slashes ("},{"code":"\/\/","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ This is a comment."]},{"type":"paragraph","inlineContent":[{"text":"Multiline comments start with a forward-slash followed by an asterisk (","type":"text"},{"code":"\/*","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and end with an asterisk followed by a forward-slash ("},{"code":"*\/","type":"codeVoice"},{"text":"):","type":"text"}]},{"syntax":"swift","code":["\/* This is also a comment","but is written over multiple lines. *\/"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Unlike multiline comments in C,","type":"text"},{"type":"text","text":" "},{"text":"multiline comments in Swift can be nested inside other multiline comments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You write nested comments by starting a multiline comment block"},{"type":"text","text":" "},{"text":"and then starting a second multiline comment within the first block.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The second block is then closed, followed by the first block:"}]},{"syntax":"swift","type":"codeListing","code":["\/* This is the start of the first multiline comment.","    \/* This is the second, nested multiline comment. *\/","This is the end of the first multiline comment. *\/"]},{"inlineContent":[{"type":"text","text":"Nested multiline comments enable you to comment out large blocks of code quickly and easily,"},{"type":"text","text":" "},{"type":"text","text":"even if the code already contains multiline comments."}],"type":"paragraph"},{"level":2,"anchor":"Semicolons","text":"Semicolons","type":"heading"},{"inlineContent":[{"text":"Unlike many other languages,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t require you to write a semicolon ("},{"type":"codeVoice","code":";"},{"type":"text","text":") after each statement in your code,"},{"text":" ","type":"text"},{"text":"although you can do so if you wish.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, semicolons "},{"inlineContent":[{"text":"are","type":"text"}],"type":"emphasis"},{"text":" required","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you want to write multiple separate statements on a single line:"}],"type":"paragraph"},{"syntax":"swift","code":["let cat = \"🐱\"; print(cat)","\/\/ Prints \"🐱\""],"type":"codeListing"},{"anchor":"Integers","type":"heading","level":2,"text":"Integers"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Integers"}],"type":"emphasis"},{"type":"text","text":" are whole numbers with no fractional component,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"42","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"-23"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Integers are either ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"signed"}]},{"type":"text","text":" (positive, zero, or negative)"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unsigned"}]},{"type":"text","text":" (positive or zero)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms."},{"type":"text","text":" "},{"text":"These integers follow a naming convention similar to C,","type":"text"},{"text":" ","type":"text"},{"text":"in that an 8-bit unsigned integer is of type ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and a 32-bit signed integer is of type "},{"code":"Int32","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Like all types in Swift, these integer types have capitalized names."}],"type":"paragraph"},{"type":"heading","text":"Integer Bounds","level":3,"anchor":"Integer-Bounds"},{"type":"paragraph","inlineContent":[{"text":"You can access the minimum and maximum values of each integer type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with its "},{"code":"min","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"max"},{"type":"text","text":" properties:"}]},{"syntax":"swift","code":["let minValue = UInt8.min  \/\/ minValue is equal to 0, and is of type UInt8","let maxValue = UInt8.max  \/\/ maxValue is equal to 255, and is of type UInt8"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of these properties are of the appropriate-sized number type"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"code":"UInt8","type":"codeVoice"},{"text":" in the example above)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can therefore be used in expressions alongside other values of the same type."}]},{"text":"Int","level":3,"type":"heading","anchor":"Int"},{"inlineContent":[{"type":"text","text":"In most cases, you don’t need to pick a specific size of integer to use in your code."},{"text":" ","type":"text"},{"type":"text","text":"Swift provides an additional integer type, "},{"code":"Int","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which has the same size as the current platform’s native word size:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 32-bit platform, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is the same size as "},{"code":"Int32","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 64-bit platform, "},{"type":"codeVoice","code":"Int"},{"text":" is the same size as ","type":"text"},{"type":"codeVoice","code":"Int64"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Unless you need to work with a specific size of integer,"},{"type":"text","text":" "},{"type":"text","text":"always use "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integer values in your code."},{"type":"text","text":" "},{"text":"This aids code consistency and interoperability.","type":"text"},{"type":"text","text":" "},{"text":"Even on 32-bit platforms, ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" can store any value between "},{"code":"-2,147,483,648","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"2,147,483,647","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and is large enough for many integer ranges.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"UInt","anchor":"UInt","level":3},{"inlineContent":[{"text":"Swift also provides an unsigned integer type, ","type":"text"},{"type":"codeVoice","code":"UInt"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has the same size as the current platform’s native word size:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"On a 32-bit platform, ","type":"text"},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" is the same size as "},{"code":"UInt32","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"On a 64-bit platform, ","type":"text"},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":"."}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" only when you specifically need"},{"text":" ","type":"text"},{"text":"an unsigned integer type with the same size as the platform’s native word size.","type":"text"},{"text":" ","type":"text"},{"text":"If this isn’t the case, ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is preferred,"},{"type":"text","text":" "},{"text":"even when the values to be stored are known to be nonnegative.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A consistent use of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integer values aids code interoperability,"},{"text":" ","type":"text"},{"type":"text","text":"avoids the need to convert between different number types,"},{"type":"text","text":" "},{"type":"text","text":"and matches integer type inference, as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"type":"heading","text":"Floating-Point Numbers","level":2,"anchor":"Floating-Point-Numbers"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Floating-point numbers"}]},{"type":"text","text":" are numbers with a fractional component,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"3.14159"},{"text":", ","type":"text"},{"type":"codeVoice","code":"0.1"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"-273.15"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point types can represent a much wider range of values than integer types,"},{"type":"text","text":" "},{"text":"and can store numbers that are much larger or smaller than can be stored in an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Swift provides two signed floating-point number types:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Double","type":"codeVoice"},{"text":" represents a 64-bit floating-point number.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Float"},{"type":"text","text":" represents a 32-bit floating-point number."}]}]}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Double"},{"text":" has a precision of at least 15 decimal digits,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whereas the precision of "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" can be as little as 6 decimal digits."},{"type":"text","text":" "},{"text":"The appropriate floating-point type to use depends on the nature and range of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values you need to work with in your code."},{"type":"text","text":" "},{"type":"text","text":"In situations where either type would be appropriate, "},{"code":"Double","type":"codeVoice"},{"text":" is preferred.","type":"text"}]}],"name":"Note","style":"note"},{"level":2,"anchor":"Type-Safety-and-Type-Inference","text":"Type Safety and Type Inference","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Swift is a ","type":"text"},{"inlineContent":[{"type":"text","text":"type-safe"}],"type":"emphasis"},{"text":" language.","type":"text"},{"type":"text","text":" "},{"text":"A type safe language encourages you to be clear about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the types of values your code can work with."},{"type":"text","text":" "},{"type":"text","text":"If part of your code requires a "},{"code":"String","type":"codeVoice"},{"type":"text","text":", you can’t pass it an "},{"code":"Int","type":"codeVoice"},{"text":" by mistake.","type":"text"}]},{"inlineContent":[{"text":"Because Swift is type safe,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it performs "},{"inlineContent":[{"type":"text","text":"type checks"}],"type":"emphasis"},{"text":" when compiling your code","type":"text"},{"text":" ","type":"text"},{"text":"and flags any mismatched types as errors.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This enables you to catch and fix errors as early as possible in the development process."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type-checking helps you avoid errors when you’re working with different types of values."},{"text":" ","type":"text"},{"text":"However, this doesn’t mean that you have to specify the type of","type":"text"},{"type":"text","text":" "},{"text":"every constant and variable that you declare.","type":"text"},{"type":"text","text":" "},{"text":"If you don’t specify the type of value you need,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift uses "},{"inlineContent":[{"type":"text","text":"type inference"}],"type":"emphasis"},{"type":"text","text":" to work out the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"Type inference enables a compiler to"},{"text":" ","type":"text"},{"type":"text","text":"deduce the type of a particular expression automatically when it compiles your code,"},{"text":" ","type":"text"},{"text":"simply by examining the values you provide.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Because of type inference, Swift requires far fewer type declarations","type":"text"},{"text":" ","type":"text"},{"text":"than languages such as C or Objective-C.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Constants and variables are still explicitly typed,"},{"type":"text","text":" "},{"text":"but much of the work of specifying their type is done for you.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Type inference is particularly useful","type":"text"},{"type":"text","text":" "},{"text":"when you declare a constant or variable with an initial value.","type":"text"},{"text":" ","type":"text"},{"text":"This is often done by assigning a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal value"}]},{"type":"text","text":" (or "},{"type":"emphasis","inlineContent":[{"text":"literal","type":"text"}]},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to the constant or variable at the point that you declare it.","type":"text"},{"type":"text","text":" "},{"text":"(A literal value is a value that appears directly in your source code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"code":"42","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"3.14159","type":"codeVoice"},{"type":"text","text":" in the examples below.)"}]},{"inlineContent":[{"text":"For example, if you assign a literal value of ","type":"text"},{"type":"codeVoice","code":"42"},{"type":"text","text":" to a new constant"},{"type":"text","text":" "},{"text":"without saying what type it is,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift infers that you want the constant to be an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because you have initialized it with a number that looks like an integer:"}],"type":"paragraph"},{"code":["let meaningOfLife = 42","\/\/ meaningOfLife is inferred to be of type Int"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Likewise, if you don’t specify a type for a floating-point literal,","type":"text"},{"type":"text","text":" "},{"text":"Swift infers that you want to create a ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let pi = 3.14159","\/\/ pi is inferred to be of type Double"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift always chooses "},{"code":"Double","type":"codeVoice"},{"text":" (rather than ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when inferring the type of floating-point numbers."}]},{"inlineContent":[{"type":"text","text":"If you combine integer and floating-point literals in an expression,"},{"text":" ","type":"text"},{"text":"a type of ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" will be inferred from the context:"}],"type":"paragraph"},{"code":["let anotherPi = 3 + 0.14159","\/\/ anotherPi is also inferred to be of type Double"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The literal value of ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":" has no explicit type in and of itself,"},{"type":"text","text":" "},{"type":"text","text":"and so an appropriate output type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is inferred"},{"type":"text","text":" "},{"type":"text","text":"from the presence of a floating-point literal as part of the addition."}],"type":"paragraph"},{"text":"Numeric Literals","type":"heading","anchor":"Numeric-Literals","level":2},{"inlineContent":[{"type":"text","text":"Integer literals can be written as:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal"}]},{"text":" number, with no prefix","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"binary"}],"type":"emphasis"},{"type":"text","text":" number, with a "},{"code":"0b","type":"codeVoice"},{"type":"text","text":" prefix"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"octal"}]},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0o"},{"type":"text","text":" prefix"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"hexadecimal"}],"type":"emphasis"},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0x"},{"text":" prefix","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"All of these integer literals have a decimal value of ","type":"text"},{"type":"codeVoice","code":"17"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let decimalInteger = 17","let binaryInteger = 0b10001       \/\/ 17 in binary notation","let octalInteger = 0o21           \/\/ 17 in octal notation","let hexadecimalInteger = 0x11     \/\/ 17 in hexadecimal notation"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point literals can be decimal (with no prefix),"},{"text":" ","type":"text"},{"text":"or hexadecimal (with a ","type":"text"},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix)."},{"type":"text","text":" "},{"text":"They must always have a number (or hexadecimal number) on both sides of the decimal point.","type":"text"},{"text":" ","type":"text"},{"text":"Decimal floats can also have an optional ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"exponent","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"indicated by an uppercase or lowercase "},{"type":"codeVoice","code":"e"},{"type":"text","text":";"},{"text":" ","type":"text"},{"text":"hexadecimal floats must have an exponent,","type":"text"},{"type":"text","text":" "},{"text":"indicated by an uppercase or lowercase ","type":"text"},{"code":"p","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For decimal numbers with an exponent of ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the base number is multiplied by 10ˣ:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"1.25e2","type":"codeVoice"},{"type":"text","text":" means 1.25 x 10², or "},{"type":"codeVoice","code":"125.0"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"1.25e-2"},{"type":"text","text":" means 1.25 x 10⁻², or "},{"code":"0.0125","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For hexadecimal numbers with an exponent of "},{"code":"x","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the base number is multiplied by 2ˣ:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"0xFp2"},{"type":"text","text":" means 15 x 2², or "},{"code":"60.0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"0xFp-2"},{"type":"text","text":" means 15 x 2⁻², or "},{"type":"codeVoice","code":"3.75"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these floating-point literals have a decimal value of "},{"type":"codeVoice","code":"12.1875"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let decimalDouble = 12.1875","let exponentDouble = 1.21875e1","let hexadecimalDouble = 0xC.3p0"]},{"inlineContent":[{"text":"Numeric literals can contain extra formatting to make them easier to read.","type":"text"},{"text":" ","type":"text"},{"text":"Both integers and floats can be padded with extra zeros","type":"text"},{"type":"text","text":" "},{"text":"and can contain underscores to help with readability.","type":"text"},{"type":"text","text":" "},{"text":"Neither type of formatting affects the underlying value of the literal:","type":"text"}],"type":"paragraph"},{"code":["let paddedDouble = 000123.456","let oneMillion = 1_000_000","let justOverOneMillion = 1_000_000.000_000_1"],"syntax":"swift","type":"codeListing"},{"text":"Numeric Type Conversion","anchor":"Numeric-Type-Conversion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Use the "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" type for all general-purpose integer constants and variables in your code,"},{"text":" ","type":"text"},{"type":"text","text":"even if they’re known to be nonnegative."},{"type":"text","text":" "},{"text":"Using the default integer type in everyday situations means that","type":"text"},{"type":"text","text":" "},{"text":"integer constants and variables are immediately interoperable in your code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and will match the inferred type for integer literal values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use other integer types only when they’re specifically needed for the task at hand,"},{"type":"text","text":" "},{"type":"text","text":"because of explicitly sized data from an external source,"},{"text":" ","type":"text"},{"text":"or for performance, memory usage, or other necessary optimization.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Using explicitly sized types in these situations"},{"text":" ","type":"text"},{"type":"text","text":"helps to catch any accidental value overflows"},{"text":" ","type":"text"},{"type":"text","text":"and implicitly documents the nature of the data being used."}]},{"level":3,"type":"heading","text":"Integer Conversion","anchor":"Integer-Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The range of numbers that can be stored in an integer constant or variable"},{"type":"text","text":" "},{"type":"text","text":"is different for each numeric type."},{"type":"text","text":" "},{"type":"text","text":"An "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":" constant or variable can store numbers between "},{"code":"-128","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"127"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"whereas a "},{"type":"codeVoice","code":"UInt8"},{"text":" constant or variable can store numbers between ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"255"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A number that won’t fit into a constant or variable of a sized integer type"},{"type":"text","text":" "},{"text":"is reported as an error when your code is compiled:","type":"text"}]},{"type":"codeListing","code":["let cannotBeNegative: UInt8 = -1","\/\/ UInt8 can't store negative numbers, and so this will report an error","let tooBig: Int8 = Int8.max + 1","\/\/ Int8 can't store a number larger than its maximum value,","\/\/ and so this will also report an error"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because each numeric type can store a different range of values,","type":"text"},{"text":" ","type":"text"},{"text":"you must opt in to numeric type conversion on a case-by-case basis.","type":"text"},{"text":" ","type":"text"},{"text":"This opt-in approach prevents hidden conversion errors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and helps make type conversion intentions explicit in your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert one specific number type to another,"},{"type":"text","text":" "},{"text":"you initialize a new number of the desired type with the existing value.","type":"text"},{"text":" ","type":"text"},{"text":"In the example below,","type":"text"},{"text":" ","type":"text"},{"text":"the constant ","type":"text"},{"code":"twoThousand","type":"codeVoice"},{"text":" is of type ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whereas the constant ","type":"text"},{"code":"one","type":"codeVoice"},{"text":" is of type ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"They can’t be added together directly,","type":"text"},{"type":"text","text":" "},{"text":"because they’re not of the same type.","type":"text"},{"type":"text","text":" "},{"text":"Instead, this example calls ","type":"text"},{"code":"UInt16(one)","type":"codeVoice"},{"type":"text","text":" to create"},{"type":"text","text":" "},{"text":"a new ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" initialized with the value of "},{"code":"one","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and uses this value in place of the original:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let twoThousand: UInt16 = 2_000","let one: UInt8 = 1","let twoThousandAndOne = twoThousand + UInt16(one)"]},{"type":"paragraph","inlineContent":[{"text":"Because both sides of the addition are now of type ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the addition is allowed."},{"text":" ","type":"text"},{"text":"The output constant (","type":"text"},{"type":"codeVoice","code":"twoThousandAndOne"},{"type":"text","text":") is inferred to be of type "},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"because it’s the sum of two ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" values."}]},{"inlineContent":[{"code":"SomeType(ofInitialValue)","type":"codeVoice"},{"text":" is the default way to call the initializer of a Swift type","type":"text"},{"type":"text","text":" "},{"text":"and pass in an initial value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Behind the scenes, "},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" has an initializer that accepts a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"and so this initializer is used to make a new ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" from an existing "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can’t pass in "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type here, however —"},{"text":" ","type":"text"},{"text":"it has to be a type for which ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":" provides an initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Extending existing types to provide initializers that accept new types"},{"type":"text","text":" "},{"text":"(including your own type definitions)","type":"text"},{"type":"text","text":" "},{"text":"is covered in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Integer-and-Floating-Point-Conversion","level":3,"type":"heading","text":"Integer and Floating-Point Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversions between integer and floating-point numeric types must be made explicit:"}]},{"code":["let three = 3","let pointOneFourOneFiveNine = 0.14159","let pi = Double(three) + pointOneFourOneFiveNine","\/\/ pi equals 3.14159, and is inferred to be of type Double"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Here, the value of the constant ","type":"text"},{"type":"codeVoice","code":"three"},{"text":" is used to create a new value of type ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"so that both sides of the addition are of the same type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Without this conversion in place, the addition would not be allowed."}]},{"inlineContent":[{"type":"text","text":"Floating-point to integer conversion must also be made explicit."},{"type":"text","text":" "},{"text":"An integer type can be initialized with a ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Float"},{"text":" value:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let integerPi = Int(pi)","\/\/ integerPi equals 3, and is inferred to be of type Int"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point values are always truncated when used to initialize a new integer value in this way."},{"text":" ","type":"text"},{"type":"text","text":"This means that "},{"code":"4.75","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"4","type":"codeVoice"},{"type":"text","text":", and "},{"code":"-3.9","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"-3","type":"codeVoice"},{"text":".","type":"text"}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The rules for combining numeric constants and variables are different from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the rules for numeric literals."},{"type":"text","text":" "},{"type":"text","text":"The literal value "},{"type":"codeVoice","code":"3"},{"type":"text","text":" can be added directly to the literal value "},{"type":"codeVoice","code":"0.14159"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"because number literals don’t have an explicit type in and of themselves.","type":"text"},{"type":"text","text":" "},{"text":"Their type is inferred only at the point that they’re evaluated by the compiler.","type":"text"}]}]},{"type":"heading","text":"Type Aliases","anchor":"Type-Aliases","level":2},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Type aliases","type":"text"}]},{"type":"text","text":" define an alternative name for an existing type."},{"type":"text","text":" "},{"text":"You define type aliases with the ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type aliases are useful when you want to refer to an existing type"},{"type":"text","text":" "},{"text":"by a name that’s contextually more appropriate,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as when working with data of a specific size from an external source:"}]},{"syntax":"swift","type":"codeListing","code":["typealias AudioSample = UInt16"]},{"inlineContent":[{"text":"Once you define a type alias,","type":"text"},{"text":" ","type":"text"},{"text":"you can use the alias anywhere you might use the original name:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var maxAmplitudeFound = AudioSample.min","\/\/ maxAmplitudeFound is now 0"],"type":"codeListing"},{"inlineContent":[{"text":"Here, ","type":"text"},{"type":"codeVoice","code":"AudioSample"},{"text":" is defined as an alias for ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because it’s an alias,","type":"text"},{"type":"text","text":" "},{"text":"the call to ","type":"text"},{"type":"codeVoice","code":"AudioSample.min"},{"text":" actually calls ","type":"text"},{"code":"UInt16.min","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which provides an initial value of ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxAmplitudeFound","type":"codeVoice"},{"text":" variable.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Booleans","level":2,"anchor":"Booleans"},{"inlineContent":[{"type":"text","text":"Swift has a basic "},{"inlineContent":[{"type":"text","text":"Boolean"}],"type":"emphasis"},{"type":"text","text":" type, called "},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Boolean values are referred to as "},{"type":"emphasis","inlineContent":[{"text":"logical","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"because they can only ever be true or false.","type":"text"},{"type":"text","text":" "},{"text":"Swift provides two Boolean constant values,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let orangesAreOrange = true","let turnipsAreDelicious = false"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The types of "},{"type":"codeVoice","code":"orangesAreOrange"},{"type":"text","text":" and "},{"code":"turnipsAreDelicious","type":"codeVoice"},{"text":" ","type":"text"},{"text":"have been inferred as ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" from the fact that","type":"text"},{"text":" ","type":"text"},{"text":"they were initialized with Boolean literal values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As with "},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"text":"you don’t need to declare constants or variables as ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"if you set them to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"type":"text","text":" as soon as you create them."},{"type":"text","text":" "},{"type":"text","text":"Type inference helps make Swift code more concise and readable"},{"type":"text","text":" "},{"type":"text","text":"when it initializes constants or variables with other values whose type is already known."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Boolean values are particularly useful when you work with conditional statements"},{"text":" ","type":"text"},{"text":"such as the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if turnipsAreDelicious {","    print(\"Mmm, tasty turnips!\")","} else {","    print(\"Eww, turnips are horrible.\")","}","\/\/ Prints \"Eww, turnips are horrible.\""],"type":"codeListing"},{"inlineContent":[{"text":"Conditional statements such as the ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement are covered in more detail in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift’s type safety prevents non-Boolean values from being substituted for "},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The following example reports a compile-time error:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let i = 1","if i {","    \/\/ this example will not compile, and will report an error","}"]},{"inlineContent":[{"type":"text","text":"However, the alternative example below is valid:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let i = 1","if i == 1 {","    \/\/ this example will compile successfully","}"]},{"inlineContent":[{"type":"text","text":"The result of the "},{"type":"codeVoice","code":"i == 1"},{"text":" comparison is of type ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and so this second example passes the type-check.","type":"text"},{"type":"text","text":" "},{"text":"Comparisons like ","type":"text"},{"code":"i == 1","type":"codeVoice"},{"type":"text","text":" are discussed in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As with other examples of type safety in Swift,","type":"text"},{"type":"text","text":" "},{"text":"this approach avoids accidental errors","type":"text"},{"text":" ","type":"text"},{"text":"and ensures that the intention of a particular section of code is always clear.","type":"text"}],"type":"paragraph"},{"anchor":"Tuples","level":2,"text":"Tuples","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Tuples","type":"text"}]},{"text":" group multiple values into a single compound value.","type":"text"},{"type":"text","text":" "},{"text":"The values within a tuple can be of any type","type":"text"},{"type":"text","text":" "},{"text":"and don’t have to be of the same type as each other.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In this example, ","type":"text"},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"type":"text","text":" is a tuple that describes an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"HTTP status code"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"An HTTP status code is a special value returned by a web server whenever you request a web page.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A status code of "},{"code":"404 Not Found","type":"codeVoice"},{"text":" is returned if you request a webpage that doesn’t exist.","type":"text"}]},{"code":["let http404Error = (404, \"Not Found\")","\/\/ http404Error is of type (Int, String), and equals (404, \"Not Found\")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"type":"text","text":" tuple groups together an "},{"type":"codeVoice","code":"Int"},{"text":" and a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"to give the HTTP status code two separate values:"},{"text":" ","type":"text"},{"type":"text","text":"a number and a human-readable description."},{"text":" ","type":"text"},{"text":"It can be described as “a tuple of type ","type":"text"},{"type":"codeVoice","code":"(Int, String)"},{"text":"”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create tuples from any permutation of types,"},{"type":"text","text":" "},{"type":"text","text":"and they can contain as many different types as you like."},{"text":" ","type":"text"},{"type":"text","text":"There’s nothing stopping you from having"},{"type":"text","text":" "},{"text":"a tuple of type ","type":"text"},{"type":"codeVoice","code":"(Int, Int, Int)"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"(String, Bool)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or indeed any other permutation you require.","type":"text"}]},{"inlineContent":[{"text":"You can ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decompose"}]},{"type":"text","text":" a tuple’s contents into separate constants or variables,"},{"type":"text","text":" "},{"type":"text","text":"which you then access as usual:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let (statusCode, statusMessage) = http404Error","print(\"The status code is \\(statusCode)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(statusMessage)\")","\/\/ Prints \"The status message is Not Found\""]},{"type":"paragraph","inlineContent":[{"text":"If you only need some of the tuple’s values,","type":"text"},{"text":" ","type":"text"},{"text":"ignore parts of the tuple with an underscore (","type":"text"},{"type":"codeVoice","code":"_"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"when you decompose the tuple:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let (justTheStatusCode, _) = http404Error","print(\"The status code is \\(justTheStatusCode)\")","\/\/ Prints \"The status code is 404\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively,"},{"type":"text","text":" "},{"text":"access the individual element values in a tuple using index numbers starting at zero:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The status code is \\(http404Error.0)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(http404Error.1)\")","\/\/ Prints \"The status message is Not Found\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can name the individual elements in a tuple when the tuple is defined:"}]},{"type":"codeListing","syntax":"swift","code":["let http200Status = (statusCode: 200, description: \"OK\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you name the elements in a tuple,"},{"type":"text","text":" "},{"type":"text","text":"you can use the element names to access the values of those elements:"}]},{"syntax":"swift","type":"codeListing","code":["print(\"The status code is \\(http200Status.statusCode)\")","\/\/ Prints \"The status code is 200\"","print(\"The status message is \\(http200Status.description)\")","\/\/ Prints \"The status message is OK\""]},{"inlineContent":[{"text":"Tuples are particularly useful as the return values of functions.","type":"text"},{"type":"text","text":" "},{"text":"A function that tries to retrieve a web page might return the ","type":"text"},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple type"},{"type":"text","text":" "},{"text":"to describe the success or failure of the page retrieval.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By returning a tuple with two distinct values,"},{"type":"text","text":" "},{"text":"each of a different type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the function provides more useful information about its outcome"},{"type":"text","text":" "},{"text":"than if it could only return a single value of a single type.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Tuples are useful for simple groups of related values."},{"text":" ","type":"text"},{"type":"text","text":"They’re not suited to the creation of complex data structures."},{"type":"text","text":" "},{"text":"If your data structure is likely to be more complex,","type":"text"},{"text":" ","type":"text"},{"text":"model it as a class or structure, rather than as a tuple.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note"},{"anchor":"Optionals","type":"heading","level":2,"text":"Optionals"},{"inlineContent":[{"text":"You use ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optionals"}]},{"text":" in situations where a value may be absent.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"An optional represents two possibilities:"},{"type":"text","text":" "},{"text":"Either there ","type":"text"},{"inlineContent":[{"text":"is","type":"text"}],"type":"emphasis"},{"type":"text","text":" a value of a specified type,"},{"text":" ","type":"text"},{"type":"text","text":"and you can unwrap the optional to access that value,"},{"text":" ","type":"text"},{"text":"or there ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"isn’t"}]},{"type":"text","text":" a value at all."}],"type":"paragraph"},{"inlineContent":[{"text":"As an example of a value that might be missing,","type":"text"},{"type":"text","text":" "},{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" type has an initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that tries to convert a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value into an "},{"code":"Int","type":"codeVoice"},{"text":" value.","type":"text"},{"text":" ","type":"text"},{"text":"However, only some strings can be converted into integers.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The string "},{"type":"codeVoice","code":"\"123\""},{"text":" can be converted into the numeric value ","type":"text"},{"code":"123","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but the string "},{"code":"\"hello, world\"","type":"codeVoice"},{"type":"text","text":" doesn’t have a corresponding numeric value."},{"text":" ","type":"text"},{"type":"text","text":"The example below uses the initializer to try to convert a "},{"type":"codeVoice","code":"String"},{"text":" into an ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","\/\/ The type of convertedNumber is \"optional Int\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because the initializer in the code above might fail,"},{"type":"text","text":" "},{"text":"it returns an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"optional","type":"text"}]},{"type":"text","text":" "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", rather than an "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To write an optional type,","type":"text"},{"text":" ","type":"text"},{"text":"you write a question mark (","type":"text"},{"code":"?","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"after the name of the type that the optional contains —"},{"text":" ","type":"text"},{"type":"text","text":"for example, the type of an optional "},{"code":"Int","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Int?"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"An optional "},{"code":"Int","type":"codeVoice"},{"text":" always contains","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"either some "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value or no value at all."},{"text":" ","type":"text"},{"type":"text","text":"It can’t contain anything else, like a "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value."}]},{"type":"heading","anchor":"nil","level":3,"text":"nil"},{"inlineContent":[{"text":"You set an optional variable to a valueless state","type":"text"},{"text":" ","type":"text"},{"text":"by assigning it the special value ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["var serverResponseCode: Int? = 404","\/\/ serverResponseCode contains an actual Int value of 404","serverResponseCode = nil","\/\/ serverResponseCode now contains no value"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you define an optional variable without providing a default value,"},{"text":" ","type":"text"},{"text":"the variable is automatically set to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var surveyAnswer: String?","\/\/ surveyAnswer is automatically set to nil"],"type":"codeListing"},{"inlineContent":[{"text":"You can use an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement to find out whether an optional contains a value"},{"text":" ","type":"text"},{"text":"by comparing the optional against ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You perform this comparison with the “equal to” operator ("},{"type":"codeVoice","code":"=="},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an optional has a value, it’s considered as “not equal to” "},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","","if convertedNumber != nil {","    print(\"convertedNumber contains some integer value.\")","}","\/\/ Prints \"convertedNumber contains some integer value.\""]},{"inlineContent":[{"text":"You can’t use ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" with non-optional constants or variables.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If a constant or variable in your code needs to work with"},{"type":"text","text":" "},{"text":"the absence of a value under certain conditions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"declare it as an optional value of the appropriate type."},{"type":"text","text":" "},{"text":"A constant or variable that’s declared as a non-optional value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is guaranteed to never contain a "},{"type":"codeVoice","code":"nil"},{"text":" value.","type":"text"},{"text":" ","type":"text"},{"text":"If you try to assign ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to a non-optional value,"},{"type":"text","text":" "},{"text":"you’ll get a compile-time error.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This separation of optional and non-optional values"},{"type":"text","text":" "},{"text":"lets you explicitly mark what information can be missing,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and makes it easier to write code that handle missing values."},{"type":"text","text":" "},{"type":"text","text":"You can’t accidentally treat an optional as if it were non-optional"},{"text":" ","type":"text"},{"type":"text","text":"because this mistake produces an error at compile time."},{"type":"text","text":" "},{"text":"After you unwrap the value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"none of the other code that works with that value needs to check for "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so there’s no need to repeatedly check the same value"},{"text":" ","type":"text"},{"type":"text","text":"in different parts of your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you access an optional value,"},{"type":"text","text":" "},{"text":"your code always handles both the ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and non-"},{"type":"codeVoice","code":"nil"},{"text":" case.","type":"text"},{"type":"text","text":" "},{"text":"There are several things you can do when a value is missing,","type":"text"},{"text":" ","type":"text"},{"text":"as described in the following sections:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Skip the code that operates on the value when it’s ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Propagate the ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"by returning ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"or using the ","type":"text"},{"type":"codeVoice","code":"?."},{"text":" operator described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide a fallback value, using the "},{"code":"??","type":"codeVoice"},{"text":" operator.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Stop program execution, using the ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"}]}],"type":"unorderedList"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"In Objective-C, ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" is a pointer to a nonexistent object.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift, ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" isn’t a pointer — it’s the absence of a value of a certain type."},{"text":" ","type":"text"},{"text":"Optionals of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" type can be set to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", not just object types.","type":"text"}]}],"style":"note"},{"level":3,"anchor":"Optional-Binding","text":"Optional Binding","type":"heading"},{"inlineContent":[{"text":"You use optional binding to find out whether an optional contains a value,","type":"text"},{"type":"text","text":" "},{"text":"and if so, to make that value available as a temporary constant or variable.","type":"text"},{"text":" ","type":"text"},{"text":"Optional binding can be used with ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"while","type":"codeVoice"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to check for a value inside an optional,"},{"type":"text","text":" "},{"text":"and to extract that value into a constant or variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of a single action."},{"type":"text","text":" "},{"type":"text","text":"For more information about "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Write an optional binding for an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement as follows:"}],"type":"paragraph"},{"code":["if let <#constantName#> = <#someOptional#> {","   <#statements#>","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can rewrite the "},{"code":"possibleNumber","type":"codeVoice"},{"type":"text","text":" example from"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to use optional binding rather than forced unwrapping:","type":"text"}]},{"code":["if let actualNumber = Int(possibleNumber) {","    print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")","} else {","    print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")","}","\/\/ Prints \"The string \"123\" has an integer value of 123\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code can be read as:"}]},{"inlineContent":[{"type":"text","text":"“If the optional "},{"code":"Int","type":"codeVoice"},{"text":" returned by ","type":"text"},{"code":"Int(possibleNumber)","type":"codeVoice"},{"type":"text","text":" contains a value,"},{"text":" ","type":"text"},{"text":"set a new constant called ","type":"text"},{"type":"codeVoice","code":"actualNumber"},{"text":" to the value contained in the optional.”","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If the conversion is successful,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"actualNumber"},{"text":" constant becomes available for use within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first branch of the "},{"type":"codeVoice","code":"if"},{"text":" statement.","type":"text"},{"text":" ","type":"text"},{"text":"It has already been initialized with the value contained within the optional,","type":"text"},{"text":" ","type":"text"},{"text":"and has the corresponding non-optional type.","type":"text"},{"type":"text","text":" "},{"text":"In this case, the type of ","type":"text"},{"code":"possibleNumber","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so the type of "},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" is "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t need to refer to the original, optional constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"after accessing the value it contains,"},{"type":"text","text":" "},{"text":"you can use the same name for the new constant or variable:","type":"text"}]},{"code":["let myNumber = Int(possibleNumber)","\/\/ Here, myNumber is an optional integer","if let myNumber = myNumber {","    \/\/ Here, myNumber is a non-optional integer","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code starts by checking whether "},{"code":"myNumber","type":"codeVoice"},{"type":"text","text":" contains a value,"},{"text":" ","type":"text"},{"type":"text","text":"just like the code in the previous example."},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" has a value,"},{"text":" ","type":"text"},{"type":"text","text":"the value of a new constant named "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" is set to that value."},{"type":"text","text":" "},{"text":"Inside the body of the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" refers to that new non-optional constant."},{"text":" ","type":"text"},{"type":"text","text":"Writing "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" before or after the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"refers to the original optional integer constant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because this kind of code is so common,"},{"text":" ","type":"text"},{"text":"you can use a shorter spelling to unwrap an optional value:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Write just the name of the constant or variable that you’re unwrapping."},{"text":" ","type":"text"},{"type":"text","text":"The new, unwrapped constant or variable"},{"type":"text","text":" "},{"type":"text","text":"implicitly uses the same name as the optional value."}]},{"syntax":"swift","type":"codeListing","code":["if let myNumber {","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use both constants and variables with optional binding."},{"text":" ","type":"text"},{"text":"If you wanted to manipulate the value of ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"within the first branch of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"you could write "},{"code":"if var myNumber","type":"codeVoice"},{"type":"text","text":" instead,"},{"type":"text","text":" "},{"text":"and the value contained within the optional","type":"text"},{"type":"text","text":" "},{"text":"would be made available as a variable rather than a constant.","type":"text"},{"type":"text","text":" "},{"text":"Changes you make to ","type":"text"},{"type":"codeVoice","code":"myNumber"},{"text":" inside the body of the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"apply only to that local variable,"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" to the original, optional constant or variable that you unwrapped."}]},{"inlineContent":[{"type":"text","text":"You can include as many optional bindings and Boolean conditions"},{"text":" ","type":"text"},{"type":"text","text":"in a single "},{"code":"if","type":"codeVoice"},{"text":" statement as you need to,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by commas."},{"type":"text","text":" "},{"type":"text","text":"If any of the values in the optional bindings are "},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or any Boolean condition evaluates to "},{"type":"codeVoice","code":"false"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the whole ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement’s condition","type":"text"},{"type":"text","text":" "},{"text":"is considered to be ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The following "},{"code":"if","type":"codeVoice"},{"text":" statements are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {","    print(\"\\(firstNumber) < \\(secondNumber) < 100\")","}","\/\/ Prints \"4 < 42 < 100\"","","if let firstNumber = Int(\"4\") {","    if let secondNumber = Int(\"42\") {","        if firstNumber < secondNumber && secondNumber < 100 {","            print(\"\\(firstNumber) < \\(secondNumber) < 100\")","        }","    }","}","\/\/ Prints \"4 < 42 < 100\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Constants and variables created with optional binding in an "},{"type":"codeVoice","code":"if"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are available only within the body of the "},{"code":"if","type":"codeVoice"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast, the constants and variables created with a "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"are available in the lines of code that follow the ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Providing a Fallback Value","level":3,"anchor":"Providing-a-Fallback-Value"},{"inlineContent":[{"type":"text","text":"Another way to handle a missing value is to supply"},{"text":" ","type":"text"},{"type":"text","text":"a default value using the nil-coalescing operator ("},{"code":"??","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"If the optional on the left of the ","type":"text"},{"code":"??","type":"codeVoice"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that value is unwrapped and used."},{"type":"text","text":" "},{"text":"Otherwise, the value on the right of ","type":"text"},{"type":"codeVoice","code":"??"},{"type":"text","text":" is used."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the code below greets someone by name if one is specified,"},{"type":"text","text":" "},{"type":"text","text":"and uses a generic greeting when the name is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let name: String? = nil","let greeting = \"Hello, \" + (name ?? \"friend\") + \"!\"","print(greeting)","\/\/ Prints \"Hello, friend!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For more information about using ","type":"text"},{"code":"??","type":"codeVoice"},{"type":"text","text":" to provide a fallback value,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"level":3,"text":"Force Unwrapping","type":"heading","anchor":"Force-Unwrapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" represents an unrecoverable failure,"},{"type":"text","text":" "},{"text":"such a programmer error or corrupted state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can access the underlying value"},{"type":"text","text":" "},{"type":"text","text":"by adding an exclamation mark ("},{"code":"!","type":"codeVoice"},{"text":") to the end of the optional’s name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"inlineContent":[{"type":"text","text":"force unwrapping"}],"type":"emphasis"},{"type":"text","text":" the optional’s value."},{"type":"text","text":" "},{"text":"When you force unwrap a non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"the result is its unwrapped value.","type":"text"},{"type":"text","text":" "},{"text":"Force unwrapping a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value triggers a runtime error."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"!"},{"type":"text","text":" is, effectively, a shorter spelling of "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example, the code below shows two equivalent approaches:","type":"text"}]},{"syntax":"swift","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","","let number = convertedNumber!","","guard let number = convertedNumber else {","    fatalError(\"The number was invalid\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Both versions of the code above depend on "},{"type":"codeVoice","code":"convertedNumber"},{"text":" ","type":"text"},{"type":"text","text":"always containing a value."},{"text":" ","type":"text"},{"type":"text","text":"Writing that requirement as part of the code,"},{"text":" ","type":"text"},{"type":"text","text":"using either of the approaches above,"},{"text":" ","type":"text"},{"text":"lets your code check that the requirement is true at runtime.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more information about enforcing data requirements","type":"text"},{"text":" ","type":"text"},{"text":"and checking assumptions at runtime,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Implicitly Unwrapped Optionals","anchor":"Implicitly-Unwrapped-Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described above,"},{"text":" ","type":"text"},{"text":"optionals indicate that a constant or variable is allowed to have “no value”.","type":"text"},{"text":" ","type":"text"},{"text":"Optionals can be checked with an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement to see if a value exists,"},{"type":"text","text":" "},{"text":"and can be conditionally unwrapped with optional binding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to access the optional’s value if it does exist."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes it’s clear from a program’s structure that an optional will "},{"inlineContent":[{"text":"always","type":"text"}],"type":"emphasis"},{"text":" have a value,","type":"text"},{"text":" ","type":"text"},{"text":"after that value is first set.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In these cases, it’s useful to remove the need"},{"type":"text","text":" "},{"text":"to check and unwrap the optional’s value every time it’s accessed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because it can be safely assumed to have a value all of the time."}]},{"inlineContent":[{"text":"These kinds of optionals are defined as ","type":"text"},{"inlineContent":[{"type":"text","text":"implicitly unwrapped optionals"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You write an implicitly unwrapped optional by placing an exclamation point (","type":"text"},{"code":"String!","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"rather than a question mark ("},{"type":"codeVoice","code":"String?"},{"text":") after the type that you want to make optional.","type":"text"},{"type":"text","text":" "},{"text":"Rather than placing an exclamation point after the optional’s name when you use it,","type":"text"},{"type":"text","text":" "},{"text":"you place an exclamation point after the optional’s type when you declare it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Implicitly unwrapped optionals are useful when"},{"text":" ","type":"text"},{"text":"an optional’s value is confirmed to exist immediately after the optional is first defined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can definitely be assumed to exist at every point thereafter."},{"type":"text","text":" "},{"text":"The primary use of implicitly unwrapped optionals in Swift is during class initialization,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Don’t use an implicitly unwrapped optional when there’s a possibility of"},{"type":"text","text":" "},{"type":"text","text":"a variable becoming "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at a later point."},{"type":"text","text":" "},{"type":"text","text":"Always use a normal optional type if you need to check for a "},{"code":"nil","type":"codeVoice"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"during the lifetime of a variable.","type":"text"}]},{"inlineContent":[{"type":"text","text":"An implicitly unwrapped optional is a normal optional behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"but can also be used like a non-optional value,"},{"type":"text","text":" "},{"type":"text","text":"without the need to unwrap the optional value each time it’s accessed."},{"text":" ","type":"text"},{"type":"text","text":"The following example shows the difference in behavior between"},{"text":" ","type":"text"},{"text":"an optional string and an implicitly unwrapped optional string","type":"text"},{"text":" ","type":"text"},{"text":"when accessing their wrapped value as an explicit ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let possibleString: String? = \"An optional string.\"","let forcedString: String = possibleString! \/\/ Requires explicit unwrapping","","let assumedString: String! = \"An implicitly unwrapped optional string.\"","let implicitString: String = assumedString \/\/ Unwrapped automatically"],"type":"codeListing"},{"inlineContent":[{"text":"You can think of an implicitly unwrapped optional as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"giving permission for the optional to be force-unwrapped if needed."},{"type":"text","text":" "},{"text":"When you use an implicitly unwrapped optional value,","type":"text"},{"type":"text","text":" "},{"text":"Swift first tries to use it as an ordinary optional value;","type":"text"},{"text":" ","type":"text"},{"text":"if it can’t be used as an optional, Swift force-unwraps the value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"text","text":"the optional value "},{"code":"assumedString","type":"codeVoice"},{"text":" is force-unwrapped","type":"text"},{"type":"text","text":" "},{"text":"before assigning its value to ","type":"text"},{"type":"codeVoice","code":"implicitString"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"implicitString"},{"text":" has an explicit, non-optional type of ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In code below,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"optionalString"},{"text":" doesn’t have an explicit type","type":"text"},{"type":"text","text":" "},{"text":"so it’s an ordinary optional.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let optionalString = assumedString","\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If an implicitly unwrapped optional is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and you try to access its wrapped value,"},{"text":" ","type":"text"},{"text":"you’ll trigger a runtime error.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The result is exactly the same as if you write an exclamation point"},{"text":" ","type":"text"},{"text":"to force unwrap a normal optional that doesn’t contain a value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can check whether an implicitly unwrapped optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"text":"the same way you check a normal optional:","type":"text"}]},{"code":["if assumedString != nil {","    print(assumedString!)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use an implicitly unwrapped optional with optional binding,"},{"text":" ","type":"text"},{"type":"text","text":"to check and unwrap its value in a single statement:"}]},{"type":"codeListing","syntax":"swift","code":["if let definiteString = assumedString {","    print(definiteString)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"text":"Error Handling","level":2,"type":"heading","anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"text":"You use ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"error handling"}]},{"text":" to respond to error conditions","type":"text"},{"type":"text","text":" "},{"text":"your program may encounter during execution.","type":"text"}]},{"inlineContent":[{"text":"In contrast to optionals,","type":"text"},{"type":"text","text":" "},{"text":"which can use the presence or absence of a value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to communicate success or failure of a function,"},{"text":" ","type":"text"},{"type":"text","text":"error handling allows you to determine the underlying cause of failure,"},{"type":"text","text":" "},{"text":"and, if necessary, propagate the error to another part of your program.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When a function encounters an error condition, it "},{"inlineContent":[{"type":"text","text":"throws"}],"type":"emphasis"},{"type":"text","text":" an error."},{"text":" ","type":"text"},{"text":"That function’s caller can then ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"catch"}]},{"type":"text","text":" the error and respond appropriately."}],"type":"paragraph"},{"code":["func canThrowAnError() throws {","    \/\/ this function may or may not throw an error","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"A function indicates that it can throw an error","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by including the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in its declaration."},{"text":" ","type":"text"},{"type":"text","text":"When you call a function that can throw an error,"},{"text":" ","type":"text"},{"text":"you prepend the ","type":"text"},{"code":"try","type":"codeVoice"},{"text":" keyword to the expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift automatically propagates errors out of their current scope"},{"text":" ","type":"text"},{"text":"until they’re handled by a ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["do {","    try canThrowAnError()","    \/\/ no error was thrown","} catch {","    \/\/ an error was thrown","}"]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"do"},{"text":" statement creates a new containing scope,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which allows errors to be propagated to one or more "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clauses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how error handling can be used"},{"text":" ","type":"text"},{"text":"to respond to different error conditions:","type":"text"}]},{"code":["func makeASandwich() throws {","    \/\/ ...","}","","do {","    try makeASandwich()","    eatASandwich()","} catch SandwichError.outOfCleanDishes {","    washDishes()","} catch SandwichError.missingIngredients(let ingredients) {","    buyGroceries(ingredients)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this example, the "},{"code":"makeASandwich()","type":"codeVoice"},{"text":" function will throw an error","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if no clean dishes are available"},{"text":" ","type":"text"},{"type":"text","text":"or if any ingredients are missing."},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"code":"makeASandwich()","type":"codeVoice"},{"type":"text","text":" can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"the function call is wrapped in a "},{"type":"codeVoice","code":"try"},{"text":" expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By wrapping the function call in a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"any errors that are thrown will be propagated"},{"text":" ","type":"text"},{"text":"to the provided ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clauses.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If no error is thrown, the ","type":"text"},{"type":"codeVoice","code":"eatASandwich()"},{"text":" function is called.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If an error is thrown and it matches the "},{"code":"SandwichError.outOfCleanDishes","type":"codeVoice"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"text":"then the ","type":"text"},{"type":"codeVoice","code":"washDishes()"},{"type":"text","text":" function will be called."},{"type":"text","text":" "},{"text":"If an error is thrown and it matches the ","type":"text"},{"type":"codeVoice","code":"SandwichError.missingIngredients"},{"type":"text","text":" case,"},{"text":" ","type":"text"},{"text":"then the ","type":"text"},{"code":"buyGroceries(_:)","type":"codeVoice"},{"type":"text","text":" function is called"},{"text":" ","type":"text"},{"text":"with the associated ","type":"text"},{"code":"[String]","type":"codeVoice"},{"text":" value captured by the ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" pattern."}]},{"type":"paragraph","inlineContent":[{"text":"Throwing, catching, and propagating errors is covered in greater detail in","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true},{"type":"text","text":"."}]},{"type":"heading","anchor":"Assertions-and-Preconditions","text":"Assertions and Preconditions","level":2},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Assertions"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"type":"text","text":"preconditions"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"are checks that happen at runtime."},{"text":" ","type":"text"},{"text":"You use them to make sure an essential condition is satisfied","type":"text"},{"type":"text","text":" "},{"text":"before executing any further code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the Boolean condition in the assertion or precondition"},{"text":" ","type":"text"},{"text":"evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"code execution continues as usual."},{"type":"text","text":" "},{"type":"text","text":"If the condition evaluates to "},{"code":"false","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the current state of the program is invalid;"},{"text":" ","type":"text"},{"type":"text","text":"code execution ends, and your app is terminated."}]},{"inlineContent":[{"text":"You use assertions and preconditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to express the assumptions you make"},{"type":"text","text":" "},{"type":"text","text":"and the expectations you have"},{"type":"text","text":" "},{"type":"text","text":"while coding,"},{"type":"text","text":" "},{"text":"so you can include them as part of your code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Assertions help you find mistakes and incorrect assumptions during development,"},{"text":" ","type":"text"},{"type":"text","text":"and preconditions help you detect issues in production."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In addition to verifying your expectations at runtime,"},{"text":" ","type":"text"},{"text":"assertions and preconditions also become a useful form of documentation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within the code."},{"type":"text","text":" "},{"text":"Unlike the error conditions discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling","isActive":true,"type":"reference"},{"text":" above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"assertions and preconditions aren’t used"},{"text":" ","type":"text"},{"type":"text","text":"for recoverable or expected errors."},{"type":"text","text":" "},{"type":"text","text":"Because a failed assertion or precondition"},{"type":"text","text":" "},{"text":"indicates an invalid program state,","type":"text"},{"type":"text","text":" "},{"text":"there’s no way to catch a failed assertion.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Recovering from an invalid state is impossible."},{"type":"text","text":" "},{"text":"When an assertion fails,","type":"text"},{"text":" ","type":"text"},{"text":"at least one piece of the program’s data is invalid —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but you don’t know why it’s invalid"},{"type":"text","text":" "},{"type":"text","text":"or whether an additional state is also invalid."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using assertions and preconditions"},{"type":"text","text":" "},{"type":"text","text":"isn’t a substitute for designing your code in such a way"},{"text":" ","type":"text"},{"text":"that invalid conditions are unlikely to arise.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"text":"using them to enforce valid data and state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causes your app to terminate more predictably"},{"type":"text","text":" "},{"text":"if an invalid state occurs,","type":"text"},{"text":" ","type":"text"},{"text":"and helps make the problem easier to debug.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When assumptions aren’t checked,"},{"type":"text","text":" "},{"text":"you might not notice this kind problem until much later","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when code elsewhere starts failing visibly,"},{"type":"text","text":" "},{"text":"and after user data has been silently corrupted.","type":"text"},{"type":"text","text":" "},{"text":"Stopping execution as soon as an invalid state is detected","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"also helps limit the damage caused by that invalid state."}]},{"type":"paragraph","inlineContent":[{"text":"The difference between assertions and preconditions is in when they’re checked:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Assertions are checked only in debug builds,"},{"text":" ","type":"text"},{"type":"text","text":"but preconditions are checked in both debug and production builds."},{"type":"text","text":" "},{"type":"text","text":"In production builds,"},{"text":" ","type":"text"},{"text":"the condition inside an assertion isn’t evaluated.","type":"text"},{"text":" ","type":"text"},{"text":"This means you can use as many assertions as you want","type":"text"},{"type":"text","text":" "},{"text":"during your development process,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without impacting performance in production."}]},{"type":"heading","text":"Debugging with Assertions","level":3,"anchor":"Debugging-with-Assertions"},{"inlineContent":[{"type":"text","text":"You write an assertion by calling the"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","isActive":true},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"from the Swift standard library."},{"text":" ","type":"text"},{"type":"text","text":"You pass this function an expression that evaluates to "},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and a message to display if the result of the condition is "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let age = -3","assert(age >= 0, \"A person's age can't be less than zero.\")","\/\/ This assertion fails because -3 isn't >= 0."]},{"inlineContent":[{"text":"In this example, code execution continues if ","type":"text"},{"code":"age >= 0","type":"codeVoice"},{"type":"text","text":" evaluates to "},{"code":"true","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"that is, if the value of ","type":"text"},{"type":"codeVoice","code":"age"},{"text":" is nonnegative.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the value of "},{"code":"age","type":"codeVoice"},{"text":" is negative, as in the code above,","type":"text"},{"type":"text","text":" "},{"text":"then ","type":"text"},{"type":"codeVoice","code":"age >= 0"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"false"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the assertion fails, terminating the application."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can omit the assertion message —"},{"type":"text","text":" "},{"type":"text","text":"for example, when it would just repeat the condition as prose."}],"type":"paragraph"},{"code":["assert(age >= 0)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the code already checks the condition,"},{"text":" ","type":"text"},{"type":"text","text":"you use the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"to indicate that an assertion has failed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["if age > 10 {","    print(\"You can ride the roller-coaster or the ferris wheel.\")","} else if age >= 0 {","    print(\"You can ride the ferris wheel.\")","} else {","    assertionFailure(\"A person's age can't be less than zero.\")","}"],"type":"codeListing"},{"text":"Enforcing Preconditions","anchor":"Enforcing-Preconditions","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a precondition whenever a condition has the potential to be false,"},{"text":" ","type":"text"},{"type":"text","text":"but must "},{"inlineContent":[{"type":"text","text":"definitely"}],"type":"emphasis"},{"type":"text","text":" be true for your code to continue execution."},{"type":"text","text":" "},{"type":"text","text":"For example, use a precondition to check that a subscript isn’t out of bounds,"},{"type":"text","text":" "},{"type":"text","text":"or to check that a function has been passed a valid value."}]},{"type":"paragraph","inlineContent":[{"text":"You write a precondition by calling the","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","isActive":true,"type":"reference"},{"text":" function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You pass this function an expression that evaluates to "},{"code":"true","type":"codeVoice"},{"type":"text","text":" or "},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and a message to display if the result of the condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"code":["\/\/ In the implementation of a subscript...","precondition(index > 0, \"Index must be greater than zero.\")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also call the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","isActive":true,"type":"reference"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"to indicate that a failure has occurred —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for example, if the default case of a switch was taken,"},{"text":" ","type":"text"},{"type":"text","text":"but all valid input data should have been handled"},{"text":" ","type":"text"},{"text":"by one of the switch’s other cases.","type":"text"}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If you compile in unchecked mode ("},{"type":"codeVoice","code":"-Ounchecked"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"preconditions aren’t checked.","type":"text"},{"text":" ","type":"text"},{"text":"The compiler assumes that preconditions are always true,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it optimizes your code accordingly."},{"text":" ","type":"text"},{"text":"However, the ","type":"text"},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"type":"text","text":" function always halts execution,"},{"type":"text","text":" "},{"type":"text","text":"regardless of optimization settings."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use the "},{"code":"fatalError(_:file:line:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"text":"during prototyping and early development","type":"text"},{"type":"text","text":" "},{"text":"to create stubs for functionality that hasn’t been implemented yet,","type":"text"},{"type":"text","text":" "},{"text":"by writing ","type":"text"},{"type":"codeVoice","code":"fatalError(\"Unimplemented\")"},{"type":"text","text":" as the stub implementation."},{"text":" ","type":"text"},{"type":"text","text":"Because fatal errors are never optimized out,"},{"type":"text","text":" "},{"type":"text","text":"unlike assertions or preconditions,"},{"type":"text","text":" "},{"text":"you can be sure that execution always halts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if it encounters a stub implementation."}],"type":"paragraph"}]}]}],"sections":[],"abstract":[{"type":"text","text":"Work with common kinds of data and write basic syntax."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"The Basics"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","title":"Unowned References and Implicitly Unwrapped Optional Properties","kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"abstract":[],"kind":"section","title":"Default Parameter Values","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Nil-Coalescing-Operator":{"title":"Nil-Coalescing Operator","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator","abstract":[],"url":"\/documentation\/the-swift-programming-language\/basicoperators#Nil-Coalescing-Operator","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Error-Handling":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling","url":"\/documentation\/the-swift-programming-language\/thebasics#Error-Handling","title":"Error Handling","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"url":"\/documentation\/the-swift-programming-language\/extensions","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining","title":"Optional Chaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","type":"topic"},"https://developer.apple.com/documentation/swift/fatalerror(_:file:line:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","title":"fatalError(_:file:line:)","titleInlineContent":[{"type":"codeVoice","code":"fatalError(_:file:line:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Early-Exit":{"type":"topic","kind":"section","abstract":[],"title":"Early Exit","url":"\/documentation\/the-swift-programming-language\/controlflow#Early-Exit","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/basicoperators","role":"article","title":"Basic Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","abstract":[{"type":"text","text":"Perform operations like assignment, arithmetic, and comparison."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/collectiontypes","role":"article","title":"Collection Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"type":"topic","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"title":"Control Flow","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","url":"\/documentation\/the-swift-programming-language\/controlflow","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Type-Safety-and-Type-Inference":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference","url":"\/documentation\/the-swift-programming-language\/thebasics#Type-Safety-and-Type-Inference","title":"Type Safety and Type Inference","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","abstract":[],"type":"topic","kind":"section","title":"Constant Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/the-swift-programming-language\/errorhandling","kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Respond to and recover from errors."}]},"https://developer.apple.com/documentation/swift/1541112-assert":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","title":"assert(_:_:file:line:)","titleInlineContent":[{"type":"codeVoice","code":"assert(_:_:file:line:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Assertions-and-Preconditions":{"url":"\/documentation\/the-swift-programming-language\/thebasics#Assertions-and-Preconditions","abstract":[],"kind":"section","title":"Assertions and Preconditions","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions"},"https://developer.apple.com/documentation/swift/1539616-assertionfailure":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","title":"assertionFailure(_:file:line:)","titleInlineContent":[{"type":"codeVoice","code":"assertionFailure(_:file:line:)"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"title":"Functions with Multiple Return Values","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"title":"Optionals","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals"},"https://developer.apple.com/documentation/swift/1539374-preconditionfailure":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","title":"preconditionFailure(_:file:line:)","titleInlineContent":[{"type":"codeVoice","code":"preconditionFailure(_:file:line:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"title":"Structures and Classes","url":"\/documentation\/the-swift-programming-language\/classesandstructures","kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","type":"topic","abstract":[{"type":"text","text":"Model custom types that encapsulate data."}]},"https://developer.apple.com/documentation/swift/1540960-precondition":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","url":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","title":"precondition(_:_:file:line:)","titleInlineContent":[{"type":"codeVoice","code":"precondition(_:_:file:line:)"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Interpolation":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Interpolation","abstract":[],"type":"topic","kind":"section","title":"String Interpolation"}}}