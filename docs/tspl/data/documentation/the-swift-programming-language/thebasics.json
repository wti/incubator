{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","interfaceLanguage":"swift"},"kind":"article","metadata":{"title":"The Basics"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Work with common kinds of data and write basic syntax."}],"sections":[],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift provides many fundamental data types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integers,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" for floating-point values,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bool"},{"text":" for Boolean values,","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" for text."},{"type":"text","text":" "},{"type":"text","text":"Swift also provides powerful versions of the three primary collection types,"},{"type":"text","text":" "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Set"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses variables to store and refer to values by an identifying name."},{"text":" ","type":"text"},{"text":"Swift also makes extensive use of variables whose values can’t be changed.","type":"text"},{"type":"text","text":" "},{"text":"These are known as constants, and are used throughout Swift to make code safer and clearer in intent","type":"text"},{"type":"text","text":" "},{"text":"when you work with values that don’t need to change.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to familiar types,"},{"type":"text","text":" "},{"type":"text","text":"Swift introduces advanced types such as tuples."},{"text":" ","type":"text"},{"text":"Tuples enable you to create and pass around groupings of values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use a tuple to return multiple values from a function as a single compound value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also introduces optional types,"},{"type":"text","text":" "},{"type":"text","text":"which handle the absence of a value."},{"text":" ","type":"text"},{"type":"text","text":"Optionals say either “there "},{"inlineContent":[{"text":"is","type":"text"}],"type":"emphasis"},{"text":" a value, and it equals ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"”"},{"type":"text","text":" "},{"type":"text","text":"or “there "},{"inlineContent":[{"type":"text","text":"isn’t"}],"type":"emphasis"},{"text":" a value at all”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-safe"}]},{"type":"text","text":" language,"},{"text":" ","type":"text"},{"text":"which means the language helps you to be clear about the types of values your code can work with.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If part of your code requires a "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"type safety prevents you from passing it an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" by mistake."},{"type":"text","text":" "},{"type":"text","text":"Likewise, type safety prevents you from"},{"type":"text","text":" "},{"text":"accidentally passing an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"to a piece of code that requires a non-optional "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Type safety helps you catch and fix errors as early as possible in the development process.","type":"text"}]},{"text":"Constants and Variables","level":2,"anchor":"Constants-and-Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables associate a name"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"code":"maximumNumberOfLoginAttempts","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"with a value of a particular type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as the number "},{"code":"10","type":"codeVoice"},{"type":"text","text":" or the string "},{"type":"codeVoice","code":"\"Hello\""},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"The value of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constant"}]},{"text":" can’t be changed once it’s set,","type":"text"},{"text":" ","type":"text"},{"text":"whereas a ","type":"text"},{"inlineContent":[{"type":"text","text":"variable"}],"type":"emphasis"},{"text":" can be set to a different value in the future.","type":"text"}]},{"text":"Declaring Constants and Variables","level":3,"anchor":"Declaring-Constants-and-Variables","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Constants and variables must be declared before they’re used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You declare constants with the "},{"type":"codeVoice","code":"let"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and variables with the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example of how constants and variables can be used"},{"text":" ","type":"text"},{"text":"to track the number of login attempts a user has made:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let maximumNumberOfLoginAttempts = 10","var currentLoginAttempt = 0"]},{"type":"paragraph","inlineContent":[{"text":"This code can be read as:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Declare a new constant called "},{"type":"codeVoice","code":"maximumNumberOfLoginAttempts"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and give it a value of ","type":"text"},{"type":"codeVoice","code":"10"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Then, declare a new variable called "},{"type":"codeVoice","code":"currentLoginAttempt"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and give it an initial value of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".”","type":"text"}]},{"inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"text":"the maximum number of allowed login attempts is declared as a constant,","type":"text"},{"type":"text","text":" "},{"text":"because the maximum value never changes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The current login attempt counter is declared as a variable,"},{"type":"text","text":" "},{"type":"text","text":"because this value must be incremented after each failed login attempt."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a stored value in your code won’t change,"},{"type":"text","text":" "},{"text":"always declare it as a constant with the ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"Use variables only for storing values that change.","type":"text"}]},{"inlineContent":[{"text":"When you declare a constant or a variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can give it a value as part of that declaration,"},{"text":" ","type":"text"},{"text":"like the examples above.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Alternatively,"},{"type":"text","text":" "},{"type":"text","text":"you can assign its initial value later in the program,"},{"type":"text","text":" "},{"type":"text","text":"as long as it’s guaranteed to have a value"},{"type":"text","text":" "},{"text":"before the first time you read from it.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var environment = \"development\"","let maximumNumberOfLoginAttempts: Int","\/\/ maximumNumberOfLoginAttempts has no value yet.","","if environment == \"development\" {","    maximumNumberOfLoginAttempts = 100","} else {","    maximumNumberOfLoginAttempts = 10","}","\/\/ Now maximumNumberOfLoginAttempts has a value, and can be read."]},{"inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the maximum number of login attempts is constant,"},{"type":"text","text":" "},{"type":"text","text":"and its value depends on the environment."},{"text":" ","type":"text"},{"text":"In the development environment,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it has a value of 100;"},{"text":" ","type":"text"},{"text":"in any other environment, its value is 10.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both branches of the "},{"type":"codeVoice","code":"if"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"text":"initialize ","type":"text"},{"type":"codeVoice","code":"maximumNumberOfLoginAttempts"},{"type":"text","text":" with some value,"},{"type":"text","text":" "},{"text":"guaranteeing that the constant always gets a value.","type":"text"},{"type":"text","text":" "},{"text":"For information about how Swift checks your code","type":"text"},{"type":"text","text":" "},{"text":"when you set an initial value this way,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can declare multiple constants or multiple variables on a single line,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by commas:"}],"type":"paragraph"},{"type":"codeListing","code":["var x = 0.0, y = 0.0, z = 0.0"],"syntax":"swift"},{"text":"Type Annotations","type":"heading","anchor":"Type-Annotations","level":3},{"inlineContent":[{"type":"text","text":"You can provide a "},{"inlineContent":[{"type":"text","text":"type annotation"}],"type":"emphasis"},{"text":" when you declare a constant or variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to be clear about the kind of values the constant or variable can store."},{"text":" ","type":"text"},{"type":"text","text":"Write a type annotation by placing a colon after the constant or variable name,"},{"type":"text","text":" "},{"type":"text","text":"followed by a space, followed by the name of the type to use."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example provides a type annotation for a variable called "},{"code":"welcomeMessage","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"to indicate that the variable can store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"syntax":"swift","code":["var welcomeMessage: String"],"type":"codeListing"},{"inlineContent":[{"text":"The colon in the declaration means “…of type…,”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so the code above can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"“Declare a variable called ","type":"text"},{"code":"welcomeMessage","type":"codeVoice"},{"type":"text","text":" that’s of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":".”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The phrase “of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"” means “can store any "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value.”"},{"text":" ","type":"text"},{"text":"Think of it as meaning “the type of thing” (or “the kind of thing”) that can be stored.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"welcomeMessage"},{"text":" variable can now be set to any string value without error:","type":"text"}]},{"type":"codeListing","code":["welcomeMessage = \"Hello\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define multiple related variables of the same type on a single line,"},{"type":"text","text":" "},{"text":"separated by commas, with a single type annotation after the final variable name:","type":"text"}]},{"code":["var red, green, blue: Double"],"type":"codeListing","syntax":"swift"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"It’s rare that you need to write type annotations in practice.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you provide an initial value for a constant or variable at the point that it’s defined,"},{"text":" ","type":"text"},{"text":"Swift can almost always infer the type to be used for that constant or variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference","isActive":true,"type":"reference"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"In the ","type":"text"},{"code":"welcomeMessage","type":"codeVoice"},{"type":"text","text":" example above, no initial value is provided,"},{"type":"text","text":" "},{"text":"and so the type of the ","type":"text"},{"type":"codeVoice","code":"welcomeMessage"},{"type":"text","text":" variable is specified with a type annotation"},{"type":"text","text":" "},{"text":"rather than being inferred from an initial value.","type":"text"}]}],"type":"aside","name":"Note"},{"type":"heading","text":"Naming Constants and Variables","anchor":"Naming-Constants-and-Variables","level":3},{"inlineContent":[{"type":"text","text":"Constant and variable names can contain almost any character,"},{"text":" ","type":"text"},{"type":"text","text":"including Unicode characters:"}],"type":"paragraph"},{"code":["let π = 3.14159","let 你好 = \"你好世界\"","let 🐶🐮 = \"dogcow\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Constant and variable names can’t contain"},{"text":" ","type":"text"},{"text":"whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values,","type":"text"},{"text":" ","type":"text"},{"text":"or line- and box-drawing characters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Nor can they begin with a number,"},{"text":" ","type":"text"},{"type":"text","text":"although numbers may be included elsewhere within the name."}],"type":"paragraph"},{"inlineContent":[{"text":"Once you’ve declared a constant or variable of a certain type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can’t declare it again with the same name,"},{"text":" ","type":"text"},{"text":"or change it to store values of a different type.","type":"text"},{"text":" ","type":"text"},{"text":"Nor can you change a constant into a variable","type":"text"},{"text":" ","type":"text"},{"text":"or a variable into a constant.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"If you need to give a constant or variable the same name as a reserved Swift keyword,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"surround the keyword with backticks ("},{"type":"codeVoice","code":"`"},{"text":") when using it as a name.","type":"text"},{"text":" ","type":"text"},{"text":"However, avoid using keywords as names unless you have absolutely no choice.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"text":"You can change the value of an existing variable to another value of a compatible type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this example, the value of "},{"code":"friendlyWelcome","type":"codeVoice"},{"text":" is changed from","type":"text"},{"type":"text","text":" "},{"code":"\"Hello!\"","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"\"Bonjour!\""},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var friendlyWelcome = \"Hello!\"","friendlyWelcome = \"Bonjour!\"","\/\/ friendlyWelcome is now \"Bonjour!\""]},{"type":"paragraph","inlineContent":[{"text":"Unlike a variable, the value of a constant can’t be changed after it’s set.","type":"text"},{"text":" ","type":"text"},{"text":"Attempting to do so is reported as an error when your code is compiled:","type":"text"}]},{"code":["let languageName = \"Swift\"","languageName = \"Swift++\"","\/\/ This is a compile-time error: languageName cannot be changed."],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Printing-Constants-and-Variables","type":"heading","text":"Printing Constants and Variables"},{"inlineContent":[{"type":"text","text":"You can print the current value of a constant or variable with the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(friendlyWelcome)","\/\/ Prints \"Bonjour!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"is a global function that prints one or more values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate output."},{"text":" ","type":"text"},{"text":"In Xcode, for example,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function prints its output in Xcode’s “console” pane."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" and "},{"type":"codeVoice","code":"terminator"},{"text":" parameter have default values,","type":"text"},{"type":"text","text":" "},{"text":"so you can omit them when you call this function.","type":"text"},{"type":"text","text":" "},{"text":"By default, the function terminates the line it prints by adding a line break.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To print a value without a line break after it,"},{"text":" ","type":"text"},{"type":"text","text":"pass an empty string as the terminator — for example,"},{"type":"text","text":" "},{"code":"print(someValue, terminator: \"\")","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For information about parameters with default values,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"string interpolation","type":"text"}]},{"type":"text","text":" to include the name of a constant or variable"},{"type":"text","text":" "},{"type":"text","text":"as a placeholder in a longer string,"},{"text":" ","type":"text"},{"text":"and to prompt Swift to replace it with the current value of that constant or variable.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:"}]},{"type":"codeListing","code":["print(\"The current value of friendlyWelcome is \\(friendlyWelcome)\")","\/\/ Prints \"The current value of friendlyWelcome is Bonjour!\""],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"All options you can use with string interpolation"},{"type":"text","text":" "},{"type":"text","text":"are described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"level":2,"type":"heading","anchor":"Comments","text":"Comments"},{"inlineContent":[{"text":"Use comments to include nonexecutable text in your code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a note or reminder to yourself."},{"type":"text","text":" "},{"type":"text","text":"Comments are ignored by the Swift compiler when your code is compiled."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comments in Swift are very similar to comments in C."},{"text":" ","type":"text"},{"text":"Single-line comments begin with two forward-slashes (","type":"text"},{"code":"\/\/","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"codeListing","code":["\/\/ This is a comment."],"syntax":"swift"},{"inlineContent":[{"text":"Multiline comments start with a forward-slash followed by an asterisk (","type":"text"},{"type":"codeVoice","code":"\/*"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and end with an asterisk followed by a forward-slash ("},{"type":"codeVoice","code":"*\/"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","code":["\/* This is also a comment","but is written over multiple lines. *\/"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Unlike multiline comments in C,"},{"type":"text","text":" "},{"text":"multiline comments in Swift can be nested inside other multiline comments.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write nested comments by starting a multiline comment block"},{"type":"text","text":" "},{"text":"and then starting a second multiline comment within the first block.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second block is then closed, followed by the first block:"}],"type":"paragraph"},{"type":"codeListing","code":["\/* This is the start of the first multiline comment.","    \/* This is the second, nested multiline comment. *\/","This is the end of the first multiline comment. *\/"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested multiline comments enable you to comment out large blocks of code quickly and easily,"},{"text":" ","type":"text"},{"type":"text","text":"even if the code already contains multiline comments."}]},{"anchor":"Semicolons","text":"Semicolons","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Unlike many other languages,"},{"text":" ","type":"text"},{"type":"text","text":"Swift doesn’t require you to write a semicolon ("},{"type":"codeVoice","code":";"},{"text":") after each statement in your code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"although you can do so if you wish."},{"type":"text","text":" "},{"type":"text","text":"However, semicolons "},{"type":"emphasis","inlineContent":[{"text":"are","type":"text"}]},{"text":" required","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you want to write multiple separate statements on a single line:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let cat = \"🐱\"; print(cat)","\/\/ Prints \"🐱\""]},{"type":"heading","text":"Integers","anchor":"Integers","level":2},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Integers"}],"type":"emphasis"},{"type":"text","text":" are whole numbers with no fractional component,"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"code":"42","type":"codeVoice"},{"type":"text","text":" and "},{"code":"-23","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Integers are either ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"signed"}]},{"text":" (positive, zero, or negative)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"inlineContent":[{"text":"unsigned","type":"text"}],"type":"emphasis"},{"text":" (positive or zero).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These integers follow a naming convention similar to C,"},{"type":"text","text":" "},{"text":"in that an 8-bit unsigned integer is of type ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and a 32-bit signed integer is of type "},{"type":"codeVoice","code":"Int32"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Like all types in Swift, these integer types have capitalized names."}],"type":"paragraph"},{"level":3,"text":"Integer Bounds","type":"heading","anchor":"Integer-Bounds"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access the minimum and maximum values of each integer type"},{"type":"text","text":" "},{"text":"with its ","type":"text"},{"type":"codeVoice","code":"min"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"max"},{"type":"text","text":" properties:"}]},{"syntax":"swift","type":"codeListing","code":["let minValue = UInt8.min  \/\/ minValue is equal to 0, and is of type UInt8","let maxValue = UInt8.max  \/\/ maxValue is equal to 255, and is of type UInt8"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of these properties are of the appropriate-sized number type"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"UInt8"},{"text":" in the example above)","type":"text"},{"type":"text","text":" "},{"text":"and can therefore be used in expressions alongside other values of the same type.","type":"text"}]},{"level":3,"type":"heading","text":"Int","anchor":"Int"},{"inlineContent":[{"type":"text","text":"In most cases, you don’t need to pick a specific size of integer to use in your code."},{"type":"text","text":" "},{"type":"text","text":"Swift provides an additional integer type, "},{"code":"Int","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which has the same size as the current platform’s native word size:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"On a 32-bit platform, "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" is the same size as "},{"code":"Int32","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"On a 64-bit platform, ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" is the same size as ","type":"text"},{"code":"Int64","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"text":"Unless you need to work with a specific size of integer,","type":"text"},{"type":"text","text":" "},{"text":"always use ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" for integer values in your code."},{"text":" ","type":"text"},{"type":"text","text":"This aids code consistency and interoperability."},{"type":"text","text":" "},{"type":"text","text":"Even on 32-bit platforms, "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" can store any value between "},{"type":"codeVoice","code":"-2,147,483,648"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2,147,483,647"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and is large enough for many integer ranges."}],"type":"paragraph"},{"anchor":"UInt","level":3,"text":"UInt","type":"heading"},{"inlineContent":[{"type":"text","text":"Swift also provides an unsigned integer type, "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which has the same size as the current platform’s native word size:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a 32-bit platform, "},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"On a 64-bit platform, ","type":"text"},{"type":"codeVoice","code":"UInt"},{"text":" is the same size as ","type":"text"},{"type":"codeVoice","code":"UInt64"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"UInt"},{"text":" only when you specifically need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an unsigned integer type with the same size as the platform’s native word size."},{"type":"text","text":" "},{"text":"If this isn’t the case, ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" is preferred,"},{"type":"text","text":" "},{"type":"text","text":"even when the values to be stored are known to be nonnegative."},{"type":"text","text":" "},{"text":"A consistent use of ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" for integer values aids code interoperability,","type":"text"},{"type":"text","text":" "},{"text":"avoids the need to convert between different number types,","type":"text"},{"text":" ","type":"text"},{"text":"and matches integer type inference, as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference"},{"text":".","type":"text"}]}]},{"type":"heading","text":"Floating-Point Numbers","level":2,"anchor":"Floating-Point-Numbers"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Floating-point numbers"}],"type":"emphasis"},{"type":"text","text":" are numbers with a fractional component,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"3.14159"},{"text":", ","type":"text"},{"code":"0.1","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"-273.15"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point types can represent a much wider range of values than integer types,"},{"type":"text","text":" "},{"type":"text","text":"and can store numbers that are much larger or smaller than can be stored in an "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift provides two signed floating-point number types:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"Double","type":"codeVoice"},{"type":"text","text":" represents a 64-bit floating-point number."}]}]},{"content":[{"inlineContent":[{"code":"Float","type":"codeVoice"},{"type":"text","text":" represents a 32-bit floating-point number."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Double"},{"text":" has a precision of at least 15 decimal digits,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whereas the precision of "},{"code":"Float","type":"codeVoice"},{"type":"text","text":" can be as little as 6 decimal digits."},{"type":"text","text":" "},{"text":"The appropriate floating-point type to use depends on the nature and range of","type":"text"},{"text":" ","type":"text"},{"text":"values you need to work with in your code.","type":"text"},{"type":"text","text":" "},{"text":"In situations where either type would be appropriate, ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" is preferred.","type":"text"}]}],"name":"Note"},{"type":"heading","anchor":"Type-Safety-and-Type-Inference","level":2,"text":"Type Safety and Type Inference"},{"type":"paragraph","inlineContent":[{"text":"Swift is a ","type":"text"},{"inlineContent":[{"type":"text","text":"type-safe"}],"type":"emphasis"},{"type":"text","text":" language."},{"type":"text","text":" "},{"text":"A type safe language encourages you to be clear about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the types of values your code can work with."},{"type":"text","text":" "},{"text":"If part of your code requires a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", you can’t pass it an ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" by mistake."}]},{"inlineContent":[{"type":"text","text":"Because Swift is type safe,"},{"text":" ","type":"text"},{"type":"text","text":"it performs "},{"inlineContent":[{"type":"text","text":"type checks"}],"type":"emphasis"},{"type":"text","text":" when compiling your code"},{"type":"text","text":" "},{"type":"text","text":"and flags any mismatched types as errors."},{"text":" ","type":"text"},{"type":"text","text":"This enables you to catch and fix errors as early as possible in the development process."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type-checking helps you avoid errors when you’re working with different types of values."},{"type":"text","text":" "},{"text":"However, this doesn’t mean that you have to specify the type of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"every constant and variable that you declare."},{"type":"text","text":" "},{"type":"text","text":"If you don’t specify the type of value you need,"},{"type":"text","text":" "},{"text":"Swift uses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type inference"}]},{"text":" to work out the appropriate type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Type inference enables a compiler to"},{"type":"text","text":" "},{"text":"deduce the type of a particular expression automatically when it compiles your code,","type":"text"},{"type":"text","text":" "},{"text":"simply by examining the values you provide.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because of type inference, Swift requires far fewer type declarations"},{"text":" ","type":"text"},{"text":"than languages such as C or Objective-C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Constants and variables are still explicitly typed,"},{"text":" ","type":"text"},{"text":"but much of the work of specifying their type is done for you.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type inference is particularly useful"},{"type":"text","text":" "},{"type":"text","text":"when you declare a constant or variable with an initial value."},{"type":"text","text":" "},{"type":"text","text":"This is often done by assigning a "},{"type":"emphasis","inlineContent":[{"text":"literal value","type":"text"}]},{"type":"text","text":" (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to the constant or variable at the point that you declare it."},{"text":" ","type":"text"},{"text":"(A literal value is a value that appears directly in your source code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"42","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"3.14159"},{"type":"text","text":" in the examples below.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you assign a literal value of "},{"type":"codeVoice","code":"42"},{"text":" to a new constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without saying what type it is,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that you want the constant to be an "},{"code":"Int","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"because you have initialized it with a number that looks like an integer:","type":"text"}]},{"code":["let meaningOfLife = 42","\/\/ meaningOfLife is inferred to be of type Int"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, if you don’t specify a type for a floating-point literal,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that you want to create a "},{"code":"Double","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let pi = 3.14159","\/\/ pi is inferred to be of type Double"]},{"inlineContent":[{"type":"text","text":"Swift always chooses "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" (rather than "},{"type":"codeVoice","code":"Float"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"when inferring the type of floating-point numbers."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you combine integer and floating-point literals in an expression,"},{"type":"text","text":" "},{"text":"a type of ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" will be inferred from the context:"}],"type":"paragraph"},{"type":"codeListing","code":["let anotherPi = 3 + 0.14159","\/\/ anotherPi is also inferred to be of type Double"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The literal value of ","type":"text"},{"type":"codeVoice","code":"3"},{"type":"text","text":" has no explicit type in and of itself,"},{"text":" ","type":"text"},{"type":"text","text":"and so an appropriate output type of "},{"type":"codeVoice","code":"Double"},{"text":" is inferred","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the presence of a floating-point literal as part of the addition."}]},{"anchor":"Numeric-Literals","level":2,"text":"Numeric Literals","type":"heading"},{"inlineContent":[{"type":"text","text":"Integer literals can be written as:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal"}]},{"type":"text","text":" number, with no prefix"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"binary"}]},{"text":" number, with a ","type":"text"},{"type":"codeVoice","code":"0b"},{"text":" prefix","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"octal","type":"text"}]},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0o"},{"text":" prefix","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"hexadecimal"}],"type":"emphasis"},{"type":"text","text":" number, with a "},{"type":"codeVoice","code":"0x"},{"text":" prefix","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these integer literals have a decimal value of "},{"type":"codeVoice","code":"17"},{"text":":","type":"text"}]},{"syntax":"swift","code":["let decimalInteger = 17","let binaryInteger = 0b10001       \/\/ 17 in binary notation","let octalInteger = 0o21           \/\/ 17 in octal notation","let hexadecimalInteger = 0x11     \/\/ 17 in hexadecimal notation"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point literals can be decimal (with no prefix),"},{"type":"text","text":" "},{"type":"text","text":"or hexadecimal (with a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix)."},{"type":"text","text":" "},{"type":"text","text":"They must always have a number (or hexadecimal number) on both sides of the decimal point."},{"text":" ","type":"text"},{"type":"text","text":"Decimal floats can also have an optional "},{"inlineContent":[{"type":"text","text":"exponent"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"indicated by an uppercase or lowercase "},{"type":"codeVoice","code":"e"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"hexadecimal floats must have an exponent,"},{"text":" ","type":"text"},{"type":"text","text":"indicated by an uppercase or lowercase "},{"type":"codeVoice","code":"p"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For decimal numbers with an exponent of "},{"type":"codeVoice","code":"x"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the base number is multiplied by 10ˣ:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"1.25e2","type":"codeVoice"},{"text":" means 1.25 x 10², or ","type":"text"},{"code":"125.0","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"1.25e-2","type":"codeVoice"},{"text":" means 1.25 x 10⁻², or ","type":"text"},{"type":"codeVoice","code":"0.0125"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"text":"For hexadecimal numbers with an exponent of ","type":"text"},{"code":"x","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the base number is multiplied by 2ˣ:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"0xFp2","type":"codeVoice"},{"text":" means 15 x 2², or ","type":"text"},{"code":"60.0","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"0xFp-2"},{"type":"text","text":" means 15 x 2⁻², or "},{"type":"codeVoice","code":"3.75"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"All of these floating-point literals have a decimal value of "},{"code":"12.1875","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let decimalDouble = 12.1875","let exponentDouble = 1.21875e1","let hexadecimalDouble = 0xC.3p0"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Numeric literals can contain extra formatting to make them easier to read."},{"text":" ","type":"text"},{"type":"text","text":"Both integers and floats can be padded with extra zeros"},{"type":"text","text":" "},{"type":"text","text":"and can contain underscores to help with readability."},{"text":" ","type":"text"},{"type":"text","text":"Neither type of formatting affects the underlying value of the literal:"}]},{"syntax":"swift","code":["let paddedDouble = 000123.456","let oneMillion = 1_000_000","let justOverOneMillion = 1_000_000.000_000_1"],"type":"codeListing"},{"level":2,"type":"heading","anchor":"Numeric-Type-Conversion","text":"Numeric Type Conversion"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" type for all general-purpose integer constants and variables in your code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even if they’re known to be nonnegative."},{"type":"text","text":" "},{"text":"Using the default integer type in everyday situations means that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integer constants and variables are immediately interoperable in your code"},{"text":" ","type":"text"},{"type":"text","text":"and will match the inferred type for integer literal values."}],"type":"paragraph"},{"inlineContent":[{"text":"Use other integer types only when they’re specifically needed for the task at hand,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because of explicitly sized data from an external source,"},{"text":" ","type":"text"},{"type":"text","text":"or for performance, memory usage, or other necessary optimization."},{"type":"text","text":" "},{"text":"Using explicitly sized types in these situations","type":"text"},{"type":"text","text":" "},{"text":"helps to catch any accidental value overflows","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and implicitly documents the nature of the data being used."}],"type":"paragraph"},{"text":"Integer Conversion","level":3,"type":"heading","anchor":"Integer-Conversion"},{"inlineContent":[{"type":"text","text":"The range of numbers that can be stored in an integer constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"is different for each numeric type."},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"Int8","type":"codeVoice"},{"text":" constant or variable can store numbers between ","type":"text"},{"type":"codeVoice","code":"-128"},{"text":" and ","type":"text"},{"code":"127","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whereas a ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" constant or variable can store numbers between "},{"code":"0","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"255"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A number that won’t fit into a constant or variable of a sized integer type"},{"type":"text","text":" "},{"type":"text","text":"is reported as an error when your code is compiled:"}],"type":"paragraph"},{"type":"codeListing","code":["let cannotBeNegative: UInt8 = -1","\/\/ UInt8 can't store negative numbers, and so this will report an error","let tooBig: Int8 = Int8.max + 1","\/\/ Int8 can't store a number larger than its maximum value,","\/\/ and so this will also report an error"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because each numeric type can store a different range of values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you must opt in to numeric type conversion on a case-by-case basis."},{"text":" ","type":"text"},{"type":"text","text":"This opt-in approach prevents hidden conversion errors"},{"type":"text","text":" "},{"text":"and helps make type conversion intentions explicit in your code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert one specific number type to another,"},{"text":" ","type":"text"},{"text":"you initialize a new number of the desired type with the existing value.","type":"text"},{"text":" ","type":"text"},{"text":"In the example below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the constant "},{"code":"twoThousand","type":"codeVoice"},{"text":" is of type ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whereas the constant ","type":"text"},{"type":"codeVoice","code":"one"},{"type":"text","text":" is of type "},{"code":"UInt8","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They can’t be added together directly,"},{"text":" ","type":"text"},{"type":"text","text":"because they’re not of the same type."},{"type":"text","text":" "},{"text":"Instead, this example calls ","type":"text"},{"type":"codeVoice","code":"UInt16(one)"},{"type":"text","text":" to create"},{"text":" ","type":"text"},{"text":"a new ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" initialized with the value of "},{"code":"one","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and uses this value in place of the original:"}]},{"type":"codeListing","syntax":"swift","code":["let twoThousand: UInt16 = 2_000","let one: UInt8 = 1","let twoThousandAndOne = twoThousand + UInt16(one)"]},{"inlineContent":[{"text":"Because both sides of the addition are now of type ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the addition is allowed."},{"type":"text","text":" "},{"text":"The output constant (","type":"text"},{"type":"codeVoice","code":"twoThousandAndOne"},{"type":"text","text":") is inferred to be of type "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because it’s the sum of two "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"SomeType(ofInitialValue)","type":"codeVoice"},{"type":"text","text":" is the default way to call the initializer of a Swift type"},{"type":"text","text":" "},{"text":"and pass in an initial value.","type":"text"},{"type":"text","text":" "},{"text":"Behind the scenes, ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" has an initializer that accepts a "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"and so this initializer is used to make a new ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"text":" from an existing ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can’t pass in ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" type here, however —","type":"text"},{"text":" ","type":"text"},{"text":"it has to be a type for which ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" provides an initializer."},{"type":"text","text":" "},{"type":"text","text":"Extending existing types to provide initializers that accept new types"},{"type":"text","text":" "},{"type":"text","text":"(including your own type definitions)"},{"type":"text","text":" "},{"text":"is covered in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference"},{"type":"text","text":"."}]},{"level":3,"type":"heading","anchor":"Integer-and-Floating-Point-Conversion","text":"Integer and Floating-Point Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversions between integer and floating-point numeric types must be made explicit:"}]},{"code":["let three = 3","let pointOneFourOneFiveNine = 0.14159","let pi = Double(three) + pointOneFourOneFiveNine","\/\/ pi equals 3.14159, and is inferred to be of type Double"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Here, the value of the constant ","type":"text"},{"type":"codeVoice","code":"three"},{"type":"text","text":" is used to create a new value of type "},{"code":"Double","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"so that both sides of the addition are of the same type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Without this conversion in place, the addition would not be allowed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Floating-point to integer conversion must also be made explicit."},{"type":"text","text":" "},{"text":"An integer type can be initialized with a ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Float"},{"type":"text","text":" value:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let integerPi = Int(pi)","\/\/ integerPi equals 3, and is inferred to be of type Int"]},{"type":"paragraph","inlineContent":[{"text":"Floating-point values are always truncated when used to initialize a new integer value in this way.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This means that "},{"type":"codeVoice","code":"4.75"},{"type":"text","text":" becomes "},{"type":"codeVoice","code":"4"},{"text":", and ","type":"text"},{"code":"-3.9","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"-3","type":"codeVoice"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The rules for combining numeric constants and variables are different from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the rules for numeric literals."},{"type":"text","text":" "},{"text":"The literal value ","type":"text"},{"code":"3","type":"codeVoice"},{"text":" can be added directly to the literal value ","type":"text"},{"code":"0.14159","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"because number literals don’t have an explicit type in and of themselves.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Their type is inferred only at the point that they’re evaluated by the compiler."}]}],"name":"Note","style":"note","type":"aside"},{"text":"Type Aliases","anchor":"Type-Aliases","type":"heading","level":2},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Type aliases","type":"text"}]},{"type":"text","text":" define an alternative name for an existing type."},{"type":"text","text":" "},{"type":"text","text":"You define type aliases with the "},{"code":"typealias","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Type aliases are useful when you want to refer to an existing type"},{"type":"text","text":" "},{"type":"text","text":"by a name that’s contextually more appropriate,"},{"text":" ","type":"text"},{"type":"text","text":"such as when working with data of a specific size from an external source:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["typealias AudioSample = UInt16"]},{"inlineContent":[{"type":"text","text":"Once you define a type alias,"},{"text":" ","type":"text"},{"type":"text","text":"you can use the alias anywhere you might use the original name:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var maxAmplitudeFound = AudioSample.min","\/\/ maxAmplitudeFound is now 0"]},{"type":"paragraph","inlineContent":[{"text":"Here, ","type":"text"},{"code":"AudioSample","type":"codeVoice"},{"text":" is defined as an alias for ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because it’s an alias,"},{"type":"text","text":" "},{"type":"text","text":"the call to "},{"code":"AudioSample.min","type":"codeVoice"},{"type":"text","text":" actually calls "},{"code":"UInt16.min","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which provides an initial value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxAmplitudeFound"},{"type":"text","text":" variable."}]},{"type":"heading","text":"Booleans","anchor":"Booleans","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift has a basic "},{"inlineContent":[{"text":"Boolean","type":"text"}],"type":"emphasis"},{"text":" type, called ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Boolean values are referred to as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"because they can only ever be true or false.","type":"text"},{"type":"text","text":" "},{"text":"Swift provides two Boolean constant values,","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let orangesAreOrange = true","let turnipsAreDelicious = false"]},{"inlineContent":[{"text":"The types of ","type":"text"},{"code":"orangesAreOrange","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"turnipsAreDelicious","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"have been inferred as "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" from the fact that"},{"text":" ","type":"text"},{"text":"they were initialized with Boolean literal values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As with "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Double"},{"text":" above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you don’t need to declare constants or variables as "},{"type":"codeVoice","code":"Bool"},{"text":" ","type":"text"},{"text":"if you set them to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"text":" as soon as you create them.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Type inference helps make Swift code more concise and readable"},{"text":" ","type":"text"},{"text":"when it initializes constants or variables with other values whose type is already known.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Boolean values are particularly useful when you work with conditional statements","type":"text"},{"text":" ","type":"text"},{"text":"such as the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if turnipsAreDelicious {","    print(\"Mmm, tasty turnips!\")","} else {","    print(\"Eww, turnips are horrible.\")","}","\/\/ Prints \"Eww, turnips are horrible.\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Conditional statements such as the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement are covered in more detail in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift’s type safety prevents non-Boolean values from being substituted for "},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The following example reports a compile-time error:"}],"type":"paragraph"},{"code":["let i = 1","if i {","    \/\/ this example will not compile, and will report an error","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"However, the alternative example below is valid:","type":"text"}],"type":"paragraph"},{"code":["let i = 1","if i == 1 {","    \/\/ this example will compile successfully","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result of the "},{"code":"i == 1","type":"codeVoice"},{"type":"text","text":" comparison is of type "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and so this second example passes the type-check.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Comparisons like "},{"type":"codeVoice","code":"i == 1"},{"text":" are discussed in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"As with other examples of type safety in Swift,","type":"text"},{"text":" ","type":"text"},{"text":"this approach avoids accidental errors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and ensures that the intention of a particular section of code is always clear."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Tuples","anchor":"Tuples"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Tuples"}]},{"text":" group multiple values into a single compound value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The values within a tuple can be of any type"},{"text":" ","type":"text"},{"type":"text","text":"and don’t have to be of the same type as each other."}]},{"inlineContent":[{"type":"text","text":"In this example, "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"type":"text","text":" is a tuple that describes an "},{"type":"emphasis","inlineContent":[{"text":"HTTP status code","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An HTTP status code is a special value returned by a web server whenever you request a web page."},{"type":"text","text":" "},{"text":"A status code of ","type":"text"},{"code":"404 Not Found","type":"codeVoice"},{"type":"text","text":" is returned if you request a webpage that doesn’t exist."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let http404Error = (404, \"Not Found\")","\/\/ http404Error is of type (Int, String), and equals (404, \"Not Found\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"text":" tuple groups together an ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" "},{"text":"to give the HTTP status code two separate values:","type":"text"},{"type":"text","text":" "},{"text":"a number and a human-readable description.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It can be described as “a tuple of type "},{"code":"(Int, String)","type":"codeVoice"},{"type":"text","text":"”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create tuples from any permutation of types,"},{"text":" ","type":"text"},{"text":"and they can contain as many different types as you like.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There’s nothing stopping you from having"},{"type":"text","text":" "},{"text":"a tuple of type ","type":"text"},{"code":"(Int, Int, Int)","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"(String, Bool)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or indeed any other permutation you require."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can "},{"inlineContent":[{"type":"text","text":"decompose"}],"type":"emphasis"},{"type":"text","text":" a tuple’s contents into separate constants or variables,"},{"type":"text","text":" "},{"text":"which you then access as usual:","type":"text"}]},{"syntax":"swift","code":["let (statusCode, statusMessage) = http404Error","print(\"The status code is \\(statusCode)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(statusMessage)\")","\/\/ Prints \"The status message is Not Found\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only need some of the tuple’s values,"},{"type":"text","text":" "},{"text":"ignore parts of the tuple with an underscore (","type":"text"},{"type":"codeVoice","code":"_"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"when you decompose the tuple:"}]},{"syntax":"swift","code":["let (justTheStatusCode, _) = http404Error","print(\"The status code is \\(justTheStatusCode)\")","\/\/ Prints \"The status code is 404\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Alternatively,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"access the individual element values in a tuple using index numbers starting at zero:"}]},{"syntax":"swift","type":"codeListing","code":["print(\"The status code is \\(http404Error.0)\")","\/\/ Prints \"The status code is 404\"","print(\"The status message is \\(http404Error.1)\")","\/\/ Prints \"The status message is Not Found\""]},{"inlineContent":[{"type":"text","text":"You can name the individual elements in a tuple when the tuple is defined:"}],"type":"paragraph"},{"code":["let http200Status = (statusCode: 200, description: \"OK\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you name the elements in a tuple,"},{"text":" ","type":"text"},{"text":"you can use the element names to access the values of those elements:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["print(\"The status code is \\(http200Status.statusCode)\")","\/\/ Prints \"The status code is 200\"","print(\"The status message is \\(http200Status.description)\")","\/\/ Prints \"The status message is OK\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Tuples are particularly useful as the return values of functions.","type":"text"},{"text":" ","type":"text"},{"text":"A function that tries to retrieve a web page might return the ","type":"text"},{"type":"codeVoice","code":"(Int, String)"},{"text":" tuple type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to describe the success or failure of the page retrieval."},{"type":"text","text":" "},{"text":"By returning a tuple with two distinct values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each of a different type,"},{"text":" ","type":"text"},{"type":"text","text":"the function provides more useful information about its outcome"},{"text":" ","type":"text"},{"type":"text","text":"than if it could only return a single value of a single type."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","isActive":true},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"text":"Tuples are useful for simple groups of related values.","type":"text"},{"text":" ","type":"text"},{"text":"They’re not suited to the creation of complex data structures.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If your data structure is likely to be more complex,"},{"text":" ","type":"text"},{"type":"text","text":"model it as a class or structure, rather than as a tuple."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"heading","anchor":"Optionals","text":"Optionals","level":2},{"inlineContent":[{"type":"text","text":"You use "},{"inlineContent":[{"type":"text","text":"optionals"}],"type":"emphasis"},{"text":" in situations where a value may be absent.","type":"text"},{"type":"text","text":" "},{"text":"An optional represents two possibilities:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Either there "},{"inlineContent":[{"type":"text","text":"is"}],"type":"emphasis"},{"type":"text","text":" a value of a specified type,"},{"text":" ","type":"text"},{"type":"text","text":"and you can unwrap the optional to access that value,"},{"text":" ","type":"text"},{"type":"text","text":"or there "},{"type":"emphasis","inlineContent":[{"text":"isn’t","type":"text"}]},{"text":" a value at all.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example of a value that might be missing,"},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"code":"Int","type":"codeVoice"},{"text":" type has an initializer","type":"text"},{"type":"text","text":" "},{"text":"that tries to convert a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Int"},{"text":" value.","type":"text"},{"text":" ","type":"text"},{"text":"However, only some strings can be converted into integers.","type":"text"},{"type":"text","text":" "},{"text":"The string ","type":"text"},{"code":"\"123\"","type":"codeVoice"},{"text":" can be converted into the numeric value ","type":"text"},{"code":"123","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"but the string ","type":"text"},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" doesn’t have a corresponding numeric value."},{"type":"text","text":" "},{"type":"text","text":"The example below uses the initializer to try to convert a "},{"type":"codeVoice","code":"String"},{"text":" into an ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","\/\/ The type of convertedNumber is \"optional Int\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the initializer in the code above might fail,"},{"text":" ","type":"text"},{"type":"text","text":"it returns an "},{"type":"emphasis","inlineContent":[{"text":"optional","type":"text"}]},{"text":" ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":", rather than an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"To write an optional type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you write a question mark ("},{"type":"codeVoice","code":"?"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after the name of the type that the optional contains —"},{"text":" ","type":"text"},{"text":"for example, the type of an optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Int?"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"An optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" always contains","type":"text"},{"text":" ","type":"text"},{"text":"either some ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value or no value at all."},{"type":"text","text":" "},{"text":"It can’t contain anything else, like a ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"text":"nil","anchor":"nil","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You set an optional variable to a valueless state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by assigning it the special value "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"syntax":"swift","code":["var serverResponseCode: Int? = 404","\/\/ serverResponseCode contains an actual Int value of 404","serverResponseCode = nil","\/\/ serverResponseCode now contains no value"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an optional variable without providing a default value,"},{"type":"text","text":" "},{"type":"text","text":"the variable is automatically set to "},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}]},{"code":["var surveyAnswer: String?","\/\/ surveyAnswer is automatically set to nil"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use an "},{"type":"codeVoice","code":"if"},{"text":" statement to find out whether an optional contains a value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by comparing the optional against "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You perform this comparison with the “equal to” operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"or the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If an optional has a value, it’s considered as “not equal to” ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","","if convertedNumber != nil {","    print(\"convertedNumber contains some integer value.\")","}","\/\/ Prints \"convertedNumber contains some integer value.\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can’t use "},{"code":"nil","type":"codeVoice"},{"text":" with non-optional constants or variables.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If a constant or variable in your code needs to work with"},{"type":"text","text":" "},{"text":"the absence of a value under certain conditions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declare it as an optional value of the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"A constant or variable that’s declared as a non-optional value"},{"text":" ","type":"text"},{"type":"text","text":"is guaranteed to never contain a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"text":"If you try to assign ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to a non-optional value,","type":"text"},{"type":"text","text":" "},{"text":"you’ll get a compile-time error.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This separation of optional and non-optional values"},{"type":"text","text":" "},{"text":"lets you explicitly mark what information can be missing,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and makes it easier to write code that handle missing values."},{"text":" ","type":"text"},{"text":"You can’t accidentally treat an optional as if it were non-optional","type":"text"},{"text":" ","type":"text"},{"text":"because this mistake produces an error at compile time.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"After you unwrap the value,"},{"text":" ","type":"text"},{"text":"none of the other code that works with that value needs to check for ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so there’s no need to repeatedly check the same value"},{"text":" ","type":"text"},{"text":"in different parts of your code.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When you access an optional value,"},{"text":" ","type":"text"},{"type":"text","text":"your code always handles both the "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" case."},{"text":" ","type":"text"},{"type":"text","text":"There are several things you can do when a value is missing,"},{"type":"text","text":" "},{"type":"text","text":"as described in the following sections:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Skip the code that operates on the value when it’s ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Propagate the ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"text":"by returning ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or using the "},{"code":"?.","type":"codeVoice"},{"text":" operator described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Provide a fallback value, using the "},{"type":"codeVoice","code":"??"},{"type":"text","text":" operator."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Stop program execution, using the ","type":"text"},{"type":"codeVoice","code":"!"},{"type":"text","text":" operator."}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"In Objective-C, ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is a pointer to a nonexistent object."},{"type":"text","text":" "},{"type":"text","text":"In Swift, "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" isn’t a pointer — it’s the absence of a value of a certain type."},{"text":" ","type":"text"},{"text":"Optionals of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type can be set to "},{"type":"codeVoice","code":"nil"},{"text":", not just object types.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"level":3,"text":"Optional Binding","type":"heading","anchor":"Optional-Binding"},{"type":"paragraph","inlineContent":[{"text":"You use optional binding to find out whether an optional contains a value,","type":"text"},{"type":"text","text":" "},{"text":"and if so, to make that value available as a temporary constant or variable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Optional binding can be used with "},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"to check for a value inside an optional,"},{"type":"text","text":" "},{"text":"and to extract that value into a constant or variable,","type":"text"},{"text":" ","type":"text"},{"text":"as part of a single action.","type":"text"},{"type":"text","text":" "},{"text":"For more information about ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Write an optional binding for an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement as follows:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["if let <#constantName#> = <#someOptional#> {","   <#statements#>","}"]},{"inlineContent":[{"text":"You can rewrite the ","type":"text"},{"code":"possibleNumber","type":"codeVoice"},{"text":" example from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to use optional binding rather than forced unwrapping:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let actualNumber = Int(possibleNumber) {","    print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")","} else {","    print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")","}","\/\/ Prints \"The string \"123\" has an integer value of 123\""]},{"inlineContent":[{"type":"text","text":"This code can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"“If the optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" returned by "},{"type":"codeVoice","code":"Int(possibleNumber)"},{"text":" contains a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"set a new constant called "},{"code":"actualNumber","type":"codeVoice"},{"type":"text","text":" to the value contained in the optional.”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If the conversion is successful,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" constant becomes available for use within"},{"text":" ","type":"text"},{"type":"text","text":"the first branch of the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"It has already been initialized with the value contained within the optional,"},{"text":" ","type":"text"},{"text":"and has the corresponding non-optional type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this case, the type of "},{"code":"possibleNumber","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Int?"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"so the type of ","type":"text"},{"type":"codeVoice","code":"actualNumber"},{"type":"text","text":" is "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t need to refer to the original, optional constant or variable","type":"text"},{"text":" ","type":"text"},{"text":"after accessing the value it contains,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use the same name for the new constant or variable:"}]},{"syntax":"swift","code":["let myNumber = Int(possibleNumber)","\/\/ Here, myNumber is an optional integer","if let myNumber = myNumber {","    \/\/ Here, myNumber is a non-optional integer","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This code starts by checking whether "},{"type":"codeVoice","code":"myNumber"},{"text":" contains a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just like the code in the previous example."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"myNumber","type":"codeVoice"},{"text":" has a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value of a new constant named "},{"type":"codeVoice","code":"myNumber"},{"text":" is set to that value.","type":"text"},{"type":"text","text":" "},{"text":"Inside the body of the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"text":"writing ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"text":" refers to that new non-optional constant.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Writing "},{"code":"myNumber","type":"codeVoice"},{"text":" before or after the ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"refers to the original optional integer constant."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because this kind of code is so common,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use a shorter spelling to unwrap an optional value:"},{"type":"text","text":" "},{"type":"text","text":"Write just the name of the constant or variable that you’re unwrapping."},{"text":" ","type":"text"},{"type":"text","text":"The new, unwrapped constant or variable"},{"text":" ","type":"text"},{"text":"implicitly uses the same name as the optional value.","type":"text"}]},{"code":["if let myNumber {","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use both constants and variables with optional binding."},{"type":"text","text":" "},{"text":"If you wanted to manipulate the value of ","type":"text"},{"type":"codeVoice","code":"myNumber"},{"text":" ","type":"text"},{"type":"text","text":"within the first branch of the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"text":"you could write ","type":"text"},{"code":"if var myNumber","type":"codeVoice"},{"text":" instead,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the value contained within the optional"},{"text":" ","type":"text"},{"type":"text","text":"would be made available as a variable rather than a constant."},{"text":" ","type":"text"},{"type":"text","text":"Changes you make to "},{"type":"codeVoice","code":"myNumber"},{"text":" inside the body of the ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"apply only to that local variable,"},{"text":" ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" to the original, optional constant or variable that you unwrapped."}]},{"inlineContent":[{"type":"text","text":"You can include as many optional bindings and Boolean conditions"},{"type":"text","text":" "},{"text":"in a single ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement as you need to,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by commas."},{"text":" ","type":"text"},{"type":"text","text":"If any of the values in the optional bindings are "},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or any Boolean condition evaluates to ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the whole "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s condition"},{"type":"text","text":" "},{"type":"text","text":"is considered to be "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The following "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements are equivalent:"}],"type":"paragraph"},{"syntax":"swift","code":["if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {","    print(\"\\(firstNumber) < \\(secondNumber) < 100\")","}","\/\/ Prints \"4 < 42 < 100\"","","if let firstNumber = Int(\"4\") {","    if let secondNumber = Int(\"42\") {","        if firstNumber < secondNumber && secondNumber < 100 {","            print(\"\\(firstNumber) < \\(secondNumber) < 100\")","        }","    }","}","\/\/ Prints \"4 < 42 < 100\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Constants and variables created with optional binding in an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"are available only within the body of the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement."},{"text":" ","type":"text"},{"type":"text","text":"In contrast, the constants and variables created with a "},{"type":"codeVoice","code":"guard"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are available in the lines of code that follow the "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit"},{"type":"text","text":"."}]},{"anchor":"Providing-a-Fallback-Value","level":3,"type":"heading","text":"Providing a Fallback Value"},{"type":"paragraph","inlineContent":[{"text":"Another way to handle a missing value is to supply","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a default value using the nil-coalescing operator ("},{"type":"codeVoice","code":"??"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"If the optional on the left of the ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" isn’t ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"that value is unwrapped and used."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the value on the right of "},{"type":"codeVoice","code":"??"},{"type":"text","text":" is used."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the code below greets someone by name if one is specified,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and uses a generic greeting when the name is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"code":["let name: String? = nil","let greeting = \"Hello, \" + (name ?? \"friend\") + \"!\"","print(greeting)","\/\/ Prints \"Hello, friend!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For more information about using ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" to provide a fallback value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator"},{"text":".","type":"text"}]},{"text":"Force Unwrapping","anchor":"Force-Unwrapping","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"When "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" represents an unrecoverable failure,"},{"text":" ","type":"text"},{"text":"such a programmer error or corrupted state,","type":"text"},{"type":"text","text":" "},{"text":"you can access the underlying value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by adding an exclamation mark ("},{"code":"!","type":"codeVoice"},{"text":") to the end of the optional’s name.","type":"text"},{"text":" ","type":"text"},{"text":"This is known as ","type":"text"},{"inlineContent":[{"type":"text","text":"force unwrapping"}],"type":"emphasis"},{"type":"text","text":" the optional’s value."},{"type":"text","text":" "},{"text":"When you force unwrap a non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"text":"the result is its unwrapped value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Force unwrapping a "},{"type":"codeVoice","code":"nil"},{"text":" value triggers a runtime error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"!","type":"codeVoice"},{"type":"text","text":" is, effectively, a shorter spelling of "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For example, the code below shows two equivalent approaches:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let possibleNumber = \"123\"","let convertedNumber = Int(possibleNumber)","","let number = convertedNumber!","","guard let number = convertedNumber else {","    fatalError(\"The number was invalid\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both versions of the code above depend on "},{"code":"convertedNumber","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"always containing a value."},{"text":" ","type":"text"},{"type":"text","text":"Writing that requirement as part of the code,"},{"type":"text","text":" "},{"text":"using either of the approaches above,","type":"text"},{"type":"text","text":" "},{"text":"lets your code check that the requirement is true at runtime.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For more information about enforcing data requirements"},{"type":"text","text":" "},{"type":"text","text":"and checking assumptions at runtime,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Implicitly Unwrapped Optionals","anchor":"Implicitly-Unwrapped-Optionals"},{"inlineContent":[{"type":"text","text":"As described above,"},{"text":" ","type":"text"},{"type":"text","text":"optionals indicate that a constant or variable is allowed to have “no value”."},{"type":"text","text":" "},{"text":"Optionals can be checked with an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement to see if a value exists,"},{"text":" ","type":"text"},{"type":"text","text":"and can be conditionally unwrapped with optional binding"},{"type":"text","text":" "},{"type":"text","text":"to access the optional’s value if it does exist."}],"type":"paragraph"},{"inlineContent":[{"text":"Sometimes it’s clear from a program’s structure that an optional will ","type":"text"},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"text":" have a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after that value is first set."},{"text":" ","type":"text"},{"type":"text","text":"In these cases, it’s useful to remove the need"},{"type":"text","text":" "},{"type":"text","text":"to check and unwrap the optional’s value every time it’s accessed,"},{"text":" ","type":"text"},{"type":"text","text":"because it can be safely assumed to have a value all of the time."}],"type":"paragraph"},{"inlineContent":[{"text":"These kinds of optionals are defined as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicitly unwrapped optionals"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You write an implicitly unwrapped optional by placing an exclamation point ("},{"code":"String!","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"rather than a question mark ("},{"type":"codeVoice","code":"String?"},{"type":"text","text":") after the type that you want to make optional."},{"text":" ","type":"text"},{"text":"Rather than placing an exclamation point after the optional’s name when you use it,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you place an exclamation point after the optional’s type when you declare it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Implicitly unwrapped optionals are useful when"},{"type":"text","text":" "},{"text":"an optional’s value is confirmed to exist immediately after the optional is first defined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can definitely be assumed to exist at every point thereafter."},{"text":" ","type":"text"},{"type":"text","text":"The primary use of implicitly unwrapped optionals in Swift is during class initialization,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Don’t use an implicitly unwrapped optional when there’s a possibility of"},{"type":"text","text":" "},{"type":"text","text":"a variable becoming "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at a later point."},{"text":" ","type":"text"},{"text":"Always use a normal optional type if you need to check for a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value","type":"text"},{"type":"text","text":" "},{"text":"during the lifetime of a variable.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An implicitly unwrapped optional is a normal optional behind the scenes,"},{"type":"text","text":" "},{"text":"but can also be used like a non-optional value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without the need to unwrap the optional value each time it’s accessed."},{"type":"text","text":" "},{"text":"The following example shows the difference in behavior between","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an optional string and an implicitly unwrapped optional string"},{"type":"text","text":" "},{"text":"when accessing their wrapped value as an explicit ","type":"text"},{"type":"codeVoice","code":"String"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let possibleString: String? = \"An optional string.\"","let forcedString: String = possibleString! \/\/ Requires explicit unwrapping","","let assumedString: String! = \"An implicitly unwrapped optional string.\"","let implicitString: String = assumedString \/\/ Unwrapped automatically"]},{"type":"paragraph","inlineContent":[{"text":"You can think of an implicitly unwrapped optional as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"giving permission for the optional to be force-unwrapped if needed."},{"type":"text","text":" "},{"type":"text","text":"When you use an implicitly unwrapped optional value,"},{"text":" ","type":"text"},{"text":"Swift first tries to use it as an ordinary optional value;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if it can’t be used as an optional, Swift force-unwraps the value."},{"type":"text","text":" "},{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"text":"the optional value ","type":"text"},{"type":"codeVoice","code":"assumedString"},{"text":" is force-unwrapped","type":"text"},{"type":"text","text":" "},{"text":"before assigning its value to ","type":"text"},{"code":"implicitString","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"code":"implicitString","type":"codeVoice"},{"type":"text","text":" has an explicit, non-optional type of "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"In code below,","type":"text"},{"type":"text","text":" "},{"code":"optionalString","type":"codeVoice"},{"type":"text","text":" doesn’t have an explicit type"},{"text":" ","type":"text"},{"text":"so it’s an ordinary optional.","type":"text"}]},{"code":["let optionalString = assumedString","\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an implicitly unwrapped optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and you try to access its wrapped value,"},{"type":"text","text":" "},{"type":"text","text":"you’ll trigger a runtime error."},{"type":"text","text":" "},{"text":"The result is exactly the same as if you write an exclamation point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to force unwrap a normal optional that doesn’t contain a value."}]},{"inlineContent":[{"type":"text","text":"You can check whether an implicitly unwrapped optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"the same way you check a normal optional:"}],"type":"paragraph"},{"syntax":"swift","code":["if assumedString != nil {","    print(assumedString!)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""],"type":"codeListing"},{"inlineContent":[{"text":"You can also use an implicitly unwrapped optional with optional binding,","type":"text"},{"text":" ","type":"text"},{"text":"to check and unwrap its value in a single statement:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let definiteString = assumedString {","    print(definiteString)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"text":"Error Handling","anchor":"Error-Handling","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"emphasis","inlineContent":[{"text":"error handling","type":"text"}]},{"type":"text","text":" to respond to error conditions"},{"type":"text","text":" "},{"type":"text","text":"your program may encounter during execution."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In contrast to optionals,"},{"type":"text","text":" "},{"text":"which can use the presence or absence of a value","type":"text"},{"text":" ","type":"text"},{"text":"to communicate success or failure of a function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"error handling allows you to determine the underlying cause of failure,"},{"type":"text","text":" "},{"text":"and, if necessary, propagate the error to another part of your program.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When a function encounters an error condition, it "},{"inlineContent":[{"type":"text","text":"throws"}],"type":"emphasis"},{"type":"text","text":" an error."},{"type":"text","text":" "},{"text":"That function’s caller can then ","type":"text"},{"inlineContent":[{"type":"text","text":"catch"}],"type":"emphasis"},{"type":"text","text":" the error and respond appropriately."}],"type":"paragraph"},{"type":"codeListing","code":["func canThrowAnError() throws {","    \/\/ this function may or may not throw an error","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"A function indicates that it can throw an error"},{"type":"text","text":" "},{"type":"text","text":"by including the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in its declaration."},{"text":" ","type":"text"},{"type":"text","text":"When you call a function that can throw an error,"},{"text":" ","type":"text"},{"type":"text","text":"you prepend the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword to the expression."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift automatically propagates errors out of their current scope","type":"text"},{"type":"text","text":" "},{"type":"text","text":"until they’re handled by a "},{"code":"catch","type":"codeVoice"},{"text":" clause.","type":"text"}]},{"code":["do {","    try canThrowAnError()","    \/\/ no error was thrown","} catch {","    \/\/ an error was thrown","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement creates a new containing scope,"},{"text":" ","type":"text"},{"text":"which allows errors to be propagated to one or more ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses."}]},{"inlineContent":[{"type":"text","text":"Here’s an example of how error handling can be used"},{"type":"text","text":" "},{"type":"text","text":"to respond to different error conditions:"}],"type":"paragraph"},{"code":["func makeASandwich() throws {","    \/\/ ...","}","","do {","    try makeASandwich()","    eatASandwich()","} catch SandwichError.outOfCleanDishes {","    washDishes()","} catch SandwichError.missingIngredients(let ingredients) {","    buyGroceries(ingredients)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this example, the "},{"code":"makeASandwich()","type":"codeVoice"},{"text":" function will throw an error","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if no clean dishes are available"},{"text":" ","type":"text"},{"text":"or if any ingredients are missing.","type":"text"},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"code":"makeASandwich()","type":"codeVoice"},{"type":"text","text":" can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"the function call is wrapped in a "},{"type":"codeVoice","code":"try"},{"type":"text","text":" expression."},{"text":" ","type":"text"},{"type":"text","text":"By wrapping the function call in a "},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"any errors that are thrown will be propagated"},{"text":" ","type":"text"},{"text":"to the provided ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If no error is thrown, the "},{"type":"codeVoice","code":"eatASandwich()"},{"type":"text","text":" function is called."},{"type":"text","text":" "},{"text":"If an error is thrown and it matches the ","type":"text"},{"type":"codeVoice","code":"SandwichError.outOfCleanDishes"},{"text":" case,","type":"text"},{"type":"text","text":" "},{"text":"then the ","type":"text"},{"type":"codeVoice","code":"washDishes()"},{"type":"text","text":" function will be called."},{"text":" ","type":"text"},{"type":"text","text":"If an error is thrown and it matches the "},{"type":"codeVoice","code":"SandwichError.missingIngredients"},{"text":" case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then the "},{"code":"buyGroceries(_:)","type":"codeVoice"},{"type":"text","text":" function is called"},{"text":" ","type":"text"},{"text":"with the associated ","type":"text"},{"code":"[String]","type":"codeVoice"},{"text":" value captured by the ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" pattern.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Throwing, catching, and propagating errors is covered in greater detail in","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"level":2,"text":"Assertions and Preconditions","type":"heading","anchor":"Assertions-and-Preconditions"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Assertions","type":"text"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"preconditions","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"are checks that happen at runtime."},{"type":"text","text":" "},{"type":"text","text":"You use them to make sure an essential condition is satisfied"},{"text":" ","type":"text"},{"type":"text","text":"before executing any further code."},{"type":"text","text":" "},{"text":"If the Boolean condition in the assertion or precondition","type":"text"},{"type":"text","text":" "},{"text":"evaluates to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"code execution continues as usual."},{"type":"text","text":" "},{"type":"text","text":"If the condition evaluates to "},{"type":"codeVoice","code":"false"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the current state of the program is invalid;"},{"text":" ","type":"text"},{"type":"text","text":"code execution ends, and your app is terminated."}]},{"type":"paragraph","inlineContent":[{"text":"You use assertions and preconditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to express the assumptions you make"},{"text":" ","type":"text"},{"text":"and the expectations you have","type":"text"},{"type":"text","text":" "},{"text":"while coding,","type":"text"},{"text":" ","type":"text"},{"text":"so you can include them as part of your code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Assertions help you find mistakes and incorrect assumptions during development,"},{"type":"text","text":" "},{"type":"text","text":"and preconditions help you detect issues in production."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to verifying your expectations at runtime,"},{"type":"text","text":" "},{"type":"text","text":"assertions and preconditions also become a useful form of documentation"},{"text":" ","type":"text"},{"text":"within the code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unlike the error conditions discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling","isActive":true,"type":"reference"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"text":"assertions and preconditions aren’t used","type":"text"},{"text":" ","type":"text"},{"text":"for recoverable or expected errors.","type":"text"},{"text":" ","type":"text"},{"text":"Because a failed assertion or precondition","type":"text"},{"type":"text","text":" "},{"text":"indicates an invalid program state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there’s no way to catch a failed assertion."},{"text":" ","type":"text"},{"type":"text","text":"Recovering from an invalid state is impossible."},{"type":"text","text":" "},{"type":"text","text":"When an assertion fails,"},{"text":" ","type":"text"},{"type":"text","text":"at least one piece of the program’s data is invalid —"},{"type":"text","text":" "},{"text":"but you don’t know why it’s invalid","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or whether an additional state is also invalid."}]},{"type":"paragraph","inlineContent":[{"text":"Using assertions and preconditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"isn’t a substitute for designing your code in such a way"},{"type":"text","text":" "},{"type":"text","text":"that invalid conditions are unlikely to arise."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"using them to enforce valid data and state"},{"type":"text","text":" "},{"text":"causes your app to terminate more predictably","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if an invalid state occurs,"},{"text":" ","type":"text"},{"type":"text","text":"and helps make the problem easier to debug."},{"type":"text","text":" "},{"text":"When assumptions aren’t checked,","type":"text"},{"type":"text","text":" "},{"text":"you might not notice this kind problem until much later","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when code elsewhere starts failing visibly,"},{"type":"text","text":" "},{"text":"and after user data has been silently corrupted.","type":"text"},{"text":" ","type":"text"},{"text":"Stopping execution as soon as an invalid state is detected","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"also helps limit the damage caused by that invalid state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference between assertions and preconditions is in when they’re checked:"},{"text":" ","type":"text"},{"type":"text","text":"Assertions are checked only in debug builds,"},{"text":" ","type":"text"},{"type":"text","text":"but preconditions are checked in both debug and production builds."},{"type":"text","text":" "},{"text":"In production builds,","type":"text"},{"text":" ","type":"text"},{"text":"the condition inside an assertion isn’t evaluated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This means you can use as many assertions as you want"},{"type":"text","text":" "},{"type":"text","text":"during your development process,"},{"text":" ","type":"text"},{"type":"text","text":"without impacting performance in production."}]},{"anchor":"Debugging-with-Assertions","text":"Debugging with Assertions","level":3,"type":"heading"},{"inlineContent":[{"text":"You write an assertion by calling the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."},{"text":" ","type":"text"},{"text":"You pass this function an expression that evaluates to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"text":"and a message to display if the result of the condition is ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["let age = -3","assert(age >= 0, \"A person's age can't be less than zero.\")","\/\/ This assertion fails because -3 isn't >= 0."],"type":"codeListing"},{"inlineContent":[{"text":"In this example, code execution continues if ","type":"text"},{"type":"codeVoice","code":"age >= 0"},{"text":" evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"that is, if the value of ","type":"text"},{"type":"codeVoice","code":"age"},{"type":"text","text":" is nonnegative."},{"type":"text","text":" "},{"text":"If the value of ","type":"text"},{"type":"codeVoice","code":"age"},{"type":"text","text":" is negative, as in the code above,"},{"type":"text","text":" "},{"text":"then ","type":"text"},{"code":"age >= 0","type":"codeVoice"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the assertion fails, terminating the application.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can omit the assertion message —","type":"text"},{"text":" ","type":"text"},{"text":"for example, when it would just repeat the condition as prose.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["assert(age >= 0)"]},{"inlineContent":[{"type":"text","text":"If the code already checks the condition,"},{"text":" ","type":"text"},{"text":"you use the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","isActive":true},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that an assertion has failed."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if age > 10 {","    print(\"You can ride the roller-coaster or the ferris wheel.\")","} else if age >= 0 {","    print(\"You can ride the ferris wheel.\")","} else {","    assertionFailure(\"A person's age can't be less than zero.\")","}"]},{"level":3,"type":"heading","text":"Enforcing Preconditions","anchor":"Enforcing-Preconditions"},{"type":"paragraph","inlineContent":[{"text":"Use a precondition whenever a condition has the potential to be false,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but must "},{"type":"emphasis","inlineContent":[{"type":"text","text":"definitely"}]},{"text":" be true for your code to continue execution.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, use a precondition to check that a subscript isn’t out of bounds,"},{"type":"text","text":" "},{"type":"text","text":"or to check that a function has been passed a valid value."}]},{"type":"paragraph","inlineContent":[{"text":"You write a precondition by calling the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","type":"reference"},{"text":" function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You pass this function an expression that evaluates to "},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and a message to display if the result of the condition is "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ In the implementation of a subscript...","precondition(index > 0, \"Index must be greater than zero.\")"]},{"type":"paragraph","inlineContent":[{"text":"You can also call the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","type":"reference"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that a failure has occurred —"},{"type":"text","text":" "},{"type":"text","text":"for example, if the default case of a switch was taken,"},{"text":" ","type":"text"},{"type":"text","text":"but all valid input data should have been handled"},{"type":"text","text":" "},{"text":"by one of the switch’s other cases.","type":"text"}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If you compile in unchecked mode ("},{"type":"codeVoice","code":"-Ounchecked"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"text":"preconditions aren’t checked.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The compiler assumes that preconditions are always true,"},{"text":" ","type":"text"},{"type":"text","text":"and it optimizes your code accordingly."},{"type":"text","text":" "},{"text":"However, the ","type":"text"},{"code":"fatalError(_:file:line:)","type":"codeVoice"},{"text":" function always halts execution,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"regardless of optimization settings."}],"type":"paragraph"},{"inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"during prototyping and early development","type":"text"},{"text":" ","type":"text"},{"text":"to create stubs for functionality that hasn’t been implemented yet,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"type":"codeVoice","code":"fatalError(\"Unimplemented\")"},{"text":" as the stub implementation.","type":"text"},{"type":"text","text":" "},{"text":"Because fatal errors are never optimized out,","type":"text"},{"text":" ","type":"text"},{"text":"unlike assertions or preconditions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can be sure that execution always halts"},{"text":" ","type":"text"},{"type":"text","text":"if it encounters a stub implementation."}],"type":"paragraph"}]}],"kind":"content"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Error-Handling":{"type":"topic","title":"Error Handling","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Error-Handling","url":"\/documentation\/the-swift-programming-language\/thebasics#Error-Handling","abstract":[]},"https://developer.apple.com/documentation/swift/fatalerror(_:file:line:)":{"titleInlineContent":[{"code":"fatalError(_:file:line:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","title":"fatalError(_:file:line:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fatalerror(_:file:line:)","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"abstract":[],"role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values","abstract":[],"kind":"section","type":"topic","title":"Default Parameter Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","abstract":[],"title":"Functions with Multiple Return Values","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"type":"topic","title":"Constant Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","abstract":[],"kind":"section","title":"Optionals","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Interpolation":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Interpolation","kind":"section","title":"String Interpolation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"type":"topic","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","role":"article","url":"\/documentation\/the-swift-programming-language\/optionalchaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"title":"Optional Chaining"},"https://developer.apple.com/documentation/swift/1541112-assert":{"titleInlineContent":[{"code":"assert(_:_:file:line:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","title":"assert(_:_:file:line:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Assertions-and-Preconditions":{"type":"topic","title":"Assertions and Preconditions","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions","url":"\/documentation\/the-swift-programming-language\/thebasics#Assertions-and-Preconditions","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"abstract":[{"type":"text","text":"Perform operations like assignment, arithmetic, and comparison."}],"kind":"article","title":"Basic Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/basicoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"title":"Control Flow","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article"},"https://developer.apple.com/documentation/swift/1539374-preconditionfailure":{"titleInlineContent":[{"code":"preconditionFailure(_:file:line:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","title":"preconditionFailure(_:file:line:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"type":"topic","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","role":"article","url":"\/documentation\/the-swift-programming-language\/collectiontypes","abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}],"title":"Collection Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","title":"Extensions","kind":"article","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"https://developer.apple.com/documentation/swift/1540960-precondition":{"titleInlineContent":[{"code":"precondition(_:_:file:line:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","title":"precondition(_:_:file:line:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","abstract":[],"title":"Unowned References and Implicitly Unwrapped Optional Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","url":"\/documentation\/the-swift-programming-language\/errorhandling","abstract":[{"text":"Respond to and recover from errors.","type":"text"}],"title":"Error Handling","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Type-Safety-and-Type-Inference":{"type":"topic","title":"Type Safety and Type Inference","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Safety-and-Type-Inference","url":"\/documentation\/the-swift-programming-language\/thebasics#Type-Safety-and-Type-Inference","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Nil-Coalescing-Operator":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/basicoperators#Nil-Coalescing-Operator","abstract":[],"title":"Nil-Coalescing Operator"},"https://developer.apple.com/documentation/swift/1539616-assertionfailure":{"type":"link","titleInlineContent":[{"code":"assertionFailure(_:file:line:)","type":"codeVoice"}],"title":"assertionFailure(_:file:line:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"role":"article","url":"\/documentation\/the-swift-programming-language\/classesandstructures","abstract":[{"type":"text","text":"Model custom types that encapsulate data."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","title":"Structures and Classes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Early-Exit":{"type":"topic","title":"Early Exit","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit","url":"\/documentation\/the-swift-programming-language\/controlflow#Early-Exit","abstract":[]}}}