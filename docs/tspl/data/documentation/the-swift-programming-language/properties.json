{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Properties"},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Properties"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration."},{"text":" ","type":"text"},{"text":"Stored properties store constant and variable values as part of an instance,","type":"text"},{"text":" ","type":"text"},{"text":"whereas computed properties calculate (rather than store) a value.","type":"text"},{"text":" ","type":"text"},{"text":"Computed properties are provided by classes, structures, and enumerations.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"type":"paragraph"},{"inlineContent":[{"text":"Stored and computed properties are usually associated with instances of a particular type.","type":"text"},{"text":" ","type":"text"},{"text":"However, properties can also be associated with the type itself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Such properties are known as type properties."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition, you can define property observers to monitor changes in a property’s value,","type":"text"},{"text":" ","type":"text"},{"text":"which you can respond to with custom actions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Property observers can be added to stored properties you define yourself,"},{"type":"text","text":" "},{"type":"text","text":"and also to properties that a subclass inherits from its superclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use a property wrapper"},{"text":" ","type":"text"},{"text":"to reuse code in the getter and setter of multiple properties.","type":"text"}]},{"level":2,"text":"Stored Properties","anchor":"Stored-Properties","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In its simplest form, a stored property is a constant or variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s stored as part of an instance of a particular class or structure."},{"type":"text","text":" "},{"type":"text","text":"Stored properties can be either"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variable stored properties"}]},{"type":"text","text":" (introduced by the "},{"code":"var","type":"codeVoice"},{"text":" keyword)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constant stored properties"}]},{"type":"text","text":" (introduced by the "},{"code":"let","type":"codeVoice"},{"text":" keyword).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can provide a default value for a stored property as part of its definition,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values","type":"reference","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can also set and modify the initial value for a stored property during initialization."},{"type":"text","text":" "},{"text":"This is true even for constant stored properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"type":"codeVoice","code":"FixedLengthRange"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which describes a range of integers"},{"text":" ","type":"text"},{"text":"whose range length can’t be changed after it’s created:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct FixedLengthRange {","    var firstValue: Int","    let length: Int","}","var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)","\/\/ the range represents integer values 0, 1, and 2","rangeOfThreeItems.firstValue = 6","\/\/ the range now represents integer values 6, 7, and 8"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of "},{"type":"codeVoice","code":"FixedLengthRange"},{"text":" have","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a variable stored property called "},{"type":"codeVoice","code":"firstValue"},{"text":" ","type":"text"},{"text":"and a constant stored property called ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"length"},{"text":" is initialized when the new range is created","type":"text"},{"type":"text","text":" "},{"text":"and can’t be changed thereafter, because it’s a constant property.","type":"text"}]},{"type":"heading","anchor":"Stored-Properties-of-Constant-Structure-Instances","text":"Stored Properties of Constant Structure Instances","level":3},{"inlineContent":[{"type":"text","text":"If you create an instance of a structure"},{"text":" ","type":"text"},{"text":"and assign that instance to a constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can’t modify the instance’s properties,"},{"text":" ","type":"text"},{"type":"text","text":"even if they were declared as variable properties:"}],"type":"paragraph"},{"code":["let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)","\/\/ this range represents integer values 0, 1, 2, and 3","rangeOfFourItems.firstValue = 6","\/\/ this will report an error, even though firstValue is a variable property"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"rangeOfFourItems","type":"codeVoice"},{"type":"text","text":" is declared as a constant (with the "},{"type":"codeVoice","code":"let"},{"text":" keyword),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it isn’t possible to change its "},{"type":"codeVoice","code":"firstValue"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"text":"even though ","type":"text"},{"type":"codeVoice","code":"firstValue"},{"text":" is a variable property.","type":"text"}]},{"inlineContent":[{"text":"This behavior is due to structures being ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"value types"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"When an instance of a value type is marked as a constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so are all of its properties."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The same isn’t true for classes, which are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"If you assign an instance of a reference type to a constant,","type":"text"},{"type":"text","text":" "},{"text":"you can still change that instance’s variable properties.","type":"text"}],"type":"paragraph"},{"anchor":"Lazy-Stored-Properties","text":"Lazy Stored Properties","level":3,"type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lazy stored property"}]},{"type":"text","text":" is a property whose initial value isn’t calculated"},{"type":"text","text":" "},{"type":"text","text":"until the first time it’s used."},{"text":" ","type":"text"},{"type":"text","text":"You indicate a lazy stored property by writing"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":" modifier before its declaration."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You must always declare a lazy property as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword),"},{"text":" ","type":"text"},{"type":"text","text":"because its initial value might not be retrieved until"},{"type":"text","text":" "},{"type":"text","text":"after instance initialization completes."},{"text":" ","type":"text"},{"text":"Constant properties must always have a value ","type":"text"},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" initialization completes,"},{"text":" ","type":"text"},{"text":"and therefore can’t be declared as lazy.","type":"text"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lazy properties are useful when the initial value for a property"},{"text":" ","type":"text"},{"text":"is dependent on outside factors whose values aren’t known","type":"text"},{"type":"text","text":" "},{"text":"until after an instance’s initialization is complete.","type":"text"},{"text":" ","type":"text"},{"text":"Lazy properties are also useful when the initial value for a property requires","type":"text"},{"type":"text","text":" "},{"text":"complex or computationally expensive setup that shouldn’t be performed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unless or until it’s needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses a lazy stored property to avoid"},{"text":" ","type":"text"},{"type":"text","text":"unnecessary initialization of a complex class."},{"type":"text","text":" "},{"text":"This example defines two classes called ","type":"text"},{"code":"DataImporter","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"DataManager"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"neither of which is shown in full:"}]},{"type":"codeListing","code":["class DataImporter {","    \/*","    DataImporter is a class to import data from an external file.","    The class is assumed to take a nontrivial amount of time to initialize.","    *\/","    var filename = \"data.txt\"","    \/\/ the DataImporter class would provide data importing functionality here","}","","class DataManager {","    lazy var importer = DataImporter()","    var data: [String] = []","    \/\/ the DataManager class would provide data management functionality here","}","","let manager = DataManager()","manager.data.append(\"Some data\")","manager.data.append(\"Some more data\")","\/\/ the DataImporter instance for the importer property hasn't yet been created"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"DataManager","type":"codeVoice"},{"type":"text","text":" class has a stored property called "},{"code":"data","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is initialized with a new, empty array of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Although the rest of its functionality isn’t shown,"},{"text":" ","type":"text"},{"text":"the purpose of this ","type":"text"},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" class is to manage and provide access to"},{"text":" ","type":"text"},{"type":"text","text":"this array of "},{"code":"String","type":"codeVoice"},{"text":" data.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Part of the functionality of the "},{"code":"DataManager","type":"codeVoice"},{"type":"text","text":" class"},{"text":" ","type":"text"},{"text":"is the ability to import data from a file.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This functionality is provided by the "},{"code":"DataImporter","type":"codeVoice"},{"type":"text","text":" class,"},{"text":" ","type":"text"},{"type":"text","text":"which is assumed to take a nontrivial amount of time to initialize."},{"type":"text","text":" "},{"type":"text","text":"This might be because a "},{"code":"DataImporter","type":"codeVoice"},{"text":" instance needs to open a file","type":"text"},{"text":" ","type":"text"},{"text":"and read its contents into memory when the ","type":"text"},{"type":"codeVoice","code":"DataImporter"},{"text":" instance is initialized.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it’s possible for a "},{"type":"codeVoice","code":"DataManager"},{"text":" instance to manage its data","type":"text"},{"text":" ","type":"text"},{"text":"without ever importing data from a file,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" doesn’t create a new "},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"when the "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" itself is created."},{"text":" ","type":"text"},{"text":"Instead, it makes more sense to create the ","type":"text"},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"if and when it’s first used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it’s marked with the "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":" modifier,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance for the "},{"type":"codeVoice","code":"importer"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"is only created when the "},{"type":"codeVoice","code":"importer"},{"type":"text","text":" property is first accessed,"},{"text":" ","type":"text"},{"text":"such as when its ","type":"text"},{"code":"filename","type":"codeVoice"},{"text":" property is queried:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["print(manager.importer.filename)","\/\/ the DataImporter instance for the importer property has now been created","\/\/ Prints \"data.txt\""]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a property marked with the "},{"code":"lazy","type":"codeVoice"},{"text":" modifier","type":"text"},{"text":" ","type":"text"},{"text":"is accessed by multiple threads simultaneously","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the property hasn’t yet been initialized,"},{"type":"text","text":" "},{"text":"there’s no guarantee that the property will be initialized only once.","type":"text"}]}],"name":"Note"},{"text":"Stored Properties and Instance Variables","type":"heading","anchor":"Stored-Properties-and-Instance-Variables","level":3},{"inlineContent":[{"type":"text","text":"If you have experience with Objective-C,"},{"text":" ","type":"text"},{"text":"you may know that it provides ","type":"text"},{"inlineContent":[{"text":"two","type":"text"}],"type":"emphasis"},{"text":" ways","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to store values and references as part of a class instance."},{"text":" ","type":"text"},{"type":"text","text":"In addition to properties,"},{"type":"text","text":" "},{"type":"text","text":"you can use instance variables as a backing store for the values stored in a property."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift unifies these concepts into a single property declaration."},{"type":"text","text":" "},{"text":"A Swift property doesn’t have a corresponding instance variable,","type":"text"},{"text":" ","type":"text"},{"text":"and the backing store for a property isn’t accessed directly.","type":"text"},{"text":" ","type":"text"},{"text":"This approach avoids confusion about how the value is accessed in different contexts","type":"text"},{"text":" ","type":"text"},{"text":"and simplifies the property’s declaration into a single, definitive statement.","type":"text"},{"text":" ","type":"text"},{"text":"All information about the property —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including its name, type, and memory management characteristics —"},{"text":" ","type":"text"},{"type":"text","text":"is defined in a single location as part of the type’s definition."}],"type":"paragraph"},{"text":"Computed Properties","anchor":"Computed-Properties","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In addition to stored properties,","type":"text"},{"type":"text","text":" "},{"text":"classes, structures, and enumerations can define ","type":"text"},{"inlineContent":[{"text":"computed properties","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which don’t actually store a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, they provide a getter and an optional setter"},{"type":"text","text":" "},{"text":"to retrieve and set other properties and values indirectly.","type":"text"}]},{"code":["struct Point {","    var x = 0.0, y = 0.0","}","struct Size {","    var width = 0.0, height = 0.0","}","struct Rect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            let centerX = origin.x + (size.width \/ 2)","            let centerY = origin.y + (size.height \/ 2)","            return Point(x: centerX, y: centerY)","        }","        set(newCenter) {","            origin.x = newCenter.x - (size.width \/ 2)","            origin.y = newCenter.y - (size.height \/ 2)","        }","    }","}","var square = Rect(origin: Point(x: 0.0, y: 0.0),","    size: Size(width: 10.0, height: 10.0))","let initialSquareCenter = square.center","\/\/ initialSquareCenter is at (5.0, 5.0)","square.center = Point(x: 15.0, y: 15.0)","print(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")","\/\/ Prints \"square.origin is now at (10.0, 10.0)\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This example defines three structures for working with geometric shapes:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"code":"Point","type":"codeVoice"},{"text":" encapsulates the x- and y-coordinate of a point.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Size"},{"type":"text","text":" encapsulates a "},{"type":"codeVoice","code":"width"},{"text":" and a ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Rect","type":"codeVoice"},{"type":"text","text":" defines a rectangle by an origin point and a size."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure also provides a computed property called "},{"type":"codeVoice","code":"center"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The current center position of a "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" can always be determined from its "},{"code":"origin","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and so you don’t need to store the center point as an explicit ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instead, "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" defines a custom getter and setter for a computed variable called "},{"type":"codeVoice","code":"center"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to enable you to work with the rectangle’s ","type":"text"},{"code":"center","type":"codeVoice"},{"type":"text","text":" as if it were a real stored property."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example above creates a new "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" variable called "},{"code":"square","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"square","type":"codeVoice"},{"text":" variable is initialized with an origin point of ","type":"text"},{"code":"(0, 0)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and a width and height of "},{"code":"10","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This square is represented by the light green square in the diagram below.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"square","type":"codeVoice"},{"type":"text","text":" variable’s "},{"code":"center","type":"codeVoice"},{"text":" property is then accessed through dot syntax (","type":"text"},{"type":"codeVoice","code":"square.center"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"which causes the getter for ","type":"text"},{"type":"codeVoice","code":"center"},{"text":" to be called,","type":"text"},{"type":"text","text":" "},{"text":"to retrieve the current property value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Rather than returning an existing value,"},{"text":" ","type":"text"},{"type":"text","text":"the getter actually calculates and returns a new "},{"type":"codeVoice","code":"Point"},{"text":" to represent the center of the square.","type":"text"},{"type":"text","text":" "},{"text":"As can be seen above, the getter correctly returns a center point of ","type":"text"},{"type":"codeVoice","code":"(5, 5)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"center"},{"text":" property is then set to a new value of ","type":"text"},{"type":"codeVoice","code":"(15, 15)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which moves the square up and to the right,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the new position shown by the dark green square in the diagram below."},{"type":"text","text":" "},{"text":"Setting the ","type":"text"},{"code":"center","type":"codeVoice"},{"text":" property calls the setter for ","type":"text"},{"code":"center","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which modifies the "},{"code":"x","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" values of the stored "},{"type":"codeVoice","code":"origin"},{"text":" property,","type":"text"},{"text":" ","type":"text"},{"text":"and moves the square to its new position.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"computedProperties"}]},{"text":"Shorthand Setter Declaration","anchor":"Shorthand-Setter-Declaration","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a computed property’s setter doesn’t define a name for the new value to be set,"},{"type":"text","text":" "},{"type":"text","text":"a default name of "},{"type":"codeVoice","code":"newValue"},{"text":" is used.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s an alternative version of the "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure"},{"type":"text","text":" "},{"type":"text","text":"that takes advantage of this shorthand notation:"}]},{"type":"codeListing","code":["struct AlternativeRect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            let centerX = origin.x + (size.width \/ 2)","            let centerY = origin.y + (size.height \/ 2)","            return Point(x: centerX, y: centerY)","        }","        set {","            origin.x = newValue.x - (size.width \/ 2)","            origin.y = newValue.y - (size.height \/ 2)","        }","    }","}"],"syntax":"swift"},{"text":"Shorthand Getter Declaration","type":"heading","level":3,"anchor":"Shorthand-Getter-Declaration"},{"inlineContent":[{"text":"If the entire body of a getter is a single expression,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the getter implicitly returns that expression."},{"text":" ","type":"text"},{"type":"text","text":"Here’s another version of the "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure"},{"text":" ","type":"text"},{"type":"text","text":"that takes advantage of this shorthand notation"},{"text":" ","type":"text"},{"type":"text","text":"and the shorthand notation for setters:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct CompactRect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            Point(x: origin.x + (size.width \/ 2),","                  y: origin.y + (size.height \/ 2))","        }","        set {","            origin.x = newValue.x - (size.width \/ 2)","            origin.y = newValue.y - (size.height \/ 2)","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"Omitting the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" from a getter"},{"type":"text","text":" "},{"type":"text","text":"follows the same rules as omitting "},{"code":"return","type":"codeVoice"},{"type":"text","text":" from a function,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Read-Only Computed Properties","level":3,"anchor":"Read-Only-Computed-Properties","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A computed property with a getter but no setter is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"read-only computed property"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A read-only computed property always returns a value,"},{"text":" ","type":"text"},{"text":"and can be accessed through dot syntax, but can’t be set to a different value.","type":"text"}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You must declare computed properties — including read-only computed properties —"},{"text":" ","type":"text"},{"type":"text","text":"as variable properties with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword, because their value isn’t fixed."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" keyword is only used for constant properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that their values can’t be changed once they’re set"},{"type":"text","text":" "},{"text":"as part of instance initialization.","type":"text"}]}]},{"inlineContent":[{"text":"You can simplify the declaration of a read-only computed property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Cuboid {","    var width = 0.0, height = 0.0, depth = 0.0","    var volume: Double {","        return width * height * depth","    }","}","let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)","print(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")","\/\/ Prints \"the volume of fourByFiveByTwo is 40.0\""]},{"inlineContent":[{"text":"This example defines a new structure called ","type":"text"},{"type":"codeVoice","code":"Cuboid"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents a 3D rectangular box with "},{"type":"codeVoice","code":"width"},{"type":"text","text":", "},{"code":"height","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" properties."},{"type":"text","text":" "},{"type":"text","text":"This structure also has a read-only computed property called "},{"type":"codeVoice","code":"volume"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which calculates and returns the current volume of the cuboid.","type":"text"},{"type":"text","text":" "},{"text":"It doesn’t make sense for ","type":"text"},{"type":"codeVoice","code":"volume"},{"text":" to be settable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because it would be ambiguous as to which values of "},{"type":"codeVoice","code":"width"},{"text":", ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":", and "},{"code":"depth","type":"codeVoice"},{"type":"text","text":" "},{"text":"should be used for a particular ","type":"text"},{"code":"volume","type":"codeVoice"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, it’s useful for a "},{"code":"Cuboid","type":"codeVoice"},{"type":"text","text":" to provide a read-only computed property"},{"type":"text","text":" "},{"type":"text","text":"to enable external users to discover its current calculated volume."}],"type":"paragraph"},{"text":"Property Observers","type":"heading","level":2,"anchor":"Property-Observers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property observers observe and respond to changes in a property’s value."},{"text":" ","type":"text"},{"type":"text","text":"Property observers are called every time a property’s value is set,"},{"type":"text","text":" "},{"type":"text","text":"even if the new value is the same as the property’s current value."}]},{"inlineContent":[{"text":"You can add property observers in the following places:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Stored properties that you define","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Stored properties that you inherit","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Computed properties that you inherit"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For an inherited property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you add a property observer by overriding that property in a subclass."},{"text":" ","type":"text"},{"text":"For a computed property that you define,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the property’s setter to observe and respond to value changes,"},{"type":"text","text":" "},{"text":"instead of trying to create an observer.","type":"text"},{"type":"text","text":" "},{"text":"Overriding properties is described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You have the option to define either or both of these observers on a property:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"willSet"},{"text":" is called just before the value is stored.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didSet"},{"text":" is called immediately after the new value is stored.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"type":"text","text":"it’s passed the new property value as a constant parameter."},{"type":"text","text":" "},{"text":"You can specify a name for this parameter as part of your ","type":"text"},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" implementation."},{"text":" ","type":"text"},{"type":"text","text":"If you don’t write the parameter name and parentheses within your implementation,"},{"text":" ","type":"text"},{"text":"the parameter is made available with a default parameter name of ","type":"text"},{"code":"newValue","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Similarly, if you implement a "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"text":"it’s passed a constant parameter containing the old property value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can name the parameter or use the default parameter name of "},{"type":"codeVoice","code":"oldValue"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you assign a value to a property within its own "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer,"},{"text":" ","type":"text"},{"text":"the new value that you assign replaces the one that was just set.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"text":" observers of superclass properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are called when a property is set in a subclass initializer,"},{"type":"text","text":" "},{"text":"after the superclass initializer has been called.","type":"text"},{"type":"text","text":" "},{"text":"They aren’t called while a class is setting its own properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the superclass initializer has been called."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about initializer delegation,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types"},{"type":"text","text":"."}]}]},{"inlineContent":[{"type":"text","text":"Here’s an example of "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" in action."},{"text":" ","type":"text"},{"type":"text","text":"The example below defines a new class called "},{"type":"codeVoice","code":"StepCounter"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which tracks the total number of steps that a person takes while walking.","type":"text"},{"text":" ","type":"text"},{"text":"This class might be used with input data from a pedometer or other step counter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to keep track of a person’s exercise during their daily routine."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class StepCounter {","    var totalSteps: Int = 0 {","        willSet(newTotalSteps) {","            print(\"About to set totalSteps to \\(newTotalSteps)\")","        }","        didSet {","            if totalSteps > oldValue  {","                print(\"Added \\(totalSteps - oldValue) steps\")","            }","        }","    }","}","let stepCounter = StepCounter()","stepCounter.totalSteps = 200","\/\/ About to set totalSteps to 200","\/\/ Added 200 steps","stepCounter.totalSteps = 360","\/\/ About to set totalSteps to 360","\/\/ Added 160 steps","stepCounter.totalSteps = 896","\/\/ About to set totalSteps to 896","\/\/ Added 536 steps"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"StepCounter"},{"type":"text","text":" class declares a "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" property of type "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is a stored property with "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"text":" observers.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"text":" observers for ","type":"text"},{"code":"totalSteps","type":"codeVoice"},{"type":"text","text":" are called"},{"type":"text","text":" "},{"text":"whenever the property is assigned a new value.","type":"text"},{"type":"text","text":" "},{"text":"This is true even if the new value is the same as the current value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example’s "},{"type":"codeVoice","code":"willSet"},{"text":" observer uses","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a custom parameter name of "},{"type":"codeVoice","code":"newTotalSteps"},{"type":"text","text":" for the upcoming new value."},{"text":" ","type":"text"},{"type":"text","text":"In this example, it simply prints out the value that’s about to be set."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer is called after the value of "},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" is updated."},{"type":"text","text":" "},{"text":"It compares the new value of ","type":"text"},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" against the old value."},{"text":" ","type":"text"},{"type":"text","text":"If the total number of steps has increased,"},{"type":"text","text":" "},{"type":"text","text":"a message is printed to indicate how many new steps have been taken."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer doesn’t provide a custom parameter name for the old value,"},{"type":"text","text":" "},{"type":"text","text":"and the default name of "},{"code":"oldValue","type":"codeVoice"},{"type":"text","text":" is used instead."}]},{"content":[{"inlineContent":[{"type":"text","text":"If you pass a property that has observers"},{"text":" ","type":"text"},{"type":"text","text":"to a function as an in-out parameter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observers are always called.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is because of the copy-in copy-out memory model for in-out parameters:"},{"type":"text","text":" "},{"text":"The value is always written back to the property at the end of the function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For a detailed discussion of the behavior of in-out parameters,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"anchor":"Property-Wrappers","text":"Property Wrappers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper adds a layer of separation"},{"type":"text","text":" "},{"type":"text","text":"between code that manages how a property is stored"},{"text":" ","type":"text"},{"type":"text","text":"and the code that defines a property."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"if you have properties that"},{"text":" ","type":"text"},{"text":"provide thread-safety checks","type":"text"},{"text":" ","type":"text"},{"text":"or store their underlying data in a database,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you have to write that code on every property."},{"text":" ","type":"text"},{"text":"When you use a property wrapper,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write the management code once when you define the wrapper,"},{"text":" ","type":"text"},{"type":"text","text":"and then reuse that management code by applying it to multiple properties."}]},{"inlineContent":[{"type":"text","text":"To define a property wrapper,"},{"text":" ","type":"text"},{"type":"text","text":"you make a structure, enumeration, or class"},{"text":" ","type":"text"},{"type":"text","text":"that defines a "},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"In the code below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" structure ensures that"},{"text":" ","type":"text"},{"type":"text","text":"the value it wraps always contains a number less than or equal to 12."},{"type":"text","text":" "},{"type":"text","text":"If you ask it to store a larger number, it stores 12 instead."}],"type":"paragraph"},{"code":["@propertyWrapper","struct TwelveOrLess {","    private var number = 0","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, 12) }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The setter ensures that new values are less than or equal to 12,","type":"text"},{"type":"text","text":" "},{"text":"and the getter returns the stored value.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The declaration for "},{"type":"codeVoice","code":"number"},{"type":"text","text":" in the example above"},{"type":"text","text":" "},{"text":"marks the variable as ","type":"text"},{"code":"private","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which ensures "},{"code":"number","type":"codeVoice"},{"text":" is used only","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the implementation of "},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Code that’s written anywhere else","type":"text"},{"type":"text","text":" "},{"text":"accesses the value using the getter and setter for ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and can’t use "},{"code":"number","type":"codeVoice"},{"type":"text","text":" directly."},{"type":"text","text":" "},{"type":"text","text":"For information about "},{"code":"private","type":"codeVoice"},{"text":", see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"You apply a wrapper to a property"},{"text":" ","type":"text"},{"text":"by writing the wrapper’s name before the property","type":"text"},{"text":" ","type":"text"},{"text":"as an attribute.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s a structure that stores a rectangle"},{"text":" ","type":"text"},{"text":"that uses the ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":" property wrapper"},{"text":" ","type":"text"},{"type":"text","text":"to ensure its dimensions are always 12 or less:"}],"type":"paragraph"},{"code":["struct SmallRectangle {","    @TwelveOrLess var height: Int","    @TwelveOrLess var width: Int","}","","var rectangle = SmallRectangle()","print(rectangle.height)","\/\/ Prints \"0\"","","rectangle.height = 10","print(rectangle.height)","\/\/ Prints \"10\"","","rectangle.height = 24","print(rectangle.height)","\/\/ Prints \"12\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" properties get their initial values"},{"text":" ","type":"text"},{"text":"from the definition of ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which sets "},{"code":"TwelveOrLess.number","type":"codeVoice"},{"type":"text","text":" to zero."},{"text":" ","type":"text"},{"type":"text","text":"The setter in "},{"type":"codeVoice","code":"TwelveOrLess"},{"text":" treats 10 as a valid value","type":"text"},{"text":" ","type":"text"},{"text":"so storing the number 10 in ","type":"text"},{"type":"codeVoice","code":"rectangle.height"},{"text":" proceeds as written.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, 24 is larger than "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" allows,"},{"type":"text","text":" "},{"text":"so trying to store 24 end up setting ","type":"text"},{"code":"rectangle.height","type":"codeVoice"},{"type":"text","text":" "},{"text":"to 12 instead, the largest allowed value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you apply a wrapper to a property,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler synthesizes code that provides storage for the wrapper","type":"text"},{"type":"text","text":" "},{"text":"and code that provides access to the property through the wrapper.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The property wrapper is responsible for storing the wrapped value,"},{"type":"text","text":" "},{"text":"so there’s no synthesized code for that.)","type":"text"},{"type":"text","text":" "},{"text":"You could write code that uses the behavior of a property wrapper,","type":"text"},{"text":" ","type":"text"},{"text":"without taking advantage of the special attribute syntax.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"here’s a version of "},{"type":"codeVoice","code":"SmallRectangle"},{"text":" ","type":"text"},{"type":"text","text":"from the previous code listing"},{"text":" ","type":"text"},{"type":"text","text":"that wraps its properties in the "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" structure explicitly,"},{"type":"text","text":" "},{"text":"instead of writing ","type":"text"},{"type":"codeVoice","code":"@TwelveOrLess"},{"text":" as an attribute:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SmallRectangle {","    private var _height = TwelveOrLess()","    private var _width = TwelveOrLess()","    var height: Int {","        get { return _height.wrappedValue }","        set { _height.wrappedValue = newValue }","    }","    var width: Int {","        get { return _width.wrappedValue }","        set { _width.wrappedValue = newValue }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"_height"},{"type":"text","text":" and "},{"code":"_width","type":"codeVoice"},{"type":"text","text":" properties"},{"type":"text","text":" "},{"type":"text","text":"store an instance of the property wrapper, "},{"type":"codeVoice","code":"TwelveOrLess"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The getter and setter for "},{"code":"height","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"wrap access to the "},{"code":"wrappedValue","type":"codeVoice"},{"text":" property.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Setting-Initial-Values-for-Wrapped-Properties","text":"Setting Initial Values for Wrapped Properties","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code in the examples above"},{"text":" ","type":"text"},{"text":"sets the initial value for the wrapped property","type":"text"},{"type":"text","text":" "},{"text":"by giving ","type":"text"},{"code":"number","type":"codeVoice"},{"text":" an initial value in the definition of ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Code that uses this property wrapper"},{"type":"text","text":" "},{"type":"text","text":"can’t specify a different initial value for a property"},{"type":"text","text":" "},{"type":"text","text":"that’s wrapped by "},{"code":"TwelveOrLess","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for example,"},{"type":"text","text":" "},{"text":"the definition of ","type":"text"},{"code":"SmallRectangle","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"can’t give "},{"code":"height","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" initial values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To support setting an initial value or other customization,"},{"text":" ","type":"text"},{"text":"the property wrapper needs to add an initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s an expanded version of "},{"code":"TwelveOrLess","type":"codeVoice"},{"text":" called ","type":"text"},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that defines initializers that set the wrapped and maximum value:"}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct SmallNumber {","    private var maximum: Int","    private var number: Int","","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, maximum) }","    }","","    init() {","        maximum = 12","        number = 0","    }","    init(wrappedValue: Int) {","        maximum = 12","        number = min(wrappedValue, maximum)","    }","    init(wrappedValue: Int, maximum: Int) {","        self.maximum = maximum","        number = min(wrappedValue, maximum)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The definition of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" includes three initializers —"},{"text":" ","type":"text"},{"code":"init()","type":"codeVoice"},{"type":"text","text":", "},{"code":"init(wrappedValue:)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"init(wrappedValue:maximum:)","type":"codeVoice"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"which the examples below use"},{"text":" ","type":"text"},{"text":"to set the wrapped value and the maximum value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For information about initialization and initializer syntax,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"When you apply a wrapper to a property and you don’t specify an initial value,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" initializer to set up the wrapper."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ZeroRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","}","","var zeroRectangle = ZeroRectangle()","print(zeroRectangle.height, zeroRectangle.width)","\/\/ Prints \"0 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instances of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wrap "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"are created by calling "},{"type":"codeVoice","code":"SmallNumber()"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The code inside that initializer"},{"type":"text","text":" "},{"type":"text","text":"sets the initial wrapped value and the initial maximum value,"},{"type":"text","text":" "},{"type":"text","text":"using the default values of zero and 12."},{"text":" ","type":"text"},{"type":"text","text":"The property wrapper still provides all of the initial values,"},{"type":"text","text":" "},{"type":"text","text":"like the earlier example that used "},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" in "},{"code":"SmallRectangle","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unlike that example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" also supports writing those initial values"},{"type":"text","text":" "},{"text":"as part of declaring the property.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When you specify an initial value for the property,"},{"text":" ","type":"text"},{"text":"Swift uses the ","type":"text"},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":" initializer to set up the wrapper."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["struct UnitRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber var width: Int = 1","}","","var unitRectangle = UnitRectangle()","print(unitRectangle.height, unitRectangle.width)","\/\/ Prints \"1 1\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write "},{"type":"codeVoice","code":"= 1"},{"text":" on a property with a wrapper,","type":"text"},{"text":" ","type":"text"},{"text":"that’s translated into a call to the ","type":"text"},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"text":"The instances of ","type":"text"},{"code":"SmallNumber","type":"codeVoice"},{"text":" that wrap ","type":"text"},{"type":"codeVoice","code":"height"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"text":"are created by calling ","type":"text"},{"code":"SmallNumber(wrappedValue: 1)","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The initializer uses the wrapped value that’s specified here,"},{"type":"text","text":" "},{"text":"and it uses the default maximum value of 12.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When you write arguments in parentheses after the custom attribute,"},{"type":"text","text":" "},{"type":"text","text":"Swift uses the initializer that accepts those arguments to set up the wrapper."},{"text":" ","type":"text"},{"type":"text","text":"For example, if you provide an initial value and a maximum value,"},{"type":"text","text":" "},{"text":"Swift uses the ","type":"text"},{"type":"codeVoice","code":"init(wrappedValue:maximum:)"},{"type":"text","text":" initializer:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct NarrowRectangle {","    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int","    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int","}","","var narrowRectangle = NarrowRectangle()","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"2 3\"","","narrowRectangle.height = 100","narrowRectangle.width = 100","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"5 4\""]},{"inlineContent":[{"type":"text","text":"The instance of "},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" that wraps "},{"type":"codeVoice","code":"height"},{"text":" ","type":"text"},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 2, maximum: 5)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the instance that wraps "},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 3, maximum: 4)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By including arguments to the property wrapper,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can set up the initial state in the wrapper"},{"text":" ","type":"text"},{"type":"text","text":"or pass other options to the wrapper when it’s created."},{"type":"text","text":" "},{"type":"text","text":"This syntax is the most general way to use a property wrapper."},{"type":"text","text":" "},{"text":"You can provide whatever arguments you need to the attribute,","type":"text"},{"type":"text","text":" "},{"text":"and they’re passed to the initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When you include property wrapper arguments,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can also specify an initial value using assignment."},{"text":" ","type":"text"},{"text":"Swift treats the assignment like a ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"text":" argument","type":"text"},{"type":"text","text":" "},{"text":"and uses the initializer that accepts the arguments you include.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"type":"codeListing","code":["struct MixedRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber(maximum: 9) var width: Int = 2","}","","var mixedRectangle = MixedRectangle()","print(mixedRectangle.height)","\/\/ Prints \"1\"","","mixedRectangle.height = 20","print(mixedRectangle.height)","\/\/ Prints \"12\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The instance of ","type":"text"},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" that wraps "},{"type":"codeVoice","code":"height"},{"text":" ","type":"text"},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 1)"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which uses the default maximum value of 12.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The instance that wraps "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"text":"is created by calling ","type":"text"},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 2, maximum: 9)"},{"type":"text","text":"."}]},{"type":"heading","level":3,"anchor":"Projecting-a-Value-From-a-Property-Wrapper","text":"Projecting a Value From a Property Wrapper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the wrapped value,"},{"text":" ","type":"text"},{"text":"a property wrapper can expose additional functionality","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by defining a "},{"inlineContent":[{"text":"projected value","type":"text"}],"type":"emphasis"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"text":"for example, a property wrapper that manages access to a database","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can expose a "},{"type":"codeVoice","code":"flushDatabaseConnection()"},{"text":" method on its projected value.","type":"text"},{"type":"text","text":" "},{"text":"The name of the projected value is the same as the wrapped value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"except it begins with a dollar sign ("},{"code":"$","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"Because your code can’t define properties that start with "},{"type":"codeVoice","code":"$"},{"text":" ","type":"text"},{"text":"the projected value never interferes with properties you define.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" example above,"},{"text":" ","type":"text"},{"text":"if you try to set the property to a number that’s too large,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the property wrapper adjusts the number before storing it."},{"text":" ","type":"text"},{"text":"The code below adds a ","type":"text"},{"code":"projectedValue","type":"codeVoice"},{"type":"text","text":" property to the "},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" structure"},{"text":" ","type":"text"},{"text":"to keep track of whether the property wrapper","type":"text"},{"type":"text","text":" "},{"type":"text","text":"adjusted the new value for the property before storing that new value."}]},{"code":["@propertyWrapper","struct SmallNumber {","    private var number: Int","    private(set) var projectedValue: Bool","","    var wrappedValue: Int {","        get { return number }","        set {","            if newValue > 12 {","                number = 12","                projectedValue = true","            } else {","                number = newValue","                projectedValue = false","            }","        }","    }","","    init() {","        self.number = 0","        self.projectedValue = false","    }","}","struct SomeStructure {","    @SmallNumber var someNumber: Int","}","var someStructure = SomeStructure()","","someStructure.someNumber = 4","print(someStructure.$someNumber)","\/\/ Prints \"false\"","","someStructure.someNumber = 55","print(someStructure.$someNumber)","\/\/ Prints \"true\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Writing "},{"code":"someStructure.$someNumber","type":"codeVoice"},{"type":"text","text":" accesses the wrapper’s projected value."},{"type":"text","text":" "},{"text":"After storing a small number like four,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"someStructure.$someNumber"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"the projected value is ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"type":"text","text":"after trying to store a number that’s too large, like 55."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper can return a value of any type as its projected value."},{"type":"text","text":" "},{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"text":"the property wrapper exposes only one piece of information —","type":"text"},{"text":" ","type":"text"},{"text":"whether the number was adjusted —","type":"text"},{"text":" ","type":"text"},{"text":"so it exposes that Boolean value as its projected value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A wrapper that needs to expose more information"},{"text":" ","type":"text"},{"type":"text","text":"can return an instance of some other type,"},{"type":"text","text":" "},{"text":"or it can return ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" ","type":"text"},{"text":"to expose the instance of the wrapper as its projected value.","type":"text"}]},{"inlineContent":[{"text":"When you access a projected value from code that’s part of the type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like a property getter or an instance method,"},{"text":" ","type":"text"},{"text":"you can omit ","type":"text"},{"type":"codeVoice","code":"self."},{"type":"text","text":" before the property name,"},{"text":" ","type":"text"},{"type":"text","text":"just like accessing other properties."},{"text":" ","type":"text"},{"text":"The code in the following example refers to the projected value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the wrapper around "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"text":" as ","type":"text"},{"type":"codeVoice","code":"$height"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"$width"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["enum Size {","    case small, large","}","","struct SizedRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","","    mutating func resize(to size: Size) -> Bool {","        switch size {","        case .small:","            height = 10","            width = 20","        case .large:","            height = 100","            width = 100","        }","        return $height || $width","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because property wrapper syntax is just syntactic sugar"},{"type":"text","text":" "},{"type":"text","text":"for a property with a getter and a setter,"},{"type":"text","text":" "},{"type":"text","text":"accessing "},{"code":"height","type":"codeVoice"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"behaves the same as accessing any other property."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"the code in ","type":"text"},{"code":"resize(to:)","type":"codeVoice"},{"type":"text","text":" accesses "},{"code":"height","type":"codeVoice"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"text":"using their property wrapper.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you call "},{"code":"resize(to: .large)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the switch case for "},{"type":"codeVoice","code":".large"},{"type":"text","text":" sets the rectangle’s height and width to 100."},{"text":" ","type":"text"},{"type":"text","text":"The wrapper prevents the value of those properties"},{"text":" ","type":"text"},{"text":"from being larger than 12,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it sets the projected value to "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"to record the fact that it adjusted their values.","type":"text"},{"text":" ","type":"text"},{"text":"At the end of ","type":"text"},{"type":"codeVoice","code":"resize(to:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the return statement checks "},{"code":"$height","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"$width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to determine whether"},{"type":"text","text":" "},{"text":"the property wrapper adjusted either ","type":"text"},{"type":"codeVoice","code":"height"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"width"},{"text":".","type":"text"}]},{"text":"Global and Local Variables","type":"heading","anchor":"Global-and-Local-Variables","level":2},{"inlineContent":[{"text":"The capabilities described above for computing and observing properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are also available to "},{"type":"emphasis","inlineContent":[{"text":"global variables","type":"text"}]},{"text":" and ","type":"text"},{"inlineContent":[{"type":"text","text":"local variables"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Global variables are variables that are defined outside of any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function, method, closure, or type context."},{"text":" ","type":"text"},{"text":"Local variables are variables that are defined within","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a function, method, or closure context."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The global and local variables you have encountered in previous chapters"},{"type":"text","text":" "},{"type":"text","text":"have all been "},{"inlineContent":[{"type":"text","text":"stored variables"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Stored variables, like stored properties,","type":"text"},{"type":"text","text":" "},{"text":"provide storage for a value of a certain type and allow that value to be set and retrieved.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, you can also define "},{"inlineContent":[{"text":"computed variables","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"and define observers for stored variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in either a global or local scope."},{"type":"text","text":" "},{"text":"Computed variables calculate their value, rather than storing it,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and they’re written in the same way as computed properties."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global constants and variables are always computed lazily,"},{"text":" ","type":"text"},{"type":"text","text":"in a similar manner to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Unlike lazy stored properties,"},{"type":"text","text":" "},{"text":"global constants and variables don’t need to be marked with the ","type":"text"},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier."}]},{"type":"paragraph","inlineContent":[{"text":"Local constants and variables are never computed lazily.","type":"text"}]}],"name":"Note"},{"inlineContent":[{"type":"text","text":"You can apply a property wrapper to a local stored variable,"},{"type":"text","text":" "},{"text":"but not to a global variable or a computed variable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"in the code below, ","type":"text"},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" as a property wrapper."}],"type":"paragraph"},{"code":["func someFunction() {","    @SmallNumber var myNumber: Int = 0","","    myNumber = 10","    \/\/ now myNumber is 10","","    myNumber = 24","    \/\/ now myNumber is 12","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Like when you apply "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" to a property,"},{"type":"text","text":" "},{"type":"text","text":"setting the value of "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" to 10 is valid."},{"text":" ","type":"text"},{"type":"text","text":"Because the property wrapper doesn’t allow values higher than 12,"},{"type":"text","text":" "},{"type":"text","text":"it sets "},{"code":"myNumber","type":"codeVoice"},{"text":" to 12 instead of 24.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Type Properties","type":"heading","anchor":"Type-Properties"},{"type":"paragraph","inlineContent":[{"text":"Instance properties are properties that belong to an instance of a particular type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Every time you create a new instance of that type,"},{"type":"text","text":" "},{"text":"it has its own set of property values, separate from any other instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also define properties that belong to the type itself,"},{"type":"text","text":" "},{"type":"text","text":"not to any one instance of that type."},{"text":" ","type":"text"},{"type":"text","text":"There will only ever be one copy of these properties,"},{"type":"text","text":" "},{"text":"no matter how many instances of that type you create.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These kinds of properties are called "},{"type":"emphasis","inlineContent":[{"text":"type properties","type":"text"}]},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Type properties are useful for defining values that are universal to","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"text":" instances of a particular type,","type":"text"},{"type":"text","text":" "},{"text":"such as a constant property that all instances can use","type":"text"},{"type":"text","text":" "},{"text":"(like a static constant in C),","type":"text"},{"type":"text","text":" "},{"text":"or a variable property that stores a value that’s global to all instances of that type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(like a static variable in C)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored type properties can be variables or constants."},{"text":" ","type":"text"},{"type":"text","text":"Computed type properties are always declared as variable properties,"},{"type":"text","text":" "},{"text":"in the same way as computed instance properties.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike stored instance properties,"},{"text":" ","type":"text"},{"type":"text","text":"you must always give stored type properties a default value."},{"type":"text","text":" "},{"text":"This is because the type itself doesn’t have an initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can assign a value to a stored type property at initialization time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored type properties are lazily initialized on their first access."},{"type":"text","text":" "},{"text":"They’re guaranteed to be initialized only once,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even when accessed by multiple threads simultaneously,"},{"type":"text","text":" "},{"text":"and they don’t need to be marked with the ","type":"text"},{"type":"codeVoice","code":"lazy"},{"text":" modifier.","type":"text"}]}],"name":"Note","style":"note"},{"level":3,"type":"heading","anchor":"Type-Property-Syntax","text":"Type Property Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In C and Objective-C, you define static constants and variables associated with a type"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"emphasis","inlineContent":[{"text":"global","type":"text"}]},{"text":" static variables.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift, however, type properties are written as part of the type’s definition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within the type’s outer curly braces,"},{"text":" ","type":"text"},{"text":"and each type property is explicitly scoped to the type it supports.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You define type properties with the "},{"type":"codeVoice","code":"static"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For computed type properties for class types,"},{"text":" ","type":"text"},{"text":"you can use the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation."},{"type":"text","text":" "},{"text":"The example below shows the syntax for stored and computed type properties:","type":"text"}]},{"syntax":"swift","code":["struct SomeStructure {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 1","    }","}","enum SomeEnumeration {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 6","    }","}","class SomeClass {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 27","    }","    class var overrideableComputedTypeProperty: Int {","        return 107","    }","}"],"type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"The computed type property examples above are for read-only computed type properties,"},{"type":"text","text":" "},{"text":"but you can also define read-write computed type properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the same syntax as for computed instance properties."}],"type":"paragraph"}],"style":"note","name":"Note"},{"anchor":"Querying-and-Setting-Type-Properties","type":"heading","level":3,"text":"Querying and Setting Type Properties"},{"inlineContent":[{"type":"text","text":"Type properties are queried and set with dot syntax, just like instance properties."},{"type":"text","text":" "},{"text":"However, type properties are queried and set on the ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":", not on an instance of that type.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Some value.\"","SomeStructure.storedTypeProperty = \"Another value.\"","print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Another value.\"","print(SomeEnumeration.computedTypeProperty)","\/\/ Prints \"6\"","print(SomeClass.computedTypeProperty)","\/\/ Prints \"27\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The examples that follow use two stored type properties as part of a structure"},{"text":" ","type":"text"},{"type":"text","text":"that models an audio level meter for a number of audio channels."},{"text":" ","type":"text"},{"type":"text","text":"Each channel has an integer audio level between "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"10"},{"type":"text","text":" inclusive."}],"type":"paragraph"},{"inlineContent":[{"text":"The figure below illustrates how two of these audio channels can be combined","type":"text"},{"type":"text","text":" "},{"text":"to model a stereo audio level meter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When a channel’s audio level is "},{"type":"codeVoice","code":"0"},{"text":", none of the lights for that channel are lit.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When the audio level is "},{"type":"codeVoice","code":"10"},{"text":", all of the lights for that channel are lit.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this figure, the left channel has a current level of "},{"code":"9","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the right channel has a current level of ","type":"text"},{"type":"codeVoice","code":"7"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"staticPropertiesVUMeter","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The audio channels described above are represented by"},{"text":" ","type":"text"},{"text":"instances of the ","type":"text"},{"code":"AudioChannel","type":"codeVoice"},{"type":"text","text":" structure:"}]},{"type":"codeListing","syntax":"swift","code":["struct AudioChannel {","    static let thresholdLevel = 10","    static var maxInputLevelForAllChannels = 0","    var currentLevel: Int = 0 {","        didSet {","            if currentLevel > AudioChannel.thresholdLevel {","                \/\/ cap the new audio level to the threshold level","                currentLevel = AudioChannel.thresholdLevel","            }","            if currentLevel > AudioChannel.maxInputLevelForAllChannels {","                \/\/ store this as the new overall maximum input level","                AudioChannel.maxInputLevelForAllChannels = currentLevel","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure defines two stored type properties to support its functionality."},{"text":" ","type":"text"},{"type":"text","text":"The first, "},{"type":"codeVoice","code":"thresholdLevel"},{"text":", defines the maximum threshold value an audio level can take.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is a constant value of "},{"type":"codeVoice","code":"10"},{"type":"text","text":" for all "},{"type":"codeVoice","code":"AudioChannel"},{"text":" instances.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If an audio signal comes in with a higher value than "},{"type":"codeVoice","code":"10"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it will be capped to this threshold value (as described below)."}]},{"type":"paragraph","inlineContent":[{"text":"The second type property is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a variable stored property called "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This keeps track of the maximum input value that has been received"},{"text":" ","type":"text"},{"type":"text","text":"by "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" ","type":"text"},{"code":"AudioChannel","type":"codeVoice"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It starts with an initial value of "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" structure also defines"},{"text":" ","type":"text"},{"text":"a stored instance property called ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the channel’s current audio level on a scale of "},{"code":"0","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"10"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property has a "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" property observer"},{"type":"text","text":" "},{"type":"text","text":"to check the value of "},{"type":"codeVoice","code":"currentLevel"},{"text":" whenever it’s set.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This observer performs two checks:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If the new value of "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" is greater than the allowed "},{"code":"thresholdLevel","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the property observer caps "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to "},{"code":"thresholdLevel","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the new value of "},{"code":"currentLevel","type":"codeVoice"},{"text":" (after any capping) is higher than","type":"text"},{"text":" ","type":"text"},{"text":"any value previously received by ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"text":"the property observer stores the new ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":" value in","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property."}]}]}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"In the first of these two checks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"didSet"},{"text":" observer sets ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to a different value."},{"type":"text","text":" "},{"text":"This doesn’t, however, cause the observer to be called again.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"text":" structure to create","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two new audio channels called "},{"code":"leftChannel","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"rightChannel"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to represent the audio levels of a stereo sound system:"}]},{"type":"codeListing","syntax":"swift","code":["var leftChannel = AudioChannel()","var rightChannel = AudioChannel()"]},{"type":"paragraph","inlineContent":[{"text":"If you set the ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":" of the ","type":"text"},{"inlineContent":[{"type":"text","text":"left"}],"type":"emphasis"},{"type":"text","text":" channel to "},{"type":"codeVoice","code":"7"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can see that the "},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property"},{"type":"text","text":" "},{"text":"is updated to equal ","type":"text"},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"codeListing","code":["leftChannel.currentLevel = 7","print(leftChannel.currentLevel)","\/\/ Prints \"7\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"7\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to set the "},{"code":"currentLevel","type":"codeVoice"},{"text":" of the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"right"}]},{"type":"text","text":" channel to "},{"type":"codeVoice","code":"11"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can see that the right channel’s "},{"code":"currentLevel","type":"codeVoice"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is capped to the maximum value of "},{"type":"codeVoice","code":"10"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"code":"maxInputLevelForAllChannels","type":"codeVoice"},{"type":"text","text":" type property is updated to equal "},{"type":"codeVoice","code":"10"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["rightChannel.currentLevel = 11","print(rightChannel.currentLevel)","\/\/ Prints \"10\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"10\""]}]}],"kind":"article","abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Property-Values":{"url":"\/documentation\/the-swift-programming-language\/initialization#Default-Property-Values","abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values","title":"Default Property Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters":{"title":"In-Out Parameters","url":"\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types":{"kind":"section","title":"Initializer Delegation for Class Types","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Overriding":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding","title":"Overriding","url":"\/documentation\/the-swift-programming-language\/inheritance#Overriding","abstract":[],"kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Assigning-Constant-Properties-During-Initialization":{"type":"topic","kind":"section","abstract":[],"title":"Assigning Constant Properties During Initialization","url":"\/documentation\/the-swift-programming-language\/initialization#Assigning-Constant-Properties-During-Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Lazy-Stored-Properties":{"abstract":[],"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Lazy-Stored-Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties","title":"Lazy Stored Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol","role":"article","title":"Access Control","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"url":"\/documentation\/the-swift-programming-language\/initialization","type":"topic","kind":"article","title":"Initialization","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-With-an-Implicit-Return":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return","url":"\/documentation\/the-swift-programming-language\/functions#Functions-With-an-Implicit-Return","abstract":[],"type":"topic","kind":"section","title":"Functions With an Implicit Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"title":"Initializer Delegation for Value Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","abstract":[],"url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types","kind":"section"},"computedProperties":{"identifier":"computedProperties","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/computedProperties@2x.png"},{"url":"\/images\/computedProperties~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"staticPropertiesVUMeter":{"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/staticPropertiesVUMeter@2x.png"},{"url":"\/images\/staticPropertiesVUMeter~dark@2x.png","traits":["2x","dark"]}],"alt":null,"identifier":"staticPropertiesVUMeter"}}}