{"primaryContentSections":[{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"text":" associate values with a particular class, structure, or enumeration.","type":"text"},{"text":" ","type":"text"},{"text":"Stored properties store constant and variable values as part of an instance,","type":"text"},{"text":" ","type":"text"},{"text":"whereas computed properties calculate (rather than store) a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Computed properties are provided by classes, structures, and enumerations."},{"text":" ","type":"text"},{"type":"text","text":"Stored properties are provided only by classes and structures."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored and computed properties are usually associated with instances of a particular type."},{"text":" ","type":"text"},{"text":"However, properties can also be associated with the type itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Such properties are known as type properties."}]},{"inlineContent":[{"type":"text","text":"In addition, you can define property observers to monitor changes in a property’s value,"},{"text":" ","type":"text"},{"text":"which you can respond to with custom actions.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Property observers can be added to stored properties you define yourself,"},{"type":"text","text":" "},{"text":"and also to properties that a subclass inherits from its superclass.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use a property wrapper"},{"type":"text","text":" "},{"type":"text","text":"to reuse code in the getter and setter of multiple properties."}]},{"anchor":"Stored-Properties","text":"Stored Properties","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"In its simplest form, a stored property is a constant or variable"},{"type":"text","text":" "},{"text":"that’s stored as part of an instance of a particular class or structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Stored properties can be either"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"variable stored properties","type":"text"}]},{"type":"text","text":" (introduced by the "},{"code":"var","type":"codeVoice"},{"text":" keyword)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or "},{"inlineContent":[{"text":"constant stored properties","type":"text"}],"type":"emphasis"},{"text":" (introduced by the ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" keyword)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can provide a default value for a stored property as part of its definition,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also set and modify the initial value for a stored property during initialization."},{"text":" ","type":"text"},{"text":"This is true even for constant stored properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"FixedLengthRange","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which describes a range of integers"},{"text":" ","type":"text"},{"type":"text","text":"whose range length can’t be changed after it’s created:"}]},{"code":["struct FixedLengthRange {","    var firstValue: Int","    let length: Int","}","var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)","\/\/ the range represents integer values 0, 1, and 2","rangeOfThreeItems.firstValue = 6","\/\/ the range now represents integer values 6, 7, and 8"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of "},{"type":"codeVoice","code":"FixedLengthRange"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"a variable stored property called "},{"type":"codeVoice","code":"firstValue"},{"text":" ","type":"text"},{"type":"text","text":"and a constant stored property called "},{"type":"codeVoice","code":"length"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In the example above, "},{"code":"length","type":"codeVoice"},{"type":"text","text":" is initialized when the new range is created"},{"type":"text","text":" "},{"type":"text","text":"and can’t be changed thereafter, because it’s a constant property."}]},{"text":"Stored Properties of Constant Structure Instances","level":3,"type":"heading","anchor":"Stored-Properties-of-Constant-Structure-Instances"},{"inlineContent":[{"type":"text","text":"If you create an instance of a structure"},{"type":"text","text":" "},{"type":"text","text":"and assign that instance to a constant,"},{"type":"text","text":" "},{"text":"you can’t modify the instance’s properties,","type":"text"},{"text":" ","type":"text"},{"text":"even if they were declared as variable properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)","\/\/ this range represents integer values 0, 1, 2, and 3","rangeOfFourItems.firstValue = 6","\/\/ this will report an error, even though firstValue is a variable property"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"rangeOfFourItems","type":"codeVoice"},{"text":" is declared as a constant (with the ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword),"},{"text":" ","type":"text"},{"type":"text","text":"it isn’t possible to change its "},{"type":"codeVoice","code":"firstValue"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"even though "},{"type":"codeVoice","code":"firstValue"},{"text":" is a variable property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This behavior is due to structures being "},{"type":"emphasis","inlineContent":[{"text":"value types","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When an instance of a value type is marked as a constant,"},{"type":"text","text":" "},{"type":"text","text":"so are all of its properties."}]},{"inlineContent":[{"text":"The same isn’t true for classes, which are ","type":"text"},{"inlineContent":[{"text":"reference types","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you assign an instance of a reference type to a constant,"},{"type":"text","text":" "},{"text":"you can still change that instance’s variable properties.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Lazy-Stored-Properties","type":"heading","text":"Lazy Stored Properties"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lazy stored property"}]},{"type":"text","text":" is a property whose initial value isn’t calculated"},{"type":"text","text":" "},{"type":"text","text":"until the first time it’s used."},{"text":" ","type":"text"},{"type":"text","text":"You indicate a lazy stored property by writing"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":" modifier before its declaration."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You must always declare a lazy property as a variable (with the ","type":"text"},{"type":"codeVoice","code":"var"},{"text":" keyword),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because its initial value might not be retrieved until"},{"type":"text","text":" "},{"text":"after instance initialization completes.","type":"text"},{"text":" ","type":"text"},{"text":"Constant properties must always have a value ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" initialization completes,"},{"type":"text","text":" "},{"type":"text","text":"and therefore can’t be declared as lazy."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"Lazy properties are useful when the initial value for a property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is dependent on outside factors whose values aren’t known"},{"type":"text","text":" "},{"text":"until after an instance’s initialization is complete.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Lazy properties are also useful when the initial value for a property requires"},{"type":"text","text":" "},{"text":"complex or computationally expensive setup that shouldn’t be performed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unless or until it’s needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below uses a lazy stored property to avoid"},{"type":"text","text":" "},{"type":"text","text":"unnecessary initialization of a complex class."},{"text":" ","type":"text"},{"text":"This example defines two classes called ","type":"text"},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" and "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"neither of which is shown in full:"}]},{"syntax":"swift","code":["class DataImporter {","    \/*","    DataImporter is a class to import data from an external file.","    The class is assumed to take a nontrivial amount of time to initialize.","    *\/","    var filename = \"data.txt\"","    \/\/ the DataImporter class would provide data importing functionality here","}","","class DataManager {","    lazy var importer = DataImporter()","    var data: [String] = []","    \/\/ the DataManager class would provide data management functionality here","}","","let manager = DataManager()","manager.data.append(\"Some data\")","manager.data.append(\"Some more data\")","\/\/ the DataImporter instance for the importer property hasn't yet been created"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" class has a stored property called "},{"type":"codeVoice","code":"data"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is initialized with a new, empty array of "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Although the rest of its functionality isn’t shown,"},{"text":" ","type":"text"},{"text":"the purpose of this ","type":"text"},{"type":"codeVoice","code":"DataManager"},{"text":" class is to manage and provide access to","type":"text"},{"text":" ","type":"text"},{"text":"this array of ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" data."}]},{"inlineContent":[{"type":"text","text":"Part of the functionality of the "},{"code":"DataManager","type":"codeVoice"},{"type":"text","text":" class"},{"text":" ","type":"text"},{"type":"text","text":"is the ability to import data from a file."},{"type":"text","text":" "},{"type":"text","text":"This functionality is provided by the "},{"code":"DataImporter","type":"codeVoice"},{"text":" class,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is assumed to take a nontrivial amount of time to initialize."},{"type":"text","text":" "},{"text":"This might be because a ","type":"text"},{"type":"codeVoice","code":"DataImporter"},{"type":"text","text":" instance needs to open a file"},{"text":" ","type":"text"},{"type":"text","text":"and read its contents into memory when the "},{"code":"DataImporter","type":"codeVoice"},{"type":"text","text":" instance is initialized."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because it’s possible for a "},{"type":"codeVoice","code":"DataManager"},{"text":" instance to manage its data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without ever importing data from a file,"},{"type":"text","text":" "},{"type":"codeVoice","code":"DataManager"},{"text":" doesn’t create a new ","type":"text"},{"code":"DataImporter","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"when the ","type":"text"},{"type":"codeVoice","code":"DataManager"},{"type":"text","text":" itself is created."},{"text":" ","type":"text"},{"type":"text","text":"Instead, it makes more sense to create the "},{"code":"DataImporter","type":"codeVoice"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"text":"if and when it’s first used.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because it’s marked with the ","type":"text"},{"code":"lazy","type":"codeVoice"},{"text":" modifier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"DataImporter"},{"text":" instance for the ","type":"text"},{"code":"importer","type":"codeVoice"},{"type":"text","text":" property"},{"type":"text","text":" "},{"text":"is only created when the ","type":"text"},{"type":"codeVoice","code":"importer"},{"type":"text","text":" property is first accessed,"},{"type":"text","text":" "},{"text":"such as when its ","type":"text"},{"type":"codeVoice","code":"filename"},{"type":"text","text":" property is queried:"}]},{"type":"codeListing","syntax":"swift","code":["print(manager.importer.filename)","\/\/ the DataImporter instance for the importer property has now been created","\/\/ Prints \"data.txt\""]},{"content":[{"inlineContent":[{"type":"text","text":"If a property marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"text":"is accessed by multiple threads simultaneously","type":"text"},{"type":"text","text":" "},{"text":"and the property hasn’t yet been initialized,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there’s no guarantee that the property will be initialized only once."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"anchor":"Stored-Properties-and-Instance-Variables","type":"heading","text":"Stored Properties and Instance Variables","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with Objective-C,"},{"text":" ","type":"text"},{"text":"you may know that it provides ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" ways"},{"text":" ","type":"text"},{"type":"text","text":"to store values and references as part of a class instance."},{"text":" ","type":"text"},{"text":"In addition to properties,","type":"text"},{"text":" ","type":"text"},{"text":"you can use instance variables as a backing store for the values stored in a property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift unifies these concepts into a single property declaration.","type":"text"},{"type":"text","text":" "},{"text":"A Swift property doesn’t have a corresponding instance variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the backing store for a property isn’t accessed directly."},{"type":"text","text":" "},{"type":"text","text":"This approach avoids confusion about how the value is accessed in different contexts"},{"type":"text","text":" "},{"type":"text","text":"and simplifies the property’s declaration into a single, definitive statement."},{"type":"text","text":" "},{"text":"All information about the property —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including its name, type, and memory management characteristics —"},{"type":"text","text":" "},{"text":"is defined in a single location as part of the type’s definition.","type":"text"}]},{"level":2,"type":"heading","text":"Computed Properties","anchor":"Computed-Properties"},{"inlineContent":[{"type":"text","text":"In addition to stored properties,"},{"text":" ","type":"text"},{"text":"classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"computed properties","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which don’t actually store a value."},{"type":"text","text":" "},{"text":"Instead, they provide a getter and an optional setter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to retrieve and set other properties and values indirectly."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","}","struct Size {","    var width = 0.0, height = 0.0","}","struct Rect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            let centerX = origin.x + (size.width \/ 2)","            let centerY = origin.y + (size.height \/ 2)","            return Point(x: centerX, y: centerY)","        }","        set(newCenter) {","            origin.x = newCenter.x - (size.width \/ 2)","            origin.y = newCenter.y - (size.height \/ 2)","        }","    }","}","var square = Rect(origin: Point(x: 0.0, y: 0.0),","    size: Size(width: 10.0, height: 10.0))","let initialSquareCenter = square.center","\/\/ initialSquareCenter is at (5.0, 5.0)","square.center = Point(x: 15.0, y: 15.0)","print(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")","\/\/ Prints \"square.origin is now at (10.0, 10.0)\""]},{"type":"paragraph","inlineContent":[{"text":"This example defines three structures for working with geometric shapes:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Point"},{"text":" encapsulates the x- and y-coordinate of a point.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Size"},{"type":"text","text":" encapsulates a "},{"code":"width","type":"codeVoice"},{"type":"text","text":" and a "},{"type":"codeVoice","code":"height"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Rect","type":"codeVoice"},{"type":"text","text":" defines a rectangle by an origin point and a size."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" structure also provides a computed property called ","type":"text"},{"code":"center","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The current center position of a ","type":"text"},{"type":"codeVoice","code":"Rect"},{"text":" can always be determined from its ","type":"text"},{"type":"codeVoice","code":"origin"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"size"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and so you don’t need to store the center point as an explicit "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"text":"Instead, ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" defines a custom getter and setter for a computed variable called "},{"type":"codeVoice","code":"center"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to enable you to work with the rectangle’s ","type":"text"},{"code":"center","type":"codeVoice"},{"text":" as if it were a real stored property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The example above creates a new ","type":"text"},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"square"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"square"},{"type":"text","text":" variable is initialized with an origin point of "},{"type":"codeVoice","code":"(0, 0)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and a width and height of "},{"code":"10","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This square is represented by the light green square in the diagram below.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"square"},{"type":"text","text":" variable’s "},{"code":"center","type":"codeVoice"},{"type":"text","text":" property is then accessed through dot syntax ("},{"type":"codeVoice","code":"square.center"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which causes the getter for "},{"type":"codeVoice","code":"center"},{"text":" to be called,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to retrieve the current property value."},{"text":" ","type":"text"},{"type":"text","text":"Rather than returning an existing value,"},{"text":" ","type":"text"},{"text":"the getter actually calculates and returns a new ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" to represent the center of the square."},{"text":" ","type":"text"},{"text":"As can be seen above, the getter correctly returns a center point of ","type":"text"},{"type":"codeVoice","code":"(5, 5)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"center","type":"codeVoice"},{"type":"text","text":" property is then set to a new value of "},{"type":"codeVoice","code":"(15, 15)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which moves the square up and to the right,"},{"type":"text","text":" "},{"text":"to the new position shown by the dark green square in the diagram below.","type":"text"},{"type":"text","text":" "},{"text":"Setting the ","type":"text"},{"code":"center","type":"codeVoice"},{"text":" property calls the setter for ","type":"text"},{"type":"codeVoice","code":"center"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which modifies the "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" values of the stored "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"text":"and moves the square to its new position.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"computedProperties"}]},{"text":"Shorthand Setter Declaration","level":3,"anchor":"Shorthand-Setter-Declaration","type":"heading"},{"inlineContent":[{"text":"If a computed property’s setter doesn’t define a name for the new value to be set,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a default name of "},{"code":"newValue","type":"codeVoice"},{"text":" is used.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s an alternative version of the ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure"},{"text":" ","type":"text"},{"type":"text","text":"that takes advantage of this shorthand notation:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct AlternativeRect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            let centerX = origin.x + (size.width \/ 2)","            let centerY = origin.y + (size.height \/ 2)","            return Point(x: centerX, y: centerY)","        }","        set {","            origin.x = newValue.x - (size.width \/ 2)","            origin.y = newValue.y - (size.height \/ 2)","        }","    }","}"]},{"type":"heading","anchor":"Shorthand-Getter-Declaration","level":3,"text":"Shorthand Getter Declaration"},{"inlineContent":[{"type":"text","text":"If the entire body of a getter is a single expression,"},{"text":" ","type":"text"},{"text":"the getter implicitly returns that expression.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s another version of the ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure"},{"text":" ","type":"text"},{"text":"that takes advantage of this shorthand notation","type":"text"},{"text":" ","type":"text"},{"text":"and the shorthand notation for setters:","type":"text"}],"type":"paragraph"},{"code":["struct CompactRect {","    var origin = Point()","    var size = Size()","    var center: Point {","        get {","            Point(x: origin.x + (size.width \/ 2),","                  y: origin.y + (size.height \/ 2))","        }","        set {","            origin.x = newValue.x - (size.width \/ 2)","            origin.y = newValue.y - (size.height \/ 2)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Omitting the "},{"code":"return","type":"codeVoice"},{"type":"text","text":" from a getter"},{"type":"text","text":" "},{"text":"follows the same rules as omitting ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" from a function,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Read-Only Computed Properties","anchor":"Read-Only-Computed-Properties","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A computed property with a getter but no setter is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"read-only computed property"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A read-only computed property always returns a value,"},{"text":" ","type":"text"},{"text":"and can be accessed through dot syntax, but can’t be set to a different value.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You must declare computed properties — including read-only computed properties —"},{"type":"text","text":" "},{"type":"text","text":"as variable properties with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" keyword, because their value isn’t fixed."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"let","type":"codeVoice"},{"text":" keyword is only used for constant properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that their values can’t be changed once they’re set"},{"type":"text","text":" "},{"type":"text","text":"as part of instance initialization."}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can simplify the declaration of a read-only computed property"},{"type":"text","text":" "},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}]},{"code":["struct Cuboid {","    var width = 0.0, height = 0.0, depth = 0.0","    var volume: Double {","        return width * height * depth","    }","}","let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)","print(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")","\/\/ Prints \"the volume of fourByFiveByTwo is 40.0\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This example defines a new structure called ","type":"text"},{"code":"Cuboid","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which represents a 3D rectangular box with ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":", "},{"type":"codeVoice","code":"height"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"depth"},{"text":" properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This structure also has a read-only computed property called "},{"type":"codeVoice","code":"volume"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which calculates and returns the current volume of the cuboid."},{"text":" ","type":"text"},{"type":"text","text":"It doesn’t make sense for "},{"code":"volume","type":"codeVoice"},{"type":"text","text":" to be settable,"},{"type":"text","text":" "},{"type":"text","text":"because it would be ambiguous as to which values of "},{"code":"width","type":"codeVoice"},{"type":"text","text":", "},{"code":"height","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" "},{"type":"text","text":"should be used for a particular "},{"code":"volume","type":"codeVoice"},{"text":" value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, it’s useful for a "},{"type":"codeVoice","code":"Cuboid"},{"type":"text","text":" to provide a read-only computed property"},{"type":"text","text":" "},{"text":"to enable external users to discover its current calculated volume.","type":"text"}]},{"level":2,"type":"heading","text":"Property Observers","anchor":"Property-Observers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property observers observe and respond to changes in a property’s value."},{"type":"text","text":" "},{"text":"Property observers are called every time a property’s value is set,","type":"text"},{"type":"text","text":" "},{"text":"even if the new value is the same as the property’s current value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add property observers in the following places:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Stored properties that you define"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Stored properties that you inherit","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Computed properties that you inherit"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For an inherited property,"},{"type":"text","text":" "},{"type":"text","text":"you add a property observer by overriding that property in a subclass."},{"text":" ","type":"text"},{"text":"For a computed property that you define,","type":"text"},{"type":"text","text":" "},{"text":"use the property’s setter to observe and respond to value changes,","type":"text"},{"type":"text","text":" "},{"text":"instead of trying to create an observer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Overriding properties is described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You have the option to define either or both of these observers on a property:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"willSet","type":"codeVoice"},{"text":" is called just before the value is stored.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didSet"},{"text":" is called immediately after the new value is stored.","type":"text"}]}]}]},{"inlineContent":[{"text":"If you implement a ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" observer,","type":"text"},{"type":"text","text":" "},{"text":"it’s passed the new property value as a constant parameter.","type":"text"},{"text":" ","type":"text"},{"text":"You can specify a name for this parameter as part of your ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" implementation.","type":"text"},{"type":"text","text":" "},{"text":"If you don’t write the parameter name and parentheses within your implementation,","type":"text"},{"text":" ","type":"text"},{"text":"the parameter is made available with a default parameter name of ","type":"text"},{"code":"newValue","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Similarly, if you implement a ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer,"},{"text":" ","type":"text"},{"text":"it’s passed a constant parameter containing the old property value.","type":"text"},{"type":"text","text":" "},{"text":"You can name the parameter or use the default parameter name of ","type":"text"},{"type":"codeVoice","code":"oldValue"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you assign a value to a property within its own "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer,"},{"type":"text","text":" "},{"type":"text","text":"the new value that you assign replaces the one that was just set."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":" observers of superclass properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are called when a property is set in a subclass initializer,"},{"type":"text","text":" "},{"text":"after the superclass initializer has been called.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They aren’t called while a class is setting its own properties,"},{"type":"text","text":" "},{"text":"before the superclass initializer has been called.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about initializer delegation,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","isActive":true},{"type":"text","text":"."}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Here’s an example of "},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" in action.","type":"text"},{"text":" ","type":"text"},{"text":"The example below defines a new class called ","type":"text"},{"code":"StepCounter","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which tracks the total number of steps that a person takes while walking.","type":"text"},{"type":"text","text":" "},{"text":"This class might be used with input data from a pedometer or other step counter","type":"text"},{"type":"text","text":" "},{"text":"to keep track of a person’s exercise during their daily routine.","type":"text"}],"type":"paragraph"},{"code":["class StepCounter {","    var totalSteps: Int = 0 {","        willSet(newTotalSteps) {","            print(\"About to set totalSteps to \\(newTotalSteps)\")","        }","        didSet {","            if totalSteps > oldValue  {","                print(\"Added \\(totalSteps - oldValue) steps\")","            }","        }","    }","}","let stepCounter = StepCounter()","stepCounter.totalSteps = 200","\/\/ About to set totalSteps to 200","\/\/ Added 200 steps","stepCounter.totalSteps = 360","\/\/ About to set totalSteps to 360","\/\/ Added 160 steps","stepCounter.totalSteps = 896","\/\/ About to set totalSteps to 896","\/\/ Added 536 steps"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"StepCounter","type":"codeVoice"},{"text":" class declares a ","type":"text"},{"type":"codeVoice","code":"totalSteps"},{"type":"text","text":" property of type "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This is a stored property with ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observers.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observers for ","type":"text"},{"type":"codeVoice","code":"totalSteps"},{"text":" are called","type":"text"},{"type":"text","text":" "},{"text":"whenever the property is assigned a new value.","type":"text"},{"text":" ","type":"text"},{"text":"This is true even if the new value is the same as the current value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This example’s ","type":"text"},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer uses"},{"type":"text","text":" "},{"text":"a custom parameter name of ","type":"text"},{"code":"newTotalSteps","type":"codeVoice"},{"type":"text","text":" for the upcoming new value."},{"text":" ","type":"text"},{"type":"text","text":"In this example, it simply prints out the value that’s about to be set."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observer is called after the value of ","type":"text"},{"type":"codeVoice","code":"totalSteps"},{"text":" is updated.","type":"text"},{"text":" ","type":"text"},{"text":"It compares the new value of ","type":"text"},{"type":"codeVoice","code":"totalSteps"},{"text":" against the old value.","type":"text"},{"text":" ","type":"text"},{"text":"If the total number of steps has increased,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a message is printed to indicate how many new steps have been taken."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer doesn’t provide a custom parameter name for the old value,"},{"text":" ","type":"text"},{"type":"text","text":"and the default name of "},{"code":"oldValue","type":"codeVoice"},{"type":"text","text":" is used instead."}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"If you pass a property that has observers"},{"text":" ","type":"text"},{"text":"to a function as an in-out parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers are always called."},{"text":" ","type":"text"},{"text":"This is because of the copy-in copy-out memory model for in-out parameters:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The value is always written back to the property at the end of the function."},{"text":" ","type":"text"},{"type":"text","text":"For a detailed discussion of the behavior of in-out parameters,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters"},{"text":".","type":"text"}],"type":"paragraph"}]},{"text":"Property Wrappers","anchor":"Property-Wrappers","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper adds a layer of separation"},{"text":" ","type":"text"},{"text":"between code that manages how a property is stored","type":"text"},{"text":" ","type":"text"},{"text":"and the code that defines a property.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you have properties that"},{"type":"text","text":" "},{"text":"provide thread-safety checks","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or store their underlying data in a database,"},{"text":" ","type":"text"},{"text":"you have to write that code on every property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When you use a property wrapper,"},{"type":"text","text":" "},{"text":"you write the management code once when you define the wrapper,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and then reuse that management code by applying it to multiple properties."}]},{"type":"paragraph","inlineContent":[{"text":"To define a property wrapper,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you make a structure, enumeration, or class"},{"type":"text","text":" "},{"text":"that defines a ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"In the code below,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"TwelveOrLess"},{"text":" structure ensures that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the value it wraps always contains a number less than or equal to 12."},{"type":"text","text":" "},{"text":"If you ask it to store a larger number, it stores 12 instead.","type":"text"}]},{"code":["@propertyWrapper","struct TwelveOrLess {","    private var number = 0","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, 12) }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The setter ensures that new values are less than or equal to 12,"},{"type":"text","text":" "},{"type":"text","text":"and the getter returns the stored value."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration for ","type":"text"},{"type":"codeVoice","code":"number"},{"text":" in the example above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"marks the variable as "},{"type":"codeVoice","code":"private"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which ensures "},{"code":"number","type":"codeVoice"},{"type":"text","text":" is used only"},{"text":" ","type":"text"},{"type":"text","text":"in the implementation of "},{"type":"codeVoice","code":"TwelveOrLess"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Code that’s written anywhere else"},{"text":" ","type":"text"},{"text":"accesses the value using the getter and setter for ","type":"text"},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and can’t use "},{"code":"number","type":"codeVoice"},{"type":"text","text":" directly."},{"text":" ","type":"text"},{"type":"text","text":"For information about "},{"code":"private","type":"codeVoice"},{"text":", see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference","isActive":true},{"text":".","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"You apply a wrapper to a property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by writing the wrapper’s name before the property"},{"type":"text","text":" "},{"type":"text","text":"as an attribute."},{"text":" ","type":"text"},{"type":"text","text":"Here’s a structure that stores a rectangle"},{"text":" ","type":"text"},{"type":"text","text":"that uses the "},{"type":"codeVoice","code":"TwelveOrLess"},{"text":" property wrapper","type":"text"},{"type":"text","text":" "},{"text":"to ensure its dimensions are always 12 or less:","type":"text"}]},{"code":["struct SmallRectangle {","    @TwelveOrLess var height: Int","    @TwelveOrLess var width: Int","}","","var rectangle = SmallRectangle()","print(rectangle.height)","\/\/ Prints \"0\"","","rectangle.height = 10","print(rectangle.height)","\/\/ Prints \"10\"","","rectangle.height = 24","print(rectangle.height)","\/\/ Prints \"12\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"type":"text","text":" properties get their initial values"},{"type":"text","text":" "},{"type":"text","text":"from the definition of "},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which sets "},{"type":"codeVoice","code":"TwelveOrLess.number"},{"text":" to zero.","type":"text"},{"text":" ","type":"text"},{"text":"The setter in ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"text":" treats 10 as a valid value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so storing the number 10 in "},{"type":"codeVoice","code":"rectangle.height"},{"type":"text","text":" proceeds as written."},{"type":"text","text":" "},{"text":"However, 24 is larger than ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":" allows,"},{"type":"text","text":" "},{"type":"text","text":"so trying to store 24 end up setting "},{"code":"rectangle.height","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to 12 instead, the largest allowed value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you apply a wrapper to a property,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler synthesizes code that provides storage for the wrapper"},{"type":"text","text":" "},{"type":"text","text":"and code that provides access to the property through the wrapper."},{"text":" ","type":"text"},{"type":"text","text":"(The property wrapper is responsible for storing the wrapped value,"},{"type":"text","text":" "},{"text":"so there’s no synthesized code for that.)","type":"text"},{"text":" ","type":"text"},{"text":"You could write code that uses the behavior of a property wrapper,","type":"text"},{"type":"text","text":" "},{"text":"without taking advantage of the special attribute syntax.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a version of "},{"code":"SmallRectangle","type":"codeVoice"},{"text":" ","type":"text"},{"text":"from the previous code listing","type":"text"},{"text":" ","type":"text"},{"text":"that wraps its properties in the ","type":"text"},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" structure explicitly,"},{"text":" ","type":"text"},{"type":"text","text":"instead of writing "},{"type":"codeVoice","code":"@TwelveOrLess"},{"type":"text","text":" as an attribute:"}],"type":"paragraph"},{"code":["struct SmallRectangle {","    private var _height = TwelveOrLess()","    private var _width = TwelveOrLess()","    var height: Int {","        get { return _height.wrappedValue }","        set { _height.wrappedValue = newValue }","    }","    var width: Int {","        get { return _width.wrappedValue }","        set { _width.wrappedValue = newValue }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"_height"},{"type":"text","text":" and "},{"code":"_width","type":"codeVoice"},{"type":"text","text":" properties"},{"text":" ","type":"text"},{"type":"text","text":"store an instance of the property wrapper, "},{"type":"codeVoice","code":"TwelveOrLess"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The getter and setter for "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"type":"text","text":" "},{"text":"wrap access to the ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":" property.","type":"text"}],"type":"paragraph"},{"anchor":"Setting-Initial-Values-for-Wrapped-Properties","type":"heading","text":"Setting Initial Values for Wrapped Properties","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code in the examples above"},{"type":"text","text":" "},{"type":"text","text":"sets the initial value for the wrapped property"},{"type":"text","text":" "},{"text":"by giving ","type":"text"},{"type":"codeVoice","code":"number"},{"text":" an initial value in the definition of ","type":"text"},{"code":"TwelveOrLess","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Code that uses this property wrapper","type":"text"},{"type":"text","text":" "},{"text":"can’t specify a different initial value for a property","type":"text"},{"type":"text","text":" "},{"text":"that’s wrapped by ","type":"text"},{"type":"codeVoice","code":"TwelveOrLess"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"for example,"},{"type":"text","text":" "},{"type":"text","text":"the definition of "},{"code":"SmallRectangle","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"can’t give "},{"code":"height","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" initial values."},{"text":" ","type":"text"},{"type":"text","text":"To support setting an initial value or other customization,"},{"text":" ","type":"text"},{"text":"the property wrapper needs to add an initializer.","type":"text"},{"type":"text","text":" "},{"text":"Here’s an expanded version of ","type":"text"},{"type":"codeVoice","code":"TwelveOrLess"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" "},{"type":"text","text":"that defines initializers that set the wrapped and maximum value:"}]},{"syntax":"swift","type":"codeListing","code":["@propertyWrapper","struct SmallNumber {","    private var maximum: Int","    private var number: Int","","    var wrappedValue: Int {","        get { return number }","        set { number = min(newValue, maximum) }","    }","","    init() {","        maximum = 12","        number = 0","    }","    init(wrappedValue: Int) {","        maximum = 12","        number = min(wrappedValue, maximum)","    }","    init(wrappedValue: Int, maximum: Int) {","        self.maximum = maximum","        number = min(wrappedValue, maximum)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The definition of "},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" includes three initializers —"},{"type":"text","text":" "},{"code":"init()","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"init(wrappedValue:)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"init(wrappedValue:maximum:)"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which the examples below use"},{"type":"text","text":" "},{"text":"to set the wrapped value and the maximum value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about initialization and initializer syntax,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"When you apply a wrapper to a property and you don’t specify an initial value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift uses the "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" initializer to set up the wrapper."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ZeroRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","}","","var zeroRectangle = ZeroRectangle()","print(zeroRectangle.height, zeroRectangle.width)","\/\/ Prints \"0 0\""],"type":"codeListing"},{"inlineContent":[{"text":"The instances of ","type":"text"},{"code":"SmallNumber","type":"codeVoice"},{"text":" that wrap ","type":"text"},{"type":"codeVoice","code":"height"},{"text":" and ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"are created by calling "},{"code":"SmallNumber()","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The code inside that initializer"},{"text":" ","type":"text"},{"text":"sets the initial wrapped value and the initial maximum value,","type":"text"},{"text":" ","type":"text"},{"text":"using the default values of zero and 12.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The property wrapper still provides all of the initial values,"},{"text":" ","type":"text"},{"type":"text","text":"like the earlier example that used "},{"code":"TwelveOrLess","type":"codeVoice"},{"type":"text","text":" in "},{"code":"SmallRectangle","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Unlike that example,","type":"text"},{"type":"text","text":" "},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" also supports writing those initial values"},{"type":"text","text":" "},{"text":"as part of declaring the property.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When you specify an initial value for the property,","type":"text"},{"text":" ","type":"text"},{"text":"Swift uses the ","type":"text"},{"code":"init(wrappedValue:)","type":"codeVoice"},{"text":" initializer to set up the wrapper.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["struct UnitRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber var width: Int = 1","}","","var unitRectangle = UnitRectangle()","print(unitRectangle.height, unitRectangle.width)","\/\/ Prints \"1 1\""]},{"inlineContent":[{"text":"When you write ","type":"text"},{"type":"codeVoice","code":"= 1"},{"text":" on a property with a wrapper,","type":"text"},{"text":" ","type":"text"},{"text":"that’s translated into a call to the ","type":"text"},{"code":"init(wrappedValue:)","type":"codeVoice"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"type":"text","text":"The instances of "},{"code":"SmallNumber","type":"codeVoice"},{"type":"text","text":" that wrap "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"text":"are created by calling ","type":"text"},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 1)"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The initializer uses the wrapped value that’s specified here,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it uses the default maximum value of 12."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When you write arguments in parentheses after the custom attribute,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift uses the initializer that accepts those arguments to set up the wrapper."},{"type":"text","text":" "},{"text":"For example, if you provide an initial value and a maximum value,","type":"text"},{"text":" ","type":"text"},{"text":"Swift uses the ","type":"text"},{"type":"codeVoice","code":"init(wrappedValue:maximum:)"},{"text":" initializer:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct NarrowRectangle {","    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int","    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int","}","","var narrowRectangle = NarrowRectangle()","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"2 3\"","","narrowRectangle.height = 100","narrowRectangle.width = 100","print(narrowRectangle.height, narrowRectangle.width)","\/\/ Prints \"5 4\""]},{"inlineContent":[{"type":"text","text":"The instance of "},{"type":"codeVoice","code":"SmallNumber"},{"text":" that wraps ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"code":"SmallNumber(wrappedValue: 2, maximum: 5)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and the instance that wraps ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 3, maximum: 4)"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By including arguments to the property wrapper,"},{"text":" ","type":"text"},{"type":"text","text":"you can set up the initial state in the wrapper"},{"text":" ","type":"text"},{"text":"or pass other options to the wrapper when it’s created.","type":"text"},{"text":" ","type":"text"},{"text":"This syntax is the most general way to use a property wrapper.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can provide whatever arguments you need to the attribute,"},{"text":" ","type":"text"},{"text":"and they’re passed to the initializer.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When you include property wrapper arguments,"},{"type":"text","text":" "},{"type":"text","text":"you can also specify an initial value using assignment."},{"text":" ","type":"text"},{"text":"Swift treats the assignment like a ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" argument"},{"text":" ","type":"text"},{"type":"text","text":"and uses the initializer that accepts the arguments you include."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["struct MixedRectangle {","    @SmallNumber var height: Int = 1","    @SmallNumber(maximum: 9) var width: Int = 2","}","","var mixedRectangle = MixedRectangle()","print(mixedRectangle.height)","\/\/ Prints \"1\"","","mixedRectangle.height = 20","print(mixedRectangle.height)","\/\/ Prints \"12\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance of "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" that wraps "},{"type":"codeVoice","code":"height"},{"type":"text","text":" "},{"type":"text","text":"is created by calling "},{"code":"SmallNumber(wrappedValue: 1)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which uses the default maximum value of 12."},{"type":"text","text":" "},{"type":"text","text":"The instance that wraps "},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"text":"is created by calling ","type":"text"},{"type":"codeVoice","code":"SmallNumber(wrappedValue: 2, maximum: 9)"},{"text":".","type":"text"}]},{"level":3,"text":"Projecting a Value From a Property Wrapper","anchor":"Projecting-a-Value-From-a-Property-Wrapper","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the wrapped value,"},{"type":"text","text":" "},{"text":"a property wrapper can expose additional functionality","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by defining a "},{"inlineContent":[{"text":"projected value","type":"text"}],"type":"emphasis"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"for example, a property wrapper that manages access to a database"},{"text":" ","type":"text"},{"type":"text","text":"can expose a "},{"code":"flushDatabaseConnection()","type":"codeVoice"},{"text":" method on its projected value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The name of the projected value is the same as the wrapped value,"},{"type":"text","text":" "},{"text":"except it begins with a dollar sign (","type":"text"},{"type":"codeVoice","code":"$"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Because your code can’t define properties that start with "},{"type":"codeVoice","code":"$"},{"type":"text","text":" "},{"text":"the projected value never interferes with properties you define.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"code":"SmallNumber","type":"codeVoice"},{"text":" example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you try to set the property to a number that’s too large,"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper adjusts the number before storing it."},{"text":" ","type":"text"},{"type":"text","text":"The code below adds a "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":" property to the "},{"type":"codeVoice","code":"SmallNumber"},{"text":" structure","type":"text"},{"text":" ","type":"text"},{"text":"to keep track of whether the property wrapper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"adjusted the new value for the property before storing that new value."}]},{"syntax":"swift","type":"codeListing","code":["@propertyWrapper","struct SmallNumber {","    private var number: Int","    private(set) var projectedValue: Bool","","    var wrappedValue: Int {","        get { return number }","        set {","            if newValue > 12 {","                number = 12","                projectedValue = true","            } else {","                number = newValue","                projectedValue = false","            }","        }","    }","","    init() {","        self.number = 0","        self.projectedValue = false","    }","}","struct SomeStructure {","    @SmallNumber var someNumber: Int","}","var someStructure = SomeStructure()","","someStructure.someNumber = 4","print(someStructure.$someNumber)","\/\/ Prints \"false\"","","someStructure.someNumber = 55","print(someStructure.$someNumber)","\/\/ Prints \"true\""]},{"type":"paragraph","inlineContent":[{"text":"Writing ","type":"text"},{"code":"someStructure.$someNumber","type":"codeVoice"},{"type":"text","text":" accesses the wrapper’s projected value."},{"text":" ","type":"text"},{"type":"text","text":"After storing a small number like four,"},{"text":" ","type":"text"},{"text":"the value of ","type":"text"},{"type":"codeVoice","code":"someStructure.$someNumber"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"the projected value is "},{"type":"codeVoice","code":"true"},{"text":" ","type":"text"},{"text":"after trying to store a number that’s too large, like 55.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property wrapper can return a value of any type as its projected value."},{"text":" ","type":"text"},{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper exposes only one piece of information —"},{"type":"text","text":" "},{"text":"whether the number was adjusted —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so it exposes that Boolean value as its projected value."},{"text":" ","type":"text"},{"type":"text","text":"A wrapper that needs to expose more information"},{"type":"text","text":" "},{"type":"text","text":"can return an instance of some other type,"},{"type":"text","text":" "},{"type":"text","text":"or it can return "},{"type":"codeVoice","code":"self"},{"text":" ","type":"text"},{"type":"text","text":"to expose the instance of the wrapper as its projected value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you access a projected value from code that’s part of the type,"},{"type":"text","text":" "},{"type":"text","text":"like a property getter or an instance method,"},{"text":" ","type":"text"},{"text":"you can omit ","type":"text"},{"type":"codeVoice","code":"self."},{"text":" before the property name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"just like accessing other properties."},{"type":"text","text":" "},{"text":"The code in the following example refers to the projected value","type":"text"},{"text":" ","type":"text"},{"text":"of the wrapper around ","type":"text"},{"code":"height","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" as "},{"code":"$height","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"$width"},{"type":"text","text":":"}]},{"code":["enum Size {","    case small, large","}","","struct SizedRectangle {","    @SmallNumber var height: Int","    @SmallNumber var width: Int","","    mutating func resize(to size: Size) -> Bool {","        switch size {","        case .small:","            height = 10","            width = 20","        case .large:","            height = 100","            width = 100","        }","        return $height || $width","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because property wrapper syntax is just syntactic sugar"},{"text":" ","type":"text"},{"text":"for a property with a getter and a setter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"accessing "},{"type":"codeVoice","code":"height"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" "},{"text":"behaves the same as accessing any other property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the code in "},{"type":"codeVoice","code":"resize(to:)"},{"text":" accesses ","type":"text"},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"code":"width","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"using their property wrapper."},{"text":" ","type":"text"},{"type":"text","text":"If you call "},{"code":"resize(to: .large)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the switch case for ","type":"text"},{"code":".large","type":"codeVoice"},{"type":"text","text":" sets the rectangle’s height and width to 100."},{"text":" ","type":"text"},{"text":"The wrapper prevents the value of those properties","type":"text"},{"text":" ","type":"text"},{"text":"from being larger than 12,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it sets the projected value to "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to record the fact that it adjusted their values."},{"type":"text","text":" "},{"type":"text","text":"At the end of "},{"code":"resize(to:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the return statement checks "},{"code":"$height","type":"codeVoice"},{"type":"text","text":" and "},{"code":"$width","type":"codeVoice"},{"type":"text","text":" "},{"text":"to determine whether","type":"text"},{"type":"text","text":" "},{"text":"the property wrapper adjusted either ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"width"},{"type":"text","text":"."}]},{"level":2,"text":"Global and Local Variables","type":"heading","anchor":"Global-and-Local-Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The capabilities described above for computing and observing properties"},{"text":" ","type":"text"},{"type":"text","text":"are also available to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global variables"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"local variables"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Global variables are variables that are defined outside of any","type":"text"},{"text":" ","type":"text"},{"text":"function, method, closure, or type context.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Local variables are variables that are defined within"},{"type":"text","text":" "},{"text":"a function, method, or closure context.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The global and local variables you have encountered in previous chapters"},{"text":" ","type":"text"},{"type":"text","text":"have all been "},{"inlineContent":[{"text":"stored variables","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Stored variables, like stored properties,"},{"type":"text","text":" "},{"type":"text","text":"provide storage for a value of a certain type and allow that value to be set and retrieved."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, you can also define "},{"inlineContent":[{"type":"text","text":"computed variables"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"and define observers for stored variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in either a global or local scope."},{"text":" ","type":"text"},{"type":"text","text":"Computed variables calculate their value, rather than storing it,"},{"type":"text","text":" "},{"text":"and they’re written in the same way as computed properties.","type":"text"}]},{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"Global constants and variables are always computed lazily,","type":"text"},{"text":" ","type":"text"},{"text":"in a similar manner to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Unlike lazy stored properties,"},{"text":" ","type":"text"},{"type":"text","text":"global constants and variables don’t need to be marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier."}],"type":"paragraph"},{"inlineContent":[{"text":"Local constants and variables are never computed lazily.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"text":"You can apply a property wrapper to a local stored variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but not to a global variable or a computed variable."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"in the code below, "},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" uses "},{"type":"codeVoice","code":"SmallNumber"},{"type":"text","text":" as a property wrapper."}],"type":"paragraph"},{"code":["func someFunction() {","    @SmallNumber var myNumber: Int = 0","","    myNumber = 10","    \/\/ now myNumber is 10","","    myNumber = 24","    \/\/ now myNumber is 12","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like when you apply "},{"type":"codeVoice","code":"SmallNumber"},{"text":" to a property,","type":"text"},{"text":" ","type":"text"},{"text":"setting the value of ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"text":" to 10 is valid.","type":"text"},{"text":" ","type":"text"},{"text":"Because the property wrapper doesn’t allow values higher than 12,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it sets "},{"type":"codeVoice","code":"myNumber"},{"text":" to 12 instead of 24.","type":"text"}]},{"text":"Type Properties","anchor":"Type-Properties","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Instance properties are properties that belong to an instance of a particular type."},{"text":" ","type":"text"},{"text":"Every time you create a new instance of that type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it has its own set of property values, separate from any other instance."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can also define properties that belong to the type itself,","type":"text"},{"type":"text","text":" "},{"text":"not to any one instance of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"There will only ever be one copy of these properties,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many instances of that type you create."},{"type":"text","text":" "},{"text":"These kinds of properties are called ","type":"text"},{"inlineContent":[{"text":"type properties","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Type properties are useful for defining values that are universal to","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" instances of a particular type,"},{"text":" ","type":"text"},{"text":"such as a constant property that all instances can use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(like a static constant in C),"},{"type":"text","text":" "},{"type":"text","text":"or a variable property that stores a value that’s global to all instances of that type"},{"type":"text","text":" "},{"type":"text","text":"(like a static variable in C)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored type properties can be variables or constants."},{"type":"text","text":" "},{"type":"text","text":"Computed type properties are always declared as variable properties,"},{"text":" ","type":"text"},{"type":"text","text":"in the same way as computed instance properties."}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike stored instance properties,"},{"type":"text","text":" "},{"text":"you must always give stored type properties a default value.","type":"text"},{"text":" ","type":"text"},{"text":"This is because the type itself doesn’t have an initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that can assign a value to a stored type property at initialization time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stored type properties are lazily initialized on their first access."},{"type":"text","text":" "},{"type":"text","text":"They’re guaranteed to be initialized only once,"},{"type":"text","text":" "},{"type":"text","text":"even when accessed by multiple threads simultaneously,"},{"text":" ","type":"text"},{"type":"text","text":"and they don’t need to be marked with the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" modifier."}]}]},{"type":"heading","anchor":"Type-Property-Syntax","text":"Type Property Syntax","level":3},{"inlineContent":[{"type":"text","text":"In C and Objective-C, you define static constants and variables associated with a type"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"global"}]},{"type":"text","text":" static variables."},{"type":"text","text":" "},{"text":"In Swift, however, type properties are written as part of the type’s definition,","type":"text"},{"text":" ","type":"text"},{"text":"within the type’s outer curly braces,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and each type property is explicitly scoped to the type it supports."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You define type properties with the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"For computed type properties for class types,"},{"type":"text","text":" "},{"text":"you can use the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword instead","type":"text"},{"type":"text","text":" "},{"text":"to allow subclasses to override the superclass’s implementation.","type":"text"},{"type":"text","text":" "},{"text":"The example below shows the syntax for stored and computed type properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SomeStructure {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 1","    }","}","enum SomeEnumeration {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 6","    }","}","class SomeClass {","    static var storedTypeProperty = \"Some value.\"","    static var computedTypeProperty: Int {","        return 27","    }","    class var overrideableComputedTypeProperty: Int {","        return 107","    }","}"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The computed type property examples above are for read-only computed type properties,"},{"text":" ","type":"text"},{"text":"but you can also define read-write computed type properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the same syntax as for computed instance properties."}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"Querying-and-Setting-Type-Properties","level":3,"type":"heading","text":"Querying and Setting Type Properties"},{"type":"paragraph","inlineContent":[{"text":"Type properties are queried and set with dot syntax, just like instance properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, type properties are queried and set on the "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":", not on an instance of that type.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"code":["print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Some value.\"","SomeStructure.storedTypeProperty = \"Another value.\"","print(SomeStructure.storedTypeProperty)","\/\/ Prints \"Another value.\"","print(SomeEnumeration.computedTypeProperty)","\/\/ Prints \"6\"","print(SomeClass.computedTypeProperty)","\/\/ Prints \"27\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The examples that follow use two stored type properties as part of a structure"},{"text":" ","type":"text"},{"type":"text","text":"that models an audio level meter for a number of audio channels."},{"text":" ","type":"text"},{"type":"text","text":"Each channel has an integer audio level between "},{"code":"0","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"10","type":"codeVoice"},{"text":" inclusive.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The figure below illustrates how two of these audio channels can be combined","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to model a stereo audio level meter."},{"type":"text","text":" "},{"type":"text","text":"When a channel’s audio level is "},{"code":"0","type":"codeVoice"},{"text":", none of the lights for that channel are lit.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When the audio level is "},{"code":"10","type":"codeVoice"},{"type":"text","text":", all of the lights for that channel are lit."},{"type":"text","text":" "},{"type":"text","text":"In this figure, the left channel has a current level of "},{"code":"9","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the right channel has a current level of "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"staticPropertiesVUMeter"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The audio channels described above are represented by"},{"type":"text","text":" "},{"type":"text","text":"instances of the "},{"code":"AudioChannel","type":"codeVoice"},{"text":" structure:","type":"text"}]},{"code":["struct AudioChannel {","    static let thresholdLevel = 10","    static var maxInputLevelForAllChannels = 0","    var currentLevel: Int = 0 {","        didSet {","            if currentLevel > AudioChannel.thresholdLevel {","                \/\/ cap the new audio level to the threshold level","                currentLevel = AudioChannel.thresholdLevel","            }","            if currentLevel > AudioChannel.maxInputLevelForAllChannels {","                \/\/ store this as the new overall maximum input level","                AudioChannel.maxInputLevelForAllChannels = currentLevel","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"text":" structure defines two stored type properties to support its functionality.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"code":"thresholdLevel","type":"codeVoice"},{"text":", defines the maximum threshold value an audio level can take.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is a constant value of "},{"code":"10","type":"codeVoice"},{"text":" for all ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"If an audio signal comes in with a higher value than "},{"code":"10","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it will be capped to this threshold value (as described below)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second type property is"},{"text":" ","type":"text"},{"text":"a variable stored property called ","type":"text"},{"code":"maxInputLevelForAllChannels","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This keeps track of the maximum input value that has been received","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"text":"It starts with an initial value of ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"AudioChannel","type":"codeVoice"},{"text":" structure also defines","type":"text"},{"type":"text","text":" "},{"text":"a stored instance property called ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which represents the channel’s current audio level on a scale of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" to "},{"type":"codeVoice","code":"10"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"currentLevel"},{"text":" property has a ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" property observer"},{"type":"text","text":" "},{"text":"to check the value of ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":" whenever it’s set.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This observer performs two checks:"}]},{"items":[{"content":[{"inlineContent":[{"text":"If the new value of ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" is greater than the allowed "},{"code":"thresholdLevel","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the property observer caps ","type":"text"},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":" to "},{"code":"thresholdLevel","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the new value of "},{"type":"codeVoice","code":"currentLevel"},{"text":" (after any capping) is higher than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any value previously received by "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AudioChannel"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property observer stores the new "},{"type":"codeVoice","code":"currentLevel"},{"text":" value in","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"maxInputLevelForAllChannels"},{"type":"text","text":" type property."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the first of these two checks,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"didSet","type":"codeVoice"},{"text":" observer sets ","type":"text"},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":" to a different value."},{"type":"text","text":" "},{"type":"text","text":"This doesn’t, however, cause the observer to be called again."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"code":"AudioChannel","type":"codeVoice"},{"text":" structure to create","type":"text"},{"type":"text","text":" "},{"text":"two new audio channels called ","type":"text"},{"type":"codeVoice","code":"leftChannel"},{"type":"text","text":" and "},{"type":"codeVoice","code":"rightChannel"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to represent the audio levels of a stereo sound system:","type":"text"}]},{"syntax":"swift","code":["var leftChannel = AudioChannel()","var rightChannel = AudioChannel()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you set the ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"left"}]},{"type":"text","text":" channel to "},{"type":"codeVoice","code":"7"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can see that the "},{"code":"maxInputLevelForAllChannels","type":"codeVoice"},{"text":" type property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is updated to equal "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["leftChannel.currentLevel = 7","print(leftChannel.currentLevel)","\/\/ Prints \"7\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"7\""]},{"type":"paragraph","inlineContent":[{"text":"If you try to set the ","type":"text"},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":" of the "},{"inlineContent":[{"type":"text","text":"right"}],"type":"emphasis"},{"type":"text","text":" channel to "},{"code":"11","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you can see that the right channel’s "},{"type":"codeVoice","code":"currentLevel"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is capped to the maximum value of "},{"code":"10","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"maxInputLevelForAllChannels","type":"codeVoice"},{"type":"text","text":" type property is updated to equal "},{"type":"codeVoice","code":"10"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["rightChannel.currentLevel = 11","print(rightChannel.currentLevel)","\/\/ Prints \"10\"","print(AudioChannel.maxInputLevelForAllChannels)","\/\/ Prints \"10\""]}],"kind":"content"}],"metadata":{"title":"Properties"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"kind":"article","identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","kind":"section","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types","abstract":[],"type":"topic","title":"Initializer Delegation for Class Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","title":"Initializer Delegation for Value Types","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types","type":"topic"},"computedProperties":{"variants":[{"url":"\/images\/computedProperties@2x.png","traits":["2x","light"]},{"url":"\/images\/computedProperties~dark@2x.png","traits":["2x","dark"]}],"identifier":"computedProperties","type":"image","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"role":"article","title":"Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"topic","abstract":[{"text":"Manage the visibility of code by declaration, file, and module.","type":"text"}],"title":"Access Control","kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Lazy-Stored-Properties":{"url":"\/documentation\/the-swift-programming-language\/properties#Lazy-Stored-Properties","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Lazy-Stored-Properties","type":"topic","title":"Lazy Stored Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","title":"In-Out Parameters","abstract":[],"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Assigning-Constant-Properties-During-Initialization":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization","kind":"section","url":"\/documentation\/the-swift-programming-language\/initialization#Assigning-Constant-Properties-During-Initialization","abstract":[],"type":"topic","title":"Assigning Constant Properties During Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Overriding":{"url":"\/documentation\/the-swift-programming-language\/inheritance#Overriding","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding","type":"topic","title":"Overriding"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-With-an-Implicit-Return":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return","kind":"section","url":"\/documentation\/the-swift-programming-language\/functions#Functions-With-an-Implicit-Return","abstract":[],"type":"topic","title":"Functions With an Implicit Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Property-Values":{"url":"\/documentation\/the-swift-programming-language\/initialization#Default-Property-Values","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Property-Values","type":"topic","title":"Default Property Values"},"staticPropertiesVUMeter":{"identifier":"staticPropertiesVUMeter","variants":[{"url":"\/images\/staticPropertiesVUMeter@2x.png","traits":["2x","light"]},{"url":"\/images\/staticPropertiesVUMeter~dark@2x.png","traits":["2x","dark"]}],"alt":null,"type":"image"}}}