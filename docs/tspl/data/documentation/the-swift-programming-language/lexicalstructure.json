{"sections":[],"abstract":[{"text":"Use the lowest-level components of the syntax.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lexical structure"}]},{"type":"text","text":" of Swift describes what sequence of characters"},{"text":" ","type":"text"},{"type":"text","text":"form valid tokens of the language."},{"type":"text","text":" "},{"text":"These valid tokens form the lowest-level building blocks of the language","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and are used to describe the rest of the language in subsequent chapters."},{"text":" ","type":"text"},{"type":"text","text":"A token consists of an identifier, keyword, punctuation, literal, or operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In most cases, tokens are generated from the characters of a Swift source file"},{"text":" ","type":"text"},{"text":"by considering the longest possible substring from the input text,","type":"text"},{"text":" ","type":"text"},{"text":"within the constraints of the grammar that are specified below.","type":"text"},{"text":" ","type":"text"},{"text":"This behavior is referred to as ","type":"text"},{"inlineContent":[{"text":"longest match","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"maximal munch","type":"text"}]},{"type":"text","text":"."}]},{"level":2,"type":"heading","text":"Whitespace and Comments","anchor":"Whitespace-and-Comments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whitespace has two uses: to separate tokens in the source file"},{"type":"text","text":" "},{"type":"text","text":"and to distinguish between prefix, postfix, and infix operators"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators","type":"reference","isActive":true},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"but is otherwise ignored."},{"text":" ","type":"text"},{"text":"The following characters are considered whitespace:","type":"text"},{"type":"text","text":" "},{"text":"space (U+0020),","type":"text"},{"type":"text","text":" "},{"text":"line feed (U+000A),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"carriage return (U+000D),"},{"type":"text","text":" "},{"type":"text","text":"horizontal tab (U+0009),"},{"text":" ","type":"text"},{"text":"vertical tab (U+000B),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"form feed (U+000C)"},{"type":"text","text":" "},{"type":"text","text":"and null (U+0000)."}]},{"inlineContent":[{"text":"Comments are treated as whitespace by the compiler.","type":"text"},{"type":"text","text":" "},{"text":"Single line comments begin with ","type":"text"},{"code":"\/\/","type":"codeVoice"},{"type":"text","text":" "},{"text":"and continue until a line feed (U+000A)  or carriage return (U+000D).","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Multiline comments begin with "},{"code":"\/*","type":"codeVoice"},{"type":"text","text":" and end with "},{"type":"codeVoice","code":"*\/"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Nesting multiline comments is allowed,","type":"text"},{"text":" ","type":"text"},{"text":"but the comment markers must be balanced.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comments can contain additional formatting and markup,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"},{"text":".","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"whitespace","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"whitespace-item"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"whitespace"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"whitespace-item","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"line-break"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"whitespace-item"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inline-space"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"whitespace-item","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"comment","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"whitespace-item","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-comment"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"whitespace-item"}]},{"text":" → U+0000, U+000B, or U+000C","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"line-break"}]},{"type":"text","text":" → U+000A "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"line-break"}]},{"text":" → U+000D ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"line-break"}],"type":"emphasis"},{"text":" → U+000D followed by U+000A","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"inline-spaces","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inline-space"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"inline-spaces"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"inline-space"}]},{"text":" → U+0009 or U+0020","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"comment"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"\/\/"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"comment-text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"line-break","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"multiline-comment"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"\/*","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-comment-text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"*\/"}],"type":"strong"}]},{"inlineContent":[{"inlineContent":[{"text":"comment-text","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"comment-text-item"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"comment-text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"comment-text-item"}]},{"type":"text","text":" → Any Unicode scalar value except U+000A or U+000D"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"multiline-comment-text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"multiline-comment-text-item"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"multiline-comment-text","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-comment-text-item"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"multiline-comment","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"multiline-comment-text-item"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"comment-text-item"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"multiline-comment-text-item"}],"type":"emphasis"},{"type":"text","text":" → Any Unicode scalar value except  "},{"inlineContent":[{"type":"codeVoice","code":"\/*"}],"type":"strong"},{"type":"text","text":" or  "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"*\/"}]}],"type":"paragraph"}],"type":"aside","name":"Grammar of whitespace"},{"type":"heading","text":"Identifiers","anchor":"Identifiers","level":2},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Identifiers","type":"text"}]},{"type":"text","text":" begin with"},{"type":"text","text":" "},{"type":"text","text":"an uppercase or lowercase letter A through Z,"},{"type":"text","text":" "},{"type":"text","text":"an underscore ("},{"code":"_","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a noncombining alphanumeric Unicode character"},{"text":" ","type":"text"},{"type":"text","text":"in the Basic Multilingual Plane,"},{"type":"text","text":" "},{"text":"or a character outside the Basic Multilingual Plane","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that isn’t in a Private Use Area."},{"type":"text","text":" "},{"type":"text","text":"After the first character,"},{"type":"text","text":" "},{"text":"digits and combining Unicode characters are also allowed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Treat identifiers that begin with an underscore,"},{"type":"text","text":" "},{"text":"subscripts whose first argument label begins with an underscore,","type":"text"},{"type":"text","text":" "},{"text":"and initializers whose first argument label begins with an underscore,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as internal,"},{"text":" ","type":"text"},{"type":"text","text":"even if their declaration has the "},{"code":"public","type":"codeVoice"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"text":"This convention lets framework authors mark part of an API","type":"text"},{"text":" ","type":"text"},{"text":"that clients must not interact with or depend on,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though some limitation requires the declaration to be public."},{"type":"text","text":" "},{"type":"text","text":"In addition,"},{"type":"text","text":" "},{"type":"text","text":"identifiers that begin with two underscores"},{"text":" ","type":"text"},{"type":"text","text":"are reserved for the Swift compiler and standard library."}],"type":"paragraph"},{"inlineContent":[{"text":"To use a reserved word as an identifier,","type":"text"},{"text":" ","type":"text"},{"text":"put a backtick (`) before and after it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"class"},{"type":"text","text":" isn’t a valid identifier,"},{"text":" ","type":"text"},{"type":"text","text":"but "},{"type":"codeVoice","code":"`class`"},{"text":" is valid.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The backticks aren’t considered part of the identifier;"},{"type":"text","text":" "},{"code":"`x`","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"x"},{"type":"text","text":" have the same meaning."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside a closure with no explicit parameter names,"},{"text":" ","type":"text"},{"type":"text","text":"the parameters are implicitly named "},{"type":"codeVoice","code":"$0"},{"type":"text","text":", "},{"code":"$1","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"$2"},{"text":", and so on.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These names are valid identifiers within the scope of the closure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler synthesizes identifiers that begin with a dollar sign ("},{"code":"$","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"for properties that have a property wrapper projection.","type":"text"},{"text":" ","type":"text"},{"text":"Your code can interact with these identifiers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but you can’t declare identifiers with that prefix."},{"type":"text","text":" "},{"text":"For more information, see the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"identifier-head","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"identifier-characters"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"`"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"identifier-characters","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"`"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"implicit-parameter-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"property-wrapper-projection","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"inlineContent":[{"text":"identifier-list","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"identifier-head","type":"text"}],"type":"emphasis"},{"type":"text","text":" → Upper- or lowercase letter A through Z "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"_"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"identifier-head","type":"text"}]},{"type":"text","text":" → U+00A8, U+00AA, U+00AD, U+00AF, U+00B2–U+00B5, or U+00B7–U+00BA "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-head"}]},{"type":"text","text":" → U+00BC–U+00BE, U+00C0–U+00D6, U+00D8–U+00F6, or U+00F8–U+00FF "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"text":" → U+0100–U+02FF, U+0370–U+167F, U+1681–U+180D, or U+180F–U+1DBF ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-head"}]},{"type":"text","text":" → U+1E00–U+1FFF "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"identifier-head","type":"text"}]},{"type":"text","text":" → U+200B–U+200D, U+202A–U+202E, U+203F–U+2040, U+2054, or U+2060–U+206F "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"type":"text","text":" → U+2070–U+20CF, U+2100–U+218F, U+2460–U+24FF, or U+2776–U+2793 "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"text":" → U+2C00–U+2DFF or U+2E80–U+2FFF ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"identifier-head","type":"text"}],"type":"emphasis"},{"text":" → U+3004–U+3007, U+3021–U+302F, U+3031–U+303F, or U+3040–U+D7FF ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"identifier-head","type":"text"}],"type":"emphasis"},{"text":" → U+F900–U+FD3D, U+FD40–U+FDCF, U+FDF0–U+FE1F, or U+FE30–U+FE44 ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"type":"text","text":" → U+FE47–U+FFFD "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"type":"text","text":" → U+10000–U+1FFFD, U+20000–U+2FFFD, U+30000–U+3FFFD, or U+40000–U+4FFFD "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"identifier-head","type":"text"}],"type":"emphasis"},{"text":" → U+50000–U+5FFFD, U+60000–U+6FFFD, U+70000–U+7FFFD, or U+80000–U+8FFFD ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"identifier-head","type":"text"}]},{"text":" → U+90000–U+9FFFD, U+A0000–U+AFFFD, U+B0000–U+BFFFD, or U+C0000–U+CFFFD ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-head"}]},{"type":"text","text":" → U+D0000–U+DFFFD or U+E0000–U+EFFFD"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"identifier-character"}],"type":"emphasis"},{"text":" → Digit 0 through 9 ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"identifier-character","type":"text"}]},{"text":" → U+0300–U+036F, U+1DC0–U+1DFF, U+20D0–U+20FF, or U+FE20–U+FE2F ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier-character"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"identifier-head"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"identifier-characters"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"identifier-character","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"identifier-characters"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"implicit-parameter-name"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"$"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digits"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"property-wrapper-projection"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"$"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-characters"}]}]}],"name":"Grammar of an identifier","type":"aside","style":"note"},{"type":"heading","anchor":"Keywords-and-Punctuation","text":"Keywords and Punctuation","level":2},{"inlineContent":[{"text":"The following keywords are reserved and can’t be used as identifiers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unless they’re escaped with backticks,"},{"type":"text","text":" "},{"text":"as described above in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Keywords other than "},{"type":"codeVoice","code":"inout"},{"text":", ","type":"text"},{"type":"codeVoice","code":"var"},{"type":"text","text":", and "},{"code":"let","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"can be used as parameter names"},{"text":" ","type":"text"},{"type":"text","text":"in a function declaration or function call"},{"type":"text","text":" "},{"text":"without being escaped with backticks.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When a member has the same name as a keyword,"},{"type":"text","text":" "},{"type":"text","text":"references to that member don’t need to be escaped with backticks,"},{"type":"text","text":" "},{"text":"except when there’s ambiguity between referring to the member","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and using the keyword —"},{"type":"text","text":" "},{"type":"text","text":"for example, "},{"code":"self","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Type","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"text":" ","type":"text"},{"type":"text","text":"have special meaning in an explicit member expression,"},{"type":"text","text":" "},{"type":"text","text":"so they must be escaped with backticks in that context."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Keywords used in declarations:"},{"type":"text","text":" "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"class"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"deinit"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"extension","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"fileprivate","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"func"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"import"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"init","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"inout"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"internal"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"open","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"operator"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"private"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"precedencegroup","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"protocol","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"public","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rethrows"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"static"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"struct","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"subscript","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"typealias","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"var"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in statements:"},{"text":" ","type":"text"},{"code":"break","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"catch","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"default","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"defer","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"else","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"for"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"guard","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"in","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"repeat"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"return","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"throw","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"where","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in expressions and types:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"as"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"await","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"is"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rethrows"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"Self","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"super"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"throw","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"try"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords used in patterns:"},{"type":"text","text":" "},{"type":"codeVoice","code":"_"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Keywords that begin with a number sign (","type":"text"},{"type":"codeVoice","code":"#"},{"type":"text","text":"):"},{"text":" ","type":"text"},{"code":"#available","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#colorLiteral"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"#elseif"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"#else","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"#endif","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"#fileLiteral"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"#if","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"#imageLiteral","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"#keyPath","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#selector"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"#sourceLocation"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Prior to Swift 5.9,"},{"text":" ","type":"text"},{"text":"the following keywords were reserved:","type":"text"},{"text":" ","type":"text"},{"code":"#column","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"#dsohandle"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"#error","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"#file"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"#function"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"#line"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"#warning","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These are now implemented as macros in the Swift standard library:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/column()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dsohandle()","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/error(_:)","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fileID()","type":"reference","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/filePath()","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/file()","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/line()","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","isActive":true},{"type":"text","text":"."}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Keywords reserved in particular contexts:","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"associativity"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"convenience","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"final"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"get"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"indirect"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"infix"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"left","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"mutating"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"none"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"nonmutating"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"optional","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"postfix"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"precedence"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"required"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"right"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"set"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"some","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"Type","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"unowned"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"weak"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Outside the context in which they appear in the grammar,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they can be used as identifiers."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The following tokens are reserved as punctuation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can’t be used as custom operators:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"("},{"type":"text","text":", "},{"code":")","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"{"},{"type":"text","text":", "},{"type":"codeVoice","code":"}"},{"text":", ","type":"text"},{"type":"codeVoice","code":"["},{"type":"text","text":", "},{"type":"codeVoice","code":"]"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":".","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":","},{"text":", ","type":"text"},{"code":":","type":"codeVoice"},{"type":"text","text":", "},{"code":";","type":"codeVoice"},{"type":"text","text":", "},{"code":"=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@"},{"type":"text","text":", "},{"type":"codeVoice","code":"#"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"&","type":"codeVoice"},{"type":"text","text":" (as a prefix operator), "},{"code":"->","type":"codeVoice"},{"type":"text","text":", "},{"code":"`","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"?","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"!"},{"type":"text","text":" (as a postfix operator)."}]},{"level":2,"text":"Literals","anchor":"Literals","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"literal"}]},{"text":" is the source code representation of a value of a type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as a number or string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following are examples of literals:"}],"type":"paragraph"},{"syntax":"swift","code":["42               \/\/ Integer literal","3.14159          \/\/ Floating-point literal","\"Hello, world!\"  \/\/ String literal","\/Hello, .*\/      \/\/ Regular expression literal","true             \/\/ Boolean literal"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A literal doesn’t have a type on its own."},{"text":" ","type":"text"},{"text":"Instead, a literal is parsed as having infinite precision and Swift’s type inference","type":"text"},{"type":"text","text":" "},{"type":"text","text":"attempts to infer a type for the literal. For example,"},{"text":" ","type":"text"},{"type":"text","text":"in the declaration "},{"type":"codeVoice","code":"let x: Int8 = 42"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift uses the explicit type annotation ("},{"type":"codeVoice","code":": Int8"},{"text":") to infer","type":"text"},{"type":"text","text":" "},{"text":"that the type of the integer literal ","type":"text"},{"type":"codeVoice","code":"42"},{"type":"text","text":" is "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If there isn’t suitable type information available,"},{"type":"text","text":" "},{"type":"text","text":"Swift infers that the literal’s type is one of the default literal types"},{"type":"text","text":" "},{"type":"text","text":"defined in the Swift standard library"},{"type":"text","text":" "},{"type":"text","text":"and listed in the table below."},{"text":" ","type":"text"},{"text":"When specifying the type annotation for a literal value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the annotation’s type must be a type that can be instantiated from that literal value."},{"type":"text","text":" "},{"text":"That is, the type must conform to the Swift standard library protocols","type":"text"},{"type":"text","text":" "},{"text":"listed in the table below.","type":"text"}]},{"type":"table","header":"row","rows":[[[{"inlineContent":[{"text":"Literal","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Default type","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integer"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point"}]}],[{"type":"paragraph","inlineContent":[{"code":"Double","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ExpressibleByFloatLiteral","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}],[{"inlineContent":[{"type":"codeVoice","code":"String"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":", "},{"code":"ExpressibleByUnicodeScalarLiteral","type":"codeVoice"},{"text":" for string literals that contain only a single Unicode scalar, ","type":"text"},{"type":"codeVoice","code":"ExpressibleByExtendedGraphemeClusterLiteral"},{"type":"text","text":" for string literals that contain only a single extended grapheme cluster"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Regular expression"}]}],[{"type":"paragraph","inlineContent":[{"code":"Regex","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"None","type":"text"}]}]],[[{"inlineContent":[{"type":"text","text":"Boolean"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Bool"}]}],[{"inlineContent":[{"type":"codeVoice","code":"ExpressibleByBooleanLiteral"}],"type":"paragraph"}]]]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in the declaration "},{"code":"let str = \"Hello, world\"","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the default inferred type of the string","type":"text"},{"type":"text","text":" "},{"type":"text","text":"literal "},{"type":"codeVoice","code":"\"Hello, world\""},{"type":"text","text":" is "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Also, ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" conforms to the "},{"code":"ExpressibleByIntegerLiteral","type":"codeVoice"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"and therefore it can be used in the type annotation for the integer literal "},{"type":"codeVoice","code":"42"},{"text":" ","type":"text"},{"text":"in the declaration ","type":"text"},{"type":"codeVoice","code":"let x: Int8 = 42"},{"type":"text","text":"."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"literal"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"numeric-literal","type":"text"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"string-literal"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"regular-expression-literal"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"boolean-literal"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nil-literal"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"numeric-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"-","type":"codeVoice"}],"type":"strong"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"integer-literal","type":"text"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"-","type":"codeVoice"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"floating-point-literal","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"boolean-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"true","type":"codeVoice"}],"type":"strong"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"false"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nil-literal","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"nil"}],"type":"strong"}]}],"type":"aside","name":"Grammar of a literal","style":"note"},{"level":3,"text":"Integer Literals","type":"heading","anchor":"Integer-Literals"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Integer literals"}],"type":"emphasis"},{"type":"text","text":" represent integer values of unspecified precision."},{"type":"text","text":" "},{"text":"By default, integer literals are expressed in decimal;","type":"text"},{"type":"text","text":" "},{"text":"you can specify an alternate base using a prefix.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Binary literals begin with "},{"type":"codeVoice","code":"0b"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"octal literals begin with ","type":"text"},{"type":"codeVoice","code":"0o"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and hexadecimal literals begin with ","type":"text"},{"type":"codeVoice","code":"0x"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decimal literals contain the digits "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"9"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Binary literals contain "},{"type":"codeVoice","code":"0"},{"text":" and ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"octal literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"7"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and hexadecimal literals contain "},{"type":"codeVoice","code":"0"},{"text":" through ","type":"text"},{"type":"codeVoice","code":"9"},{"type":"text","text":" "},{"type":"text","text":"as well as "},{"code":"A","type":"codeVoice"},{"text":" through ","type":"text"},{"type":"codeVoice","code":"F"},{"type":"text","text":" in upper- or lowercase."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Negative integers literals are expressed by prepending a minus sign ("},{"code":"-","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to an integer literal, as in ","type":"text"},{"type":"codeVoice","code":"-42"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Underscores ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") are allowed between digits for readability,"},{"type":"text","text":" "},{"text":"but they’re ignored and therefore don’t affect the value of the literal.","type":"text"},{"text":" ","type":"text"},{"text":"Integer literals can begin with leading zeros (","type":"text"},{"type":"codeVoice","code":"0"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but they’re likewise ignored and don’t affect the base or value of the literal."}]},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified,","type":"text"},{"type":"text","text":" "},{"text":"the default inferred type of an integer literal is the Swift standard library type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The Swift standard library also defines types for various sizes of","type":"text"},{"text":" ","type":"text"},{"text":"signed and unsigned integers,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers","type":"reference","isActive":true},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"integer-literal","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"binary-literal","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"integer-literal","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"octal-literal"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"integer-literal","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-literal"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"integer-literal","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"hexadecimal-literal","type":"text"}]}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"binary-literal","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"0b","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"binary-digit"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"binary-literal-characters"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"binary-digit"}],"type":"emphasis"},{"type":"text","text":" → Digit 0 or 1 "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"binary-literal-character"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"binary-digit"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"code":"_","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"binary-literal-characters"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"binary-literal-character"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"binary-literal-characters"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"octal-literal"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"0o","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"octal-digit"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"octal-literal-characters"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"octal-digit"}]},{"text":" → Digit 0 through 7 ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"octal-literal-character"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"octal-digit","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"_"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"octal-literal-characters","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"octal-literal-character","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"text":"octal-literal-characters","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"decimal-literal","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digit"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"decimal-literal-characters"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digit"}]},{"type":"text","text":" → Digit 0 through 9 "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"decimal-digits","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digit"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"decimal-digits"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-literal-character"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"decimal-digit","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"_"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-literal-characters"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-literal-character"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-literal-characters"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"inlineContent":[{"inlineContent":[{"text":"hexadecimal-literal","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"0x","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-digit"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"hexadecimal-literal-characters"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"hexadecimal-digit"}],"type":"emphasis"},{"type":"text","text":" → Digit 0 through 9, a through f, or A through F "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"hexadecimal-literal-character","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"hexadecimal-digit","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"_","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"hexadecimal-literal-characters"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"hexadecimal-literal-character"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-literal-characters"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}],"type":"paragraph"}],"style":"note","name":"Grammar of an integer literal","type":"aside"},{"type":"heading","level":3,"text":"Floating-Point Literals","anchor":"Floating-Point-Literals"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Floating-point literals"}]},{"type":"text","text":" represent floating-point values of unspecified precision."}]},{"inlineContent":[{"type":"text","text":"By default, floating-point literals are expressed in decimal (with no prefix),"},{"text":" ","type":"text"},{"type":"text","text":"but they can also be expressed in hexadecimal (with a "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" prefix)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Decimal floating-point literals consist of a sequence of decimal digits"},{"type":"text","text":" "},{"text":"followed by either a decimal fraction, a decimal exponent, or both.","type":"text"},{"type":"text","text":" "},{"text":"The decimal fraction consists of a decimal point (","type":"text"},{"type":"codeVoice","code":"."},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"followed by a sequence of decimal digits."},{"text":" ","type":"text"},{"text":"The exponent consists of an upper- or lowercase ","type":"text"},{"code":"e","type":"codeVoice"},{"text":" prefix","type":"text"},{"type":"text","text":" "},{"text":"followed by a sequence of decimal digits that indicates","type":"text"},{"type":"text","text":" "},{"type":"text","text":"what power of 10 the value preceding the "},{"code":"e","type":"codeVoice"},{"type":"text","text":" is multiplied by."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"code":"1.25e2","type":"codeVoice"},{"text":" represents 1.25 x 10²,","type":"text"},{"type":"text","text":" "},{"text":"which evaluates to ","type":"text"},{"type":"codeVoice","code":"125.0"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Similarly, ","type":"text"},{"code":"1.25e-2","type":"codeVoice"},{"text":" represents 1.25 x 10⁻²,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which evaluates to "},{"type":"codeVoice","code":"0.0125"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Hexadecimal floating-point literals consist of a ","type":"text"},{"type":"codeVoice","code":"0x"},{"text":" prefix,","type":"text"},{"type":"text","text":" "},{"text":"followed by an optional hexadecimal fraction,","type":"text"},{"type":"text","text":" "},{"text":"followed by a hexadecimal exponent.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The hexadecimal fraction consists of a decimal point"},{"type":"text","text":" "},{"text":"followed by a sequence of hexadecimal digits.","type":"text"},{"text":" ","type":"text"},{"text":"The exponent consists of an upper- or lowercase ","type":"text"},{"type":"codeVoice","code":"p"},{"type":"text","text":" prefix"},{"text":" ","type":"text"},{"text":"followed by a sequence of decimal digits that indicates","type":"text"},{"text":" ","type":"text"},{"text":"what power of 2 the value preceding the ","type":"text"},{"type":"codeVoice","code":"p"},{"type":"text","text":" is multiplied by."},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"code":"0xFp2","type":"codeVoice"},{"type":"text","text":" represents 15 x 2²,"},{"type":"text","text":" "},{"text":"which evaluates to ","type":"text"},{"type":"codeVoice","code":"60"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"0xFp-2"},{"type":"text","text":" represents 15 x 2⁻²,"},{"type":"text","text":" "},{"type":"text","text":"which evaluates to "},{"code":"3.75","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Negative floating-point literals are expressed by prepending a minus sign ("},{"type":"codeVoice","code":"-"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to a floating-point literal, as in ","type":"text"},{"code":"-42.5","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Underscores (","type":"text"},{"type":"codeVoice","code":"_"},{"type":"text","text":") are allowed between digits for readability,"},{"type":"text","text":" "},{"type":"text","text":"but they’re ignored and therefore don’t affect the value of the literal."},{"type":"text","text":" "},{"type":"text","text":"Floating-point literals can begin with leading zeros ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"but they’re likewise ignored and don’t affect the base or value of the literal.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless otherwise specified,"},{"text":" ","type":"text"},{"type":"text","text":"the default inferred type of a floating-point literal is the Swift standard library type "},{"code":"Double","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which represents a 64-bit floating-point number.","type":"text"},{"type":"text","text":" "},{"text":"The Swift standard library also defines a ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which represents a 32-bit floating-point number."}]},{"style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"floating-point-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"decimal-literal"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"text":"decimal-fraction","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-exponent"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"floating-point-literal"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-literal"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"hexadecimal-fraction","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-exponent"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-fraction"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":".","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"decimal-literal"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"decimal-exponent","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"floating-point-e"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"sign","type":"text"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"text":"decimal-literal","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"hexadecimal-fraction"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"hexadecimal-digit","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-literal-characters"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"hexadecimal-exponent"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"floating-point-p"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"sign","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"decimal-literal"}],"type":"emphasis"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"floating-point-e","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"e","type":"codeVoice"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"E"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"floating-point-p","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"p","type":"codeVoice"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"P"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"sign","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"+"}],"type":"strong"},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"-","type":"codeVoice"}]}],"type":"paragraph"}],"type":"aside","name":"Grammar of a floating-point literal"},{"level":3,"type":"heading","anchor":"String-Literals","text":"String Literals"},{"inlineContent":[{"text":"A string literal is a sequence of characters surrounded by quotation marks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A single-line string literal is surrounded by double quotation marks"},{"type":"text","text":" "},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"code":["\"<#characters#>\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals can’t contain"},{"text":" ","type":"text"},{"type":"text","text":"an unescaped double quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"a carriage return, or a line feed."}]},{"type":"paragraph","inlineContent":[{"text":"A multiline string literal is surrounded by three double quotation marks","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}]},{"type":"codeListing","syntax":"swift","code":["\"\"\"","<#characters#>","\"\"\""]},{"inlineContent":[{"text":"Unlike a single-line string literal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a multiline string literal can contain"},{"type":"text","text":" "},{"type":"text","text":"unescaped double quotation marks ("},{"code":"\"","type":"codeVoice"},{"type":"text","text":"), carriage returns, and line feeds."},{"text":" ","type":"text"},{"type":"text","text":"It can’t contain three unescaped double quotation marks next to each other."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The line break after the "},{"type":"codeVoice","code":"\"\"\""},{"text":" ","type":"text"},{"type":"text","text":"that begins the multiline string literal"},{"type":"text","text":" "},{"type":"text","text":"isn’t part of the string."},{"type":"text","text":" "},{"text":"The line break before the ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" "},{"text":"that ends the literal is also not part of the string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To make a multiline string literal"},{"text":" ","type":"text"},{"type":"text","text":"that begins or ends with a line feed,"},{"text":" ","type":"text"},{"type":"text","text":"write a blank line as its first or last line."}]},{"inlineContent":[{"type":"text","text":"A multiline string literal can be indented"},{"text":" ","type":"text"},{"text":"using any combination of spaces and tabs;","type":"text"},{"type":"text","text":" "},{"text":"this indentation isn’t included in the string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"\"\"\"","type":"codeVoice"},{"type":"text","text":" that ends the literal"},{"type":"text","text":" "},{"text":"determines the indentation:","type":"text"},{"type":"text","text":" "},{"text":"Every nonblank line in the literal must begin","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with exactly the same indentation"},{"type":"text","text":" "},{"text":"that appears before the closing ","type":"text"},{"code":"\"\"\"","type":"codeVoice"},{"text":";","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there’s no conversion between tabs and spaces."},{"type":"text","text":" "},{"type":"text","text":"You can include additional spaces and tabs after that indentation;"},{"text":" ","type":"text"},{"text":"those spaces and tabs appear in the string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Line breaks in a multiline string literal are"},{"type":"text","text":" "},{"type":"text","text":"normalized to use the line feed character."},{"type":"text","text":" "},{"type":"text","text":"Even if your source file has a mix of carriage returns and line feeds,"},{"text":" ","type":"text"},{"type":"text","text":"all of the line breaks in the string will be the same."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In a multiline string literal,"},{"text":" ","type":"text"},{"type":"text","text":"writing a backslash ("},{"type":"codeVoice","code":"\\"},{"text":") at the end of a line","type":"text"},{"text":" ","type":"text"},{"text":"omits that line break from the string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Any whitespace between the backslash and the line break"},{"text":" ","type":"text"},{"text":"is also omitted.","type":"text"},{"type":"text","text":" "},{"text":"You can use this syntax","type":"text"},{"type":"text","text":" "},{"text":"to hard wrap a multiline string literal in your source code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without changing the value of the resulting string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Special characters"},{"text":" ","type":"text"},{"text":"can be included in string literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of both the single-line and multiline forms"},{"text":" ","type":"text"},{"type":"text","text":"using the following escape sequences:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Null character ("},{"code":"\\0","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Backslash (","type":"text"},{"type":"codeVoice","code":"\\\\"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Horizontal tab ("},{"type":"codeVoice","code":"\\t"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Line feed ("},{"type":"codeVoice","code":"\\n"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Carriage return (","type":"text"},{"code":"\\r","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Double quotation mark ("},{"type":"codeVoice","code":"\\\""},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"text":"Single quotation mark (","type":"text"},{"code":"\\'","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Unicode scalar (","type":"text"},{"code":"\\u{","type":"codeVoice"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"codeVoice","code":"}"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a hexadecimal number"},{"text":" ","type":"text"},{"text":"that has one to eight digits","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The value of an expression can be inserted into a string literal","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by placing the expression in parentheses after a backslash ("},{"code":"\\","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"The interpolated expression can contain a string literal,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but can’t contain an unescaped backslash,"},{"type":"text","text":" "},{"text":"a carriage return, or a line feed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, all of the following string literals have the same value:"}]},{"type":"codeListing","code":["\"1 2 3\"","\"1 2 \\(\"3\")\"","\"1 2 \\(3)\"","\"1 2 \\(1 + 2)\"","let x = 3; \"1 2 \\(x)\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"A string delimited by extended delimiters is a sequence of characters"},{"text":" ","type":"text"},{"type":"text","text":"surrounded by quotation marks and a balanced set of one or more number signs ("},{"code":"#","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"A string delimited by extended delimiters has the following forms:","type":"text"}],"type":"paragraph"},{"code":["#\"<#characters#>\"#","","#\"\"\"","<#characters#>","\"\"\"#"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Special characters in a string delimited by extended delimiters","type":"text"},{"text":" ","type":"text"},{"text":"appear in the resulting string as normal characters","type":"text"},{"type":"text","text":" "},{"text":"rather than as special characters.","type":"text"},{"type":"text","text":" "},{"text":"You can use extended delimiters to create strings with characters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that would ordinarily have a special effect"},{"text":" ","type":"text"},{"type":"text","text":"such as generating a string interpolation,"},{"text":" ","type":"text"},{"text":"starting an escape sequence,","type":"text"},{"type":"text","text":" "},{"text":"or terminating the string.","type":"text"}]},{"inlineContent":[{"text":"The following example shows a string literal","type":"text"},{"text":" ","type":"text"},{"text":"and a string delimited by extended delimiters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that create equivalent string values:"}],"type":"paragraph"},{"syntax":"swift","code":["let string = #\"\\(x) \\ \" \\u{2603}\"#","let escaped = \"\\\\(x) \\\\ \\\" \\\\u{2603}\"","print(string)","\/\/ Prints \"\\(x) \\ \" \\u{2603}\"","print(string == escaped)","\/\/ Prints \"true\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you use more than one number sign to form","type":"text"},{"type":"text","text":" "},{"text":"a string delimited by extended delimiters,","type":"text"},{"type":"text","text":" "},{"text":"don’t place whitespace in between the number signs:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(###\"Line 1\\###nLine 2\"###) \/\/ OK","print(# # #\"Line 1\\# # #nLine 2\"# # #) \/\/ Error"]},{"inlineContent":[{"type":"text","text":"Multiline string literals that you create using extended delimiters"},{"type":"text","text":" "},{"type":"text","text":"have the same indentation requirements as regular multiline string literals."}],"type":"paragraph"},{"inlineContent":[{"text":"The default inferred type of a string literal is ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more information about the "},{"type":"codeVoice","code":"String"},{"text":" type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"String literals that are concatenated by the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"text":"are concatenated at compile time.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the values of ","type":"text"},{"type":"codeVoice","code":"textA"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"textB"},{"type":"text","text":" "},{"text":"in the example below are identical —","type":"text"},{"type":"text","text":" "},{"text":"no runtime concatenation is performed.","type":"text"}],"type":"paragraph"},{"code":["let textA = \"Hello \" + \"world\"","let textB = \"Hello world\""],"syntax":"swift","type":"codeListing"},{"type":"aside","name":"Grammar of a string literal","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"string-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"static-string-literal"}],"type":"emphasis"},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"interpolated-string-literal","type":"text"}]}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"string-literal-opening-delimiter"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":"\"","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"string-literal-closing-delimiter"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"\""}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"static-string-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"string-literal-opening-delimiter"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"quoted-text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"string-literal-closing-delimiter","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"static-string-literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"multiline-string-literal-opening-delimiter","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"multiline-quoted-text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-string-literal-closing-delimiter"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"multiline-string-literal-opening-delimiter","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"extended-string-literal-delimiter","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\"\"\""}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"multiline-string-literal-closing-delimiter","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\"\"\""}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"#"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"quoted-text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"quoted-text-item","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"quoted-text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"quoted-text-item"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"escaped-character","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"quoted-text-item","type":"text"}]},{"text":" → Any Unicode scalar value except  ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\""}]},{"type":"text","text":",  "},{"inlineContent":[{"type":"codeVoice","code":"\\"}],"type":"strong"},{"type":"text","text":", U+000A, or U+000D"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-quoted-text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"multiline-quoted-text-item","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"multiline-quoted-text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"multiline-quoted-text-item"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"escaped-character","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-quoted-text-item"}]},{"text":" → Any Unicode scalar value except  ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"\\"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-quoted-text-item"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"escaped-newline"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"interpolated-string-literal"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"string-literal-opening-delimiter"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"interpolated-text","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string-literal-closing-delimiter"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"interpolated-string-literal"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"multiline-string-literal-opening-delimiter","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"multiline-interpolated-text","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"multiline-string-literal-closing-delimiter"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"interpolated-text","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"interpolated-text-item","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"interpolated-text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"interpolated-text-item"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\\("}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"quoted-text-item"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-interpolated-text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"multiline-interpolated-text-item","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-interpolated-text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"multiline-interpolated-text-item"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"\\(","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"multiline-quoted-text-item","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"escape-sequence","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"\\","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-string-literal-delimiter"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"escaped-character"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"escape-sequence"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"0","type":"codeVoice"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"escape-sequence","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\\"}]},{"text":" | ","type":"text"},{"inlineContent":[{"text":"escape-sequence","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"t"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"escape-sequence"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"n"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"escape-sequence"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"r","type":"codeVoice"}]},{"text":" | ","type":"text"},{"inlineContent":[{"text":"escape-sequence","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\""}]},{"text":" | ","type":"text"},{"inlineContent":[{"text":"escape-sequence","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"'","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"escaped-character"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"escape-sequence"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"u"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"{"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"unicode-scalar-digits","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"}"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"unicode-scalar-digits","type":"text"}]},{"text":" → Between one and eight hexadecimal digits","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"escaped-newline","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"escape-sequence"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"inline-spaces","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"line-break","type":"text"}],"type":"emphasis"}]}]},{"level":3,"type":"heading","text":"Regular Expression Literals","anchor":"Regular-Expression-Literals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A regular expression literal is a sequence of characters"},{"text":" ","type":"text"},{"type":"text","text":"surrounded by slashes ("},{"code":"\/","type":"codeVoice"},{"type":"text","text":") with the following form:"}]},{"syntax":"swift","code":["\/<#regular expression#>\/"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Regular expression literals","type":"text"},{"type":"text","text":" "},{"text":"must not begin with an unescaped tab or space,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and they can’t contain"},{"type":"text","text":" "},{"type":"text","text":"an unescaped slash ("},{"code":"\/","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"a carriage return, or a line feed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within a regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"a backslash is understood as a part of that regular expression,"},{"type":"text","text":" "},{"type":"text","text":"not just as an escape character like in string literals."},{"text":" ","type":"text"},{"type":"text","text":"It indicates that the following special character"},{"text":" ","type":"text"},{"text":"should be interpreted literally,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or that the following nonspecial character"},{"text":" ","type":"text"},{"text":"should be interpreted in a special way.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/\\(\/"},{"type":"text","text":" matches a single left parenthesis"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"\/\\d\/"},{"type":"text","text":" matches a single digit."}]},{"type":"paragraph","inlineContent":[{"text":"A regular expression literal delimited by extended delimiters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is a sequence of characters surrounded by slashes ("},{"code":"\/","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"and a balanced set of one or more number signs (","type":"text"},{"type":"codeVoice","code":"#"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"A regular expression literal","type":"text"},{"text":" ","type":"text"},{"text":"delimited by extended delimiters has the following forms:","type":"text"}]},{"syntax":"swift","code":["#\/<#regular expression#>\/#","","#\/","<#regular expression#>","\/#"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A regular expression literal that uses extended delimiters"},{"text":" ","type":"text"},{"type":"text","text":"can begin with an unescaped space or tab,"},{"type":"text","text":" "},{"text":"contain unescaped slashes (","type":"text"},{"code":"\/","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"text":"and span across multiple lines.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For a multiline regular expression literal,"},{"type":"text","text":" "},{"text":"the opening delimiter must be at the end of a line,","type":"text"},{"type":"text","text":" "},{"text":"and the closing delimiter must be on its own line.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Inside a multiline regular expression literal,"},{"type":"text","text":" "},{"type":"text","text":"the extended regular expression syntax is enabled by default —"},{"type":"text","text":" "},{"type":"text","text":"specifically, whitespace is ignored and comments are allowed."}]},{"inlineContent":[{"type":"text","text":"If you use more than one number sign to form"},{"type":"text","text":" "},{"text":"a regular expression literal delimited by extended delimiters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"don’t place whitespace in between the number signs:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let regex1 = ##\/abc\/##       \/\/ OK","let regex2 = # #\/abc\/# #     \/\/ Error"]},{"inlineContent":[{"text":"If you need to make an empty regular expression literal,","type":"text"},{"type":"text","text":" "},{"text":"you must use the extended delimiter syntax.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a regular expression literal","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"regular-expression-literal"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"regular-expression-literal-opening-delimiter"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"regular-expression","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"regular-expression-literal-closing-delimiter"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"regular-expression"}]},{"type":"text","text":" → Any regular expression"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"regular-expression-literal-opening-delimiter"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"extended-regular-expression-literal-delimiter","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\/"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"regular-expression-literal-closing-delimiter","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"\/"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended-regular-expression-literal-delimiter"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"extended-regular-expression-literal-delimiter","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"code":"#","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"extended-regular-expression-literal-delimiter","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}]}]},{"anchor":"Operators","type":"heading","level":2,"text":"Operators"},{"type":"paragraph","inlineContent":[{"text":"The Swift standard library defines a number of operators for your use,","type":"text"},{"text":" ","type":"text"},{"text":"many of which are discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The present section describes which characters can be used to define custom operators."}]},{"inlineContent":[{"type":"text","text":"Custom operators can begin with one of the ASCII characters"},{"type":"text","text":" "},{"code":"\/","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"="},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":", "},{"type":"codeVoice","code":"!"},{"type":"text","text":", "},{"code":"*","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"%"},{"type":"text","text":", "},{"type":"codeVoice","code":"<"},{"text":", ","type":"text"},{"code":">","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"&"},{"type":"text","text":", "},{"type":"codeVoice","code":"|"},{"type":"text","text":", "},{"type":"codeVoice","code":"^"},{"text":", ","type":"text"},{"code":"?","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"~"},{"type":"text","text":", or one of the Unicode characters"},{"type":"text","text":" "},{"type":"text","text":"defined in the grammar below"},{"type":"text","text":" "},{"type":"text","text":"(which include characters from the"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"Mathematical Operators","type":"text"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"text":"Miscellaneous Symbols","type":"text"}]},{"text":", and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Dingbats"}]},{"text":" ","type":"text"},{"type":"text","text":"Unicode blocks, among others)."},{"text":" ","type":"text"},{"type":"text","text":"After the first character,"},{"type":"text","text":" "},{"type":"text","text":"combining Unicode characters are also allowed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also define custom operators"},{"type":"text","text":" "},{"type":"text","text":"that begin with a dot ("},{"code":".","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"These operators can contain additional dots."},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"code":".+.","type":"codeVoice"},{"text":" is treated as a single operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If an operator doesn’t begin with a dot,"},{"text":" ","type":"text"},{"type":"text","text":"it can’t contain a dot elsewhere."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"code":"+.+","type":"codeVoice"},{"type":"text","text":" is treated as"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"+"},{"text":" operator followed by the ","type":"text"},{"type":"codeVoice","code":".+"},{"type":"text","text":" operator."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although you can define custom operators that contain a question mark ("},{"type":"codeVoice","code":"?"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"they can’t consist of a single question mark character only."},{"text":" ","type":"text"},{"type":"text","text":"Additionally, although operators can contain an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"postfix operators can’t begin with either a question mark or an exclamation point.","type":"text"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The tokens ","type":"text"},{"code":"=","type":"codeVoice"},{"type":"text","text":", "},{"code":"->","type":"codeVoice"},{"text":", ","type":"text"},{"code":"\/\/","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/*"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*\/"},{"text":", ","type":"text"},{"type":"codeVoice","code":"."},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the prefix operators "},{"type":"codeVoice","code":"<"},{"type":"text","text":", "},{"code":"&","type":"codeVoice"},{"type":"text","text":", and "},{"code":"?","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the infix operator "},{"type":"codeVoice","code":"?"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and the postfix operators ","type":"text"},{"type":"codeVoice","code":">"},{"text":", ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":", and "},{"code":"?","type":"codeVoice"},{"text":" are reserved.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These tokens can’t be overloaded, nor can they be used as custom operators."}]}]},{"inlineContent":[{"type":"text","text":"The whitespace around an operator is used to determine"},{"type":"text","text":" "},{"text":"whether an operator is used as a prefix operator, a postfix operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or an infix operator. This behavior has the following rules:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If an operator has whitespace around both sides or around neither side,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as an infix operator."},{"type":"text","text":" "},{"type":"text","text":"As an example, the "},{"code":"+++","type":"codeVoice"},{"type":"text","text":" operator in "},{"code":"a+++b","type":"codeVoice"},{"type":"text","text":" and "},{"code":"a +++ b","type":"codeVoice"},{"text":" is treated as an infix operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If an operator has whitespace on the left side only,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s treated as a prefix unary operator."},{"text":" ","type":"text"},{"type":"text","text":"As an example, the "},{"code":"+++","type":"codeVoice"},{"type":"text","text":" operator in "},{"code":"a +++b","type":"codeVoice"},{"type":"text","text":" is treated as a prefix unary operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has whitespace on the right side only,"},{"type":"text","text":" "},{"text":"it’s treated as a postfix unary operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As an example, the "},{"code":"+++","type":"codeVoice"},{"type":"text","text":" operator in "},{"code":"a+++ b","type":"codeVoice"},{"text":" is treated as a postfix unary operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If an operator has no whitespace on the left but is followed immediately by a dot (","type":"text"},{"type":"codeVoice","code":"."},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"it’s treated as a postfix unary operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As an example, the  "},{"type":"codeVoice","code":"+++"},{"text":" operator in ","type":"text"},{"code":"a+++.b","type":"codeVoice"},{"text":" is treated as a postfix unary operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a+++ .b"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"a +++ .b"},{"type":"text","text":")."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For the purposes of these rules,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the characters "},{"type":"codeVoice","code":"("},{"text":", ","type":"text"},{"code":"[","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"{"},{"type":"text","text":" before an operator,"},{"type":"text","text":" "},{"text":"the characters ","type":"text"},{"type":"codeVoice","code":")"},{"type":"text","text":", "},{"code":"]","type":"codeVoice"},{"type":"text","text":", and "},{"code":"}","type":"codeVoice"},{"text":" after an operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the characters "},{"type":"codeVoice","code":","},{"type":"text","text":", "},{"type":"codeVoice","code":";"},{"type":"text","text":", and "},{"type":"codeVoice","code":":"},{"type":"text","text":" "},{"type":"text","text":"are also considered whitespace."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"code":"!","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"?"},{"text":" predefined operator has no whitespace on the left,","type":"text"},{"type":"text","text":" "},{"text":"it’s treated as a postfix operator,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"regardless of whether it has whitespace on the right."},{"text":" ","type":"text"},{"type":"text","text":"To use the "},{"type":"codeVoice","code":"?"},{"type":"text","text":" as the optional-chaining operator,"},{"text":" ","type":"text"},{"text":"it must not have whitespace on the left.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To use it in the ternary conditional ("},{"code":"?","type":"codeVoice"},{"text":" ","type":"text"},{"code":":","type":"codeVoice"},{"type":"text","text":") operator,"},{"type":"text","text":" "},{"text":"it must have whitespace around both sides.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If one of the arguments to an infix operator is a regular expression literal,"},{"text":" ","type":"text"},{"text":"then the operator must have whitespace around both sides.","type":"text"}]},{"inlineContent":[{"text":"In certain constructs, operators with a leading ","type":"text"},{"code":"<","type":"codeVoice"},{"type":"text","text":" or "},{"code":">","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"may be split into two or more tokens. The remainder is treated the same way"},{"type":"text","text":" "},{"type":"text","text":"and may be split again."},{"type":"text","text":" "},{"type":"text","text":"As a result, you don’t need to add whitespace"},{"type":"text","text":" "},{"text":"to disambiguate between the closing ","type":"text"},{"type":"codeVoice","code":">"},{"type":"text","text":" characters in constructs like"},{"type":"text","text":" "},{"type":"codeVoice","code":"Dictionary<String, Array<Int>>"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"In this example, the closing ","type":"text"},{"type":"codeVoice","code":">"},{"text":" characters aren’t treated as a single token","type":"text"},{"type":"text","text":" "},{"text":"that may then be misinterpreted as a bit shift ","type":"text"},{"type":"codeVoice","code":">>"},{"type":"text","text":" operator."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To learn how to define new, custom operators,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"To learn how to overload existing operators,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"style":"note","name":"Grammar of operators","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"operator-head","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-characters"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"operator"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"dot-operator-head","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot-operator-characters"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"\/","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"="}],"type":"strong"},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"-","type":"codeVoice"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"+"}],"type":"strong"},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"!"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"*"}]},{"text":" | ","type":"text"},{"inlineContent":[{"code":"%","type":"codeVoice"}],"type":"strong"},{"text":" | ","type":"text"},{"inlineContent":[{"code":"<","type":"codeVoice"}],"type":"strong"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"&","type":"codeVoice"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"|"}]},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"^"}]},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"~","type":"codeVoice"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"?"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"type":"text","text":" → U+00A1–U+00A7 "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"type":"text","text":" → U+00A9 or U+00AB "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"text":" → U+00AC or U+00AE ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"text":" → U+00B0–U+00B1 ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"operator-head","type":"text"}],"type":"emphasis"},{"type":"text","text":" → U+00B6, U+00BB, U+00BF, U+00D7, or U+00F7 "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"type":"text","text":" → U+2016–U+2017 "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"text":" → U+2020–U+2027 ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"text":" → U+2030–U+203E ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"type":"text","text":" → U+2041–U+2053 "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"operator-head","type":"text"}]},{"type":"text","text":" → U+2055–U+205E "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"text":" → U+2190–U+23FF ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"operator-head","type":"text"}],"type":"emphasis"},{"type":"text","text":" → U+2500–U+2775 "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"type":"text","text":" → U+2794–U+2BFF "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-head"}]},{"text":" → U+2E00–U+2E7F ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"text":" → U+3001–U+3003 ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"operator-head","type":"text"}],"type":"emphasis"},{"text":" → U+3008–U+3020 ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"type":"text","text":" → U+3030"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"operator-character","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"operator-head"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-character"}]},{"text":" → U+0300–U+036F ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-character"}]},{"type":"text","text":" → U+1DC0–U+1DFF "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"operator-character","type":"text"}]},{"type":"text","text":" → U+20D0–U+20FF "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"operator-character"}],"type":"emphasis"},{"type":"text","text":" → U+FE00–U+FE0F "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"operator-character","type":"text"}],"type":"emphasis"},{"text":" → U+FE20–U+FE2F ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator-character"}]},{"text":" → U+E0100–U+E01EF ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"operator-characters","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"operator-character","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"operator-characters","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"dot-operator-head"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot-operator-character"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":".","type":"codeVoice"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"operator-character","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot-operator-characters"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot-operator-character"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"dot-operator-characters","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"infix-operator","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"operator"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix-operator"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"postfix-operator","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"operator"}],"type":"emphasis"}],"type":"paragraph"}]}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Lexical Structure"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Operators":{"title":"Operators","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators","abstract":[],"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Operators","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper":{"url":"\/documentation\/the-swift-programming-language\/attributes#propertyWrapper","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","title":"propertyWrapper","abstract":[]},"https://developer.apple.com/documentation/swift/warning(_:)":{"titleInlineContent":[{"code":"warning(_:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","type":"link","title":"warning(_:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"title":"Advanced Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators","role":"article","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"type":"topic","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Custom-Operators":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Custom-Operators","type":"topic","title":"Custom Operators","kind":"section"},"https://developer.apple.com/documentation/swift/file()":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/file()","url":"https:\/\/developer.apple.com\/documentation\/swift\/file()","title":"file","type":"link","titleInlineContent":[{"code":"file","type":"codeVoice"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/basicoperators","role":"article","title":"Basic Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","abstract":[{"type":"text","text":"Perform operations like assignment, arithmetic, and comparison."}]},"https://developer.apple.com/documentation/swift/function()":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/function()","titleInlineContent":[{"code":"function","type":"codeVoice"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()","title":"function"},"https://developer.apple.com/documentation/swift/error(_:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/error(_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/error(_:)","title":"error(_:)","type":"link","titleInlineContent":[{"code":"error(_:)","type":"codeVoice"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"https://developer.apple.com/documentation/swift/column()":{"titleInlineContent":[{"code":"column","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/column()","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/column()","type":"link","title":"column"},"https://developer.apple.com/documentation/swift/string":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string","url":"https:\/\/developer.apple.com\/documentation\/swift\/string","title":"String","type":"link","titleInlineContent":[{"code":"String","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/dsohandle()":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/dsohandle()","titleInlineContent":[{"code":"dsohandle","type":"codeVoice"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dsohandle()","title":"dsohandle"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Operator-Declaration":{"abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Operator-Declaration","title":"Operator Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"type":"topic","role":"article","abstract":[{"type":"text","text":"Store and manipulate text."}],"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","title":"Strings and Characters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Integers":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Integers","url":"\/documentation\/the-swift-programming-language\/thebasics#Integers","kind":"section","title":"Integers","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operator-Methods":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Operator-Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","title":"Operator Methods","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"type":"topic","title":"Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"title":"Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes","abstract":[{"type":"text","text":"Add information to declarations and types."}],"role":"article"},"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html":{"titleInlineContent":[{"text":"Markup Formatting Reference","type":"text"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html","type":"link","title":"Markup Formatting Reference"},"https://developer.apple.com/documentation/swift/line()":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/line()","url":"https:\/\/developer.apple.com\/documentation\/swift\/line()","title":"line","type":"link","titleInlineContent":[{"code":"line","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/filePath()":{"titleInlineContent":[{"code":"filePath","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/filePath()","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/filePath()","type":"link","title":"filePath"},"https://developer.apple.com/documentation/swift/fileID()":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/fileID()","url":"https:\/\/developer.apple.com\/documentation\/swift\/fileID()","title":"fileID","type":"link","titleInlineContent":[{"code":"fileID","type":"codeVoice"}]}}}