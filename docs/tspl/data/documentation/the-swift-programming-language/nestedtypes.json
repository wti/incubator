{"metadata":{"title":"Nested Types"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Define types inside the scope of another type."}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Enumerations are often created to support a specific class or structure’s functionality.","type":"text"},{"type":"text","text":" "},{"text":"Similarly, it can be convenient to define utility classes and structures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"inlineContent":[{"type":"text","text":"nested types"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whereby you nest supporting enumerations, classes, and structures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within the definition of the type they support."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To nest a type within another type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write its definition within the outer braces of the type it supports."},{"type":"text","text":" "},{"text":"Types can be nested to as many levels as are required.","type":"text"}]},{"level":2,"anchor":"Nested-Types-in-Action","type":"heading","text":"Nested Types in Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"BlackjackCard"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which models a playing card as used in the game of Blackjack."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"text":" structure contains two nested enumeration types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"called "},{"code":"Suit","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"In Blackjack, the Ace cards have a value of either one or eleven.","type":"text"},{"type":"text","text":" "},{"text":"This feature is represented by a structure called ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is nested within the "},{"type":"codeVoice","code":"Rank"},{"text":" enumeration:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Suit"},{"text":" enumeration describes the four common playing card suits,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together with a raw "},{"code":"Character","type":"codeVoice"},{"text":" value to represent their symbol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Rank","type":"codeVoice"},{"text":" enumeration describes the thirteen possible playing card ranks,","type":"text"},{"type":"text","text":" "},{"text":"together with a raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value to represent their face value."},{"text":" ","type":"text"},{"text":"(This raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value isn’t used for the Jack, Queen, King, and Ace cards.)"}]},{"type":"paragraph","inlineContent":[{"text":"As mentioned above, the ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":" enumeration defines","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a further nested structure of its own, called "},{"type":"codeVoice","code":"Values"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This structure encapsulates the fact that most cards have one value,"},{"type":"text","text":" "},{"text":"but the Ace card has two values.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" structure defines two properties to represent this:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"first"},{"text":", of type ","type":"text"},{"code":"Int","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"second"},{"text":", of type ","type":"text"},{"code":"Int?","type":"codeVoice"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"”"}]}]}]},{"inlineContent":[{"type":"codeVoice","code":"Rank"},{"type":"text","text":" also defines a computed property, "},{"type":"codeVoice","code":"values"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which returns an instance of the ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This computed property considers the rank of the card"},{"type":"text","text":" "},{"type":"text","text":"and initializes a new "},{"type":"codeVoice","code":"Values"},{"text":" instance with appropriate values based on its rank.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It uses special values for "},{"code":"jack","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"queen"},{"type":"text","text":", "},{"code":"king","type":"codeVoice"},{"type":"text","text":", and "},{"code":"ace","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For the numeric cards, it uses the rank’s raw "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"text":" structure itself has two properties — ","type":"text"},{"type":"codeVoice","code":"rank"},{"type":"text","text":" and "},{"type":"codeVoice","code":"suit"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It also defines a computed property called "},{"type":"codeVoice","code":"description"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which uses the values stored in ","type":"text"},{"code":"rank","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"suit"},{"text":" to build","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a description of the name and value of the card."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property uses optional binding to check whether there’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a second value to display, and if so,"},{"text":" ","type":"text"},{"text":"inserts additional description detail for that second value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because "},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":" is a structure with no custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"it has an implicit memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"You can use this initializer to initialize a new constant called ","type":"text"},{"type":"codeVoice","code":"theAceOfSpades"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Even though ","type":"text"},{"code":"Rank","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Suit"},{"text":" are nested within ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"their type can be inferred from context,","type":"text"},{"text":" ","type":"text"},{"text":"and so the initialization of this instance is able to refer to the enumeration cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by their case names ("},{"code":".ace","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".spades"},{"text":") alone.","type":"text"},{"type":"text","text":" "},{"text":"In the example above, the ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property correctly reports that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Ace of Spades has a value of "},{"type":"codeVoice","code":"1"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"11"},{"type":"text","text":"."}]},{"text":"Referring to Nested Types","type":"heading","anchor":"Referring-to-Nested-Types","level":2},{"inlineContent":[{"text":"To use a nested type outside of its definition context,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"prefix its name with the name of the type it’s nested within:"}],"type":"paragraph"},{"code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For the example above,"},{"type":"text","text":" "},{"type":"text","text":"this enables the names of "},{"code":"Suit","type":"codeVoice"},{"type":"text","text":", "},{"code":"Rank","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" to be kept deliberately short,"},{"type":"text","text":" "},{"type":"text","text":"because their names are naturally qualified by the context in which they’re defined."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"},"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","type":"topic","title":"Memberwise Initializers for Structure Types","url":"\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"abstract":[],"role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language"}}}