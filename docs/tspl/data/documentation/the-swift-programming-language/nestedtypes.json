{"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Define types inside the scope of another type.","type":"text"}],"metadata":{"title":"Nested Types"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"inlineContent":[{"text":"Enumerations are often created to support a specific class or structure’s functionality.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"type":"text","text":" "},{"text":"purely for use within the context of a more complex type.","type":"text"},{"type":"text","text":" "},{"text":"To accomplish this, Swift enables you to define ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"whereby you nest supporting enumerations, classes, and structures","type":"text"},{"text":" ","type":"text"},{"text":"within the definition of the type they support.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To nest a type within another type,"},{"text":" ","type":"text"},{"type":"text","text":"write its definition within the outer braces of the type it supports."},{"type":"text","text":" "},{"text":"Types can be nested to as many levels as are required.","type":"text"}]},{"type":"heading","text":"Nested Types in Action","level":2,"anchor":"Nested-Types-in-Action"},{"inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which models a playing card as used in the game of Blackjack.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":" structure contains two nested enumeration types"},{"type":"text","text":" "},{"text":"called ","type":"text"},{"code":"Suit","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In Blackjack, the Ace cards have a value of either one or eleven.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This feature is represented by a structure called "},{"code":"Values","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is nested within the ","type":"text"},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration:"}]},{"syntax":"swift","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Suit","type":"codeVoice"},{"type":"text","text":" enumeration describes the four common playing card suits,"},{"text":" ","type":"text"},{"type":"text","text":"together with a raw "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value to represent their symbol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration describes the thirteen possible playing card ranks,"},{"type":"text","text":" "},{"text":"together with a raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value to represent their face value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(This raw "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value isn’t used for the Jack, Queen, King, and Ace cards.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above, the "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration defines"},{"text":" ","type":"text"},{"type":"text","text":"a further nested structure of its own, called "},{"type":"codeVoice","code":"Values"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This structure encapsulates the fact that most cards have one value,","type":"text"},{"text":" ","type":"text"},{"text":"but the Ace card has two values.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" structure defines two properties to represent this:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"first"},{"text":", of type ","type":"text"},{"code":"Int","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"second"},{"type":"text","text":", of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", or “optional "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"”"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Rank"},{"text":" also defines a computed property, ","type":"text"},{"code":"values","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which returns an instance of the "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" structure."},{"text":" ","type":"text"},{"type":"text","text":"This computed property considers the rank of the card"},{"type":"text","text":" "},{"text":"and initializes a new ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" instance with appropriate values based on its rank."},{"text":" ","type":"text"},{"text":"It uses special values for ","type":"text"},{"type":"codeVoice","code":"jack"},{"type":"text","text":", "},{"type":"codeVoice","code":"queen"},{"type":"text","text":", "},{"code":"king","type":"codeVoice"},{"type":"text","text":", and "},{"code":"ace","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"For the numeric cards, it uses the rank’s raw ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"BlackjackCard","type":"codeVoice"},{"text":" structure itself has two properties — ","type":"text"},{"type":"codeVoice","code":"rank"},{"type":"text","text":" and "},{"code":"suit","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It also defines a computed property called "},{"code":"description","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which uses the values stored in "},{"code":"rank","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"suit","type":"codeVoice"},{"text":" to build","type":"text"},{"type":"text","text":" "},{"text":"a description of the name and value of the card.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"description"},{"text":" property uses optional binding to check whether there’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a second value to display, and if so,"},{"type":"text","text":" "},{"text":"inserts additional description detail for that second value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" is a structure with no custom initializers,"},{"text":" ","type":"text"},{"type":"text","text":"it has an implicit memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use this initializer to initialize a new constant called "},{"type":"codeVoice","code":"theAceOfSpades"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""]},{"inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"Rank"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Suit"},{"text":" are nested within ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"their type can be inferred from context,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the initialization of this instance is able to refer to the enumeration cases"},{"text":" ","type":"text"},{"text":"by their case names (","type":"text"},{"code":".ace","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".spades"},{"type":"text","text":") alone."},{"type":"text","text":" "},{"type":"text","text":"In the example above, the "},{"code":"description","type":"codeVoice"},{"text":" property correctly reports that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Ace of Spades has a value of "},{"code":"1","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"11","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Referring to Nested Types","level":2,"type":"heading","anchor":"Referring-to-Nested-Types"},{"type":"paragraph","inlineContent":[{"text":"To use a nested type outside of its definition context,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prefix its name with the name of the type it’s nested within:"}]},{"code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the example above,"},{"type":"text","text":" "},{"type":"text","text":"this enables the names of "},{"type":"codeVoice","code":"Suit"},{"type":"text","text":", "},{"type":"codeVoice","code":"Rank"},{"text":", and ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" to be kept deliberately short,"},{"text":" ","type":"text"},{"type":"text","text":"because their names are naturally qualified by the context in which they’re defined."}]}],"kind":"content"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types":{"title":"Memberwise Initializers for Structure Types","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]}}}