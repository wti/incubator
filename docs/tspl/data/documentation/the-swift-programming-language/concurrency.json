{"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code"},{"text":" ","type":"text"},{"text":"in a structured way.","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"text":"Asynchronous code","type":"text"}],"type":"emphasis"},{"type":"text","text":" can be suspended and resumed later,"},{"text":" ","type":"text"},{"type":"text","text":"although only one piece of the program executes at a time."},{"text":" ","type":"text"},{"type":"text","text":"Suspending and resuming code in your program"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"type":"text","text":"on short-term operations like updating its UI"},{"text":" ","type":"text"},{"text":"while continuing to work on long-running operations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like fetching data over the network or parsing files."},{"type":"text","text":" "},{"inlineContent":[{"text":"Parallel code","type":"text"}],"type":"emphasis"},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"text":"for example, a computer with a four-core processor","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"text":" ","type":"text"},{"type":"text","text":"with each core carrying out one of the tasks."},{"type":"text","text":" "},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"text":" ","type":"text"},{"type":"text","text":"carries out multiple operations at a time,"},{"text":" ","type":"text"},{"type":"text","text":"and it suspends operations that are waiting for an external system."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The additional scheduling flexibility from parallel or asynchronous code"},{"text":" ","type":"text"},{"type":"text","text":"also comes with a cost of increased complexity."},{"type":"text","text":" "},{"text":"Swift lets you express your intent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a way that enables some compile-time checking —"},{"text":" ","type":"text"},{"text":"for example, you can use actors to safely access mutable state.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, adding concurrency to slow or buggy code"},{"type":"text","text":" "},{"text":"isn’t a guarantee that it will become fast or correct.","type":"text"},{"type":"text","text":" "},{"text":"In fact, adding concurrency might even make your code harder to debug.","type":"text"},{"type":"text","text":" "},{"text":"However, using Swift’s language-level support for concurrency","type":"text"},{"type":"text","text":" "},{"text":"in code that needs to be concurrent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"means Swift can help you catch problems at compile time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The rest of this chapter uses the term ","type":"text"},{"inlineContent":[{"text":"concurrency","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"to refer to this common combination of asynchronous and parallel code."}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"If you’ve written concurrent code before,"},{"text":" ","type":"text"},{"text":"you might be used to working with threads.","type":"text"},{"text":" ","type":"text"},{"text":"The concurrency model in Swift is built on top of threads,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but you don’t interact with them directly."},{"type":"text","text":" "},{"text":"An asynchronous function in Swift","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can give up the thread that it’s running on,"},{"type":"text","text":" "},{"type":"text","text":"which lets another asynchronous function run on that thread"},{"text":" ","type":"text"},{"type":"text","text":"while the first function is blocked."},{"text":" ","type":"text"},{"text":"When an asynchronous function resumes,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift doesn’t make any guarantee about which thread"},{"type":"text","text":" "},{"type":"text","text":"that function will run on."}],"type":"paragraph"}],"name":"Note"},{"inlineContent":[{"type":"text","text":"Although it’s possible to write concurrent code"},{"type":"text","text":" "},{"type":"text","text":"without using Swift’s language support,"},{"type":"text","text":" "},{"text":"that code tends to be harder to read.","type":"text"},{"type":"text","text":" "},{"text":"For example, the following code downloads a list of photo names,","type":"text"},{"text":" ","type":"text"},{"text":"downloads the first photo in that list,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and shows that photo to the user:"}],"type":"paragraph"},{"code":["listPhotos(inGallery: \"Summer Vacation\") { photoNames in","    let sortedNames = photoNames.sorted()","    let name = sortedNames[0]","    downloadPhoto(named: name) { photo in","        show(photo)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Even in this simple case,"},{"text":" ","type":"text"},{"text":"because the code has to be written as a series of completion handlers,","type":"text"},{"type":"text","text":" "},{"text":"you end up writing nested closures.","type":"text"},{"type":"text","text":" "},{"text":"In this style,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more complex code with deep nesting can quickly become unwieldy."}],"type":"paragraph"},{"level":2,"anchor":"Defining-and-Calling-Asynchronous-Functions","type":"heading","text":"Defining and Calling Asynchronous Functions"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"asynchronous function","type":"text"}]},{"type":"text","text":" or "},{"inlineContent":[{"type":"text","text":"asynchronous method"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"is a special kind of function or method"},{"text":" ","type":"text"},{"text":"that can be suspended while it’s partway through execution.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is in contrast to ordinary, synchronous functions and methods,"},{"text":" ","type":"text"},{"text":"which either run to completion, throw an error, or never return.","type":"text"},{"text":" ","type":"text"},{"text":"An asynchronous function or method still does one of those three things,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but it can also pause in the middle when it’s waiting for something."},{"type":"text","text":" "},{"text":"Inside the body of an asynchronous function or method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you mark each of these places where execution can be suspended."}]},{"inlineContent":[{"type":"text","text":"To indicate that a function or method is asynchronous,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"code":"async","type":"codeVoice"},{"type":"text","text":" keyword in its declaration after its parameters,"},{"type":"text","text":" "},{"text":"similar to how you use ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":" to mark a throwing function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the function or method returns a value,"},{"text":" ","type":"text"},{"type":"text","text":"you write "},{"type":"codeVoice","code":"async"},{"text":" before the return arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s how you might fetch the names of photos in a gallery:"}],"type":"paragraph"},{"code":["func listPhotos(inGallery name: String) async -> [String] {","    let result = \/\/ ... some asynchronous networking code ...","    return result","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For a function or method that’s both asynchronous and throwing,"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"code":"async","type":"codeVoice"},{"type":"text","text":" before "},{"type":"codeVoice","code":"throws"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When calling an asynchronous method,"},{"type":"text","text":" "},{"type":"text","text":"execution suspends until that method returns."},{"type":"text","text":" "},{"type":"text","text":"You write "},{"type":"codeVoice","code":"await"},{"text":" in front of the call","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to mark the possible suspension point."},{"text":" ","type":"text"},{"type":"text","text":"This is like writing "},{"code":"try","type":"codeVoice"},{"type":"text","text":" when calling a throwing function,"},{"text":" ","type":"text"},{"text":"to mark the possible change to the program’s flow if there’s an error.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Inside an asynchronous method,"},{"type":"text","text":" "},{"text":"the flow of execution is suspended ","type":"text"},{"inlineContent":[{"text":"only","type":"text"}],"type":"emphasis"},{"text":" when you call another asynchronous method —","type":"text"},{"type":"text","text":" "},{"text":"suspension is never implicit or preemptive —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means every possible suspension point is marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Marking all of the possible suspension points in your code"},{"text":" ","type":"text"},{"type":"text","text":"helps make concurrent code easier to read and understand."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"the code below fetches the names of all the pictures in a gallery","type":"text"},{"text":" ","type":"text"},{"text":"and then shows the first picture:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","let sortedNames = photoNames.sorted()","let name = sortedNames[0]","let photo = await downloadPhoto(named: name)","show(photo)"]},{"inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"text":" functions","type":"text"},{"type":"text","text":" "},{"text":"both need to make network requests,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"they could take a relatively long time to complete."},{"type":"text","text":" "},{"type":"text","text":"Making them both asynchronous by writing "},{"code":"async","type":"codeVoice"},{"type":"text","text":" before the return arrow"},{"text":" ","type":"text"},{"text":"lets the rest of the app’s code keep running","type":"text"},{"type":"text","text":" "},{"type":"text","text":"while this code waits for the picture to be ready."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To understand the concurrent nature of the example above,"},{"text":" ","type":"text"},{"type":"text","text":"here’s one possible order of execution:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The code starts running from the first line","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and runs up to the first "},{"code":"await","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"It calls the ","type":"text"},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"and suspends execution while it waits for that function to return.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"While this code’s execution is suspended,","type":"text"},{"text":" ","type":"text"},{"text":"some other concurrent code in the same program runs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, maybe a long-running background task"},{"type":"text","text":" "},{"type":"text","text":"continues updating a list of new photo galleries."},{"type":"text","text":" "},{"type":"text","text":"That code also runs until the next suspension point, marked by "},{"code":"await","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or until it completes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"After ","type":"text"},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"text":" returns,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this code continues execution starting at that point."},{"type":"text","text":" "},{"text":"It assigns the value that was returned to ","type":"text"},{"code":"photoNames","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The lines that define "},{"code":"sortedNames","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" ","type":"text"},{"text":"are regular, synchronous code.","type":"text"},{"type":"text","text":" "},{"text":"Because nothing is marked ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":" on these lines,"},{"type":"text","text":" "},{"text":"there aren’t any possible suspension points.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The next "},{"type":"codeVoice","code":"await"},{"text":" marks the call to the ","type":"text"},{"code":"downloadPhoto(named:)","type":"codeVoice"},{"type":"text","text":" function."},{"type":"text","text":" "},{"text":"This code pauses execution again until that function returns,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"giving other concurrent code an opportunity to run."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"text":" returns,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its return value is assigned to "},{"code":"photo","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and then passed as an argument when calling ","type":"text"},{"code":"show(_:)","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"The possible suspension points in your code marked with ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" ","type":"text"},{"type":"text","text":"indicate that the current piece of code might pause execution"},{"text":" ","type":"text"},{"type":"text","text":"while waiting for the asynchronous function or method to return."},{"text":" ","type":"text"},{"text":"This is also called ","type":"text"},{"inlineContent":[{"type":"text","text":"yielding the thread"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"because, behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"Swift suspends the execution of your code on the current thread"},{"type":"text","text":" "},{"type":"text","text":"and runs some other code on that thread instead."},{"type":"text","text":" "},{"type":"text","text":"Because code with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" needs to be able to suspend execution,"},{"text":" ","type":"text"},{"text":"only certain places in your program can call asynchronous functions or methods:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Code in the body of an asynchronous function, method, or property.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Code in the static ","type":"text"},{"type":"codeVoice","code":"main()"},{"type":"text","text":" method of"},{"type":"text","text":" "},{"text":"a structure, class, or enumeration that’s marked with ","type":"text"},{"code":"@main","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in an unstructured child task,"},{"text":" ","type":"text"},{"text":"as shown in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","type":"reference","isActive":true},{"type":"text","text":" below."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can explicitly insert a suspension point"},{"type":"text","text":" "},{"type":"text","text":"by calling the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield","isActive":true},{"type":"text","text":" method."}]},{"syntax":"swift","type":"codeListing","code":["func generateSlideshow(forGallery gallery: String) async {","    let photos = await listPhotos(inGallery: gallery)","    for photo in photos {","        \/\/ ... render a few seconds of video for this photo ...","        await Task.yield()","    }","}"]},{"inlineContent":[{"text":"Assuming the code that renders video is synchronous,","type":"text"},{"text":" ","type":"text"},{"text":"it doesn’t contain any suspension points.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The work to render video could also take a long time."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"you can periodically call ","type":"text"},{"code":"Task.yield()","type":"codeVoice"},{"type":"text","text":" "},{"text":"to explicitly add suspension points.","type":"text"},{"text":" ","type":"text"},{"text":"Structuring long-running code this way","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lets Swift balance between making progress on this task,"},{"text":" ","type":"text"},{"type":"text","text":"and letting other tasks in your program make progress on their work."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"is useful when writing simple code","type":"text"},{"text":" ","type":"text"},{"text":"to learn how concurrency works.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This method suspends the current task for at least the given amount of time."},{"text":" ","type":"text"},{"text":"Here’s a version of the ","type":"text"},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that uses "},{"type":"codeVoice","code":"sleep(for:tolerance:clock:)"},{"text":" to simulate waiting for a network operation:","type":"text"}]},{"type":"codeListing","code":["func listPhotos(inGallery name: String) async throws -> [String] {","    try await Task.sleep(for: .seconds(2))","    return [\"IMG001\", \"IMG99\", \"IMG0404\"]","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The version of "},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"type":"text","text":" in the code above"},{"text":" ","type":"text"},{"type":"text","text":"is both asynchronous and throwing,"},{"text":" ","type":"text"},{"text":"because the call to ","type":"text"},{"type":"codeVoice","code":"Task.sleep(until:tolerance:clock:)"},{"text":" can throw an error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you call this version of "},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you write both "},{"code":"try","type":"codeVoice"},{"type":"text","text":" and "},{"code":"await","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let photos = try await listPhotos(inGallery: \"A Rainy Weekend\")"]},{"type":"paragraph","inlineContent":[{"text":"Asynchronous functions have some similarities to throwing functions:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you define an asynchronous or throwing function,"},{"type":"text","text":" "},{"type":"text","text":"you mark it with "},{"code":"async","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you mark calls to that function with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" or "},{"type":"codeVoice","code":"try"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"An asynchronous function can call another asynchronous function,"},{"text":" ","type":"text"},{"text":"just like a throwing function can call another throwing function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, there’s a very important difference."},{"text":" ","type":"text"},{"text":"You can wrap throwing code in a ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"text":" block to handle errors,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or use "},{"code":"Result","type":"codeVoice"},{"text":" to store the error for code elsewhere to handle it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These approaches let you call throwing functions"},{"text":" ","type":"text"},{"type":"text","text":"from nonthrowing code."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["func getRainyWeekendPhotos() async -> Result<[String]> {","    return Result {","        try await listPhotos(inGallery: \"A Rainy Weekend\")","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In contrast,"},{"text":" ","type":"text"},{"type":"text","text":"there’s no safe way to wrap asynchronous code"},{"text":" ","type":"text"},{"text":"so you can call it from synchronous code and wait for the result.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The Swift standard library intentionally omits this unsafe functionality —"},{"type":"text","text":" "},{"text":"trying to implement it yourself can lead to","type":"text"},{"text":" ","type":"text"},{"text":"problems like subtle races, threading issues, and deadlocks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When adding concurrent code to an existing project,"},{"text":" ","type":"text"},{"type":"text","text":"work from the top down."},{"text":" ","type":"text"},{"type":"text","text":"Specifically,"},{"text":" ","type":"text"},{"type":"text","text":"start by converting the top-most layer of code to use concurrency,"},{"type":"text","text":" "},{"type":"text","text":"and then start converting the functions and methods that it calls,"},{"text":" ","type":"text"},{"type":"text","text":"working through the project’s architecture one layer at a time."},{"type":"text","text":" "},{"text":"There’s no way to take a bottom-up approach,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because synchronous code can’t ever call asynchronous code."}],"type":"paragraph"},{"anchor":"Asynchronous-Sequences","level":2,"type":"heading","text":"Asynchronous Sequences"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"type":"text","text":" function in the previous section"},{"text":" ","type":"text"},{"type":"text","text":"asynchronously returns the whole array at once,"},{"text":" ","type":"text"},{"text":"after all of the array’s elements are ready.","type":"text"},{"type":"text","text":" "},{"text":"Another approach","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is to wait for one element of the collection at a time"},{"text":" ","type":"text"},{"text":"using an ","type":"text"},{"inlineContent":[{"type":"text","text":"asynchronous sequence"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Here’s what iterating over an asynchronous sequence looks like:"}]},{"code":["import Foundation","","let handle = FileHandle.standardInput","for try await line in handle.bytes.lines {","    print(line)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Instead of using an ordinary ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the example above writes "},{"code":"for","type":"codeVoice"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" after it."},{"type":"text","text":" "},{"type":"text","text":"Like when you call an asynchronous function or method,"},{"text":" ","type":"text"},{"type":"text","text":"writing "},{"code":"await","type":"codeVoice"},{"type":"text","text":" indicates a possible suspension point."},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"await","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop potentially suspends execution"},{"text":" ","type":"text"},{"type":"text","text":"at the beginning of each iteration,"},{"text":" ","type":"text"},{"type":"text","text":"when it’s waiting for the next element to be available."}]},{"type":"paragraph","inlineContent":[{"text":"In the same way that you can use your own types in a ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"text":"by adding conformance to the ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","type":"reference"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"text":"you can use your own types in a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"await","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"type":"text","text":"by adding conformance to the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","isActive":true,"type":"reference"},{"text":" protocol.","type":"text"}]},{"anchor":"Calling-Asynchronous-Functions-in-Parallel","type":"heading","level":2,"text":"Calling Asynchronous Functions in Parallel"},{"inlineContent":[{"type":"text","text":"Calling an asynchronous function with "},{"code":"await","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"runs only one piece of code at a time."},{"text":" ","type":"text"},{"type":"text","text":"While the asynchronous code is running,"},{"text":" ","type":"text"},{"type":"text","text":"the caller waits for that code to finish"},{"type":"text","text":" "},{"text":"before moving on to run the next line of code.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to fetch the first three photos from a gallery,"},{"type":"text","text":" "},{"type":"text","text":"you could await three calls to the "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"as follows:","type":"text"}],"type":"paragraph"},{"code":["let firstPhoto = await downloadPhoto(named: photoNames[0])","let secondPhoto = await downloadPhoto(named: photoNames[1])","let thirdPhoto = await downloadPhoto(named: photoNames[2])","","let photos = [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This approach has an important drawback:"},{"text":" ","type":"text"},{"type":"text","text":"Although the download is asynchronous"},{"type":"text","text":" "},{"text":"and lets other work happen while it progresses,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only one call to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" runs at a time."},{"type":"text","text":" "},{"text":"Each photo downloads completely before the next one starts downloading.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, there’s no need for these operations to wait —"},{"text":" ","type":"text"},{"text":"each photo can download independently, or even at the same time.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To call an asynchronous function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and let it run in parallel with code around it,"},{"text":" ","type":"text"},{"type":"text","text":"write "},{"code":"async","type":"codeVoice"},{"text":" in front of ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" when you define a constant,","type":"text"},{"text":" ","type":"text"},{"text":"and then write ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" each time you use the constant.","type":"text"}]},{"syntax":"swift","code":["async let firstPhoto = downloadPhoto(named: photoNames[0])","async let secondPhoto = downloadPhoto(named: photoNames[1])","async let thirdPhoto = downloadPhoto(named: photoNames[2])","","let photos = await [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"all three calls to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" start"},{"type":"text","text":" "},{"type":"text","text":"without waiting for the previous one to complete."},{"text":" ","type":"text"},{"type":"text","text":"If there are enough system resources available, they can run at the same time."},{"text":" ","type":"text"},{"type":"text","text":"None of these function calls are marked with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"because the code doesn’t suspend to wait for the function’s result."},{"type":"text","text":" "},{"text":"Instead, execution continues","type":"text"},{"type":"text","text":" "},{"type":"text","text":"until the line where "},{"type":"codeVoice","code":"photos"},{"type":"text","text":" is defined —"},{"text":" ","type":"text"},{"type":"text","text":"at that point, the program needs the results from these asynchronous calls,"},{"type":"text","text":" "},{"text":"so you write ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" to pause execution"},{"text":" ","type":"text"},{"text":"until all three photos finish downloading.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s how you can think about the differences between these two approaches:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"await"},{"text":" ","type":"text"},{"type":"text","text":"when the code on the following lines depends on that function’s result."},{"type":"text","text":" "},{"type":"text","text":"This creates work that is carried out sequentially."}]}]},{"content":[{"inlineContent":[{"text":"Call asynchronous functions with ","type":"text"},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"when you don’t need the result until later in your code."},{"type":"text","text":" "},{"type":"text","text":"This creates work that can be carried out in parallel."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Both "},{"code":"await","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":"-"},{"code":"let","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"allow other code to run while they’re suspended."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, you mark the possible suspension point with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"to indicate that execution will pause, if needed,"},{"type":"text","text":" "},{"text":"until an asynchronous function has returned.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"You can also mix both of these approaches in the same code."}],"type":"paragraph"},{"text":"Tasks and Task Groups","anchor":"Tasks-and-Task-Groups","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"task"}]},{"text":" is a unit of work","type":"text"},{"text":" ","type":"text"},{"text":"that can be run asynchronously as part of your program.","type":"text"},{"type":"text","text":" "},{"text":"All asynchronous code runs as part of some task.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A task itself does only one thing at a time,"},{"type":"text","text":" "},{"type":"text","text":"but when you create multiple tasks,"},{"type":"text","text":" "},{"type":"text","text":"Swift can schedule them to run simultaneously."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" syntax described in the previous section"},{"text":" ","type":"text"},{"text":"implicitly creates a child task —","type":"text"},{"type":"text","text":" "},{"text":"this syntax works well when you already know","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"what tasks your program needs to run."},{"text":" ","type":"text"},{"text":"You can also create a task group","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(an instance of "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","isActive":true},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and explicitly add child tasks to that group,"},{"text":" ","type":"text"},{"text":"which gives you more control over priority and cancellation,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and lets you create a dynamic number of tasks."}]},{"inlineContent":[{"type":"text","text":"Tasks are arranged in a hierarchy."},{"type":"text","text":" "},{"type":"text","text":"Each task in a given task group has the same parent task,"},{"type":"text","text":" "},{"type":"text","text":"and each task can have child tasks."},{"type":"text","text":" "},{"type":"text","text":"Because of the explicit relationship between tasks and task groups,"},{"text":" ","type":"text"},{"type":"text","text":"this approach is called "},{"inlineContent":[{"text":"structured concurrency","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The explicit parent-child relationships between tasks has several advantages:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"In a parent task,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can’t forget to wait for its child tasks to complete."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When setting a higher priority on a child task,","type":"text"},{"type":"text","text":" "},{"text":"the parent task’s priority is automatically escalated.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"When a parent task is canceled,"},{"text":" ","type":"text"},{"text":"each of its child tasks is also automatically canceled.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Task-local values propagate to child tasks efficiently and automatically.","type":"text"}]}]}]},{"inlineContent":[{"text":"Here’s another version of the code to download photos","type":"text"},{"type":"text","text":" "},{"text":"that handles any number of photos:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await withTaskGroup(of: Data.self) { group in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        group.addTask {","            return await downloadPhoto(named: name)","        }","    }","","    for await photo in group {","        show(photo)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above creates a new task group,"},{"text":" ","type":"text"},{"text":"and then creates child tasks","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to download each photo in the gallery."},{"type":"text","text":" "},{"text":"Swift runs as many of these tasks concurrently as conditions allow.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As soon a child task finishes downloading a photo,"},{"type":"text","text":" "},{"type":"text","text":"that photo is displayed."},{"type":"text","text":" "},{"type":"text","text":"There’s no guarantee about the order that child tasks complete,"},{"text":" ","type":"text"},{"type":"text","text":"so the photos from this gallery can be shown in any order."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"text":"If the code to download a photo could throw an error,","type":"text"},{"type":"text","text":" "},{"text":"you would call ","type":"text"},{"code":"withThrowingTaskGroup(of:returning:body:)","type":"codeVoice"},{"type":"text","text":" instead."}]}],"name":"Note","style":"note"},{"inlineContent":[{"text":"In the code listing above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"each photo is downloaded and then displayed,"},{"text":" ","type":"text"},{"type":"text","text":"so the task group doesn’t return any results."},{"text":" ","type":"text"},{"text":"For a task group that returns a result,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you add code that accumulates its result"},{"type":"text","text":" "},{"type":"text","text":"inside the closure you pass to "},{"code":"withTaskGroup(of:returning:body:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let photos = await withTaskGroup(of: Data.self) { group in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        group.addTask {","            return await downloadPhoto(named: name)","        }","    }","","    var results: [Data] = []","    for await photo in group {","        results.append(photo)","    }","","    return results","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the previous example,"},{"text":" ","type":"text"},{"type":"text","text":"this example creates a child task for each photo to download it."},{"type":"text","text":" "},{"text":"Unlike the previous example,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop waits for the next child task to finish,"},{"type":"text","text":" "},{"type":"text","text":"appends the result of that task to the array of results,"},{"text":" ","type":"text"},{"type":"text","text":"and then continues waiting until all child tasks have finished."},{"text":" ","type":"text"},{"text":"Finally,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the task group returns the array of downloaded photos"},{"text":" ","type":"text"},{"type":"text","text":"as its overall result."}]},{"text":"Task Cancellation","level":3,"type":"heading","anchor":"Task-Cancellation"},{"inlineContent":[{"type":"text","text":"Swift concurrency uses a cooperative cancellation model."},{"type":"text","text":" "},{"text":"Each task checks whether it has been canceled","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at the appropriate points in its execution,"},{"text":" ","type":"text"},{"type":"text","text":"and responds to cancellation appropriately."},{"text":" ","type":"text"},{"type":"text","text":"Depending on what work the task is doing,"},{"type":"text","text":" "},{"type":"text","text":"responding to cancellation usually means one of the following:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Throwing an error like ","type":"text"},{"type":"codeVoice","code":"CancellationError"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or an empty collection"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Returning the partially completed work"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Downloading pictures could take a long time","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if the pictures are large or the network is slow."},{"type":"text","text":" "},{"type":"text","text":"To let the user stop this work,"},{"text":" ","type":"text"},{"text":"without waiting for all of the tasks to complete,","type":"text"},{"type":"text","text":" "},{"text":"the tasks need check for cancellation and stop running if they are canceled.","type":"text"},{"type":"text","text":" "},{"text":"There are two ways a task can do this:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by calling the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","isActive":true},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"or by reading the "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","type":"reference"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Calling "},{"code":"checkCancellation()","type":"codeVoice"},{"text":" throws an error if the task is canceled;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a throwing task can propagate the error out of the task,"},{"type":"text","text":" "},{"text":"stopping all of the task’s work.","type":"text"},{"text":" ","type":"text"},{"text":"This has the advantage of being simple to implement and understand.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more flexibility, use the "},{"type":"codeVoice","code":"isCancelled"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"type":"text","text":"which lets you perform clean-up work as part of stopping the task,"},{"text":" ","type":"text"},{"type":"text","text":"like closing network connections and deleting temporary files."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let photos = await withTaskGroup(of: Optional<Data>.self) { group in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        group.addTaskUnlessCancelled {","            guard isCancelled == false else { return nil }","            return await downloadPhoto(named: name)","        }","    }","","    var results: [Data] = []","    for await photo in group {","        if let photo { results.append(photo) }","    }","    return results","}"]},{"inlineContent":[{"text":"The code above makes several changes from the previous version:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Each task is added using the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)","type":"reference","isActive":true},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"to avoid starting new work after cancellation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each task checks for cancellation"},{"text":" ","type":"text"},{"type":"text","text":"before starting to download the photo."},{"text":" ","type":"text"},{"type":"text","text":"If it has been canceled, the task returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the end,"},{"type":"text","text":" "},{"type":"text","text":"the task group skips "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" values when collecting the results."},{"type":"text","text":" "},{"type":"text","text":"Handling cancellation by returning "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"means the task group can return a partial result —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the photos that were already downloaded at the time of cancellation —"},{"type":"text","text":" "},{"type":"text","text":"instead of discarding that completed work."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"For work that needs immediate notification of cancellation,","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:)","type":"reference"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"code":["let task = await Task.withTaskCancellationHandler {","    \/\/ ...","} onCancel: {","    print(\"Canceled!\")","}","","\/\/ ... some time later...","task.cancel()  \/\/ Prints \"Canceled!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"When using a cancellation handler,","type":"text"},{"text":" ","type":"text"},{"text":"task cancellation is still cooperative:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The task either runs to completion"},{"text":" ","type":"text"},{"type":"text","text":"or checks for cancellation and stops early."},{"text":" ","type":"text"},{"text":"Because the task is still running when the cancellation handler starts,","type":"text"},{"text":" ","type":"text"},{"text":"avoid sharing state between the task and its cancellation handler,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which could create a race condition."}],"type":"paragraph"},{"type":"heading","text":"Unstructured Concurrency","level":3,"anchor":"Unstructured-Concurrency"},{"type":"paragraph","inlineContent":[{"text":"In addition to the structured approaches to concurrency","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"described in the previous sections,"},{"text":" ","type":"text"},{"type":"text","text":"Swift also supports unstructured concurrency."},{"type":"text","text":" "},{"type":"text","text":"Unlike tasks that are part of a task group,"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"inlineContent":[{"type":"text","text":"unstructured task"}],"type":"emphasis"},{"type":"text","text":" doesn’t have a parent task."},{"type":"text","text":" "},{"text":"You have complete flexibility to manage unstructured tasks","type":"text"},{"type":"text","text":" "},{"text":"in whatever way your program needs,","type":"text"},{"type":"text","text":" "},{"text":"but you’re also completely responsible for their correctness.","type":"text"},{"text":" ","type":"text"},{"text":"To create an unstructured task that runs on the current actor,","type":"text"},{"type":"text","text":" "},{"text":"call the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"text":"To create an unstructured task that’s not part of the current actor,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"known more specifically as a "},{"type":"emphasis","inlineContent":[{"text":"detached task","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"call the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","isActive":true},{"text":" class method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both of these operations return a task that you can interact with —"},{"type":"text","text":" "},{"type":"text","text":"for example, to wait for its result or to cancel it."}]},{"type":"codeListing","syntax":"swift","code":["let newPhoto = \/\/ ... some photo data ...","let handle = Task {","    return await add(newPhoto, toGalleryNamed: \"Spring Adventures\")","}","let result = await handle.value"]},{"inlineContent":[{"type":"text","text":"For more information about managing detached tasks,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Actors","text":"Actors","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can use tasks to break up your program into isolated, concurrent pieces.","type":"text"},{"type":"text","text":" "},{"text":"Tasks are isolated from each other,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is what makes it safe for them to run at the same time,"},{"type":"text","text":" "},{"type":"text","text":"but sometimes you need to share some information between tasks."},{"text":" ","type":"text"},{"text":"Actors let you safely share information between concurrent code.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Like classes, actors are reference types,","type":"text"},{"type":"text","text":" "},{"text":"so the comparison of value types and reference types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","isActive":true},{"type":"text","text":" "},{"text":"applies to actors as well as classes.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike classes,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actors allow only one task to access their mutable state at a time,"},{"type":"text","text":" "},{"type":"text","text":"which makes it safe for code in multiple tasks"},{"text":" ","type":"text"},{"text":"to interact with the same instance of an actor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, here’s an actor that records temperatures:"}]},{"syntax":"swift","code":["actor TemperatureLogger {","    let label: String","    var measurements: [Int]","    private(set) var max: Int","","    init(label: String, measurement: Int) {","        self.label = label","        self.measurements = [measurement]","        self.max = measurement","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce an actor with the "},{"code":"actor","type":"codeVoice"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"text":"followed by its definition in a pair of braces.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"TemperatureLogger","type":"codeVoice"},{"text":" actor has properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that other code outside the actor can access,"},{"text":" ","type":"text"},{"text":"and restricts the ","type":"text"},{"type":"codeVoice","code":"max"},{"type":"text","text":" property so only code inside the actor"},{"type":"text","text":" "},{"type":"text","text":"can update the maximum value."}]},{"inlineContent":[{"text":"You create an instance of an actor","type":"text"},{"text":" ","type":"text"},{"text":"using the same initializer syntax as structures and classes.","type":"text"},{"text":" ","type":"text"},{"text":"When you access a property or method of an actor,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you use "},{"code":"await","type":"codeVoice"},{"type":"text","text":" to mark the potential suspension point."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["let logger = TemperatureLogger(label: \"Outdoors\", measurement: 25)","print(await logger.max)","\/\/ Prints \"25\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"text":"accessing ","type":"text"},{"code":"logger.max","type":"codeVoice"},{"text":" is a possible suspension point.","type":"text"},{"text":" ","type":"text"},{"text":"Because the actor allows only one task at a time to access its mutable state,","type":"text"},{"type":"text","text":" "},{"text":"if code from another task is already interacting with the logger,","type":"text"},{"type":"text","text":" "},{"text":"this code suspends while it waits to access the property.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"code that’s part of the actor doesn’t write "},{"code":"await","type":"codeVoice"},{"type":"text","text":" "},{"text":"when accessing the actor’s properties.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"here’s a method that updates a "},{"code":"TemperatureLogger","type":"codeVoice"},{"type":"text","text":" with a new temperature:"}],"type":"paragraph"},{"code":["extension TemperatureLogger {","    func update(with measurement: Int) {","        measurements.append(measurement)","        if measurement > max {","            max = measurement","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"update(with:)","type":"codeVoice"},{"text":" method is already running on the actor,","type":"text"},{"type":"text","text":" "},{"text":"so it doesn’t mark its access to properties like ","type":"text"},{"type":"codeVoice","code":"max"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This method also shows one of the reasons"},{"text":" ","type":"text"},{"type":"text","text":"why actors allow only one task at a time to interact with their mutable state:"},{"text":" ","type":"text"},{"text":"Some updates to an actor’s state temporarily break invariants.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"TemperatureLogger","type":"codeVoice"},{"type":"text","text":" actor keeps track of"},{"text":" ","type":"text"},{"text":"a list of temperatures and a maximum temperature,","type":"text"},{"text":" ","type":"text"},{"text":"and it updates the maximum temperature when you record a new measurement.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the middle of an update,"},{"text":" ","type":"text"},{"type":"text","text":"after appending the new measurement but before updating "},{"code":"max","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the temperature logger is in a temporary inconsistent state."},{"type":"text","text":" "},{"text":"Preventing multiple tasks from interacting with the same instance simultaneously","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prevents problems like the following sequence of events:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Your code calls the ","type":"text"},{"type":"codeVoice","code":"update(with:)"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"text":"It updates the ","type":"text"},{"code":"measurements","type":"codeVoice"},{"type":"text","text":" array first."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Before your code can update "},{"code":"max","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"code elsewhere reads the maximum value and the array of temperatures.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Your code finishes its update by changing ","type":"text"},{"code":"max","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"type":"text","text":"the code running elsewhere would read incorrect information"},{"text":" ","type":"text"},{"type":"text","text":"because its access to the actor was interleaved"},{"type":"text","text":" "},{"text":"in the middle of the call to ","type":"text"},{"code":"update(with:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"while the data was temporarily invalid."},{"text":" ","type":"text"},{"type":"text","text":"You can prevent this problem when using Swift actors"},{"text":" ","type":"text"},{"text":"because they only allow one operation on their state at a time,","type":"text"},{"type":"text","text":" "},{"text":"and because that code can be interrupted","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only in places where "},{"code":"await","type":"codeVoice"},{"type":"text","text":" marks a suspension point."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"code":"update(with:)","type":"codeVoice"},{"type":"text","text":" doesn’t contain any suspension points,"},{"type":"text","text":" "},{"text":"no other code can access the data in the middle of an update.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If code outside the actor tries to access those properties directly,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like accessing a structure or class’s properties,"},{"text":" ","type":"text"},{"type":"text","text":"you’ll get a compile-time error."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["print(logger.max)  \/\/ Error"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Accessing "},{"code":"logger.max","type":"codeVoice"},{"text":" without writing ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" fails because"},{"text":" ","type":"text"},{"text":"the properties of an actor are part of that actor’s isolated local state.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The code to access this property needs to run as part of the actor,"},{"text":" ","type":"text"},{"text":"which is an asynchronous operation and requires writing ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Swift guarantees that","type":"text"},{"text":" ","type":"text"},{"text":"only code running on an actor can access that actor’s local state.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This guarantee is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"actor isolation"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following aspects of the Swift concurrency model"},{"text":" ","type":"text"},{"type":"text","text":"work together to make it easier to reason about shared mutable state:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Code in between possible suspension points runs sequentially,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without the possibility of interruption from other concurrent code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Code that interacts with an actor’s local state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"runs only on that actor."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An actor runs only one piece of code at a time."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Because of these guarantees,","type":"text"},{"type":"text","text":" "},{"text":"code that doesn’t include ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" and that’s inside an actor","type":"text"},{"text":" ","type":"text"},{"text":"can make the updates without a risk of other places in your program","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"observing the temporarily invalid state."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"the code below converts measured temperatures from Fahrenheit to Celsius:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension TemperatureLogger {","    func convertFarenheitToCelsius() {","        measurements = measurements.map { measurement in","            (measurement - 32) * 5 \/ 9","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The code above converts the array of measurements, one at a time.","type":"text"},{"text":" ","type":"text"},{"text":"While the map operation is in progress,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"some temperatures are in Fahrenheit and others are in Celsius."},{"type":"text","text":" "},{"type":"text","text":"However, because none of the code includes "},{"code":"await","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there are no potential suspension points in this method."},{"text":" ","type":"text"},{"text":"The state that this method modifies belongs to the actor,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which protects it against code reading or modifying it"},{"type":"text","text":" "},{"text":"except when that code runs on the actor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means there’s no way for other code"},{"type":"text","text":" "},{"type":"text","text":"to read a list of partially converted temperatures"},{"type":"text","text":" "},{"type":"text","text":"while unit conversion is in progress."}]},{"inlineContent":[{"type":"text","text":"In addition to writing code in an actor"},{"type":"text","text":" "},{"type":"text","text":"that protects temporary invalid state by omitting potential suspension points,"},{"type":"text","text":" "},{"type":"text","text":"you can move that code into a synchronous method."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"convertFarenheitToCelsius()"},{"text":" method above is method,","type":"text"},{"text":" ","type":"text"},{"text":"so it’s guaranteed to ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"type":"text","text":" contain potential suspension points."},{"type":"text","text":" "},{"type":"text","text":"This function encapsulates the code"},{"type":"text","text":" "},{"type":"text","text":"that temporarily makes the data model inconsistent,"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier for anyone reading the code"},{"text":" ","type":"text"},{"text":"to recognize that no other code can run","type":"text"},{"type":"text","text":" "},{"text":"before data consistency is restored by completing the work.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the future,"},{"text":" ","type":"text"},{"type":"text","text":"if you try to add concurrent code to this function,"},{"type":"text","text":" "},{"type":"text","text":"introducing a possible suspension point,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get compile-time error instead of introducing a bug."}],"type":"paragraph"},{"anchor":"Sendable-Types","type":"heading","text":"Sendable Types","level":2},{"inlineContent":[{"type":"text","text":"Tasks and actors let you divide a program"},{"type":"text","text":" "},{"text":"into pieces that can safely run concurrently.","type":"text"},{"type":"text","text":" "},{"text":"Inside of a task or an instance of an actor,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the part of a program that contains mutable state,"},{"text":" ","type":"text"},{"text":"like variables and properties,","type":"text"},{"type":"text","text":" "},{"text":"is called a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"concurrency domain","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Some kinds of data can’t be shared between concurrency domains,"},{"type":"text","text":" "},{"text":"because that data contains mutable state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but it doesn’t protect against overlapping access."}],"type":"paragraph"},{"inlineContent":[{"text":"A type that can be shared from one concurrency domain to another","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is known as a "},{"inlineContent":[{"text":"sendable","type":"text"}],"type":"emphasis"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"For example, it can be passed as an argument when calling an actor method"},{"type":"text","text":" "},{"type":"text","text":"or be returned as the result of a task."},{"text":" ","type":"text"},{"text":"The examples earlier in this chapter didn’t discuss sendability","type":"text"},{"type":"text","text":" "},{"text":"because those examples use simple value types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are always safe to share"},{"text":" ","type":"text"},{"text":"for the data being passed between concurrency domains.","type":"text"},{"type":"text","text":" "},{"text":"In contrast,","type":"text"},{"type":"text","text":" "},{"text":"some types aren’t safe to pass across concurrency domains.","type":"text"},{"type":"text","text":" "},{"text":"For example, a class that contains mutable properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and doesn’t serialize access to those properties"},{"type":"text","text":" "},{"text":"can produce unpredictable and incorrect results","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you pass instances of that class between different tasks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You mark a type as being sendable","type":"text"},{"text":" ","type":"text"},{"text":"by declaring conformance to the ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"That protocol doesn’t have any code requirements,","type":"text"},{"text":" ","type":"text"},{"text":"but it does have semantic requirements that Swift enforces.","type":"text"},{"type":"text","text":" "},{"text":"In general, there are three ways for a type to be sendable:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The type is a value type,","type":"text"},{"type":"text","text":" "},{"text":"and its mutable state is made up of other sendable data —","type":"text"},{"text":" ","type":"text"},{"text":"for example, a structure with stored properties that are sendable","type":"text"},{"type":"text","text":" "},{"text":"or an enumeration with associated values that are sendable.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type doesn’t have any mutable state,"},{"text":" ","type":"text"},{"text":"and its immutable state is made up of other sendable data —","type":"text"},{"text":" ","type":"text"},{"text":"for example, a structure or class that has only read-only properties.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The type has code that ensures the safety of its mutable state,"},{"text":" ","type":"text"},{"text":"like a class that’s marked ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" "},{"type":"text","text":"or a class that serializes access to its properties"},{"text":" ","type":"text"},{"text":"on a particular thread or queue.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"For a detailed list of the semantic requirements,"},{"type":"text","text":" "},{"type":"text","text":"see the "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable"},{"type":"text","text":" protocol reference."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Some types are always sendable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like structures that have only sendable properties"},{"type":"text","text":" "},{"type":"text","text":"and enumerations that have only sendable associated values."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["struct TemperatureReading: Sendable {","    var measurement: Int","}","","extension TemperatureLogger {","    func addReading(from reading: TemperatureReading) {","        measurements.append(reading.measurement)","    }","}","","let logger = TemperatureLogger(label: \"Tea kettle\", measurement: 85)","let reading = TemperatureReading(measurement: 45)","await logger.addReading(from: reading)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"code":"TemperatureReading","type":"codeVoice"},{"type":"text","text":" is a structure that has only sendable properties,"},{"text":" ","type":"text"},{"text":"and the structure isn’t marked ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@usableFromInline"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"it’s implicitly sendable.","type":"text"},{"type":"text","text":" "},{"text":"Here’s a version of the structure","type":"text"},{"type":"text","text":" "},{"text":"where conformance to the ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" protocol is implied:"}]},{"syntax":"swift","type":"codeListing","code":["struct TemperatureReading {","    var measurement: Int","}"]},{"inlineContent":[{"text":"To explicitly mark a type as not being sendable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overriding an implicit conformance to the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"use an extension:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct FileDescriptor {","    let rawValue: CInt","}","","@available(*, unavailable)","extension FileDescriptor: Sendable { }"]},{"inlineContent":[{"type":"text","text":"The code above shows part of a wrapper around POSIX file descriptors."},{"text":" ","type":"text"},{"type":"text","text":"Even though interface for file descriptors uses integers"},{"text":" ","type":"text"},{"text":"to identify and interact with open files,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and integer values are sendable,"},{"text":" ","type":"text"},{"type":"text","text":"a file descriptor isn’t safe to send across concurrency domains."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In the code above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"NonsendableTemperatureReading","type":"codeVoice"},{"type":"text","text":" is a structure"},{"text":" ","type":"text"},{"type":"text","text":"that meets the criteria to be implicitly sendable."},{"text":" ","type":"text"},{"text":"However, the extension makes its conformance to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" unavailable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"preventing the type from being sendable."}]}]}],"metadata":{"title":"Concurrency"},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Perform asynchronous operations."}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","interfaceLanguage":"swift"},"kind":"article","references":{"https://developer.apple.com/documentation/swift/taskgroup":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","titleInlineContent":[{"type":"codeVoice","code":"TaskGroup"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","title":"TaskGroup"},"https://developer.apple.com/documentation/swift/task/3856786-detached":{"title":"Task.detached(priority:operation:)","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","titleInlineContent":[{"type":"codeVoice","code":"Task.detached(priority:operation:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached"},"https://developer.apple.com/documentation/swift/task/3814832-iscancelled":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","titleInlineContent":[{"type":"codeVoice","code":"Task.isCancelled"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","title":"Task.isCancelled"},"https://developer.apple.com/documentation/swift/task/sleep(for:tolerance:clock:)":{"title":"Task.sleep(for:tolerance:clock:)","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)","titleInlineContent":[{"type":"codeVoice","code":"Task.sleep(for:tolerance:clock:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(for:tolerance:clock:)"},"https://developer.apple.com/documentation/swift/task/3814840-yield":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield","titleInlineContent":[{"type":"codeVoice","code":"Task.yield()"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814840-yield","title":"Task.yield()"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"https://developer.apple.com/documentation/swift/sequence":{"title":"Sequence","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","titleInlineContent":[{"type":"codeVoice","code":"Sequence"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"https://developer.apple.com/documentation/swift/sendable":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","titleInlineContent":[{"type":"codeVoice","code":"Sendable"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","title":"Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Classes-Are-Reference-Types":{"title":"Classes Are Reference Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","abstract":[],"url":"\/documentation\/the-swift-programming-language\/classesandstructures#Classes-Are-Reference-Types","kind":"section"},"https://developer.apple.com/documentation/swift/asyncsequence":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","titleInlineContent":[{"type":"codeVoice","code":"AsyncSequence"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","title":"AsyncSequence"},"https://developer.apple.com/documentation/swift/task/3856790-init":{"title":"Task.init(priority:operation:)","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","titleInlineContent":[{"type":"codeVoice","code":"Task.init(priority:operation:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init"},"https://developer.apple.com/documentation/swift/taskgroup/addtaskunlesscancelled(priority:operation:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)","titleInlineContent":[{"type":"codeVoice","code":"TaskGroup.addTaskUnlessCancelled(priority:operation:)"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup\/addtaskunlesscancelled(priority:operation:)","title":"TaskGroup.addTaskUnlessCancelled(priority:operation:)"},"https://developer.apple.com/documentation/swift/withtaskcancellationhandler(operation:oncancel:)":{"title":"Task.withTaskCancellationHandler(operation:onCancel:)","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:)","titleInlineContent":[{"type":"codeVoice","code":"Task.withTaskCancellationHandler(operation:onCancel:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/withtaskcancellationhandler(operation:oncancel:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Unstructured-Concurrency":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency#Unstructured-Concurrency","type":"topic","title":"Unstructured Concurrency","kind":"section"},"https://developer.apple.com/documentation/swift/task":{"title":"Task","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","titleInlineContent":[{"type":"codeVoice","code":"Task"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task"},"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","titleInlineContent":[{"type":"codeVoice","code":"Task.checkCancellation()"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","title":"Task.checkCancellation()"}}}