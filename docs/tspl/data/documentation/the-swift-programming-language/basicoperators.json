{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Basic Operators"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","interfaceLanguage":"swift"},"kind":"article","abstract":[{"text":"Perform operations like assignment, arithmetic, and comparison.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"operator","type":"text"}]},{"type":"text","text":" is a special symbol or phrase that you use to"},{"text":" ","type":"text"},{"type":"text","text":"check, change, or combine values."},{"type":"text","text":" "},{"text":"For example, the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers,"},{"text":" ","type":"text"},{"text":"as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values,","type":"text"},{"type":"text","text":" "},{"text":"as in ","type":"text"},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift supports the operators you may already know from languages like C,","type":"text"},{"type":"text","text":" "},{"text":"and improves several capabilities to eliminate common coding errors.","type":"text"},{"type":"text","text":" "},{"text":"The assignment operator (","type":"text"},{"code":"=","type":"codeVoice"},{"text":") doesn’t return a value,","type":"text"},{"text":" ","type":"text"},{"text":"to prevent it from being mistakenly used when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the equal to operator ("},{"type":"codeVoice","code":"=="},{"text":") is intended.","type":"text"},{"type":"text","text":" "},{"text":"Arithmetic operators (","type":"text"},{"code":"+","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"-"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":", "},{"type":"codeVoice","code":"%"},{"text":" and so forth)","type":"text"},{"type":"text","text":" "},{"text":"detect and disallow value overflow,","type":"text"},{"text":" ","type":"text"},{"text":"to avoid unexpected results when working with numbers that become larger or smaller","type":"text"},{"type":"text","text":" "},{"text":"than the allowed value range of the type that stores them.","type":"text"},{"text":" ","type":"text"},{"text":"You can opt in to value overflow behavior","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by using Swift’s overflow operators,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators","type":"reference","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"text":"Swift also provides range operators that aren’t found in C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"a..<b"},{"text":" and ","type":"text"},{"code":"a...b","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"as a shortcut for expressing a range of values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This chapter describes the common operators in Swift.","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"text":" covers Swift’s advanced operators,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and describes how to define your own custom operators"},{"text":" ","type":"text"},{"type":"text","text":"and implement the standard operators for your own custom types."}],"type":"paragraph"},{"anchor":"Terminology","text":"Terminology","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Operators are unary, binary, or ternary:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Unary"}]},{"type":"text","text":" operators operate on a single target (such as "},{"type":"codeVoice","code":"-a"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Unary ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"type":"text","text":" operators appear immediately before their target (such as "},{"type":"codeVoice","code":"!b"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and unary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"postfix"}]},{"text":" operators appear immediately after their target (such as ","type":"text"},{"code":"c!","type":"codeVoice"},{"type":"text","text":")."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Binary","type":"text"}],"type":"emphasis"},{"type":"text","text":" operators operate on two targets (such as "},{"code":"2 + 3","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and are ","type":"text"},{"inlineContent":[{"text":"infix","type":"text"}],"type":"emphasis"},{"text":" because they appear in between their two targets.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Ternary","type":"text"}]},{"text":" operators operate on three targets.","type":"text"},{"text":" ","type":"text"},{"text":"Like C, Swift has only one ternary operator,","type":"text"},{"text":" ","type":"text"},{"text":"the ternary conditional operator (","type":"text"},{"code":"a ? b : c","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values that operators affect are "},{"inlineContent":[{"type":"text","text":"operands"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"In the expression ","type":"text"},{"code":"1 + 2","type":"codeVoice"},{"text":", the ","type":"text"},{"code":"+","type":"codeVoice"},{"type":"text","text":" symbol is an infix operator"},{"text":" ","type":"text"},{"text":"and its two operands are the values ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2"},{"type":"text","text":"."}]},{"text":"Assignment Operator","anchor":"Assignment-Operator","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"assignment operator","type":"text"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a = b"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initializes or updates the value of "},{"code":"a","type":"codeVoice"},{"text":" with the value of ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}]},{"code":["let b = 10","var a = 5","a = b","\/\/ a is now equal to 10"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If the right side of the assignment is a tuple with multiple values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its elements can be decomposed into multiple constants or variables at once:"}],"type":"paragraph"},{"syntax":"swift","code":["let (x, y) = (1, 2)","\/\/ x is equal to 1, and y is equal to 2"],"type":"codeListing"},{"inlineContent":[{"text":"Unlike the assignment operator in C and Objective-C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the assignment operator in Swift doesn’t itself return a value."},{"type":"text","text":" "},{"type":"text","text":"The following statement isn’t valid:"}],"type":"paragraph"},{"code":["if x = y {","    \/\/ This isn't valid, because x = y doesn't return a value.","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature prevents the assignment operator ("},{"code":"=","type":"codeVoice"},{"text":") from being used by accident","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the equal to operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") is actually intended."},{"type":"text","text":" "},{"text":"By making ","type":"text"},{"type":"codeVoice","code":"if x = y"},{"text":" invalid,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift helps you to avoid these kinds of errors in your code."}]},{"anchor":"Arithmetic-Operators","level":2,"text":"Arithmetic Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Swift supports the four standard ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"arithmetic operators","type":"text"}]},{"type":"text","text":" for all number types:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Addition ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Subtraction (","type":"text"},{"type":"codeVoice","code":"-"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Multiplication (","type":"text"},{"type":"codeVoice","code":"*"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Division (","type":"text"},{"type":"codeVoice","code":"\/"},{"text":")","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"code":["1 + 2       \/\/ equals 3","5 - 3       \/\/ equals 2","2 * 3       \/\/ equals 6","10.0 \/ 2.5  \/\/ equals 4.0"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Unlike the arithmetic operators in C and Objective-C,"},{"text":" ","type":"text"},{"type":"text","text":"the Swift arithmetic operators don’t allow values to overflow by default."},{"text":" ","type":"text"},{"type":"text","text":"You can opt in to value overflow behavior by using Swift’s overflow operators"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"code":"a &+ b","type":"codeVoice"},{"type":"text","text":"). See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The addition operator is also supported for "},{"type":"codeVoice","code":"String"},{"type":"text","text":" concatenation:"}]},{"code":["\"hello, \" + \"world\"  \/\/ equals \"hello, world\""],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Remainder Operator","anchor":"Remainder-Operator"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"remainder operator","type":"text"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"a % b"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"works out how many multiples of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" will fit inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"and returns the value that’s left over"},{"type":"text","text":" "},{"type":"text","text":"(known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"remainder"}]},{"text":").","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The remainder operator (","type":"text"},{"code":"%","type":"codeVoice"},{"text":") is also known as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"inlineContent":[{"type":"text","text":"modulo operator"}],"type":"emphasis"},{"type":"text","text":" in other languages."},{"type":"text","text":" "},{"text":"However, its behavior in Swift for negative numbers means that,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"strictly speaking, it’s a remainder rather than a modulo operation."}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Here’s how the remainder operator works."},{"type":"text","text":" "},{"type":"text","text":"To calculate "},{"code":"9 % 4","type":"codeVoice"},{"type":"text","text":", you first work out how many "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s will fit inside "},{"type":"codeVoice","code":"9"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"remainderInteger"}]},{"inlineContent":[{"text":"You can fit two ","type":"text"},{"code":"4","type":"codeVoice"},{"text":"s inside ","type":"text"},{"type":"codeVoice","code":"9"},{"type":"text","text":", and the remainder is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" (shown in orange)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, this would be written as:"}]},{"syntax":"swift","type":"codeListing","code":["9 % 4    \/\/ equals 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To determine the answer for "},{"code":"a % b","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"%","type":"codeVoice"},{"text":" operator calculates the following equation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns "},{"type":"codeVoice","code":"remainder"},{"type":"text","text":" as its output:"}]},{"inlineContent":[{"type":"codeVoice","code":"a"},{"text":" = (","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" x "},{"code":"some multiplier","type":"codeVoice"},{"text":") + ","type":"text"},{"code":"remainder","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"text":"where ","type":"text"},{"type":"codeVoice","code":"some multiplier"},{"text":" is the largest number of multiples of ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" "},{"text":"that will fit inside ","type":"text"},{"code":"a","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Inserting ","type":"text"},{"code":"9","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"4"},{"text":" into this equation yields:","type":"text"}]},{"inlineContent":[{"code":"9","type":"codeVoice"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"4"},{"text":" x ","type":"text"},{"type":"codeVoice","code":"2"},{"type":"text","text":") + "},{"code":"1","type":"codeVoice"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same method is applied when calculating the remainder for a negative value of "},{"code":"a","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["-9 % 4   \/\/ equals -1"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Inserting "},{"type":"codeVoice","code":"-9"},{"type":"text","text":" and "},{"code":"4","type":"codeVoice"},{"text":" into the equation yields:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"code":"-9","type":"codeVoice"},{"text":" = (","type":"text"},{"type":"codeVoice","code":"4"},{"type":"text","text":" x "},{"type":"codeVoice","code":"-2"},{"type":"text","text":") + "},{"type":"codeVoice","code":"-1"}]},{"inlineContent":[{"text":"giving a remainder value of ","type":"text"},{"type":"codeVoice","code":"-1"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sign of "},{"type":"codeVoice","code":"b"},{"text":" is ignored for negative values of ","type":"text"},{"type":"codeVoice","code":"b"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This means that ","type":"text"},{"type":"codeVoice","code":"a % b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a % -b"},{"text":" always give the same answer.","type":"text"}]},{"type":"heading","anchor":"Unary-Minus-Operator","text":"Unary Minus Operator","level":3},{"type":"paragraph","inlineContent":[{"text":"The sign of a numeric value can be toggled using a prefixed ","type":"text"},{"type":"codeVoice","code":"-"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"known as the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"unary minus operator","type":"text"}]},{"text":":","type":"text"}]},{"code":["let three = 3","let minusThree = -three       \/\/ minusThree equals -3","let plusThree = -minusThree   \/\/ plusThree equals 3, or \"minus minus three\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The unary minus operator ("},{"type":"codeVoice","code":"-"},{"text":") is prepended directly before the value it operates on,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without any white space."}]},{"text":"Unary Plus Operator","anchor":"Unary-Plus-Operator","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"unary plus operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"codeVoice","code":"+"},{"text":") simply returns","type":"text"},{"type":"text","text":" "},{"text":"the value it operates on, without any change:","type":"text"}]},{"code":["let minusSix = -6","let alsoMinusSix = +minusSix  \/\/ alsoMinusSix equals -6"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Although the unary plus operator doesn’t actually do anything,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can use it to provide symmetry in your code for positive numbers"},{"type":"text","text":" "},{"type":"text","text":"when also using the unary minus operator for negative numbers."}],"type":"paragraph"},{"anchor":"Compound-Assignment-Operators","text":"Compound Assignment Operators","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like C, Swift provides "},{"inlineContent":[{"text":"compound assignment operators","type":"text"}],"type":"emphasis"},{"text":" that combine assignment (","type":"text"},{"type":"codeVoice","code":"="},{"text":") with another operation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"One example is the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"addition assignment operator"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"type":"codeListing","code":["var a = 1","a += 2","\/\/ a is now equal to 3"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The expression ","type":"text"},{"code":"a += 2","type":"codeVoice"},{"type":"text","text":" is shorthand for "},{"code":"a = a + 2","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Effectively, the addition and the assignment are combined into one operator"},{"type":"text","text":" "},{"type":"text","text":"that performs both tasks at the same time."}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compound assignment operators don’t return a value."},{"text":" ","type":"text"},{"text":"For example, you can’t write ","type":"text"},{"code":"let b = a += 2","type":"codeVoice"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For information about the operators provided by the Swift standard library,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"reference"},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"Comparison Operators","anchor":"Comparison-Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift supports the following comparison operators:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Equal to (","type":"text"},{"type":"codeVoice","code":"a == b"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Not equal to ("},{"code":"a != b","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Greater than (","type":"text"},{"type":"codeVoice","code":"a > b"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Less than ("},{"type":"codeVoice","code":"a < b"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Greater than or equal to ("},{"type":"codeVoice","code":"a >= b"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Less than or equal to (","type":"text"},{"type":"codeVoice","code":"a <= b"},{"type":"text","text":")"}]}]}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"Swift also provides two ","type":"text"},{"inlineContent":[{"type":"text","text":"identity operators"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":"==="},{"type":"text","text":" and "},{"type":"codeVoice","code":"!=="},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"which you use to test whether two object references both refer to the same object instance."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators"},{"type":"text","text":"."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Each of the comparison operators returns a "},{"type":"codeVoice","code":"Bool"},{"text":" value to indicate whether or not the statement is true:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["1 == 1   \/\/ true because 1 is equal to 1","2 != 1   \/\/ true because 2 isn't equal to 1","2 > 1    \/\/ true because 2 is greater than 1","1 < 2    \/\/ true because 1 is less than 2","1 >= 1   \/\/ true because 1 is greater than or equal to 1","2 <= 1   \/\/ false because 2 isn't less than or equal to 1"]},{"inlineContent":[{"text":"Comparison operators are often used in conditional statements,","type":"text"},{"text":" ","type":"text"},{"text":"such as the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let name = \"world\"","if name == \"world\" {","    print(\"hello, world\")","} else {","    print(\"I'm sorry \\(name), but I don't recognize you\")","}","\/\/ Prints \"hello, world\", because name is indeed equal to \"world\"."]},{"inlineContent":[{"text":"For more about the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can compare"},{"type":"text","text":" "},{"text":"two tuples if they have the same type and the same number of values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Tuples are compared from left to right,"},{"type":"text","text":" "},{"text":"one value at a time,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"until the comparison finds two values"},{"type":"text","text":" "},{"type":"text","text":"that aren’t equal."},{"type":"text","text":" "},{"text":"Those two values are compared,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the result of that comparison"},{"type":"text","text":" "},{"type":"text","text":"determines the overall result of the tuple comparison."},{"type":"text","text":" "},{"text":"If all the elements are equal,","type":"text"},{"text":" ","type":"text"},{"text":"then the tuples themselves are equal.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["(1, \"zebra\") < (2, \"apple\")   \/\/ true because 1 is less than 2; \"zebra\" and \"apple\" aren't compared","(3, \"apple\") < (3, \"bird\")    \/\/ true because 3 is equal to 3, and \"apple\" is less than \"bird\"","(4, \"dog\") == (4, \"dog\")      \/\/ true because 4 is equal to 4, and \"dog\" is equal to \"dog\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"you can see the left-to-right comparison behavior on the first line.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"code":"1","type":"codeVoice"},{"type":"text","text":" is less than "},{"type":"codeVoice","code":"2"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"(1, \"zebra\")"},{"text":" is considered less than ","type":"text"},{"code":"(2, \"apple\")","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"regardless of any other values in the tuples."},{"text":" ","type":"text"},{"text":"It doesn’t matter that ","type":"text"},{"code":"\"zebra\"","type":"codeVoice"},{"text":" isn’t less than ","type":"text"},{"type":"codeVoice","code":"\"apple\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because the comparison is already determined by the tuples’ first elements."},{"text":" ","type":"text"},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"when the tuples’ first elements are the same,"},{"type":"text","text":" "},{"text":"their second elements ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"are"}]},{"type":"text","text":" compared —"},{"type":"text","text":" "},{"type":"text","text":"this is what happens on the second and third line."}]},{"type":"paragraph","inlineContent":[{"text":"Tuples can be compared with a given operator only if the operator","type":"text"},{"type":"text","text":" "},{"text":"can be applied to each value in the respective tuples. For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as demonstrated in the code below, you can compare"},{"text":" ","type":"text"},{"text":"two tuples of type ","type":"text"},{"type":"codeVoice","code":"(String, Int)"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"text":"both ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"text":" values can be compared","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator.  In contrast,"},{"text":" ","type":"text"},{"text":"two tuples of type ","type":"text"},{"type":"codeVoice","code":"(String, Bool)"},{"type":"text","text":" can’t be compared"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"<","type":"codeVoice"},{"text":" operator because the ","type":"text"},{"code":"<","type":"codeVoice"},{"text":" operator can’t be applied to","type":"text"},{"type":"text","text":" "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values."}]},{"code":["(\"blue\", -1) < (\"purple\", 1)        \/\/ OK, evaluates to true","(\"blue\", false) < (\"purple\", true)  \/\/ Error because < can't compare Boolean values"],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The Swift standard library includes tuple comparison operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for tuples with fewer than seven elements."},{"text":" ","type":"text"},{"type":"text","text":"To compare tuples with seven or more elements,"},{"text":" ","type":"text"},{"text":"you must implement the comparison operators yourself.","type":"text"}]}]},{"level":2,"text":"Ternary Conditional Operator","anchor":"Ternary-Conditional-Operator","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"ternary conditional operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a special operator with three parts,"},{"type":"text","text":" "},{"text":"which takes the form ","type":"text"},{"code":"question ? answer1 : answer2","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s a shortcut for evaluating one of two expressions"},{"text":" ","type":"text"},{"text":"based on whether ","type":"text"},{"code":"question","type":"codeVoice"},{"type":"text","text":" is true or false."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"question"},{"text":" is true, it evaluates ","type":"text"},{"type":"codeVoice","code":"answer1"},{"type":"text","text":" and returns its value;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, it evaluates "},{"code":"answer2","type":"codeVoice"},{"type":"text","text":" and returns its value."}]},{"type":"paragraph","inlineContent":[{"text":"The ternary conditional operator is shorthand for the code below:","type":"text"}]},{"syntax":"swift","code":["if question {","    answer1","} else {","    answer2","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example, which calculates the height for a table row."},{"type":"text","text":" "},{"type":"text","text":"The row height should be 50 points taller than the content height"},{"text":" ","type":"text"},{"type":"text","text":"if the row has a header, and 20 points taller if the row doesn’t have a header:"}]},{"syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight = contentHeight + (hasHeader ? 50 : 20)","\/\/ rowHeight is equal to 90"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above is shorthand for the code below:"}]},{"syntax":"swift","type":"codeListing","code":["let contentHeight = 40","let hasHeader = true","let rowHeight: Int","if hasHeader {","    rowHeight = contentHeight + 50","} else {","    rowHeight = contentHeight + 20","}","\/\/ rowHeight is equal to 90"]},{"inlineContent":[{"text":"The first example’s use of the ternary conditional operator means that","type":"text"},{"type":"text","text":" "},{"code":"rowHeight","type":"codeVoice"},{"text":" can be set to the correct value on a single line of code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is more concise than the code used in the second example."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The ternary conditional operator provides"},{"type":"text","text":" "},{"type":"text","text":"an efficient shorthand for deciding which of two expressions to consider."},{"type":"text","text":" "},{"text":"Use the ternary conditional operator with care, however.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Its conciseness can lead to hard-to-read code if overused."},{"type":"text","text":" "},{"type":"text","text":"Avoid combining multiple instances of the ternary conditional operator into one compound statement."}],"type":"paragraph"},{"anchor":"Nil-Coalescing-Operator","text":"Nil-Coalescing Operator","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"nil-coalescing operator","type":"text"}]},{"text":" (","type":"text"},{"code":"a ?? b","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unwraps an optional "},{"code":"a","type":"codeVoice"},{"type":"text","text":" if it contains a value,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value "},{"type":"codeVoice","code":"b"},{"text":" if ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The expression "},{"code":"a","type":"codeVoice"},{"text":" is always of an optional type.","type":"text"},{"text":" ","type":"text"},{"text":"The expression ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" must match the type that’s stored inside ","type":"text"},{"type":"codeVoice","code":"a"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The nil-coalescing operator is shorthand for the code below:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["a != nil ? a! : b"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above uses the ternary conditional operator and forced unwrapping ("},{"code":"a!","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"to access the value wrapped inside ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" when ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" isn’t ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and to return ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" otherwise.","type":"text"},{"text":" ","type":"text"},{"text":"The nil-coalescing operator provides a more elegant way to encapsulate","type":"text"},{"type":"text","text":" "},{"text":"this conditional checking and unwrapping in a concise and readable form.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the value of "},{"code":"a","type":"codeVoice"},{"text":" is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the value of ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" isn’t evaluated."},{"text":" ","type":"text"},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"text":"short-circuit evaluation","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"The example below uses the nil-coalescing operator to choose between"},{"type":"text","text":" "},{"type":"text","text":"a default color name and an optional user-defined color name:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let defaultColorName = \"red\"","var userDefinedColorName: String?   \/\/ defaults to nil","","var colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName is nil, so colorNameToUse is set to the default of \"red\""]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"userDefinedColorName","type":"codeVoice"},{"text":" variable is defined as an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"code":"userDefinedColorName","type":"codeVoice"},{"text":" is of an optional type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use the nil-coalescing operator to consider its value."},{"text":" ","type":"text"},{"text":"In the example above, the operator is used to determine","type":"text"},{"text":" ","type":"text"},{"text":"an initial value for a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" variable called ","type":"text"},{"type":"codeVoice","code":"colorNameToUse"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"type":"codeVoice","code":"userDefinedColorName"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the expression ","type":"text"},{"code":"userDefinedColorName ?? defaultColorName","type":"codeVoice"},{"type":"text","text":" returns"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"code":"defaultColorName","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"\"red\"","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you assign a non-"},{"type":"codeVoice","code":"nil"},{"text":" value to ","type":"text"},{"code":"userDefinedColorName","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and perform the nil-coalescing operator check again,","type":"text"},{"type":"text","text":" "},{"text":"the value wrapped inside ","type":"text"},{"type":"codeVoice","code":"userDefinedColorName"},{"text":" is used instead of the default:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["userDefinedColorName = \"green\"","colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName isn't nil, so colorNameToUse is set to \"green\""]},{"text":"Range Operators","anchor":"Range-Operators","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift includes several "},{"type":"emphasis","inlineContent":[{"type":"text","text":"range operators"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which are shortcuts for expressing a range of values."}]},{"anchor":"Closed-Range-Operator","type":"heading","level":3,"text":"Closed Range Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"closed range operator"}]},{"text":" (","type":"text"},{"code":"a...b","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"defines a range that runs from ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and includes the values ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" must not be greater than ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closed range operator is useful when iterating over a range"},{"text":" ","type":"text"},{"type":"text","text":"in which you want all of the values to be used,"},{"type":"text","text":" "},{"type":"text","text":"such as with a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["for index in 1...5 {","    print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"]},{"inlineContent":[{"text":"For more about ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loops, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Half-Open-Range-Operator","level":3,"text":"Half-Open Range Operator","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"half-open range operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"defines a range that runs from "},{"type":"codeVoice","code":"a"},{"type":"text","text":" to "},{"type":"codeVoice","code":"b"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but doesn’t include "},{"type":"codeVoice","code":"b"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s said to be "},{"inlineContent":[{"text":"half-open","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"because it contains its first value, but not its final value."},{"type":"text","text":" "},{"type":"text","text":"As with the closed range operator,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"code":"a","type":"codeVoice"},{"text":" must not be greater than ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"a"},{"text":" is equal to ","type":"text"},{"type":"codeVoice","code":"b"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"then the resulting range will be empty.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Half-open ranges are particularly useful when you work with","type":"text"},{"text":" ","type":"text"},{"text":"zero-based lists such as arrays,","type":"text"},{"type":"text","text":" "},{"text":"where it’s useful to count up to (but not including) the length of the list:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","let count = names.count","for i in 0..<count {","    print(\"Person \\(i + 1) is called \\(names[i])\")","}","\/\/ Person 1 is called Anna","\/\/ Person 2 is called Alex","\/\/ Person 3 is called Brian","\/\/ Person 4 is called Jack"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the array contains four items,"},{"text":" ","type":"text"},{"text":"but ","type":"text"},{"type":"codeVoice","code":"0..<count"},{"type":"text","text":" only counts as far as "},{"code":"3","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(the index of the last item in the array),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because it’s a half-open range."},{"type":"text","text":" "},{"text":"For more about arrays, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"One-Sided Ranges","level":3,"anchor":"One-Sided-Ranges"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closed range operator"},{"type":"text","text":" "},{"type":"text","text":"has an alternative form for ranges that continue"},{"text":" ","type":"text"},{"type":"text","text":"as far as possible in one direction —"},{"type":"text","text":" "},{"text":"for example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a range that includes all the elements of an array"},{"text":" ","type":"text"},{"text":"from index 2 to the end of the array.","type":"text"},{"type":"text","text":" "},{"text":"In these cases, you can omit the value","type":"text"},{"type":"text","text":" "},{"text":"from one side of the range operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This kind of range is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one-sided range"}]},{"text":" ","type":"text"},{"text":"because the operator has a value on only one side.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"syntax":"swift","code":["for name in names[2...] {","    print(name)","}","\/\/ Brian","\/\/ Jack","","for name in names[...2] {","    print(name)","}","\/\/ Anna","\/\/ Alex","\/\/ Brian"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The half-open range operator also has"},{"type":"text","text":" "},{"type":"text","text":"a one-sided form that’s written"},{"text":" ","type":"text"},{"type":"text","text":"with only its final value."},{"text":" ","type":"text"},{"text":"Just like when you include a value on both sides,","type":"text"},{"text":" ","type":"text"},{"text":"the final value isn’t part of the range.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["for name in names[..<2] {","    print(name)","}","\/\/ Anna","\/\/ Alex"]},{"type":"paragraph","inlineContent":[{"text":"One-sided ranges can be used in other contexts,","type":"text"},{"type":"text","text":" "},{"text":"not just in subscripts.","type":"text"},{"type":"text","text":" "},{"text":"You can’t iterate over a one-sided range","type":"text"},{"type":"text","text":" "},{"text":"that omits a first value,","type":"text"},{"type":"text","text":" "},{"text":"because it isn’t clear where iteration should begin.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You "},{"inlineContent":[{"type":"text","text":"can"}],"type":"emphasis"},{"text":" iterate over a one-sided range that omits its final value;","type":"text"},{"text":" ","type":"text"},{"text":"however, because the range continues indefinitely,","type":"text"},{"type":"text","text":" "},{"text":"make sure you add an explicit end condition for the loop.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also check whether a one-sided range contains a particular value,"},{"text":" ","type":"text"},{"type":"text","text":"as shown in the code below."}]},{"code":["let range = ...5","range.contains(7)   \/\/ false","range.contains(4)   \/\/ true","range.contains(-1)  \/\/ true"],"syntax":"swift","type":"codeListing"},{"text":"Logical Operators","level":2,"type":"heading","anchor":"Logical-Operators"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Logical operators","type":"text"}]},{"text":" modify or combine","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the Boolean logic values "},{"type":"codeVoice","code":"true"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Swift supports the three standard logical operators found in C-based languages:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Logical NOT ("},{"code":"!a","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Logical AND (","type":"text"},{"code":"a && b","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Logical OR ("},{"type":"codeVoice","code":"a || b"},{"text":")","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Logical-NOT-Operator","level":3,"text":"Logical NOT Operator","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical NOT operator"}]},{"text":" (","type":"text"},{"code":"!a","type":"codeVoice"},{"type":"text","text":") inverts a Boolean value so that "},{"code":"true","type":"codeVoice"},{"text":" becomes ","type":"text"},{"type":"codeVoice","code":"false"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" becomes "},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The logical NOT operator is a prefix operator,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and appears immediately before the value it operates on,"},{"text":" ","type":"text"},{"type":"text","text":"without any white space."},{"text":" ","type":"text"},{"type":"text","text":"It can be read as “not "},{"type":"codeVoice","code":"a"},{"type":"text","text":"”, as seen in the following example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let allowedEntry = false","if !allowedEntry {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""]},{"inlineContent":[{"text":"The phrase ","type":"text"},{"type":"codeVoice","code":"if !allowedEntry"},{"text":" can be read as “if not allowed entry.”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The subsequent line is only executed if “not allowed entry” is true;"},{"text":" ","type":"text"},{"type":"text","text":"that is, if "},{"code":"allowedEntry","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As in this example,"},{"type":"text","text":" "},{"text":"careful choice of Boolean constant and variable names","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can help to keep code readable and concise,"},{"type":"text","text":" "},{"type":"text","text":"while avoiding double negatives or confusing logic statements."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Logical AND Operator","anchor":"Logical-AND-Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical AND operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"a && b"},{"text":") creates logical expressions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where both values must be "},{"code":"true","type":"codeVoice"},{"type":"text","text":" for the overall expression to also be "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If either value is "},{"code":"false","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the overall expression will also be "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In fact, if the "},{"type":"emphasis","inlineContent":[{"text":"first","type":"text"}]},{"type":"text","text":" value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the second value won’t even be evaluated,"},{"type":"text","text":" "},{"text":"because it can’t possibly make the overall expression equate to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"short-circuit evaluation"}]},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"This example considers two "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"text":"and only allows access if both values are ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let enteredDoorCode = true","let passedRetinaScan = false","if enteredDoorCode && passedRetinaScan {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""],"type":"codeListing"},{"level":3,"anchor":"Logical-OR-Operator","type":"heading","text":"Logical OR Operator"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"logical OR operator"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"a || b"},{"text":") is an infix operator made from two adjacent pipe characters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You use it to create logical expressions in which"},{"type":"text","text":" "},{"type":"text","text":"only "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"text":" of the two values has to be ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" ","type":"text"},{"type":"text","text":"for the overall expression to be "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Like the Logical AND operator above,"},{"text":" ","type":"text"},{"text":"the Logical OR operator uses short-circuit evaluation to consider its expressions.","type":"text"},{"type":"text","text":" "},{"text":"If the left side of a Logical OR expression is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the right side isn’t evaluated,","type":"text"},{"text":" ","type":"text"},{"text":"because it can’t change the outcome of the overall expression.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"text":" ","type":"text"},{"type":"text","text":"the first "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" value ("},{"type":"codeVoice","code":"hasDoorKey"},{"text":") is ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"but the second value ("},{"type":"codeVoice","code":"knowsOverridePassword"},{"type":"text","text":") is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Because one value is "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the overall expression also evaluates to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and access is allowed:"}]},{"type":"codeListing","syntax":"swift","code":["let hasDoorKey = false","let knowsOverridePassword = true","if hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"text":"Combining Logical Operators","level":3,"anchor":"Combining-Logical-Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can combine multiple logical operators to create longer compound expressions:"}]},{"syntax":"swift","code":["if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This example uses multiple ","type":"text"},{"code":"&&","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"||"},{"text":" operators to create a longer compound expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, the "},{"type":"codeVoice","code":"&&"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"||"},{"type":"text","text":" operators still operate on only two values,"},{"text":" ","type":"text"},{"type":"text","text":"so this is actually three smaller expressions chained together."},{"text":" ","type":"text"},{"type":"text","text":"The example can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we’ve entered the correct door code and passed the retina scan,"},{"text":" ","type":"text"},{"text":"or if we have a valid door key,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or if we know the emergency override password,"},{"type":"text","text":" "},{"type":"text","text":"then allow access."}]},{"type":"paragraph","inlineContent":[{"text":"Based on the values of ","type":"text"},{"code":"enteredDoorCode","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"passedRetinaScan"},{"type":"text","text":", and "},{"code":"hasDoorKey","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first two subexpressions are "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, the emergency override password is known,"},{"text":" ","type":"text"},{"type":"text","text":"so the overall compound expression still evaluates to "},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"The Swift logical operators "},{"code":"&&","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"||","type":"codeVoice"},{"type":"text","text":" are left-associative,"},{"type":"text","text":" "},{"type":"text","text":"meaning that compound expressions with multiple logical operators"},{"text":" ","type":"text"},{"type":"text","text":"evaluate the leftmost subexpression first."}],"type":"paragraph"}],"name":"Note"},{"type":"heading","text":"Explicit Parentheses","anchor":"Explicit-Parentheses","level":3},{"inlineContent":[{"type":"text","text":"It’s sometimes useful to include parentheses when they’re not strictly needed,"},{"type":"text","text":" "},{"text":"to make the intention of a complex expression easier to read.","type":"text"},{"type":"text","text":" "},{"text":"In the door access example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s useful to add parentheses around the first part of the compound expression"},{"text":" ","type":"text"},{"type":"text","text":"to make its intent explicit:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The parentheses make it clear that the first two values"},{"type":"text","text":" "},{"type":"text","text":"are considered as part of a separate possible state in the overall logic."},{"type":"text","text":" "},{"type":"text","text":"The output of the compound expression doesn’t change,"},{"text":" ","type":"text"},{"type":"text","text":"but the overall intention is clearer to the reader."},{"type":"text","text":" "},{"type":"text","text":"Readability is always preferred over brevity;"},{"type":"text","text":" "},{"text":"use parentheses where they help to make your intentions clear.","type":"text"}]}]}],"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Overflow-Operators":{"title":"Overflow Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Overflow-Operators","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","abstract":[],"title":"Arrays","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"title":"Control Flow","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Identity-Operators":{"title":"Identity Operators","url":"\/documentation\/the-swift-programming-language\/classesandstructures#Identity-Operators","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Identity-Operators","kind":"section","type":"topic"},"https://developer.apple.com/documentation/swift/operator_declarations":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"link","titleInlineContent":[{"text":"Operator Declarations","type":"text"}],"title":"Operator Declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"abstract":[],"role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators","title":"Advanced Operators","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"kind":"article","role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"remainderInteger":{"alt":null,"identifier":"remainderInteger","type":"image","variants":[{"url":"\/images\/remainderInteger@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/remainderInteger~dark@2x.png"}]}}}