{"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Use built-in named and compound types.","type":"text"}],"kind":"article","sections":[],"metadata":{"title":"Types"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In Swift, there are two kinds of types: named types and compound types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"named type"}]},{"type":"text","text":" is a type that can be given a particular name when it’s defined."},{"type":"text","text":" "},{"type":"text","text":"Named types include classes, structures, enumerations, and protocols."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instances of a user-defined class named "},{"code":"MyClass","type":"codeVoice"},{"text":" have the type ","type":"text"},{"code":"MyClass","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In addition to user-defined named types,"},{"text":" ","type":"text"},{"text":"the Swift standard library defines many commonly used named types,","type":"text"},{"type":"text","text":" "},{"text":"including those that represent arrays, dictionaries, and optional values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data types that are normally considered basic or primitive in other languages —"},{"text":" ","type":"text"},{"text":"such as types that represent numbers, characters, and strings —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are actually named types,"},{"text":" ","type":"text"},{"text":"defined and implemented in the Swift standard library using structures.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because they’re named types,"},{"type":"text","text":" "},{"text":"you can extend their behavior to suit the needs of your program,","type":"text"},{"type":"text","text":" "},{"text":"using an extension declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compound type"}]},{"type":"text","text":" is a type without a name, defined in the Swift language itself."},{"type":"text","text":" "},{"text":"There are two compound types: function types and tuple types.","type":"text"},{"type":"text","text":" "},{"text":"A compound type may contain named types and other compound types.","type":"text"},{"type":"text","text":" "},{"text":"For example, the tuple type ","type":"text"},{"type":"codeVoice","code":"(Int, (Int, Int))"},{"type":"text","text":" contains two elements:"},{"text":" ","type":"text"},{"type":"text","text":"The first is the named type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the second is another compound type "},{"type":"codeVoice","code":"(Int, Int)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can put parentheses around a named type or a compound type."},{"text":" ","type":"text"},{"type":"text","text":"However, adding parentheses around a type doesn’t have any effect."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"code":"(Int)","type":"codeVoice"},{"type":"text","text":" is equivalent to "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"This chapter discusses the types defined in the Swift language itself"},{"type":"text","text":" "},{"type":"text","text":"and describes the type inference behavior of Swift."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Grammar of a type","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"array-type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary-type"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"tuple-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-type"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicitly-unwrapped-optional-type"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"opaque-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"boxed-protocol-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"metatype-type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any-type","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"self-type"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]}]}]},{"level":2,"type":"heading","text":"Type Annotation","anchor":"Type-Annotation"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"type annotation"}],"type":"emphasis"},{"text":" explicitly specifies the type of a variable or expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Type annotations begin with a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") and end with a type,"},{"type":"text","text":" "},{"type":"text","text":"as the following examples show:"}],"type":"paragraph"},{"type":"codeListing","code":["let someTuple: (Double, Double) = (3.14159, 2.71828)","func someFunction(a: Int) { \/* ... *\/ }"],"syntax":"swift"},{"inlineContent":[{"text":"In the first example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"code":"someTuple","type":"codeVoice"},{"type":"text","text":" is specified to have the tuple type "},{"type":"codeVoice","code":"(Double, Double)"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the second example,"},{"type":"text","text":" "},{"type":"text","text":"the parameter "},{"code":"a","type":"codeVoice"},{"type":"text","text":" to the function "},{"code":"someFunction","type":"codeVoice"},{"text":" is specified to have the type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Type annotations can contain an optional list of type attributes before the type.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-annotation","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"}]}],"name":"Grammar of a type annotation","style":"note","type":"aside"},{"text":"Type Identifier","level":2,"anchor":"Type-Identifier","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"type identifier"}],"type":"emphasis"},{"type":"text","text":" refers to either a named type"},{"text":" ","type":"text"},{"type":"text","text":"or a type alias of a named or compound type."}]},{"type":"paragraph","inlineContent":[{"text":"Most of the time, a type identifier directly refers to a named type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the same name as the identifier."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" is a type identifier that directly refers to the named type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the type identifier ","type":"text"},{"code":"Dictionary<String, Int>","type":"codeVoice"},{"text":" directly refers","type":"text"},{"type":"text","text":" "},{"text":"to the named type ","type":"text"},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"There are two cases in which a type identifier doesn’t refer to a type with the same name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the first case, a type identifier refers to a type alias of a named or compound type."},{"type":"text","text":" "},{"type":"text","text":"For instance, in the example below,"},{"type":"text","text":" "},{"type":"text","text":"the use of "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" in the type annotation refers to the tuple type "},{"type":"codeVoice","code":"(Int, Int)"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["typealias Point = (Int, Int)","let origin: Point = (0, 0)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the second case, a type identifier uses dot ("},{"code":".","type":"codeVoice"},{"text":") syntax to refer to named types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"declared in other modules or nested within other types."},{"type":"text","text":" "},{"text":"For example, the type identifier in the following code references the named type ","type":"text"},{"code":"MyType","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that’s declared in the "},{"code":"ExampleModule","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"paragraph"},{"code":["var someValue: ExampleModule.MyType"],"type":"codeListing","syntax":"swift"},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument-clause"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-clause"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":".","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]}]}],"style":"note","name":"Grammar of a type identifier"},{"anchor":"Tuple-Type","level":2,"type":"heading","text":"Tuple Type"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple type"}]},{"type":"text","text":" is a comma-separated list of types, enclosed in parentheses."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a tuple type as the return type of a function"},{"type":"text","text":" "},{"type":"text","text":"to enable the function to return a single tuple containing multiple values."},{"text":" ","type":"text"},{"type":"text","text":"You can also name the elements of a tuple type and use those names to refer to"},{"text":" ","type":"text"},{"text":"the values of the individual elements. An element name consists of an identifier","type":"text"},{"type":"text","text":" "},{"text":"followed immediately by a colon (:). For an example that demonstrates both of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"these features, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When an element of a tuple type has a name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that name is part of the type."}]},{"code":["var someTuple = (top: 10, bottom: 12)  \/\/ someTuple is of type (top: Int, bottom: Int)","someTuple = (top: 4, bottom: 42) \/\/ OK: names match","someTuple = (9, 99)              \/\/ OK: names are inferred","someTuple = (left: 5, right: 5)  \/\/ Error: names don't match"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"All tuple types contain two or more types,"},{"type":"text","text":" "},{"type":"text","text":"except for "},{"type":"codeVoice","code":"Void"},{"text":" which is a type alias for the empty tuple type, ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a tuple type","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"text":"tuple-type-element-list","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"tuple-type-element-list"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element","type":"text"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"tuple-type-element"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"tuple-type-element-list"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"element-name","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type-annotation"}],"type":"emphasis"},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"element-name"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]}]}]},{"text":"Function Type","type":"heading","anchor":"Function-Type","level":2},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"function type","type":"text"}],"type":"emphasis"},{"type":"text","text":" represents the type of a function, method, or closure"},{"type":"text","text":" "},{"text":"and consists of a parameter and return type separated by an arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":"):"}]},{"code":["(<#parameter type#>) -> <#return type#>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"parameter type","type":"text"}],"type":"emphasis"},{"type":"text","text":" is comma-separated list of types."},{"type":"text","text":" "},{"text":"Because the ","type":"text"},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"text":" can be a tuple type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function types support functions and methods"},{"type":"text","text":" "},{"type":"text","text":"that return multiple values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parameter of the function type "},{"code":"() -> T","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(where ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" is any type)"},{"type":"text","text":" "},{"text":"can apply the ","type":"text"},{"code":"autoclosure","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to implicitly create a closure at its call sites."},{"type":"text","text":" "},{"text":"This provides a syntactically convenient way","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to defer the evaluation of an expression"},{"type":"text","text":" "},{"type":"text","text":"without needing to write an explicit closure"},{"type":"text","text":" "},{"type":"text","text":"when you call the function."},{"text":" ","type":"text"},{"text":"For an example of an autoclosure function type parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"A function type can have variadic parameters in its ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"parameter type","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Syntactically,","type":"text"},{"type":"text","text":" "},{"text":"a variadic parameter consists of a base type name followed immediately by three dots (","type":"text"},{"type":"codeVoice","code":"..."},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"code":"Int...","type":"codeVoice"},{"text":". A variadic parameter is treated as an array that contains elements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the base type name. For instance, the variadic parameter "},{"code":"Int...","type":"codeVoice"},{"type":"text","text":" is treated"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":". For an example that uses a variadic parameter,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To specify an in-out parameter, prefix the parameter type with the "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"You can’t mark a variadic parameter or a return type with the ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"In-out parameters are discussed in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"If a function type has only one parameter","type":"text"},{"type":"text","text":" "},{"text":"and that parameter’s type is a tuple type,","type":"text"},{"text":" ","type":"text"},{"text":"then the tuple type must be parenthesized when writing the function’s type.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"code":"((Int, Int)) -> Void","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is the type of a function that takes a single parameter","type":"text"},{"type":"text","text":" "},{"text":"of the tuple type ","type":"text"},{"type":"codeVoice","code":"(Int, Int)"},{"text":" ","type":"text"},{"text":"and doesn’t return any value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast, without parentheses,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"(Int, Int) -> Void"},{"type":"text","text":" is the type"},{"type":"text","text":" "},{"type":"text","text":"of a function that takes two "},{"type":"codeVoice","code":"Int"},{"text":" parameters","type":"text"},{"text":" ","type":"text"},{"text":"and doesn’t return any value.","type":"text"},{"type":"text","text":" "},{"text":"Likewise, because ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" is a type alias for ","type":"text"},{"type":"codeVoice","code":"()"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the function type "},{"type":"codeVoice","code":"(Void) -> Void"},{"text":" ","type":"text"},{"type":"text","text":"is the same as "},{"type":"codeVoice","code":"(()) -> ()"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"text":"a function that takes a single argument that’s an empty tuple.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These types aren’t the same as "},{"type":"codeVoice","code":"() -> ()"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"text":"a function that takes no arguments.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Argument names in functions and methods","type":"text"},{"type":"text","text":" "},{"text":"aren’t part of the corresponding function type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["func someFunction(left: Int, right: Int) {}","func anotherFunction(left: Int, right: Int) {}","func functionWithDifferentLabels(top: Int, bottom: Int) {}","","var f = someFunction \/\/ The type of f is (Int, Int) -> Void, not (left: Int, right: Int) -> Void.","f = anotherFunction              \/\/ OK","f = functionWithDifferentLabels  \/\/ OK","","func functionWithDifferentArgumentTypes(left: Int, right: String) {}","f = functionWithDifferentArgumentTypes     \/\/ Error","","func functionWithDifferentNumberOfArguments(left: Int, right: Int, top: Int) {}","f = functionWithDifferentNumberOfArguments \/\/ Error"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because argument labels aren’t part of a function’s type,","type":"text"},{"text":" ","type":"text"},{"text":"you omit them when writing a function type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var operation: (lhs: Int, rhs: Int) -> Int     \/\/ Error","var operation: (_ lhs: Int, _ rhs: Int) -> Int \/\/ OK","var operation: (Int, Int) -> Int               \/\/ OK"]},{"inlineContent":[{"text":"If a function type includes more than a single arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"the function types are grouped from right to left."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the function type ","type":"text"},{"code":"(Int) -> (Int) -> Int","type":"codeVoice"},{"type":"text","text":" is understood as "},{"code":"(Int) -> ((Int) -> Int)","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is, a function that takes an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and returns"},{"text":" ","type":"text"},{"text":"another function that takes and returns an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function types for functions"},{"type":"text","text":" "},{"text":"that can throw or rethrow an error must be marked with the ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword is part of a function’s type,"},{"text":" ","type":"text"},{"type":"text","text":"and nonthrowing functions are subtypes of throwing functions."},{"type":"text","text":" "},{"type":"text","text":"As a result, you can use a nonthrowing function in the same places as a throwing one."},{"type":"text","text":" "},{"type":"text","text":"Throwing and rethrowing functions are described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Function types for asynchronous functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must be marked with the "},{"code":"async","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"async","type":"codeVoice"},{"text":" keyword is part of a function’s type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and synchronous functions are subtypes of asynchronous functions."},{"type":"text","text":" "},{"text":"As a result, you can use a synchronous function","type":"text"},{"type":"text","text":" "},{"text":"in the same places as an asynchronous one.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about asynchronous functions,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"type":"text","text":"."}]},{"anchor":"Restrictions-for-Nonescaping-Closures","type":"heading","level":3,"text":"Restrictions for Nonescaping Closures"},{"inlineContent":[{"type":"text","text":"A parameter that’s a nonescaping function"},{"type":"text","text":" "},{"type":"text","text":"can’t be stored in a property, variable, or constant of type "},{"code":"Any","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because that might allow the value to escape."}],"type":"paragraph"},{"inlineContent":[{"text":"A parameter that’s a nonescaping function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t be passed as an argument to another nonescaping function parameter."},{"type":"text","text":" "},{"text":"This restriction helps Swift perform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more of its checks for conflicting access to memory"},{"type":"text","text":" "},{"type":"text","text":"at compile time instead of at runtime."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["let external: (() -> Void) -> Void = { _ in () }","func takesTwoFunctions(first: (() -> Void) -> Void, second: (() -> Void) -> Void) {","    first { first {} }       \/\/ Error","    second { second {}  }    \/\/ Error","","    first { second {} }      \/\/ Error","    second { first {} }      \/\/ Error","","    first { external {} }    \/\/ OK","    external { first {} }    \/\/ OK","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the code above,"},{"text":" ","type":"text"},{"type":"text","text":"both of the parameters to "},{"code":"takesTwoFunctions(first:second:)","type":"codeVoice"},{"type":"text","text":" are functions."},{"type":"text","text":" "},{"type":"text","text":"Neither parameter is marked "},{"code":"@escaping","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so they’re both nonescaping as a result."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The four function calls marked “Error” in the example above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cause compiler errors."},{"text":" ","type":"text"},{"type":"text","text":"Because the "},{"type":"codeVoice","code":"first"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"second"},{"type":"text","text":" parameters"},{"text":" ","type":"text"},{"type":"text","text":"are nonescaping functions,"},{"text":" ","type":"text"},{"text":"they can’t be passed as arguments to another nonescaping function parameter.","type":"text"},{"text":" ","type":"text"},{"text":"In contrast,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the two function calls marked “OK” don’t cause a compiler error."},{"type":"text","text":" "},{"text":"These function calls don’t violate the restriction","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because "},{"code":"external","type":"codeVoice"},{"type":"text","text":" isn’t one of the parameters of "},{"type":"codeVoice","code":"takesTwoFunctions(first:second:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to avoid this restriction, mark one of the parameters as escaping,"},{"type":"text","text":" "},{"type":"text","text":"or temporarily convert one of the nonescaping function parameters to an escaping function"},{"text":" ","type":"text"},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"withoutActuallyEscaping(_:do:)"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"text":"For information about avoiding conflicting access to memory,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"style":"note","type":"aside","name":"Grammar of a function type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function-type-argument-clause","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"async"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"throws"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"->"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"function-type-argument-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"function-type-argument-clause"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"function-type-argument-list","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"..."}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-list"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"function-type-argument","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-list"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"function-type-argument"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"parameter-modifier","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"argument-label"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-annotation","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"argument-label","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]}]}]},{"type":"heading","level":2,"text":"Array Type","anchor":"Array-Type"},{"inlineContent":[{"text":"The Swift language provides the following syntactic sugar for the Swift standard library","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Array<Element>"},{"text":" type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[<#type#>]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In other words, the following two declarations are equivalent:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someArray: Array<String> = [\"Alex\", \"Brian\", \"Dave\"]","let someArray: [String] = [\"Alex\", \"Brian\", \"Dave\"]"]},{"inlineContent":[{"text":"In both cases, the constant ","type":"text"},{"type":"codeVoice","code":"someArray"},{"type":"text","text":" "},{"text":"is declared as an array of strings. The elements of an array can be accessed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"through subscripting by specifying a valid index value in square brackets:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"someArray[0]"},{"text":" refers to the element at index 0, ","type":"text"},{"code":"\"Alex\"","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create multidimensional arrays by nesting pairs of square brackets,"},{"text":" ","type":"text"},{"type":"text","text":"where the name of the base type of the elements is contained in the innermost"},{"text":" ","type":"text"},{"type":"text","text":"pair of square brackets."},{"text":" ","type":"text"},{"text":"For example, you can create","type":"text"},{"type":"text","text":" "},{"text":"a three-dimensional array of integers using three sets of square brackets:","type":"text"}]},{"code":["var array3D: [[[Int]]] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When accessing the elements in a multidimensional array,"},{"type":"text","text":" "},{"type":"text","text":"the left-most subscript index refers to the element at that index in the outermost"},{"type":"text","text":" "},{"type":"text","text":"array. The next subscript index to the right refers to the element"},{"text":" ","type":"text"},{"type":"text","text":"at that index in the array that’s nested one level in. And so on. This means that in"},{"type":"text","text":" "},{"text":"the example above, ","type":"text"},{"code":"array3D[0]","type":"codeVoice"},{"text":" refers to ","type":"text"},{"code":"[[1, 2], [3, 4]]","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"array3D[0][1]"},{"type":"text","text":" refers to "},{"code":"[3, 4]","type":"codeVoice"},{"type":"text","text":", and "},{"code":"array3D[0][1][1]","type":"codeVoice"},{"type":"text","text":" refers to the value 4."}]},{"inlineContent":[{"text":"For a detailed discussion of the Swift standard library ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","name":"Grammar of an array type","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"array-type","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"["}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"]"}]}],"type":"paragraph"}],"style":"note"},{"anchor":"Dictionary-Type","type":"heading","text":"Dictionary Type","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language provides the following syntactic sugar for the Swift standard library"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"type":"text","text":" type:"}]},{"code":["[<#key type#>: <#value type#>]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In other words, the following two declarations are equivalent:","type":"text"}]},{"code":["let someDictionary: [String: Int] = [\"Alex\": 31, \"Paul\": 39]","let someDictionary: Dictionary<String, Int> = [\"Alex\": 31, \"Paul\": 39]"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"In both cases, the constant ","type":"text"},{"code":"someDictionary","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is declared as a dictionary with strings as keys and integers as values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The values of a dictionary can be accessed through subscripting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by specifying the corresponding key in"},{"text":" ","type":"text"},{"text":"square brackets: ","type":"text"},{"code":"someDictionary[\"Alex\"]","type":"codeVoice"},{"type":"text","text":" refers to the value associated"},{"text":" ","type":"text"},{"type":"text","text":"with the key "},{"type":"codeVoice","code":"\"Alex\""},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The subscript returns an optional value of the dictionary’s value type."},{"type":"text","text":" "},{"text":"If the specified key isn’t contained in the dictionary,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the subscript returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The key type of a dictionary must conform to the Swift standard library ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"For a detailed discussion of the Swift standard library ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"dictionary-type","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"[","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"]","type":"codeVoice"}],"type":"strong"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Grammar of a dictionary type"},{"type":"heading","anchor":"Optional-Type","text":"Optional Type","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language defines the postfix "},{"type":"codeVoice","code":"?"},{"type":"text","text":" as syntactic sugar for"},{"text":" ","type":"text"},{"type":"text","text":"the named type "},{"code":"Optional<Wrapped>","type":"codeVoice"},{"type":"text","text":", which is defined in the Swift standard library."},{"text":" ","type":"text"},{"text":"In other words, the following two declarations are equivalent:","type":"text"}]},{"code":["var optionalInteger: Int?","var optionalInteger: Optional<Int>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, the variable "},{"type":"codeVoice","code":"optionalInteger"},{"type":"text","text":" "},{"text":"is declared to have the type of an optional integer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that no whitespace may appear between the type and the "},{"type":"codeVoice","code":"?"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The type ","type":"text"},{"code":"Optional<Wrapped>","type":"codeVoice"},{"text":" is an enumeration with two cases, ","type":"text"},{"code":"none","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"some(Wrapped)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are used to represent values that may or may not be present."},{"type":"text","text":" "},{"type":"text","text":"Any type can be explicitly declared to be (or implicitly converted to) an optional type."},{"type":"text","text":" "},{"text":"If you don’t provide an initial value when you declare an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"optional variable or property, its value automatically defaults to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"If an instance of an optional type contains a value,","type":"text"},{"type":"text","text":" "},{"text":"you can access that value using the postfix operator ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":", as shown below:"}],"type":"paragraph"},{"code":["optionalInteger = 42","optionalInteger! \/\/ 42"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Using the "},{"code":"!","type":"codeVoice"},{"type":"text","text":" operator to unwrap an optional"},{"type":"text","text":" "},{"text":"that has a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results in a runtime error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can also use optional chaining and optional binding to conditionally perform an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation on an optional expression. If the value is "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"no operation is performed and therefore no runtime error is produced.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information and to see examples that show how to use optional types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals"},{"text":".","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-type"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"?"}],"type":"strong"}],"type":"paragraph"}],"name":"Grammar of an optional type","type":"aside"},{"text":"Implicitly Unwrapped Optional Type","level":2,"type":"heading","anchor":"Implicitly-Unwrapped-Optional-Type"},{"inlineContent":[{"text":"The Swift language defines the postfix ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":" as syntactic sugar for"},{"type":"text","text":" "},{"text":"the named type ","type":"text"},{"type":"codeVoice","code":"Optional<Wrapped>"},{"type":"text","text":", which is defined in the Swift standard library,"},{"type":"text","text":" "},{"text":"with the additional behavior that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s automatically unwrapped when it’s accessed."},{"text":" ","type":"text"},{"text":"If you try to use an implicitly unwrapped optional that has a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you’ll get a runtime error."},{"type":"text","text":" "},{"type":"text","text":"With the exception of the implicit unwrapping behavior,"},{"text":" ","type":"text"},{"text":"the following two declarations are equivalent:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var implicitlyUnwrappedString: String!","var explicitlyUnwrappedString: Optional<String>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that no whitespace may appear between the type and the "},{"type":"codeVoice","code":"!"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Because implicit unwrapping","type":"text"},{"type":"text","text":" "},{"text":"changes the meaning of the declaration that contains that type,","type":"text"},{"type":"text","text":" "},{"text":"optional types that are nested inside a tuple type or a generic type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"— such as the element types of a dictionary or array —"},{"type":"text","text":" "},{"text":"can’t be marked as implicitly unwrapped.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let tupleOfImplicitlyUnwrappedElements: (Int!, Int!)  \/\/ Error","let implicitlyUnwrappedTuple: (Int, Int)!             \/\/ OK","","let arrayOfImplicitlyUnwrappedElements: [Int!]        \/\/ Error","let implicitlyUnwrappedArray: [Int]!                  \/\/ OK"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because implicitly unwrapped optionals"},{"text":" ","type":"text"},{"type":"text","text":"have the same "},{"type":"codeVoice","code":"Optional<Wrapped>"},{"text":" type as optional values,","type":"text"},{"type":"text","text":" "},{"text":"you can use implicitly unwrapped optionals","type":"text"},{"type":"text","text":" "},{"text":"in all the same places in your code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that you can use optionals."},{"type":"text","text":" "},{"type":"text","text":"For example, you can assign values of implicitly unwrapped"},{"type":"text","text":" "},{"type":"text","text":"optionals to variables, constants, and properties of optionals, and vice versa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with optionals, if you don’t provide an initial value when you declare an"},{"type":"text","text":" "},{"type":"text","text":"implicitly unwrapped optional variable or property,"},{"type":"text","text":" "},{"text":"its value automatically defaults to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Use optional chaining to conditionally perform an"},{"text":" ","type":"text"},{"type":"text","text":"operation on an implicitly unwrapped optional expression."},{"type":"text","text":" "},{"type":"text","text":"If the value is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"no operation is performed and therefore no runtime error is produced."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about implicitly unwrapped optional types,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of an implicitly unwrapped optional type","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"implicitly-unwrapped-optional-type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"!","type":"codeVoice"}]}],"type":"paragraph"}]},{"level":2,"type":"heading","text":"Protocol Composition Type","anchor":"Protocol-Composition-Type"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol composition type"}],"type":"emphasis"},{"text":" defines a type that conforms to each protocol","type":"text"},{"text":" ","type":"text"},{"text":"in a list of specified protocols,","type":"text"},{"text":" ","type":"text"},{"text":"or a type that’s a subclass of a given class","type":"text"},{"type":"text","text":" "},{"text":"and conforms to each protocol in a list of specified protocols.","type":"text"},{"text":" ","type":"text"},{"text":"Protocol composition types may be used only when specifying a type","type":"text"},{"type":"text","text":" "},{"text":"in type annotations,","type":"text"},{"type":"text","text":" "},{"text":"in generic parameter clauses,","type":"text"},{"text":" ","type":"text"},{"text":"and in generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}]},{"inlineContent":[{"type":"text","text":"Protocol composition types have the following form:"}],"type":"paragraph"},{"code":["<#Protocol 1#> & <#Protocol 2#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A protocol composition type allows you to specify a value whose type conforms to the requirements","type":"text"},{"type":"text","text":" "},{"text":"of multiple protocols without explicitly defining a new, named protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that inherits from each protocol you want the type to conform to."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can use the protocol composition type "},{"type":"codeVoice","code":"ProtocolA & ProtocolB & ProtocolC"},{"type":"text","text":" "},{"type":"text","text":"instead of declaring a new protocol"},{"text":" ","type":"text"},{"type":"text","text":"that inherits from "},{"code":"ProtocolA","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ProtocolB"},{"type":"text","text":", and "},{"code":"ProtocolC","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Likewise, you can use "},{"type":"codeVoice","code":"SuperClass & ProtocolA"},{"type":"text","text":" "},{"type":"text","text":"instead of declaring a new protocol"},{"text":" ","type":"text"},{"text":"that’s a subclass of ","type":"text"},{"type":"codeVoice","code":"SuperClass"},{"type":"text","text":" and conforms to "},{"code":"ProtocolA","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each item in a protocol composition list is one of the following;"},{"type":"text","text":" "},{"type":"text","text":"the list can contain at most one class:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of a class"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The name of a protocol","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A type alias whose underlying type"},{"text":" ","type":"text"},{"type":"text","text":"is a protocol composition type, a protocol, or a class."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"When a protocol composition type contains type aliases,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s possible for the same protocol to appear"},{"text":" ","type":"text"},{"text":"more than once in the definitions —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"duplicates are ignored."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the definition of "},{"type":"codeVoice","code":"PQR"},{"type":"text","text":" in the code below"},{"type":"text","text":" "},{"type":"text","text":"is equivalent to "},{"type":"codeVoice","code":"P & Q & R"},{"text":".","type":"text"}]},{"code":["typealias PQ = P & Q","typealias PQR = PQ & Q & R"],"type":"codeListing","syntax":"swift"},{"name":"Grammar of a protocol composition type","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"&","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-continuation","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"protocol-composition-continuation","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]}]}],"style":"note"},{"anchor":"Opaque-Type","text":"Opaque Type","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"opaque type","type":"text"}],"type":"emphasis"},{"text":" defines a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that conforms to a protocol or protocol composition,"},{"type":"text","text":" "},{"type":"text","text":"without specifying the underlying concrete type."}]},{"type":"paragraph","inlineContent":[{"text":"Opaque types appear as the return type of a function or subscript,","type":"text"},{"text":" ","type":"text"},{"text":"or the type of a property.","type":"text"},{"type":"text","text":" "},{"text":"Opaque types can’t appear as part of a tuple type or a generic type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as the element type of an array or the wrapped type of an optional."}]},{"type":"paragraph","inlineContent":[{"text":"Opaque types have the following form:","type":"text"}]},{"syntax":"swift","code":["some <#constraint#>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"constraint","type":"text"}]},{"text":" is a class type,","type":"text"},{"text":" ","type":"text"},{"text":"protocol type,","type":"text"},{"type":"text","text":" "},{"text":"protocol composition type,","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A value can be used as an instance of the opaque type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only if it’s an instance of a type"},{"type":"text","text":" "},{"text":"that conforms to the listed protocol or protocol composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or inherits from the listed class."},{"text":" ","type":"text"},{"text":"Code that interacts with an opaque value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can use the value only in ways"},{"type":"text","text":" "},{"type":"text","text":"that are part of the interface defined by the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"At compile time,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a value whose type is opaque has a specific concrete type,"},{"text":" ","type":"text"},{"text":"and Swift can use that underlying type for optimizations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However,"},{"type":"text","text":" "},{"text":"the opaque type forms a boundary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that information about that underlying type can’t cross."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol declarations can’t include opaque types."},{"text":" ","type":"text"},{"type":"text","text":"Classes can’t use an opaque type as the return type of a nonfinal method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that uses an opaque type as its return type"},{"type":"text","text":" "},{"text":"must return values that share a single underlying type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The return type can include types"},{"type":"text","text":" "},{"type":"text","text":"that are part of the function’s generic type parameters."},{"text":" ","type":"text"},{"type":"text","text":"For example, a function "},{"type":"codeVoice","code":"someFunction<T>()"},{"type":"text","text":" "},{"type":"text","text":"could return a value of type "},{"type":"codeVoice","code":"T"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Dictionary<String, T>"},{"text":".","type":"text"}]},{"style":"note","name":"Grammar of an opaque type","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"opaque-type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"some","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}],"type":"paragraph"}],"type":"aside"},{"text":"Boxed Protocol Type","type":"heading","anchor":"Boxed-Protocol-Type","level":2},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"boxed protocol type"}]},{"text":" defines a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that conforms to a protocol or protocol composition,"},{"text":" ","type":"text"},{"type":"text","text":"with the ability for that conforming type"},{"text":" ","type":"text"},{"type":"text","text":"to vary while the program is running."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Boxed protocol types have the following form:"}]},{"syntax":"swift","type":"codeListing","code":["any <#constraint#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":" is a protocol type,","type":"text"},{"text":" ","type":"text"},{"text":"protocol composition type,","type":"text"},{"text":" ","type":"text"},{"text":"a metatype of a protocol type,","type":"text"},{"text":" ","type":"text"},{"text":"or a metatype of a protocol composition type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"At runtime,","type":"text"},{"text":" ","type":"text"},{"text":"an instance of a boxed protocol type can contain a value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of any type that satisfies the "},{"type":"emphasis","inlineContent":[{"text":"constraint","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This behavior contrasts with how an opaque types work,","type":"text"},{"type":"text","text":" "},{"text":"where there is some specific conforming type known at compile time.","type":"text"},{"text":" ","type":"text"},{"text":"The additional level of indirection that’s used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when working with a boxed protocol type is called :newTerm:"},{"type":"codeVoice","code":"boxing"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Boxing typically requires a separate memory allocation for storage"},{"text":" ","type":"text"},{"text":"and an additional level of indirection for access,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which incurs a performance cost at runtime."}]},{"inlineContent":[{"text":"Applying ","type":"text"},{"type":"codeVoice","code":"any"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" or "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" types"},{"text":" ","type":"text"},{"type":"text","text":"has no effect,"},{"text":" ","type":"text"},{"type":"text","text":"because those types are already boxed protocol types."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"boxed-protocol-type"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"any"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}],"type":"paragraph"}],"name":"Grammar of a boxed protocol type","type":"aside"},{"level":2,"text":"Metatype Type","anchor":"Metatype-Type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"metatype type"}]},{"type":"text","text":" refers to the type of any type,"},{"type":"text","text":" "},{"text":"including class types, structure types, enumeration types, and protocol types.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The metatype of a class, structure, or enumeration type is"},{"text":" ","type":"text"},{"type":"text","text":"the name of that type followed by "},{"type":"codeVoice","code":".Type"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The metatype of a protocol type — not the concrete type that"},{"text":" ","type":"text"},{"type":"text","text":"conforms to the protocol at runtime —"},{"text":" ","type":"text"},{"text":"is the name of that protocol followed by ","type":"text"},{"code":".Protocol","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For example, the metatype of the class type ","type":"text"},{"code":"SomeClass","type":"codeVoice"},{"type":"text","text":" is "},{"code":"SomeClass.Type","type":"codeVoice"},{"type":"text","text":" "},{"text":"and the metatype of the protocol ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"SomeProtocol.Protocol"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can use the postfix "},{"type":"codeVoice","code":"self"},{"text":" expression to access a type as a value.","type":"text"},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"SomeClass.self"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":" itself,"},{"type":"text","text":" "},{"type":"text","text":"not an instance of "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"And "},{"type":"codeVoice","code":"SomeProtocol.self"},{"type":"text","text":" returns "},{"code":"SomeProtocol","type":"codeVoice"},{"text":" itself,","type":"text"},{"type":"text","text":" "},{"text":"not an instance of a type that conforms to ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" at runtime."},{"type":"text","text":" "},{"type":"text","text":"You can call the "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" function with an instance of a type"},{"type":"text","text":" "},{"type":"text","text":"to access that instance’s dynamic, runtime type as a value,"},{"text":" ","type":"text"},{"type":"text","text":"as the following example shows:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeBaseClass {","    class func printClassName() {","        print(\"SomeBaseClass\")","    }","}","class SomeSubClass: SomeBaseClass {","    override class func printClassName() {","        print(\"SomeSubClass\")","    }","}","let someInstance: SomeBaseClass = SomeSubClass()","\/\/ The compile-time type of someInstance is SomeBaseClass,","\/\/ and the runtime type of someInstance is SomeSubClass","type(of: someInstance).printClassName()","\/\/ Prints \"SomeSubClass\""]},{"inlineContent":[{"text":"For more information,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in the Swift standard library."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use an initializer expression to construct an instance of a type"},{"text":" ","type":"text"},{"type":"text","text":"from that type’s metatype value."},{"text":" ","type":"text"},{"type":"text","text":"For class instances,"},{"type":"text","text":" "},{"type":"text","text":"the initializer that’s called must be marked with the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"or the entire class marked with the ","type":"text"},{"code":"final","type":"codeVoice"},{"type":"text","text":" keyword."}]},{"code":["class AnotherSubClass: SomeBaseClass {","    let string: String","    required init(string: String) {","        self.string = string","    }","    override class func printClassName() {","        print(\"AnotherSubClass\")","    }","}","let metatype: AnotherSubClass.Type = AnotherSubClass.self","let anotherInstance = metatype.init(string: \"some string\")"],"syntax":"swift","type":"codeListing"},{"type":"aside","style":"note","name":"Grammar of a metatype type","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"metatype-type"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":".","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"code":"Type","type":"codeVoice"}],"type":"strong"},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"Protocol"}],"type":"strong"}]}]},{"level":2,"anchor":"Any-Type","text":"Any Type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type can contain values from all other types."},{"type":"text","text":" "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can be used as the concrete type"},{"text":" ","type":"text"},{"text":"for an instance of any of the following types:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class, structure, or enumeration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A metatype, such as ","type":"text"},{"type":"codeVoice","code":"Int.self"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A tuple with any types of components"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure or function type","type":"text"}]}]}]},{"type":"codeListing","code":["let mixed: [Any] = [\"one\", 2, true, (4, 5.3), { () -> Int in return 6 }]"],"syntax":"swift"},{"inlineContent":[{"text":"When you use ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as a concrete type for an instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you need to cast the instance to a known type"},{"type":"text","text":" "},{"text":"before you can access its properties or methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instances with a concrete type of "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"maintain their original dynamic type"},{"type":"text","text":" "},{"text":"and can be cast to that type using one of the type-cast operators —","type":"text"},{"text":" ","type":"text"},{"code":"as","type":"codeVoice"},{"type":"text","text":", "},{"code":"as?","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"as!"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"use ","type":"text"},{"type":"codeVoice","code":"as?"},{"type":"text","text":" to conditionally downcast the first object in a heterogeneous array"},{"text":" ","type":"text"},{"type":"text","text":"to a "},{"code":"String","type":"codeVoice"},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["if let first = mixed.first as? String {","    print(\"The first item, '\\(first)', is a string.\")","}","\/\/ Prints \"The first item, 'one', is a string.\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"For more information about casting, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"text":" protocol is similar to the ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"All classes implicitly conform to "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Unlike ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is defined by the language,","type":"text"},{"type":"text","text":" "},{"code":"AnyObject","type":"codeVoice"},{"text":" is defined by the Swift standard library.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"reference"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"any-type"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"Any"}]}]}],"type":"aside","style":"note","name":"Grammar of an Any type"},{"level":2,"anchor":"Self-Type","text":"Self Type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type isn’t a specific type,"},{"type":"text","text":" "},{"type":"text","text":"but rather lets you conveniently refer to the current type"},{"type":"text","text":" "},{"text":"without repeating or knowing that type’s name.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In a protocol declaration or a protocol member declaration,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type refers to the eventual type that conforms to the protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"In a structure, class, or enumeration declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the type introduced by the declaration."},{"text":" ","type":"text"},{"type":"text","text":"Inside the declaration for a member of a type,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"text":" type refers to that type.","type":"text"},{"type":"text","text":" "},{"text":"In the members of a class declaration,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can appear only as follows:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"As the return type of a method"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"As the return type of a read-only subscript"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"As the type of a read-only computed property","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the body of a method"}]}]}]},{"inlineContent":[{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the code below shows an instance method "},{"type":"codeVoice","code":"f"},{"type":"text","text":" "},{"text":"whose return type is ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Superclass {","    func f() -> Self { return self }","}","let x = Superclass()","print(type(of: x.f()))","\/\/ Prints \"Superclass\"","","class Subclass: Superclass { }","let y = Subclass()","print(type(of: y.f()))","\/\/ Prints \"Subclass\"","","let z: Superclass = Subclass()","print(type(of: z.f()))","\/\/ Prints \"Subclass\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The last part of the example above shows that"},{"type":"text","text":" "},{"code":"Self","type":"codeVoice"},{"text":" refers to the runtime type ","type":"text"},{"type":"codeVoice","code":"Subclass"},{"text":" of the value of ","type":"text"},{"type":"codeVoice","code":"z"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"not the compile-time type "},{"code":"Superclass","type":"codeVoice"},{"type":"text","text":" of the variable itself."}]},{"type":"paragraph","inlineContent":[{"text":"Inside a nested type declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the type"},{"text":" ","type":"text"},{"text":"introduced by the innermost type declaration.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":" type refers to the same type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","overridingTitle":"type(of:)","isActive":true,"type":"reference","overridingTitleInlineContent":[{"code":"type(of:)","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"function in the Swift standard library.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Writing "},{"code":"Self.someStaticMember","type":"codeVoice"},{"text":" to access a member of the current type","type":"text"},{"type":"text","text":" "},{"text":"is the same as writing ","type":"text"},{"type":"codeVoice","code":"type(of: self).someStaticMember"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"self-type"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"Self","type":"codeVoice"}]}],"type":"paragraph"}],"type":"aside","style":"note","name":"Grammar of a Self type"},{"type":"heading","level":2,"anchor":"Type-Inheritance-Clause","text":"Type Inheritance Clause"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type inheritance clause"}]},{"text":" is used to specify which class a named type inherits from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and which protocols a named type conforms to."},{"type":"text","text":" "},{"type":"text","text":"A type inheritance clause begins with a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"followed by a list of type identifiers.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Class types can inherit from a single superclass and conform to any number of protocols."},{"text":" ","type":"text"},{"type":"text","text":"When defining a class,"},{"type":"text","text":" "},{"text":"the name of the superclass must appear first in the list of type identifiers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"followed by any number of protocols the class must conform to."},{"type":"text","text":" "},{"text":"If the class doesn’t inherit from another class,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the list can begin with a protocol instead."},{"type":"text","text":" "},{"text":"For an extended discussion and several examples of class inheritance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"text":"Other named types can only inherit from or conform to a list of protocols.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Protocol types can inherit from any number of other protocols."},{"type":"text","text":" "},{"type":"text","text":"When a protocol type inherits from other protocols,"},{"type":"text","text":" "},{"type":"text","text":"the set of requirements from those other protocols are aggregated together,"},{"type":"text","text":" "},{"type":"text","text":"and any type that inherits from the current protocol must conform to all of those requirements."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A type inheritance clause in an enumeration definition can be either a list of protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or in the case of an enumeration that assigns raw values to its cases,"},{"type":"text","text":" "},{"type":"text","text":"a single, named type that specifies the type of those raw values."},{"text":" ","type":"text"},{"text":"For an example of an enumeration definition that uses a type inheritance clause","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to specify the type of its raw values, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values"},{"text":".","type":"text"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"type-inheritance-clause"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-inheritance-list","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-inheritance-list"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type-inheritance-list","type":"text"}],"type":"emphasis"}]}],"name":"Grammar of a type inheritance clause"},{"type":"heading","anchor":"Type-Inference","level":2,"text":"Type Inference"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"type inference","type":"text"}]},{"text":" extensively,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allowing you to omit the type or part of the type of many variables and expressions in your code."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of writing "},{"type":"codeVoice","code":"var x: Int = 0"},{"type":"text","text":", you can write "},{"type":"codeVoice","code":"var x = 0"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"omitting the type completely —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the compiler correctly infers that "},{"type":"codeVoice","code":"x"},{"text":" names a value of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, you can omit part of a type when the full type can be inferred from context."},{"type":"text","text":" "},{"text":"For example, if you write ","type":"text"},{"code":"let dict: Dictionary = [\"A\": 1]","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the compiler infers that "},{"code":"dict","type":"codeVoice"},{"type":"text","text":" has the type "},{"code":"Dictionary<String, Int>","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both of the examples above,"},{"text":" ","type":"text"},{"type":"text","text":"the type information is passed up from the leaves of the expression tree to its root."},{"type":"text","text":" "},{"text":"That is,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the type of "},{"type":"codeVoice","code":"x"},{"text":" in ","type":"text"},{"code":"var x: Int = 0","type":"codeVoice"},{"text":" is inferred by first checking the type of ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" "},{"text":"and then passing this type information up to the root (the variable ","type":"text"},{"type":"codeVoice","code":"x"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In Swift, type information can also flow in the opposite direction — from the root down to the leaves.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the following example, for instance,"},{"type":"text","text":" "},{"text":"the explicit type annotation (","type":"text"},{"type":"codeVoice","code":": Float"},{"text":") on the constant ","type":"text"},{"code":"eFloat","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"causes the numeric literal "},{"type":"codeVoice","code":"2.71828"},{"text":" to have an inferred type of ","type":"text"},{"code":"Float","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["let e = 2.71828 \/\/ The type of e is inferred to be Double.","let eFloat: Float = 2.71828 \/\/ The type of eFloat is Float."],"type":"codeListing"},{"inlineContent":[{"text":"Type inference in Swift operates at the level of a single expression or statement.","type":"text"},{"text":" ","type":"text"},{"text":"This means that all of the information needed to infer an omitted type or part of a type","type":"text"},{"type":"text","text":" "},{"text":"in an expression must be accessible from type-checking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the expression or one of its subexpressions."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Throwing-Functions-and-Methods":{"title":"Throwing Functions and Methods","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Throwing-Functions-and-Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"url":"\/documentation\/the-swift-programming-language\/typecasting","type":"topic","kind":"article","title":"Type Casting","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Dictionaries":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Dictionaries","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","type":"topic","title":"Dictionaries"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance","type":"topic","kind":"article","title":"Inheritance","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"title":"Optionals","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#In-Out-Parameters":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/functions#In-Out-Parameters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","type":"topic","title":"In-Out Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","abstract":[],"kind":"section","title":"Extension Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"title":"Asynchronous Functions and Methods","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","type":"topic","title":"Autoclosures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"abstract":[],"kind":"section","title":"Variadic Parameters","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"abstract":[],"title":"Class-Only Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"url":"\/documentation\/the-swift-programming-language\/extensions","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"title":"Functions with Multiple Return Values","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values"},"https://developer.apple.com/documentation/swift/2885064-type":{"titleInlineContent":[{"code":"type(of:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","type":"link","title":"type(of:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"title":"Implicitly Unwrapped Optionals","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"url":"\/documentation\/the-swift-programming-language\/memorysafety","kind":"article","role":"article","title":"Memory Safety","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays","type":"topic","title":"Arrays","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Raw-Values":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/enumerations#Raw-Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","type":"topic","title":"Raw Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"title":"Rethrowing Functions and Methods","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},"https://developer.apple.com/documentation/swift/anyobject":{"titleInlineContent":[{"code":"AnyObject","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","type":"link","title":"AnyObject"}}}