{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, there are two kinds of types: named types and compound types."},{"text":" ","type":"text"},{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"named type"}],"type":"emphasis"},{"type":"text","text":" is a type that can be given a particular name when it’s defined."},{"type":"text","text":" "},{"text":"Named types include classes, structures, enumerations, and protocols.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"instances of a user-defined class named ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In addition to user-defined named types,"},{"type":"text","text":" "},{"text":"the Swift standard library defines many commonly used named types,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including those that represent arrays, dictionaries, and optional values."}]},{"type":"paragraph","inlineContent":[{"text":"Data types that are normally considered basic or primitive in other languages —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as types that represent numbers, characters, and strings —"},{"text":" ","type":"text"},{"text":"are actually named types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined and implemented in the Swift standard library using structures."},{"type":"text","text":" "},{"text":"Because they’re named types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can extend their behavior to suit the needs of your program,"},{"text":" ","type":"text"},{"text":"using an extension declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"compound type","type":"text"}]},{"type":"text","text":" is a type without a name, defined in the Swift language itself."},{"type":"text","text":" "},{"type":"text","text":"There are two compound types: function types and tuple types."},{"text":" ","type":"text"},{"type":"text","text":"A compound type may contain named types and other compound types."},{"text":" ","type":"text"},{"type":"text","text":"For example, the tuple type "},{"type":"codeVoice","code":"(Int, (Int, Int))"},{"text":" contains two elements:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first is the named type "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the second is another compound type "},{"code":"(Int, Int)","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can put parentheses around a named type or a compound type."},{"type":"text","text":" "},{"type":"text","text":"However, adding parentheses around a type doesn’t have any effect."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"(Int)"},{"type":"text","text":" is equivalent to "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This chapter discusses the types defined in the Swift language itself"},{"text":" ","type":"text"},{"text":"and describes the type inference behavior of Swift.","type":"text"}]},{"style":"note","type":"aside","name":"Grammar of a type","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"array-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"dictionary-type"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"tuple-type","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"optional-type","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicitly-unwrapped-optional-type"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"opaque-type"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"boxed-protocol-type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"metatype-type","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"any-type"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"self-type","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"}]}]},{"type":"heading","text":"Type Annotation","anchor":"Type-Annotation","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type annotation"}]},{"text":" explicitly specifies the type of a variable or expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Type annotations begin with a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") and end with a type,"},{"text":" ","type":"text"},{"type":"text","text":"as the following examples show:"}]},{"code":["let someTuple: (Double, Double) = (3.14159, 2.71828)","func someFunction(a: Int) { \/* ... *\/ }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the first example,"},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"code":"someTuple","type":"codeVoice"},{"text":" is specified to have the tuple type ","type":"text"},{"code":"(Double, Double)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In the second example,"},{"type":"text","text":" "},{"type":"text","text":"the parameter "},{"type":"codeVoice","code":"a"},{"text":" to the function ","type":"text"},{"code":"someFunction","type":"codeVoice"},{"text":" is specified to have the type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Type annotations can contain an optional list of type attributes before the type.","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"type-annotation","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]}],"type":"paragraph"}],"type":"aside","name":"Grammar of a type annotation"},{"type":"heading","level":2,"text":"Type Identifier","anchor":"Type-Identifier"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"type identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" refers to either a named type"},{"text":" ","type":"text"},{"type":"text","text":"or a type alias of a named or compound type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of the time, a type identifier directly refers to a named type"},{"text":" ","type":"text"},{"type":"text","text":"with the same name as the identifier."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is a type identifier that directly refers to the named type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the type identifier "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"text":" directly refers","type":"text"},{"type":"text","text":" "},{"text":"to the named type ","type":"text"},{"code":"Dictionary<String, Int>","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"There are two cases in which a type identifier doesn’t refer to a type with the same name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the first case, a type identifier refers to a type alias of a named or compound type."},{"text":" ","type":"text"},{"type":"text","text":"For instance, in the example below,"},{"type":"text","text":" "},{"text":"the use of ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" in the type annotation refers to the tuple type "},{"type":"codeVoice","code":"(Int, Int)"},{"type":"text","text":"."}]},{"syntax":"swift","code":["typealias Point = (Int, Int)","let origin: Point = (0, 0)"],"type":"codeListing"},{"inlineContent":[{"text":"In the second case, a type identifier uses dot (","type":"text"},{"type":"codeVoice","code":"."},{"type":"text","text":") syntax to refer to named types"},{"type":"text","text":" "},{"type":"text","text":"declared in other modules or nested within other types."},{"type":"text","text":" "},{"type":"text","text":"For example, the type identifier in the following code references the named type "},{"code":"MyType","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that’s declared in the "},{"type":"codeVoice","code":"ExampleModule"},{"type":"text","text":" module."}],"type":"paragraph"},{"syntax":"swift","code":["var someValue: ExampleModule.MyType"],"type":"codeListing"},{"name":"Grammar of a type identifier","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-argument-clause","type":"text"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"type-name","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"generic-argument-clause","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"}],"type":"paragraph"}]},{"anchor":"Tuple-Type","type":"heading","level":2,"text":"Tuple Type"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"tuple type","type":"text"}],"type":"emphasis"},{"text":" is a comma-separated list of types, enclosed in parentheses.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can use a tuple type as the return type of a function"},{"text":" ","type":"text"},{"type":"text","text":"to enable the function to return a single tuple containing multiple values."},{"type":"text","text":" "},{"type":"text","text":"You can also name the elements of a tuple type and use those names to refer to"},{"text":" ","type":"text"},{"text":"the values of the individual elements. An element name consists of an identifier","type":"text"},{"text":" ","type":"text"},{"text":"followed immediately by a colon (:). For an example that demonstrates both of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"these features, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"When an element of a tuple type has a name,","type":"text"},{"type":"text","text":" "},{"text":"that name is part of the type.","type":"text"}],"type":"paragraph"},{"code":["var someTuple = (top: 10, bottom: 12)  \/\/ someTuple is of type (top: Int, bottom: Int)","someTuple = (top: 4, bottom: 42) \/\/ OK: names match","someTuple = (9, 99)              \/\/ OK: names are inferred","someTuple = (left: 5, right: 5)  \/\/ Error: names don't match"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"All tuple types contain two or more types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"except for "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" which is a type alias for the empty tuple type, "},{"code":"()","type":"codeVoice"},{"text":".","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element-list"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element-list"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"tuple-type-element","type":"text"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"tuple-type-element","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element-list","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"tuple-type-element","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"element-name","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-annotation","type":"text"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"element-name"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"}]}],"name":"Grammar of a tuple type","type":"aside"},{"level":2,"text":"Function Type","type":"heading","anchor":"Function-Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"function type","type":"text"}],"type":"emphasis"},{"type":"text","text":" represents the type of a function, method, or closure"},{"text":" ","type":"text"},{"text":"and consists of a parameter and return type separated by an arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["(<#parameter type#>) -> <#return type#>"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter type"}]},{"text":" is comma-separated list of types.","type":"text"},{"text":" ","type":"text"},{"text":"Because the ","type":"text"},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"text":" can be a tuple type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function types support functions and methods"},{"type":"text","text":" "},{"type":"text","text":"that return multiple values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A parameter of the function type "},{"type":"codeVoice","code":"() -> T"},{"text":" ","type":"text"},{"type":"text","text":"(where "},{"code":"T","type":"codeVoice"},{"text":" is any type)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can apply the "},{"code":"autoclosure","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to implicitly create a closure at its call sites."},{"type":"text","text":" "},{"type":"text","text":"This provides a syntactically convenient way"},{"text":" ","type":"text"},{"type":"text","text":"to defer the evaluation of an expression"},{"type":"text","text":" "},{"type":"text","text":"without needing to write an explicit closure"},{"type":"text","text":" "},{"text":"when you call the function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For an example of an autoclosure function type parameter,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function type can have variadic parameters in its "},{"inlineContent":[{"type":"text","text":"parameter type"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Syntactically,"},{"text":" ","type":"text"},{"type":"text","text":"a variadic parameter consists of a base type name followed immediately by three dots ("},{"type":"codeVoice","code":"..."},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"Int..."},{"type":"text","text":". A variadic parameter is treated as an array that contains elements"},{"text":" ","type":"text"},{"text":"of the base type name. For instance, the variadic parameter ","type":"text"},{"code":"Int...","type":"codeVoice"},{"type":"text","text":" is treated"},{"type":"text","text":" "},{"type":"text","text":"as "},{"code":"[Int]","type":"codeVoice"},{"text":". For an example that uses a variadic parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"text":"To specify an in-out parameter, prefix the parameter type with the ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can’t mark a variadic parameter or a return type with the "},{"type":"codeVoice","code":"inout"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"In-out parameters are discussed in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If a function type has only one parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and that parameter’s type is a tuple type,"},{"text":" ","type":"text"},{"text":"then the tuple type must be parenthesized when writing the function’s type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"((Int, Int)) -> Void"},{"text":" ","type":"text"},{"text":"is the type of a function that takes a single parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the tuple type "},{"code":"(Int, Int)","type":"codeVoice"},{"type":"text","text":" "},{"text":"and doesn’t return any value.","type":"text"},{"type":"text","text":" "},{"text":"In contrast, without parentheses,","type":"text"},{"type":"text","text":" "},{"code":"(Int, Int) -> Void","type":"codeVoice"},{"text":" is the type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of a function that takes two "},{"code":"Int","type":"codeVoice"},{"text":" parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t return any value."},{"text":" ","type":"text"},{"text":"Likewise, because ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" is a type alias for ","type":"text"},{"code":"()","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the function type "},{"code":"(Void) -> Void","type":"codeVoice"},{"type":"text","text":" "},{"text":"is the same as ","type":"text"},{"type":"codeVoice","code":"(()) -> ()"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"a function that takes a single argument that’s an empty tuple."},{"text":" ","type":"text"},{"text":"These types aren’t the same as ","type":"text"},{"type":"codeVoice","code":"() -> ()"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"a function that takes no arguments."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Argument names in functions and methods"},{"type":"text","text":" "},{"type":"text","text":"aren’t part of the corresponding function type."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func someFunction(left: Int, right: Int) {}","func anotherFunction(left: Int, right: Int) {}","func functionWithDifferentLabels(top: Int, bottom: Int) {}","","var f = someFunction \/\/ The type of f is (Int, Int) -> Void, not (left: Int, right: Int) -> Void.","f = anotherFunction              \/\/ OK","f = functionWithDifferentLabels  \/\/ OK","","func functionWithDifferentArgumentTypes(left: Int, right: String) {}","f = functionWithDifferentArgumentTypes     \/\/ Error","","func functionWithDifferentNumberOfArguments(left: Int, right: Int, top: Int) {}","f = functionWithDifferentNumberOfArguments \/\/ Error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because argument labels aren’t part of a function’s type,"},{"type":"text","text":" "},{"type":"text","text":"you omit them when writing a function type."}]},{"syntax":"swift","type":"codeListing","code":["var operation: (lhs: Int, rhs: Int) -> Int     \/\/ Error","var operation: (_ lhs: Int, _ rhs: Int) -> Int \/\/ OK","var operation: (Int, Int) -> Int               \/\/ OK"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a function type includes more than a single arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"the function types are grouped from right to left.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"the function type ","type":"text"},{"code":"(Int) -> (Int) -> Int","type":"codeVoice"},{"text":" is understood as ","type":"text"},{"code":"(Int) -> ((Int) -> Int)","type":"codeVoice"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"that is, a function that takes an "},{"type":"codeVoice","code":"Int"},{"text":" and returns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"another function that takes and returns an "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"Function types for functions","type":"text"},{"type":"text","text":" "},{"text":"that can throw or rethrow an error must be marked with the ","type":"text"},{"code":"throws","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword is part of a function’s type,"},{"text":" ","type":"text"},{"type":"text","text":"and nonthrowing functions are subtypes of throwing functions."},{"type":"text","text":" "},{"type":"text","text":"As a result, you can use a nonthrowing function in the same places as a throwing one."},{"type":"text","text":" "},{"type":"text","text":"Throwing and rethrowing functions are described in"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Function types for asynchronous functions","type":"text"},{"text":" ","type":"text"},{"text":"must be marked with the ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"async","type":"codeVoice"},{"type":"text","text":" keyword is part of a function’s type,"},{"text":" ","type":"text"},{"type":"text","text":"and synchronous functions are subtypes of asynchronous functions."},{"type":"text","text":" "},{"type":"text","text":"As a result, you can use a synchronous function"},{"text":" ","type":"text"},{"type":"text","text":"in the same places as an asynchronous one."},{"type":"text","text":" "},{"type":"text","text":"For information about asynchronous functions,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},{"type":"text","text":"."}]},{"text":"Restrictions for Nonescaping Closures","level":3,"type":"heading","anchor":"Restrictions-for-Nonescaping-Closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parameter that’s a nonescaping function"},{"type":"text","text":" "},{"text":"can’t be stored in a property, variable, or constant of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because that might allow the value to escape."}]},{"inlineContent":[{"text":"A parameter that’s a nonescaping function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t be passed as an argument to another nonescaping function parameter."},{"type":"text","text":" "},{"type":"text","text":"This restriction helps Swift perform"},{"type":"text","text":" "},{"text":"more of its checks for conflicting access to memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at compile time instead of at runtime."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let external: (() -> Void) -> Void = { _ in () }","func takesTwoFunctions(first: (() -> Void) -> Void, second: (() -> Void) -> Void) {","    first { first {} }       \/\/ Error","    second { second {}  }    \/\/ Error","","    first { second {} }      \/\/ Error","    second { first {} }      \/\/ Error","","    first { external {} }    \/\/ OK","    external { first {} }    \/\/ OK","}"],"syntax":"swift"},{"inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"text":"both of the parameters to ","type":"text"},{"type":"codeVoice","code":"takesTwoFunctions(first:second:)"},{"type":"text","text":" are functions."},{"text":" ","type":"text"},{"type":"text","text":"Neither parameter is marked "},{"type":"codeVoice","code":"@escaping"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"so they’re both nonescaping as a result.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The four function calls marked “Error” in the example above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"cause compiler errors."},{"type":"text","text":" "},{"text":"Because the ","type":"text"},{"code":"first","type":"codeVoice"},{"type":"text","text":" and "},{"code":"second","type":"codeVoice"},{"text":" parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are nonescaping functions,"},{"text":" ","type":"text"},{"text":"they can’t be passed as arguments to another nonescaping function parameter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"the two function calls marked “OK” don’t cause a compiler error."},{"type":"text","text":" "},{"type":"text","text":"These function calls don’t violate the restriction"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"code":"external","type":"codeVoice"},{"type":"text","text":" isn’t one of the parameters of "},{"type":"codeVoice","code":"takesTwoFunctions(first:second:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to avoid this restriction, mark one of the parameters as escaping,"},{"text":" ","type":"text"},{"text":"or temporarily convert one of the nonescaping function parameters to an escaping function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"withoutActuallyEscaping(_:do:)"},{"type":"text","text":" function."},{"type":"text","text":" "},{"text":"For information about avoiding conflicting access to memory,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"aside","name":"Grammar of a function type","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-clause"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"async"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":"throws","type":"codeVoice"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"->"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"function-type-argument-clause","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"function-type-argument-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"function-type-argument-list","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"...","type":"codeVoice"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-list"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function-type-argument","type":"text"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter-modifier"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"argument-label","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-annotation"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"argument-label","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"identifier","type":"text"}],"type":"emphasis"}]}]},{"anchor":"Array-Type","level":2,"type":"heading","text":"Array Type"},{"type":"paragraph","inlineContent":[{"text":"The Swift language provides the following syntactic sugar for the Swift standard library","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Array<Element>"},{"text":" type:","type":"text"}]},{"syntax":"swift","code":["[<#type#>]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In other words, the following two declarations are equivalent:","type":"text"}]},{"code":["let someArray: Array<String> = [\"Alex\", \"Brian\", \"Dave\"]","let someArray: [String] = [\"Alex\", \"Brian\", \"Dave\"]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In both cases, the constant ","type":"text"},{"code":"someArray","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is declared as an array of strings. The elements of an array can be accessed"},{"type":"text","text":" "},{"text":"through subscripting by specifying a valid index value in square brackets:","type":"text"},{"text":" ","type":"text"},{"code":"someArray[0]","type":"codeVoice"},{"text":" refers to the element at index 0, ","type":"text"},{"code":"\"Alex\"","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can create multidimensional arrays by nesting pairs of square brackets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the name of the base type of the elements is contained in the innermost"},{"text":" ","type":"text"},{"type":"text","text":"pair of square brackets."},{"text":" ","type":"text"},{"type":"text","text":"For example, you can create"},{"text":" ","type":"text"},{"type":"text","text":"a three-dimensional array of integers using three sets of square brackets:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var array3D: [[[Int]]] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When accessing the elements in a multidimensional array,"},{"type":"text","text":" "},{"text":"the left-most subscript index refers to the element at that index in the outermost","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array. The next subscript index to the right refers to the element"},{"text":" ","type":"text"},{"type":"text","text":"at that index in the array that’s nested one level in. And so on. This means that in"},{"type":"text","text":" "},{"type":"text","text":"the example above, "},{"type":"codeVoice","code":"array3D[0]"},{"type":"text","text":" refers to "},{"type":"codeVoice","code":"[[1, 2], [3, 4]]"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"array3D[0][1]","type":"codeVoice"},{"type":"text","text":" refers to "},{"type":"codeVoice","code":"[3, 4]"},{"type":"text","text":", and "},{"code":"array3D[0][1][1]","type":"codeVoice"},{"type":"text","text":" refers to the value 4."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a detailed discussion of the Swift standard library "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays"},{"text":".","type":"text"}]},{"type":"aside","name":"Grammar of an array type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"array-type","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"["}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"]","type":"codeVoice"}]}],"type":"paragraph"}],"style":"note"},{"type":"heading","text":"Dictionary Type","level":2,"anchor":"Dictionary-Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language provides the following syntactic sugar for the Swift standard library"},{"text":" ","type":"text"},{"code":"Dictionary<Key, Value>","type":"codeVoice"},{"type":"text","text":" type:"}]},{"type":"codeListing","code":["[<#key type#>: <#value type#>]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In other words, the following two declarations are equivalent:","type":"text"}]},{"code":["let someDictionary: [String: Int] = [\"Alex\": 31, \"Paul\": 39]","let someDictionary: Dictionary<String, Int> = [\"Alex\": 31, \"Paul\": 39]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In both cases, the constant ","type":"text"},{"type":"codeVoice","code":"someDictionary"},{"text":" ","type":"text"},{"text":"is declared as a dictionary with strings as keys and integers as values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The values of a dictionary can be accessed through subscripting","type":"text"},{"text":" ","type":"text"},{"text":"by specifying the corresponding key in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"square brackets: "},{"code":"someDictionary[\"Alex\"]","type":"codeVoice"},{"text":" refers to the value associated","type":"text"},{"type":"text","text":" "},{"text":"with the key ","type":"text"},{"type":"codeVoice","code":"\"Alex\""},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The subscript returns an optional value of the dictionary’s value type."},{"type":"text","text":" "},{"text":"If the specified key isn’t contained in the dictionary,","type":"text"},{"text":" ","type":"text"},{"text":"the subscript returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The key type of a dictionary must conform to the Swift standard library "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a detailed discussion of the Swift standard library "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","isActive":true},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"dictionary-type"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"["}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"]"}],"type":"strong"}],"type":"paragraph"}],"type":"aside","name":"Grammar of a dictionary type","style":"note"},{"type":"heading","anchor":"Optional-Type","level":2,"text":"Optional Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language defines the postfix "},{"code":"?","type":"codeVoice"},{"type":"text","text":" as syntactic sugar for"},{"type":"text","text":" "},{"type":"text","text":"the named type "},{"code":"Optional<Wrapped>","type":"codeVoice"},{"text":", which is defined in the Swift standard library.","type":"text"},{"type":"text","text":" "},{"text":"In other words, the following two declarations are equivalent:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var optionalInteger: Int?","var optionalInteger: Optional<Int>"]},{"type":"paragraph","inlineContent":[{"text":"In both cases, the variable ","type":"text"},{"type":"codeVoice","code":"optionalInteger"},{"type":"text","text":" "},{"type":"text","text":"is declared to have the type of an optional integer."},{"type":"text","text":" "},{"type":"text","text":"Note that no whitespace may appear between the type and the "},{"type":"codeVoice","code":"?"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The type ","type":"text"},{"code":"Optional<Wrapped>","type":"codeVoice"},{"text":" is an enumeration with two cases, ","type":"text"},{"code":"none","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"some(Wrapped)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which are used to represent values that may or may not be present."},{"type":"text","text":" "},{"type":"text","text":"Any type can be explicitly declared to be (or implicitly converted to) an optional type."},{"text":" ","type":"text"},{"text":"If you don’t provide an initial value when you declare an","type":"text"},{"text":" ","type":"text"},{"text":"optional variable or property, its value automatically defaults to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"If an instance of an optional type contains a value,"},{"type":"text","text":" "},{"type":"text","text":"you can access that value using the postfix operator "},{"type":"codeVoice","code":"!"},{"type":"text","text":", as shown below:"}],"type":"paragraph"},{"code":["optionalInteger = 42","optionalInteger! \/\/ 42"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"!"},{"type":"text","text":" operator to unwrap an optional"},{"type":"text","text":" "},{"type":"text","text":"that has a value of "},{"code":"nil","type":"codeVoice"},{"text":" results in a runtime error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can also use optional chaining and optional binding to conditionally perform an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation on an optional expression. If the value is "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"no operation is performed and therefore no runtime error is produced."}]},{"inlineContent":[{"text":"For more information and to see examples that show how to use optional types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","name":"Grammar of an optional type","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"?"}]}],"type":"paragraph"}]},{"level":2,"anchor":"Implicitly-Unwrapped-Optional-Type","text":"Implicitly Unwrapped Optional Type","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language defines the postfix "},{"code":"!","type":"codeVoice"},{"text":" as syntactic sugar for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the named type "},{"type":"codeVoice","code":"Optional<Wrapped>"},{"text":", which is defined in the Swift standard library,","type":"text"},{"text":" ","type":"text"},{"text":"with the additional behavior that","type":"text"},{"text":" ","type":"text"},{"text":"it’s automatically unwrapped when it’s accessed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you try to use an implicitly unwrapped optional that has a value of "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a runtime error."},{"type":"text","text":" "},{"type":"text","text":"With the exception of the implicit unwrapping behavior,"},{"type":"text","text":" "},{"text":"the following two declarations are equivalent:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var implicitlyUnwrappedString: String!","var explicitlyUnwrappedString: Optional<String>"]},{"inlineContent":[{"text":"Note that no whitespace may appear between the type and the ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because implicit unwrapping"},{"type":"text","text":" "},{"text":"changes the meaning of the declaration that contains that type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"optional types that are nested inside a tuple type or a generic type"},{"text":" ","type":"text"},{"type":"text","text":"— such as the element types of a dictionary or array —"},{"text":" ","type":"text"},{"text":"can’t be marked as implicitly unwrapped.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["let tupleOfImplicitlyUnwrappedElements: (Int!, Int!)  \/\/ Error","let implicitlyUnwrappedTuple: (Int, Int)!             \/\/ OK","","let arrayOfImplicitlyUnwrappedElements: [Int!]        \/\/ Error","let implicitlyUnwrappedArray: [Int]!                  \/\/ OK"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because implicitly unwrapped optionals"},{"text":" ","type":"text"},{"type":"text","text":"have the same "},{"type":"codeVoice","code":"Optional<Wrapped>"},{"type":"text","text":" type as optional values,"},{"type":"text","text":" "},{"type":"text","text":"you can use implicitly unwrapped optionals"},{"text":" ","type":"text"},{"text":"in all the same places in your code","type":"text"},{"type":"text","text":" "},{"text":"that you can use optionals.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, you can assign values of implicitly unwrapped"},{"type":"text","text":" "},{"text":"optionals to variables, constants, and properties of optionals, and vice versa.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As with optionals, if you don’t provide an initial value when you declare an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implicitly unwrapped optional variable or property,"},{"type":"text","text":" "},{"type":"text","text":"its value automatically defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use optional chaining to conditionally perform an"},{"type":"text","text":" "},{"type":"text","text":"operation on an implicitly unwrapped optional expression."},{"text":" ","type":"text"},{"text":"If the value is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"no operation is performed and therefore no runtime error is produced."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information about implicitly unwrapped optional types,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","type":"reference"},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"implicitly-unwrapped-optional-type","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"!"}]}]}],"style":"note","type":"aside","name":"Grammar of an implicitly unwrapped optional type"},{"level":2,"text":"Protocol Composition Type","type":"heading","anchor":"Protocol-Composition-Type"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol composition type"}]},{"type":"text","text":" defines a type that conforms to each protocol"},{"type":"text","text":" "},{"text":"in a list of specified protocols,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or a type that’s a subclass of a given class"},{"type":"text","text":" "},{"type":"text","text":"and conforms to each protocol in a list of specified protocols."},{"type":"text","text":" "},{"type":"text","text":"Protocol composition types may be used only when specifying a type"},{"type":"text","text":" "},{"type":"text","text":"in type annotations,"},{"text":" ","type":"text"},{"text":"in generic parameter clauses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Protocol composition types have the following form:"}],"type":"paragraph"},{"code":["<#Protocol 1#> & <#Protocol 2#>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"A protocol composition type allows you to specify a value whose type conforms to the requirements"},{"text":" ","type":"text"},{"type":"text","text":"of multiple protocols without explicitly defining a new, named protocol"},{"type":"text","text":" "},{"type":"text","text":"that inherits from each protocol you want the type to conform to."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"you can use the protocol composition type ","type":"text"},{"code":"ProtocolA & ProtocolB & ProtocolC","type":"codeVoice"},{"text":" ","type":"text"},{"text":"instead of declaring a new protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that inherits from "},{"code":"ProtocolA","type":"codeVoice"},{"type":"text","text":", "},{"code":"ProtocolB","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"ProtocolC"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Likewise, you can use "},{"code":"SuperClass & ProtocolA","type":"codeVoice"},{"type":"text","text":" "},{"text":"instead of declaring a new protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s a subclass of "},{"type":"codeVoice","code":"SuperClass"},{"text":" and conforms to ","type":"text"},{"type":"codeVoice","code":"ProtocolA"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each item in a protocol composition list is one of the following;"},{"text":" ","type":"text"},{"text":"the list can contain at most one class:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of a class"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of a protocol"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A type alias whose underlying type"},{"type":"text","text":" "},{"type":"text","text":"is a protocol composition type, a protocol, or a class."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"When a protocol composition type contains type aliases,","type":"text"},{"type":"text","text":" "},{"text":"it’s possible for the same protocol to appear","type":"text"},{"type":"text","text":" "},{"text":"more than once in the definitions —","type":"text"},{"text":" ","type":"text"},{"text":"duplicates are ignored.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the definition of "},{"type":"codeVoice","code":"PQR"},{"type":"text","text":" in the code below"},{"text":" ","type":"text"},{"type":"text","text":"is equivalent to "},{"type":"codeVoice","code":"P & Q & R"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["typealias PQ = P & Q","typealias PQR = PQ & Q & R"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Grammar of a protocol composition type","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"&","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-continuation","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-continuation","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]}]}]},{"text":"Opaque Type","level":2,"type":"heading","anchor":"Opaque-Type"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"opaque type","type":"text"}]},{"type":"text","text":" defines a type"},{"type":"text","text":" "},{"text":"that conforms to a protocol or protocol composition,","type":"text"},{"type":"text","text":" "},{"text":"without specifying the underlying concrete type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Opaque types appear as the return type of a function or subscript,"},{"text":" ","type":"text"},{"text":"or the type of a property.","type":"text"},{"type":"text","text":" "},{"text":"Opaque types can’t appear as part of a tuple type or a generic type,","type":"text"},{"text":" ","type":"text"},{"text":"such as the element type of an array or the wrapped type of an optional.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Opaque types have the following form:"}]},{"code":["some <#constraint#>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":" is a class type,","type":"text"},{"text":" ","type":"text"},{"text":"protocol type,","type":"text"},{"type":"text","text":" "},{"text":"protocol composition type,","type":"text"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A value can be used as an instance of the opaque type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only if it’s an instance of a type"},{"type":"text","text":" "},{"text":"that conforms to the listed protocol or protocol composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or inherits from the listed class."},{"text":" ","type":"text"},{"type":"text","text":"Code that interacts with an opaque value"},{"type":"text","text":" "},{"text":"can use the value only in ways","type":"text"},{"text":" ","type":"text"},{"text":"that are part of the interface defined by the ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"At compile time,"},{"type":"text","text":" "},{"type":"text","text":"a value whose type is opaque has a specific concrete type,"},{"type":"text","text":" "},{"type":"text","text":"and Swift can use that underlying type for optimizations."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"text":"the opaque type forms a boundary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that information about that underlying type can’t cross."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Protocol declarations can’t include opaque types.","type":"text"},{"text":" ","type":"text"},{"text":"Classes can’t use an opaque type as the return type of a nonfinal method.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that uses an opaque type as its return type"},{"text":" ","type":"text"},{"text":"must return values that share a single underlying type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The return type can include types"},{"text":" ","type":"text"},{"type":"text","text":"that are part of the function’s generic type parameters."},{"type":"text","text":" "},{"type":"text","text":"For example, a function "},{"type":"codeVoice","code":"someFunction<T>()"},{"type":"text","text":" "},{"type":"text","text":"could return a value of type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Dictionary<String, T>"},{"type":"text","text":"."}]},{"name":"Grammar of an opaque type","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"opaque-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"some"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}]}],"style":"note"},{"anchor":"Boxed-Protocol-Type","type":"heading","level":2,"text":"Boxed Protocol Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"boxed protocol type","type":"text"}]},{"type":"text","text":" defines a type"},{"type":"text","text":" "},{"type":"text","text":"that conforms to a protocol or protocol composition,"},{"text":" ","type":"text"},{"text":"with the ability for that conforming type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to vary while the program is running."}]},{"inlineContent":[{"type":"text","text":"Boxed protocol types have the following form:"}],"type":"paragraph"},{"code":["any <#constraint#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"type":"text","text":" is a protocol type,"},{"type":"text","text":" "},{"type":"text","text":"protocol composition type,"},{"type":"text","text":" "},{"text":"a metatype of a protocol type,","type":"text"},{"text":" ","type":"text"},{"text":"or a metatype of a protocol composition type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At runtime,"},{"type":"text","text":" "},{"text":"an instance of a boxed protocol type can contain a value","type":"text"},{"type":"text","text":" "},{"text":"of any type that satisfies the ","type":"text"},{"inlineContent":[{"text":"constraint","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This behavior contrasts with how an opaque types work,"},{"text":" ","type":"text"},{"type":"text","text":"where there is some specific conforming type known at compile time."},{"text":" ","type":"text"},{"type":"text","text":"The additional level of indirection that’s used"},{"type":"text","text":" "},{"type":"text","text":"when working with a boxed protocol type is called :newTerm:"},{"code":"boxing","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Boxing typically requires a separate memory allocation for storage","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and an additional level of indirection for access,"},{"text":" ","type":"text"},{"type":"text","text":"which incurs a performance cost at runtime."}]},{"inlineContent":[{"text":"Applying ","type":"text"},{"type":"codeVoice","code":"any"},{"text":" to the ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" or "},{"code":"AnyObject","type":"codeVoice"},{"text":" types","type":"text"},{"text":" ","type":"text"},{"text":"has no effect,","type":"text"},{"text":" ","type":"text"},{"text":"because those types are already boxed protocol types.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"boxed-protocol-type"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"any","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"type":"aside","name":"Grammar of a boxed protocol type","style":"note"},{"text":"Metatype Type","type":"heading","level":2,"anchor":"Metatype-Type"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"metatype type"}],"type":"emphasis"},{"type":"text","text":" refers to the type of any type,"},{"type":"text","text":" "},{"type":"text","text":"including class types, structure types, enumeration types, and protocol types."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The metatype of a class, structure, or enumeration type is"},{"text":" ","type":"text"},{"type":"text","text":"the name of that type followed by "},{"code":".Type","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The metatype of a protocol type — not the concrete type that"},{"type":"text","text":" "},{"type":"text","text":"conforms to the protocol at runtime —"},{"text":" ","type":"text"},{"type":"text","text":"is the name of that protocol followed by "},{"type":"codeVoice","code":".Protocol"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"For example, the metatype of the class type ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"text":" is ","type":"text"},{"code":"SomeClass.Type","type":"codeVoice"},{"type":"text","text":" "},{"text":"and the metatype of the protocol ","type":"text"},{"type":"codeVoice","code":"SomeProtocol"},{"text":" is ","type":"text"},{"code":"SomeProtocol.Protocol","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can use the postfix ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" expression to access a type as a value."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"SomeClass.self"},{"type":"text","text":" returns "},{"code":"SomeClass","type":"codeVoice"},{"type":"text","text":" itself,"},{"text":" ","type":"text"},{"text":"not an instance of ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"And "},{"type":"codeVoice","code":"SomeProtocol.self"},{"type":"text","text":" returns "},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" itself,"},{"type":"text","text":" "},{"text":"not an instance of a type that conforms to ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" at runtime."},{"type":"text","text":" "},{"type":"text","text":"You can call the "},{"code":"type(of:)","type":"codeVoice"},{"text":" function with an instance of a type","type":"text"},{"type":"text","text":" "},{"text":"to access that instance’s dynamic, runtime type as a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the following example shows:"}]},{"syntax":"swift","type":"codeListing","code":["class SomeBaseClass {","    class func printClassName() {","        print(\"SomeBaseClass\")","    }","}","class SomeSubClass: SomeBaseClass {","    override class func printClassName() {","        print(\"SomeSubClass\")","    }","}","let someInstance: SomeBaseClass = SomeSubClass()","\/\/ The compile-time type of someInstance is SomeBaseClass,","\/\/ and the runtime type of someInstance is SomeSubClass","type(of: someInstance).printClassName()","\/\/ Prints \"SomeSubClass\""]},{"inlineContent":[{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","isActive":true},{"type":"text","text":" "},{"type":"text","text":"in the Swift standard library."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use an initializer expression to construct an instance of a type"},{"type":"text","text":" "},{"text":"from that type’s metatype value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For class instances,"},{"text":" ","type":"text"},{"text":"the initializer that’s called must be marked with the ","type":"text"},{"code":"required","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"or the entire class marked with the ","type":"text"},{"type":"codeVoice","code":"final"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class AnotherSubClass: SomeBaseClass {","    let string: String","    required init(string: String) {","        self.string = string","    }","    override class func printClassName() {","        print(\"AnotherSubClass\")","    }","}","let metatype: AnotherSubClass.Type = AnotherSubClass.self","let anotherInstance = metatype.init(string: \"some string\")"],"type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"metatype-type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"Type","type":"codeVoice"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"."}],"type":"strong"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"Protocol","type":"codeVoice"}]}]}],"type":"aside","name":"Grammar of a metatype type"},{"level":2,"type":"heading","anchor":"Any-Type","text":"Any Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type can contain values from all other types."},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"text":" can be used as the concrete type","type":"text"},{"text":" ","type":"text"},{"text":"for an instance of any of the following types:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A class, structure, or enumeration","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A metatype, such as ","type":"text"},{"type":"codeVoice","code":"Int.self"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A tuple with any types of components","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A closure or function type"}],"type":"paragraph"}]}]},{"type":"codeListing","syntax":"swift","code":["let mixed: [Any] = [\"one\", 2, true, (4, 5.3), { () -> Int in return 6 }]"]},{"inlineContent":[{"text":"When you use ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as a concrete type for an instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you need to cast the instance to a known type"},{"text":" ","type":"text"},{"type":"text","text":"before you can access its properties or methods."},{"text":" ","type":"text"},{"type":"text","text":"Instances with a concrete type of "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" "},{"type":"text","text":"maintain their original dynamic type"},{"text":" ","type":"text"},{"text":"and can be cast to that type using one of the type-cast operators —","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"as"},{"type":"text","text":", "},{"code":"as?","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"as!"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"use ","type":"text"},{"code":"as?","type":"codeVoice"},{"type":"text","text":" to conditionally downcast the first object in a heterogeneous array"},{"text":" ","type":"text"},{"text":"to a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" as follows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let first = mixed.first as? String {","    print(\"The first item, '\\(first)', is a string.\")","}","\/\/ Prints \"The first item, 'one', is a string.\""]},{"inlineContent":[{"type":"text","text":"For more information about casting, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":" protocol is similar to the "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" type."},{"text":" ","type":"text"},{"text":"All classes implicitly conform to ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Unlike "},{"code":"Any","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is defined by the language,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" is defined by the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of an Any type","style":"note","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"any-type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"Any","type":"codeVoice"}]}]}]},{"text":"Self Type","type":"heading","level":2,"anchor":"Self-Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Self"},{"text":" type isn’t a specific type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but rather lets you conveniently refer to the current type"},{"type":"text","text":" "},{"type":"text","text":"without repeating or knowing that type’s name."}]},{"type":"paragraph","inlineContent":[{"text":"In a protocol declaration or a protocol member declaration,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the eventual type that conforms to the protocol."}]},{"type":"paragraph","inlineContent":[{"text":"In a structure, class, or enumeration declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"text":" type refers to the type introduced by the declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Inside the declaration for a member of a type,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type refers to that type."},{"type":"text","text":" "},{"text":"In the members of a class declaration,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":" can appear only as follows:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"As the return type of a method","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As the return type of a read-only subscript"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"As the type of a read-only computed property"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"In the body of a method","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the code below shows an instance method "},{"type":"codeVoice","code":"f"},{"type":"text","text":" "},{"type":"text","text":"whose return type is "},{"code":"Self","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["class Superclass {","    func f() -> Self { return self }","}","let x = Superclass()","print(type(of: x.f()))","\/\/ Prints \"Superclass\"","","class Subclass: Superclass { }","let y = Subclass()","print(type(of: y.f()))","\/\/ Prints \"Subclass\"","","let z: Superclass = Subclass()","print(type(of: z.f()))","\/\/ Prints \"Subclass\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The last part of the example above shows that"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":" refers to the runtime type ","type":"text"},{"type":"codeVoice","code":"Subclass"},{"type":"text","text":" of the value of "},{"type":"codeVoice","code":"z"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not the compile-time type "},{"type":"codeVoice","code":"Superclass"},{"text":" of the variable itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Inside a nested type declaration,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the type"},{"text":" ","type":"text"},{"type":"text","text":"introduced by the innermost type declaration."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type refers to the same type"},{"text":" ","type":"text"},{"type":"text","text":"as the "},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"type(of:)"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","overridingTitle":"type(of:)"},{"text":" ","type":"text"},{"type":"text","text":"function in the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"Writing "},{"type":"codeVoice","code":"Self.someStaticMember"},{"text":" to access a member of the current type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is the same as writing "},{"type":"codeVoice","code":"type(of: self).someStaticMember"},{"type":"text","text":"."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"self-type","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"Self","type":"codeVoice"}],"type":"strong"}],"type":"paragraph"}],"style":"note","name":"Grammar of a Self type","type":"aside"},{"anchor":"Type-Inheritance-Clause","type":"heading","text":"Type Inheritance Clause","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"type inheritance clause","type":"text"}]},{"type":"text","text":" is used to specify which class a named type inherits from"},{"type":"text","text":" "},{"text":"and which protocols a named type conforms to.","type":"text"},{"text":" ","type":"text"},{"text":"A type inheritance clause begins with a colon (","type":"text"},{"type":"codeVoice","code":":"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"followed by a list of type identifiers.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Class types can inherit from a single superclass and conform to any number of protocols."},{"type":"text","text":" "},{"type":"text","text":"When defining a class,"},{"text":" ","type":"text"},{"type":"text","text":"the name of the superclass must appear first in the list of type identifiers,"},{"text":" ","type":"text"},{"type":"text","text":"followed by any number of protocols the class must conform to."},{"type":"text","text":" "},{"type":"text","text":"If the class doesn’t inherit from another class,"},{"type":"text","text":" "},{"text":"the list can begin with a protocol instead.","type":"text"},{"text":" ","type":"text"},{"text":"For an extended discussion and several examples of class inheritance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Other named types can only inherit from or conform to a list of protocols."},{"type":"text","text":" "},{"type":"text","text":"Protocol types can inherit from any number of other protocols."},{"text":" ","type":"text"},{"type":"text","text":"When a protocol type inherits from other protocols,"},{"text":" ","type":"text"},{"type":"text","text":"the set of requirements from those other protocols are aggregated together,"},{"type":"text","text":" "},{"type":"text","text":"and any type that inherits from the current protocol must conform to all of those requirements."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A type inheritance clause in an enumeration definition can be either a list of protocols,","type":"text"},{"text":" ","type":"text"},{"text":"or in the case of an enumeration that assigns raw values to its cases,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single, named type that specifies the type of those raw values."},{"type":"text","text":" "},{"type":"text","text":"For an example of an enumeration definition that uses a type inheritance clause"},{"type":"text","text":" "},{"text":"to specify the type of its raw values, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","type":"reference"},{"text":".","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-inheritance-clause","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-inheritance-list","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type-inheritance-list","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"text":" | ","type":"text"},{"inlineContent":[{"text":"attributes","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-inheritance-list"}]}]}],"style":"note","name":"Grammar of a type inheritance clause"},{"level":2,"text":"Type Inference","anchor":"Type-Inference","type":"heading"},{"inlineContent":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"type inference","type":"text"}]},{"type":"text","text":" extensively,"},{"type":"text","text":" "},{"text":"allowing you to omit the type or part of the type of many variables and expressions in your code.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of writing "},{"type":"codeVoice","code":"var x: Int = 0"},{"text":", you can write ","type":"text"},{"code":"var x = 0","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"omitting the type completely —"},{"type":"text","text":" "},{"type":"text","text":"the compiler correctly infers that "},{"code":"x","type":"codeVoice"},{"type":"text","text":" names a value of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Similarly, you can omit part of a type when the full type can be inferred from context.","type":"text"},{"type":"text","text":" "},{"text":"For example, if you write ","type":"text"},{"code":"let dict: Dictionary = [\"A\": 1]","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the compiler infers that ","type":"text"},{"type":"codeVoice","code":"dict"},{"text":" has the type ","type":"text"},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both of the examples above,"},{"text":" ","type":"text"},{"text":"the type information is passed up from the leaves of the expression tree to its root.","type":"text"},{"text":" ","type":"text"},{"text":"That is,","type":"text"},{"type":"text","text":" "},{"text":"the type of ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"var x: Int = 0"},{"type":"text","text":" is inferred by first checking the type of "},{"type":"codeVoice","code":"0"},{"text":" ","type":"text"},{"type":"text","text":"and then passing this type information up to the root (the variable "},{"type":"codeVoice","code":"x"},{"type":"text","text":")."}]},{"inlineContent":[{"type":"text","text":"In Swift, type information can also flow in the opposite direction — from the root down to the leaves."},{"type":"text","text":" "},{"type":"text","text":"In the following example, for instance,"},{"text":" ","type":"text"},{"text":"the explicit type annotation (","type":"text"},{"code":": Float","type":"codeVoice"},{"type":"text","text":") on the constant "},{"type":"codeVoice","code":"eFloat"},{"text":" ","type":"text"},{"type":"text","text":"causes the numeric literal "},{"type":"codeVoice","code":"2.71828"},{"type":"text","text":" to have an inferred type of "},{"type":"codeVoice","code":"Float"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let e = 2.71828 \/\/ The type of e is inferred to be Double.","let eFloat: Float = 2.71828 \/\/ The type of eFloat is Float."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Type inference in Swift operates at the level of a single expression or statement."},{"type":"text","text":" "},{"text":"This means that all of the information needed to infer an omitted type or part of a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in an expression must be accessible from type-checking"},{"text":" ","type":"text"},{"text":"the expression or one of its subexpressions.","type":"text"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},"abstract":[{"type":"text","text":"Use built-in named and compound types."}],"kind":"article","metadata":{"title":"Types"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"title":"Arrays","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","title":"Autoclosures","type":"topic"},"https://developer.apple.com/documentation/swift/2885064-type":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","title":"type(of:)","titleInlineContent":[{"type":"codeVoice","code":"type(of:)"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","title":"Optionals","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Dictionaries":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Dictionaries","abstract":[],"title":"Dictionaries","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters","title":"Variadic Parameters","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","title":"Extension Declaration","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","abstract":[],"title":"Class-Only Protocols","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","title":"Memory Safety","url":"\/documentation\/the-swift-programming-language\/memorysafety","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","title":"Type Casting","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"abstract":[],"kind":"section","title":"Implicitly Unwrapped Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals"},"https://developer.apple.com/documentation/swift/anyobject":{"type":"link","title":"AnyObject","titleInlineContent":[{"type":"codeVoice","code":"AnyObject"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","url":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"abstract":[{"type":"text","text":"Add functionality to an existing type."}],"type":"topic","title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","url":"\/documentation\/the-swift-programming-language\/extensions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Raw-Values":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","title":"Raw Values","url":"\/documentation\/the-swift-programming-language\/enumerations#Raw-Values","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#In-Out-Parameters":{"title":"In-Out Parameters","url":"\/documentation\/the-swift-programming-language\/functions#In-Out-Parameters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","abstract":[],"kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","title":"Functions with Multiple Return Values","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Throwing-Functions-and-Methods":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods","title":"Throwing Functions and Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Throwing-Functions-and-Methods","kind":"section"}}}