{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Optional chaining","type":"text"}]},{"text":" is a process for querying and calling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on an optional that might currently be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the optional contains a value,"},{"text":" ","type":"text"},{"text":"the property, method, or subscript call succeeds;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Multiple queries can be chained together,","type":"text"},{"text":" ","type":"text"},{"text":"and the entire chain fails gracefully if any link in the chain is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"Optional chaining in Swift is similar to messaging ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" in Objective-C,"},{"text":" ","type":"text"},{"text":"but in a way that works for any type, and that can be checked for success or failure.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"text":"Optional Chaining as an Alternative to Forced Unwrapping","type":"heading","level":2,"anchor":"Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping"},{"inlineContent":[{"text":"You specify optional chaining by placing a question mark (","type":"text"},{"code":"?","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"after the optional value on which you wish to call a property, method or subscript"},{"type":"text","text":" "},{"text":"if the optional is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This is very similar to placing an exclamation point (","type":"text"},{"code":"!","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"after an optional value to force the unwrapping of its value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The main difference is that optional chaining fails gracefully when the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereas forced unwrapping triggers a runtime error when the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To reflect the fact that optional chaining can be called on a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"the result of an optional chaining call is always an optional value,","type":"text"},{"type":"text","text":" "},{"text":"even if the property, method, or subscript you are querying returns a non-optional value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use this optional return value to check whether"},{"text":" ","type":"text"},{"text":"the optional chaining call was successful","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(the returned optional contains a value),"},{"text":" ","type":"text"},{"text":"or didn’t succeed due to a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value in the chain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(the returned optional value is "},{"type":"codeVoice","code":"nil"},{"text":").","type":"text"}]},{"inlineContent":[{"text":"Specifically, the result of an optional chaining call","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is of the same type as the expected return value, but wrapped in an optional."},{"text":" ","type":"text"},{"text":"A property that normally returns an ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" will return an ","type":"text"},{"type":"codeVoice","code":"Int?"},{"text":" ","type":"text"},{"type":"text","text":"when accessed through optional chaining."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next several code snippets demonstrate"},{"type":"text","text":" "},{"type":"text","text":"how optional chaining differs from forced unwrapping"},{"text":" ","type":"text"},{"type":"text","text":"and enables you to check for success."}]},{"type":"paragraph","inlineContent":[{"text":"First, two classes called ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"code":"Residence","type":"codeVoice"},{"type":"text","text":" are defined:"}]},{"type":"codeListing","code":["class Person {","    var residence: Residence?","}","","class Residence {","    var numberOfRooms = 1","}"],"syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"Residence"},{"text":" instances have a single ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" property called ","type":"text"},{"code":"numberOfRooms","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"},{"type":"text","text":" "},{"code":"Person","type":"codeVoice"},{"text":" instances have an optional ","type":"text"},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property of type "},{"code":"Residence?","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you create a new ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"text":"its ","type":"text"},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property is default initialized to "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by virtue of being optional."},{"type":"text","text":" "},{"text":"In the code below, ","type":"text"},{"type":"codeVoice","code":"john"},{"type":"text","text":" has a "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property value of "},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["let john = Person()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you try to access the ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":" property of this person’s ","type":"text"},{"type":"codeVoice","code":"residence"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"by placing an exclamation point after "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" to force the unwrapping of its value,"},{"type":"text","text":" "},{"type":"text","text":"you trigger a runtime error,"},{"type":"text","text":" "},{"text":"because there’s no ","type":"text"},{"type":"codeVoice","code":"residence"},{"type":"text","text":" value to unwrap:"}]},{"type":"codeListing","syntax":"swift","code":["let roomCount = john.residence!.numberOfRooms","\/\/ this triggers a runtime error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above succeeds when "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" has a non-"},{"type":"codeVoice","code":"nil"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and will set "},{"type":"codeVoice","code":"roomCount"},{"type":"text","text":" to an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value containing the appropriate number of rooms."},{"type":"text","text":" "},{"type":"text","text":"However, this code always triggers a runtime error when "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"as illustrated above.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional chaining provides an alternative way to access the value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To use optional chaining, use a question mark in place of the exclamation point:"}]},{"code":["if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This tells Swift to “chain” on the optional ","type":"text"},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"and to retrieve the value of ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" if "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" exists."}]},{"inlineContent":[{"text":"Because the attempt to access ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":" has the potential to fail,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the optional chaining attempt returns a value of type "},{"type":"codeVoice","code":"Int?"},{"text":", or “optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"When "},{"code":"residence","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", as in the example above,"},{"type":"text","text":" "},{"text":"this optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" will also be ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that it was not possible to access "},{"type":"codeVoice","code":"numberOfRooms"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The optional "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" is accessed through optional binding"},{"text":" ","type":"text"},{"type":"text","text":"to unwrap the integer and assign the non-optional value"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"roomCount","type":"codeVoice"},{"text":" constant.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that this is true even though "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":" is a non-optional "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The fact that it’s queried through an optional chain"},{"type":"text","text":" "},{"type":"text","text":"means that the call to "},{"code":"numberOfRooms","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"will always return an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" instead of an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can assign a ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" instance to ","type":"text"},{"code":"john.residence","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"so that it no longer has a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value:"}]},{"syntax":"swift","type":"codeListing","code":["john.residence = Residence()"]},{"inlineContent":[{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" now contains an actual "},{"code":"Residence","type":"codeVoice"},{"text":" instance, rather than ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you try to access "},{"type":"codeVoice","code":"numberOfRooms"},{"text":" with the same optional chaining as before,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it will now return an "},{"type":"codeVoice","code":"Int?"},{"text":" that contains","type":"text"},{"text":" ","type":"text"},{"text":"the default ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"John's residence has 1 room(s).\""],"type":"codeListing"},{"type":"heading","text":"Defining Model Classes for Optional Chaining","level":2,"anchor":"Defining-Model-Classes-for-Optional-Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining with calls to properties, methods, and subscripts"},{"text":" ","type":"text"},{"type":"text","text":"that are more than one level deep."},{"text":" ","type":"text"},{"text":"This enables you to drill down into subproperties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within complex models of interrelated types,"},{"type":"text","text":" "},{"text":"and to check whether it’s possible to access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties, methods, and subscripts on those subproperties."}]},{"type":"paragraph","inlineContent":[{"text":"The code snippets below define four model classes","type":"text"},{"type":"text","text":" "},{"text":"for use in several subsequent examples,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including examples of multilevel optional chaining."},{"text":" ","type":"text"},{"text":"These classes expand upon the ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"code":"Residence","type":"codeVoice"},{"text":" model from above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by adding a "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class,"},{"text":" ","type":"text"},{"text":"with associated properties, methods, and subscripts.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class is defined in the same way as before:"}]},{"syntax":"swift","type":"codeListing","code":["class Person {","    var residence: Residence?","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" class is more complex than before.","type":"text"},{"type":"text","text":" "},{"text":"This time, the ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" class defines a variable property called ","type":"text"},{"code":"rooms","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which is initialized with an empty array of type ","type":"text"},{"code":"[Room]","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class Residence {","    var rooms: [Room] = []","    var numberOfRooms: Int {","        return rooms.count","    }","    subscript(i: Int) -> Room {","        get {","            return rooms[i]","        }","        set {","            rooms[i] = newValue","        }","    }","    func printNumberOfRooms() {","        print(\"The number of rooms is \\(numberOfRooms)\")","    }","    var address: Address?","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because this version of "},{"code":"Residence","type":"codeVoice"},{"text":" stores an array of ","type":"text"},{"type":"codeVoice","code":"Room"},{"type":"text","text":" instances,"},{"text":" ","type":"text"},{"type":"text","text":"its "},{"type":"codeVoice","code":"numberOfRooms"},{"text":" property is implemented as a computed property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not a stored property."},{"type":"text","text":" "},{"type":"text","text":"The computed "},{"code":"numberOfRooms","type":"codeVoice"},{"text":" property simply returns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value of the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property from the "},{"type":"codeVoice","code":"rooms"},{"text":" array.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As a shortcut to accessing its "},{"code":"rooms","type":"codeVoice"},{"type":"text","text":" array,"},{"text":" ","type":"text"},{"text":"this version of ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" provides a read-write subscript that provides access to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the room at the requested index in the "},{"code":"rooms","type":"codeVoice"},{"type":"text","text":" array."}],"type":"paragraph"},{"inlineContent":[{"text":"This version of ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" also provides a method called ","type":"text"},{"type":"codeVoice","code":"printNumberOfRooms"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which simply prints the number of rooms in the residence."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Finally, ","type":"text"},{"type":"codeVoice","code":"Residence"},{"text":" defines an optional property called ","type":"text"},{"type":"codeVoice","code":"address"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a type of "},{"code":"Address?","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class type for this property is defined below."}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Room"},{"type":"text","text":" class used for the "},{"code":"rooms","type":"codeVoice"},{"text":" array is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a simple class with one property called "},{"code":"name","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and an initializer to set that property to a suitable room name:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class Room {","    let name: String","    init(name: String) { self.name = name }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final class in this model is called "},{"code":"Address","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This class has three optional properties of type ","type":"text"},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The first two properties, ","type":"text"},{"type":"codeVoice","code":"buildingName"},{"text":" and ","type":"text"},{"code":"buildingNumber","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"are alternative ways to identify a particular building as part of an address."},{"type":"text","text":" "},{"type":"text","text":"The third property, "},{"type":"codeVoice","code":"street"},{"type":"text","text":", is used to name the street for that address:"}]},{"syntax":"swift","type":"codeListing","code":["class Address {","    var buildingName: String?","    var buildingNumber: String?","    var street: String?","    func buildingIdentifier() -> String? {","        if let buildingNumber = buildingNumber, let street = street {","            return \"\\(buildingNumber) \\(street)\"","        } else if buildingName != nil {","            return buildingName","        } else {","            return nil","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"Address","type":"codeVoice"},{"text":" class also provides a method called ","type":"text"},{"type":"codeVoice","code":"buildingIdentifier()"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which has a return type of ","type":"text"},{"code":"String?","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This method checks the properties of the address"},{"text":" ","type":"text"},{"type":"text","text":"and returns "},{"code":"buildingName","type":"codeVoice"},{"text":" if it has a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"buildingNumber"},{"text":" concatenated with ","type":"text"},{"type":"codeVoice","code":"street"},{"type":"text","text":" if both have values,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"nil"},{"text":" otherwise.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Accessing Properties Through Optional Chaining","type":"heading","anchor":"Accessing-Properties-Through-Optional-Chaining"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As demonstrated in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"text":"you can use optional chaining to access a property on an optional value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to check if that property access is successful."}]},{"inlineContent":[{"type":"text","text":"Use the classes defined above to create a new "},{"code":"Person","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"and try to access its ","type":"text"},{"type":"codeVoice","code":"numberOfRooms"},{"text":" property as before:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let john = Person()","if let roomCount = john.residence?.numberOfRooms {","    print(\"John's residence has \\(roomCount) room(s).\")","} else {","    print(\"Unable to retrieve the number of rooms.\")","}","\/\/ Prints \"Unable to retrieve the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"this optional chaining call fails in the same way as before.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also attempt to set a property’s value through optional chaining:"}]},{"syntax":"swift","type":"codeListing","code":["let someAddress = Address()","someAddress.buildingNumber = \"29\"","someAddress.street = \"Acacia Road\"","john.residence?.address = someAddress"]},{"inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"text":"the attempt to set the ","type":"text"},{"type":"codeVoice","code":"address"},{"type":"text","text":" property of "},{"code":"john.residence","type":"codeVoice"},{"text":" will fail,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The assignment is part of the optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"which means none of the code on the right-hand side of the "},{"code":"=","type":"codeVoice"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"is evaluated."},{"type":"text","text":" "},{"text":"In the previous example,","type":"text"},{"text":" ","type":"text"},{"text":"it’s not easy to see that ","type":"text"},{"type":"codeVoice","code":"someAddress"},{"text":" is never evaluated,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because accessing a constant doesn’t have any side effects."},{"type":"text","text":" "},{"type":"text","text":"The listing below does the same assignment,"},{"type":"text","text":" "},{"type":"text","text":"but it uses a function to create the address."},{"type":"text","text":" "},{"type":"text","text":"The function prints “Function was called” before returning a value,"},{"text":" ","type":"text"},{"type":"text","text":"which lets you see"},{"type":"text","text":" "},{"text":"whether the right-hand side of the ","type":"text"},{"type":"codeVoice","code":"="},{"type":"text","text":" operator was evaluated."}]},{"code":["func createAddress() -> Address {","    print(\"Function was called.\")","","    let someAddress = Address()","    someAddress.buildingNumber = \"29\"","    someAddress.street = \"Acacia Road\"","","    return someAddress","}","john.residence?.address = createAddress()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can tell that the "},{"type":"codeVoice","code":"createAddress()"},{"type":"text","text":" function isn’t called,"},{"text":" ","type":"text"},{"text":"because nothing is printed.","type":"text"}]},{"text":"Calling Methods Through Optional Chaining","level":2,"anchor":"Calling-Methods-Through-Optional-Chaining","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional chaining to call a method on an optional value,"},{"type":"text","text":" "},{"type":"text","text":"and to check whether that method call is successful."},{"text":" ","type":"text"},{"type":"text","text":"You can do this even if that method doesn’t define a return value."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"printNumberOfRooms()","type":"codeVoice"},{"text":" method on the ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prints the current value of "},{"type":"codeVoice","code":"numberOfRooms"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Here’s how the method looks:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func printNumberOfRooms() {","    print(\"The number of rooms is \\(numberOfRooms)\")","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This method doesn’t specify a return type."},{"text":" ","type":"text"},{"type":"text","text":"However, functions and methods with no return type have an implicit return type of "},{"type":"codeVoice","code":"Void"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This means that they return a value of ","type":"text"},{"code":"()","type":"codeVoice"},{"type":"text","text":", or an empty tuple."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you call this method on an optional value with optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"the method’s return type will be "},{"code":"Void?","type":"codeVoice"},{"type":"text","text":", not "},{"code":"Void","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because return values are always of an optional type when called through optional chaining."},{"type":"text","text":" "},{"type":"text","text":"This enables you to use an "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"to check whether it was possible to call the "},{"code":"printNumberOfRooms()","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"even though the method doesn’t itself define a return value.","type":"text"},{"text":" ","type":"text"},{"text":"Compare the return value from the ","type":"text"},{"type":"codeVoice","code":"printNumberOfRooms"},{"text":" call against ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"to see if the method call was successful:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if john.residence?.printNumberOfRooms() != nil {","    print(\"It was possible to print the number of rooms.\")","} else {","    print(\"It was not possible to print the number of rooms.\")","}","\/\/ Prints \"It was not possible to print the number of rooms.\""]},{"type":"paragraph","inlineContent":[{"text":"The same is true if you attempt to set a property through optional chaining.","type":"text"},{"text":" ","type":"text"},{"text":"The example above in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"text":" ","type":"text"},{"type":"text","text":"attempts to set an "},{"code":"address","type":"codeVoice"},{"type":"text","text":" value for "},{"type":"codeVoice","code":"john.residence"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though the "},{"type":"codeVoice","code":"residence"},{"type":"text","text":" property is "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Any attempt to set a property through optional chaining returns a value of type "},{"code":"Void?","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which enables you to compare against ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" to see if the property was set successfully:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if (john.residence?.address = someAddress) != nil {","    print(\"It was possible to set the address.\")","} else {","    print(\"It was not possible to set the address.\")","}","\/\/ Prints \"It was not possible to set the address.\""]},{"level":2,"anchor":"Accessing-Subscripts-Through-Optional-Chaining","text":"Accessing Subscripts Through Optional Chaining","type":"heading"},{"inlineContent":[{"text":"You can use optional chaining to try to retrieve and set","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a value from a subscript on an optional value,"},{"type":"text","text":" "},{"text":"and to check whether that subscript call is successful.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"When you access a subscript on an optional value through optional chaining,","type":"text"},{"type":"text","text":" "},{"text":"you place the question mark ","type":"text"},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"text":" the subscript’s brackets, not after.","type":"text"},{"text":" ","type":"text"},{"text":"The optional chaining question mark always follows immediately after","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the part of the expression that’s optional."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below tries to retrieve the name of"},{"text":" ","type":"text"},{"text":"the first room in the ","type":"text"},{"type":"codeVoice","code":"rooms"},{"text":" array of the ","type":"text"},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"using the subscript defined on the "},{"code":"Residence","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"john.residence"},{"type":"text","text":" is currently "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the subscript call fails:","type":"text"}]},{"code":["if let firstRoomName = john.residence?[0].name {","    print(\"The first room name is \\(firstRoomName).\")","} else {","    print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"Unable to retrieve the first room name.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The optional chaining question mark in this subscript call"},{"type":"text","text":" "},{"type":"text","text":"is placed immediately after "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":", before the subscript brackets,"},{"type":"text","text":" "},{"type":"text","text":"because "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" is the optional value"},{"text":" ","type":"text"},{"type":"text","text":"on which optional chaining is being attempted."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Similarly, you can try to set a new value through a subscript with optional chaining:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["john.residence?[0] = Room(name: \"Bathroom\")"]},{"inlineContent":[{"type":"text","text":"This subscript setting attempt also fails, because "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create and assign an actual "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance to "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with one or more "},{"code":"Room","type":"codeVoice"},{"type":"text","text":" instances in its "},{"code":"rooms","type":"codeVoice"},{"type":"text","text":" array,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" subscript to access"},{"type":"text","text":" "},{"text":"the actual items in the ","type":"text"},{"code":"rooms","type":"codeVoice"},{"type":"text","text":" array through optional chaining:"}],"type":"paragraph"},{"syntax":"swift","code":["let johnsHouse = Residence()","johnsHouse.rooms.append(Room(name: \"Living Room\"))","johnsHouse.rooms.append(Room(name: \"Kitchen\"))","john.residence = johnsHouse","","if let firstRoomName = john.residence?[0].name {","    print(\"The first room name is \\(firstRoomName).\")","} else {","    print(\"Unable to retrieve the first room name.\")","}","\/\/ Prints \"The first room name is Living Room.\""],"type":"codeListing"},{"level":3,"type":"heading","anchor":"Accessing-Subscripts-of-Optional-Type","text":"Accessing Subscripts of Optional Type"},{"inlineContent":[{"text":"If a subscript returns a value of optional type —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as the key subscript of Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type —"},{"type":"text","text":" "},{"type":"text","text":"place a question mark "},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"type":"text","text":" the subscript’s closing bracket"},{"text":" ","type":"text"},{"text":"to chain on its optional return value:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var testScores = [\"Dave\": [86, 82, 84], \"Bev\": [79, 94, 81]]","testScores[\"Dave\"]?[0] = 91","testScores[\"Bev\"]?[0] += 1","testScores[\"Brian\"]?[0] = 72","\/\/ the \"Dave\" array is now [91, 82, 84] and the \"Bev\" array is now [80, 94, 81]"]},{"inlineContent":[{"text":"The example above defines a dictionary called ","type":"text"},{"code":"testScores","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which contains two key-value pairs that map a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" key to an array of "},{"code":"Int","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example uses optional chaining to set the first item in the "},{"code":"\"Dave\"","type":"codeVoice"},{"type":"text","text":" array to "},{"type":"codeVoice","code":"91"},{"type":"text","text":";"},{"type":"text","text":" "},{"text":"to increment the first item in the ","type":"text"},{"type":"codeVoice","code":"\"Bev\""},{"type":"text","text":" array by "},{"type":"codeVoice","code":"1"},{"text":";","type":"text"},{"type":"text","text":" "},{"text":"and to try to set the first item in an array for a key of ","type":"text"},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The first two calls succeed, because the ","type":"text"},{"code":"testScores","type":"codeVoice"},{"text":" dictionary","type":"text"},{"text":" ","type":"text"},{"text":"contains keys for ","type":"text"},{"code":"\"Dave\"","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Bev\""},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The third call fails, because the "},{"code":"testScores","type":"codeVoice"},{"text":" dictionary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doesn’t contain a key for "},{"type":"codeVoice","code":"\"Brian\""},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Linking-Multiple-Levels-of-Chaining","type":"heading","text":"Linking Multiple Levels of Chaining","level":2},{"type":"paragraph","inlineContent":[{"text":"You can link together multiple levels of optional chaining","type":"text"},{"text":" ","type":"text"},{"text":"to drill down to properties, methods, and subscripts deeper within a model.","type":"text"},{"type":"text","text":" "},{"text":"However, multiple levels of optional chaining","type":"text"},{"text":" ","type":"text"},{"text":"don’t add more levels of optionality to the returned value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To put it another way:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the type you are trying to retrieve isn’t optional,"},{"text":" ","type":"text"},{"type":"text","text":"it will become optional because of the optional chaining."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the type you are trying to retrieve is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"already"}]},{"text":" optional,","type":"text"},{"type":"text","text":" "},{"text":"it will not become ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"text":" optional because of the chaining.","type":"text"}]}]}]},{"inlineContent":[{"text":"Therefore:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If you try to retrieve an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value through optional chaining,"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"Int?","type":"codeVoice"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"type":"text","text":"no matter how many levels of chaining are used."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Similarly, if you try to retrieve an ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":" value through optional chaining,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":" is always returned,"},{"type":"text","text":" "},{"text":"no matter how many levels of chaining are used.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The example below tries to access the "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"address"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"john","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There are "},{"inlineContent":[{"type":"text","text":"two"}],"type":"emphasis"},{"text":" levels of optional chaining in use here,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to chain through the "},{"code":"residence","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"address"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"text":"both of which are of optional type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if let johnsStreet = john.residence?.address?.street {","    print(\"John's street name is \\(johnsStreet).\")","} else {","    print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"Unable to retrieve the address.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of "},{"type":"codeVoice","code":"john.residence"},{"text":" currently contains a valid ","type":"text"},{"type":"codeVoice","code":"Residence"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"However, the value of "},{"code":"john.residence.address","type":"codeVoice"},{"type":"text","text":" is currently "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because of this, the call to ","type":"text"},{"code":"john.residence?.address?.street","type":"codeVoice"},{"type":"text","text":" fails."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the example above,"},{"type":"text","text":" "},{"type":"text","text":"you are trying to retrieve the value of the "},{"code":"street","type":"codeVoice"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"text":"The type of this property is ","type":"text"},{"code":"String?","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The return value of "},{"code":"john.residence?.address?.street","type":"codeVoice"},{"type":"text","text":" is therefore also "},{"type":"codeVoice","code":"String?"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though two levels of optional chaining are applied in addition to"},{"type":"text","text":" "},{"text":"the underlying optional type of the property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you set an actual "},{"code":"Address","type":"codeVoice"},{"text":" instance as the value for ","type":"text"},{"code":"john.residence.address","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and set an actual value for the address’s "},{"type":"codeVoice","code":"street"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"text":"you can access the value of the ","type":"text"},{"type":"codeVoice","code":"street"},{"type":"text","text":" property through multilevel optional chaining:"}]},{"syntax":"swift","type":"codeListing","code":["let johnsAddress = Address()","johnsAddress.buildingName = \"The Larches\"","johnsAddress.street = \"Laurel Street\"","john.residence?.address = johnsAddress","","if let johnsStreet = john.residence?.address?.street {","    print(\"John's street name is \\(johnsStreet).\")","} else {","    print(\"Unable to retrieve the address.\")","}","\/\/ Prints \"John's street name is Laurel Street.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"text":"the attempt to set the ","type":"text"},{"type":"codeVoice","code":"address"},{"text":" property of ","type":"text"},{"code":"john.residence","type":"codeVoice"},{"text":" will succeed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the value of "},{"code":"john.residence","type":"codeVoice"},{"type":"text","text":" "},{"text":"currently contains a valid ","type":"text"},{"code":"Residence","type":"codeVoice"},{"text":" instance.","type":"text"}]},{"type":"heading","text":"Chaining on Methods with Optional Return Values","level":2,"anchor":"Chaining-on-Methods-with-Optional-Return-Values"},{"type":"paragraph","inlineContent":[{"text":"The previous example shows how to retrieve the value of","type":"text"},{"type":"text","text":" "},{"text":"a property of optional type through optional chaining.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also use optional chaining to call a method that returns a value of optional type,"},{"text":" ","type":"text"},{"text":"and to chain on that method’s return value if needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below calls the "},{"type":"codeVoice","code":"Address"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"buildingIdentifier()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"through optional chaining. This method returns a value of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"As described above, the ultimate return type of this method call after optional chaining"},{"type":"text","text":" "},{"text":"is also ","type":"text"},{"type":"codeVoice","code":"String?"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {","    print(\"John's building identifier is \\(buildingIdentifier).\")","}","\/\/ Prints \"John's building identifier is The Larches.\""]},{"inlineContent":[{"text":"If you want to perform further optional chaining on this method’s return value,","type":"text"},{"type":"text","text":" "},{"text":"place the optional chaining question mark ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"text":" the method’s parentheses:","type":"text"}],"type":"paragraph"},{"code":["if let beginsWithThe =","    john.residence?.address?.buildingIdentifier()?.hasPrefix(\"The\") {","    if beginsWithThe {","        print(\"John's building identifier begins with \\\"The\\\".\")","    } else {","        print(\"John's building identifier doesn't begin with \\\"The\\\".\")","    }","}","\/\/ Prints \"John's building identifier begins with \"The\".\""],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you place the optional chaining question mark "},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"type":"text","text":" the parentheses,"},{"text":" ","type":"text"},{"type":"text","text":"because the optional value you are chaining on is"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"buildingIdentifier()"},{"type":"text","text":" method’s return value,"},{"type":"text","text":" "},{"type":"text","text":"and not the "},{"code":"buildingIdentifier()","type":"codeVoice"},{"text":" method itself.","type":"text"}]}],"style":"note"}],"kind":"content"}],"metadata":{"title":"Optional Chaining"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping":{"title":"Optional Chaining as an Alternative to Forced Unwrapping","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Optional-Chaining-as-an-Alternative-to-Forced-Unwrapping","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-Without-Return-Values":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-Without-Return-Values","url":"\/documentation\/the-swift-programming-language\/functions#Functions-Without-Return-Values","type":"topic","title":"Functions Without Return Values","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"title":"Accessing Properties Through Optional Chaining","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","kind":"section"}}}