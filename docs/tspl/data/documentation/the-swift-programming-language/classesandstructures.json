{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"abstract":[{"type":"text","text":"Model custom types that encapsulate data."}],"primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"type":"text","text":" are general-purpose,"},{"text":" ","type":"text"},{"text":"flexible constructs that become the building blocks of your program’s code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"text":"using the same syntax you use to define constants, variables, and functions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike other programming languages,"},{"text":" ","type":"text"},{"type":"text","text":"Swift doesn’t require you to create separate interface and implementation files"},{"type":"text","text":" "},{"text":"for custom structures and classes.","type":"text"},{"type":"text","text":" "},{"text":"In Swift, you define a structure or class in a single file,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the external interface to that class or structure is"},{"text":" ","type":"text"},{"type":"text","text":"automatically made available for other code to use."}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"object"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"text":" ","type":"text"},{"type":"text","text":"are much closer in functionality than in other languages,"},{"text":" ","type":"text"},{"type":"text","text":"and much of this chapter describes functionality that applies to"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"type":"text","text":" a class or a structure type."},{"text":" ","type":"text"},{"type":"text","text":"Because of this, the more general term "},{"type":"emphasis","inlineContent":[{"text":"instance","type":"text"}]},{"text":" is used.","type":"text"}]}],"style":"note"},{"anchor":"Comparing-Structures-and-Classes","level":2,"type":"heading","text":"Comparing Structures and Classes"},{"inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"text":" ","type":"text"},{"type":"text","text":"Both can:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define properties to store values","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Define methods to provide functionality"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Define subscripts to provide access to their values using subscript syntax"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Define initializers to set up their initial state","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Be extended to expand their functionality beyond a default implementation","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":", and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Inheritance enables one class to inherit the characteristics of another."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casting enables you to check and interpret the type of a class instance at runtime."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deinitializers enable an instance of a class to free up any resources it has assigned."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","isActive":true,"type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"reference","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The additional capabilities that classes support"},{"type":"text","text":" "},{"text":"come at the cost of increased complexity.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a general guideline,"},{"type":"text","text":" "},{"text":"prefer structures because they’re easier to reason about,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and use classes when they’re appropriate or necessary."},{"text":" ","type":"text"},{"type":"text","text":"In practice, this means most of the custom types you define"},{"text":" ","type":"text"},{"type":"text","text":"will be structures and enumerations."},{"type":"text","text":" "},{"text":"For a more detailed comparison,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"text":"Classes and actors share many of the same characteristics and behaviors.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about actors, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"level":3,"type":"heading","anchor":"Definition-Syntax","text":"Definition Syntax"},{"type":"paragraph","inlineContent":[{"text":"Structures and classes have a similar definition syntax.","type":"text"},{"type":"text","text":" "},{"text":"You introduce structures with the ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"and classes with the ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"type":"text","text":"Both place their entire definition within a pair of braces:"}]},{"syntax":"swift","type":"codeListing","code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"text":" ","type":"text"},{"type":"text","text":"you define a new Swift type."},{"type":"text","text":" "},{"text":"Give types ","type":"text"},{"type":"codeVoice","code":"UpperCamelCase"},{"type":"text","text":" names"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"SomeStructure","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":" here)"},{"text":" ","type":"text"},{"type":"text","text":"to match the capitalization of standard Swift types"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Give properties and methods ","type":"text"},{"code":"lowerCamelCase","type":"codeVoice"},{"type":"text","text":" names"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"code":"frameRate","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"incrementCount"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to differentiate them from type names."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a new structure called "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"to describe a pixel-based display resolution."},{"text":" ","type":"text"},{"text":"This structure has two stored properties called ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"height"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Stored properties are constants or variables that are bundled up and stored"},{"type":"text","text":" "},{"text":"as part of the structure or class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These two properties are inferred to be of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"text":"by setting them to an initial integer value of ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"to describe a specific video mode for video display.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This class has four variable stored properties."},{"text":" ","type":"text"},{"text":"The first, ","type":"text"},{"type":"codeVoice","code":"resolution"},{"text":", is initialized with a new ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":" structure instance,","type":"text"},{"type":"text","text":" "},{"text":"which infers a property type of ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For the other three properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"new "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" instances will be initialized with"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"interlaced"},{"type":"text","text":" setting of "},{"type":"codeVoice","code":"false"},{"text":" (meaning “noninterlaced video”),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a playback frame rate of "},{"code":"0.0","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and an optional "},{"type":"codeVoice","code":"String"},{"text":" value called ","type":"text"},{"type":"codeVoice","code":"name"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" property is automatically given a default value of ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “no "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value”, because it’s of an optional type."}]},{"text":"Structure and Class Instances","level":3,"anchor":"Structure-and-Class-Instances","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Resolution"},{"text":" structure definition and the ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" class definition","type":"text"},{"type":"text","text":" "},{"text":"only describe what a ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" will look like.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They themselves don’t describe a specific resolution or video mode."},{"text":" ","type":"text"},{"text":"To do that, you need to create an instance of the structure or class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The syntax for creating instances is very similar for both structures and classes:","type":"text"}]},{"code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Structures and classes both use initializer syntax for new instances."},{"text":" ","type":"text"},{"type":"text","text":"The simplest form of initializer syntax uses the type name of the class or structure"},{"type":"text","text":" "},{"type":"text","text":"followed by empty parentheses, such as "},{"type":"codeVoice","code":"Resolution()"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"VideoMode()"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This creates a new instance of the class or structure,"},{"text":" ","type":"text"},{"text":"with any properties initialized to their default values.","type":"text"},{"type":"text","text":" "},{"text":"Class and structure initialization is described in more detail","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Accessing Properties","type":"heading","anchor":"Accessing-Properties","level":3},{"inlineContent":[{"type":"text","text":"You can access the properties of an instance using "},{"type":"emphasis","inlineContent":[{"text":"dot syntax","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In dot syntax, you write the property name immediately after the instance name,"},{"text":" ","type":"text"},{"text":"separated by a period (","type":"text"},{"type":"codeVoice","code":"."},{"type":"text","text":"), without any spaces:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""]},{"inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"someResolution.width"},{"type":"text","text":" refers to the "},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"someResolution","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and returns its default initial value of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can drill down into subproperties,"},{"type":"text","text":" "},{"text":"such as the ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" property in the "},{"type":"codeVoice","code":"resolution"},{"text":" property of a ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use dot syntax to assign a new value to a variable property:"}]},{"code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""],"syntax":"swift","type":"codeListing"},{"text":"Memberwise Initializers for Structure Types","type":"heading","anchor":"Memberwise-Initializers-for-Structure-Types","level":3},{"inlineContent":[{"text":"All structures have an automatically generated ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise initializer"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which you can use to initialize the member properties of new structure instances."},{"text":" ","type":"text"},{"type":"text","text":"Initial values for the properties of the new instance"},{"type":"text","text":" "},{"text":"can be passed to the memberwise initializer by name:","type":"text"}],"type":"paragraph"},{"code":["let vga = Resolution(width: 640, height: 480)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike structures, class instances don’t receive a default memberwise initializer."},{"text":" ","type":"text"},{"type":"text","text":"Initializers are described in more detail in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"level":2,"anchor":"Structures-and-Enumerations-Are-Value-Types","text":"Structures and Enumerations Are Value Types","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"value type","type":"text"}]},{"type":"text","text":" is a type whose value is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"text":" ","type":"text"},{"text":"when it’s assigned to a variable or constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or when it’s passed to a function."}]},{"type":"paragraph","inlineContent":[{"text":"You’ve actually been using value types extensively throughout the previous chapters.","type":"text"},{"text":" ","type":"text"},{"text":"In fact, all of the basic types in Swift —","type":"text"},{"text":" ","type":"text"},{"text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}]},{"type":"paragraph","inlineContent":[{"text":"All structures and enumerations are value types in Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This means that any structure and enumeration instances you create —"},{"type":"text","text":" "},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"text":"are always copied when they’re passed around in your code.","type":"text"}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Collections defined by the Swift standard library","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"like arrays, dictionaries, and strings"},{"text":" ","type":"text"},{"type":"text","text":"use an optimization to reduce the performance cost of copying."},{"type":"text","text":" "},{"text":"Instead of making a copy immediately,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"these collections share the memory where the elements are stored"},{"text":" ","type":"text"},{"type":"text","text":"between the original instance and any copies."},{"text":" ","type":"text"},{"text":"If one of the copies of the collection is modified,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"type":"text","text":" "},{"text":"The behavior you see in your code","type":"text"},{"type":"text","text":" "},{"text":"is always as if a copy took place immediately.","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider this example, which uses the "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure from the previous example:"}]},{"type":"codeListing","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This example declares a constant called ","type":"text"},{"type":"codeVoice","code":"hd"},{"text":" ","type":"text"},{"type":"text","text":"and sets it to a "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" instance initialized with"},{"text":" ","type":"text"},{"type":"text","text":"the width and height of full HD video"},{"text":" ","type":"text"},{"type":"text","text":"(1920 pixels wide by 1080 pixels high)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then declares a variable called "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and sets it to the current value of "},{"code":"hd","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"code":"Resolution","type":"codeVoice"},{"text":" is a structure,","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"inlineContent":[{"type":"text","text":"copy"}],"type":"emphasis"},{"text":" of the existing instance is made,","type":"text"},{"text":" ","type":"text"},{"text":"and this new copy is assigned to ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Even though "},{"code":"hd","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" now have the same width and height,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}]},{"type":"paragraph","inlineContent":[{"text":"Next, the ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"text":" is amended to be","type":"text"},{"text":" ","type":"text"},{"text":"the width of the slightly wider 2K standard used for digital cinema projection","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(2048 pixels wide and 1080 pixels high):"}]},{"syntax":"swift","code":["cinema.width = 2048"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"shows that it has indeed changed to be "},{"code":"2048","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""],"type":"codeListing"},{"inlineContent":[{"text":"However, the ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of the original "},{"code":"hd","type":"codeVoice"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"type":"text","text":"still has the old value of "},{"type":"codeVoice","code":"1920"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""],"syntax":"swift"},{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" was given the current value of "},{"type":"codeVoice","code":"hd"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"inlineContent":[{"type":"text","text":"values"}],"type":"emphasis"},{"text":" stored in ","type":"text"},{"type":"codeVoice","code":"hd"},{"text":" were copied into the new ","type":"text"},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"The end result was two completely separate instances"},{"text":" ","type":"text"},{"type":"text","text":"that contained the same numeric values."},{"type":"text","text":" "},{"text":"However, because they’re separate instances,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"setting the width of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" to "},{"code":"2048","type":"codeVoice"},{"type":"text","text":" "},{"text":"doesn’t affect the width stored in ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"sharedStateStruct"}]},{"inlineContent":[{"type":"text","text":"The same behavior applies to enumerations:"}],"type":"paragraph"},{"code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"When "},{"code":"rememberedDirection","type":"codeVoice"},{"text":" is assigned the value of ","type":"text"},{"type":"codeVoice","code":"currentDirection"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s actually set to a copy of that value."},{"text":" ","type":"text"},{"type":"text","text":"Changing the value of "},{"type":"codeVoice","code":"currentDirection"},{"type":"text","text":" thereafter doesn’t affect"},{"type":"text","text":" "},{"text":"the copy of the original value that was stored in ","type":"text"},{"code":"rememberedDirection","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Classes-Are-Reference-Types","text":"Classes Are Reference Types","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike value types, "},{"type":"emphasis","inlineContent":[{"text":"reference types","type":"text"}]},{"text":" are ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" copied","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when they’re assigned to a variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"or when they’re passed to a function."},{"type":"text","text":" "},{"text":"Rather than a copy, a reference to the same existing instance is used.","type":"text"}]},{"inlineContent":[{"text":"Here’s an example, using the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class defined above:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"type":"text","text":"and sets it to refer to a new instance of the "},{"type":"codeVoice","code":"VideoMode"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The video mode is assigned a copy of the HD resolution of "},{"code":"1920","type":"codeVoice"},{"type":"text","text":" by "},{"type":"codeVoice","code":"1080"},{"text":" from before.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s set to be interlaced,"},{"text":" ","type":"text"},{"type":"text","text":"its name is set to "},{"type":"codeVoice","code":"\"1080i\""},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and its frame rate is set to "},{"code":"25.0","type":"codeVoice"},{"text":" frames per second.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"text":" is assigned to a new constant, called ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and the frame rate of ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" is modified:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" actually both refer to the "},{"inlineContent":[{"text":"same","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"VideoMode"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Effectively, they’re just two different names for the same single instance,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}]},{"inlineContent":[{"type":"image","identifier":"sharedStateClass"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"frameRate"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"text":"shows that it correctly reports the new frame rate of ","type":"text"},{"type":"codeVoice","code":"30.0"},{"text":" ","type":"text"},{"type":"text","text":"from the underlying "},{"code":"VideoMode","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"text":"If ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" were far apart in your program’s code,"},{"type":"text","text":" "},{"type":"text","text":"it could be difficult to find all the ways that the video mode is changed."},{"type":"text","text":" "},{"text":"Wherever you use ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you also have to think about the code that uses "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and vice versa.","type":"text"},{"text":" ","type":"text"},{"text":"In contrast, value types are easier to reason about","type":"text"},{"type":"text","text":" "},{"text":"because all of the code that interacts with the same value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is close together in your source files."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" are declared as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constants","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than variables."},{"type":"text","text":" "},{"type":"text","text":"However, you can still change "},{"code":"tenEighty.frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty.frameRate"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"text":"the values of the ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" constants themselves don’t actually change.","type":"text"},{"type":"text","text":" "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" themselves don’t “store” the "},{"type":"codeVoice","code":"VideoMode"},{"text":" instance —","type":"text"},{"type":"text","text":" "},{"text":"instead, they both ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"refer"}]},{"type":"text","text":" to a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"It’s the "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" that’s changed,"},{"type":"text","text":" "},{"text":"not the values of the constant references to that ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"text":".","type":"text"}]},{"type":"heading","text":"Identity Operators","anchor":"Identity-Operators","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"text":"it’s possible for multiple constants and variables to refer to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the same single instance of a class behind the scenes."},{"text":" ","type":"text"},{"type":"text","text":"(The same isn’t true for structures and enumerations,"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"type":"text","text":" "},{"text":"or passed to a function.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can sometimes be useful to find out whether two constants or variables refer to"},{"text":" ","type":"text"},{"type":"text","text":"exactly the same instance of a class."},{"text":" ","type":"text"},{"type":"text","text":"To enable this, Swift provides two identity operators:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Identical to ("},{"code":"===","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Not identical to (","type":"text"},{"code":"!==","type":"codeVoice"},{"type":"text","text":")"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Use these operators to check whether two constants or variables refer to the same single instance:","type":"text"}]},{"code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"inlineContent":[{"text":"identical to","type":"text"}],"type":"emphasis"},{"text":" (represented by three equal signs, or ","type":"text"},{"code":"===","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"doesn’t mean the same thing as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal to"}]},{"type":"text","text":" (represented by two equal signs, or "},{"code":"==","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Identical to","type":"text"}]},{"text":" means that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two constants or variables of class type refer to exactly the same class instance."},{"text":" ","type":"text"},{"inlineContent":[{"text":"Equal to","type":"text"}],"type":"emphasis"},{"type":"text","text":" means that"},{"type":"text","text":" "},{"text":"two instances are considered equal or equivalent in value,","type":"text"},{"type":"text","text":" "},{"text":"for some appropriate meaning of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal"}]},{"type":"text","text":", as defined by the type’s designer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define your own custom structures and classes,"},{"type":"text","text":" "},{"type":"text","text":"it’s your responsibility to decide what qualifies as two instances being equal."},{"type":"text","text":" "},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" and "},{"code":"!=","type":"codeVoice"},{"text":" operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators"},{"type":"text","text":"."}]},{"level":3,"text":"Pointers","type":"heading","anchor":"Pointers"},{"inlineContent":[{"text":"If you have experience with C, C++, or Objective-C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you may know that these languages use "},{"type":"emphasis","inlineContent":[{"text":"pointers","type":"text"}]},{"text":" to refer to addresses in memory.","type":"text"},{"type":"text","text":" "},{"text":"A Swift constant or variable that refers to an instance of some reference type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is similar to a pointer in C,"},{"text":" ","type":"text"},{"type":"text","text":"but isn’t a direct pointer to an address in memory,"},{"text":" ","type":"text"},{"text":"and doesn’t require you to write an asterisk (","type":"text"},{"type":"codeVoice","code":"*"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that you are creating a reference."},{"type":"text","text":" "},{"text":"Instead, these references are defined like any other constant or variable in Swift.","type":"text"},{"text":" ","type":"text"},{"text":"The Swift standard library provides pointer and buffer types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that you can use if you need to interact with pointers directly —"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},"metadata":{"title":"Structures and Classes"},"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"title":"Equivalence Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","kind":"section","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators"},"sharedStateStruct":{"identifier":"sharedStateStruct","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateStruct@2x.png"},{"url":"\/images\/sharedStateStruct~dark@2x.png","traits":["2x","dark"]}],"alt":null,"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"abstract":[{"type":"text","text":"Add functionality to an existing type."}],"type":"topic","title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","url":"\/documentation\/the-swift-programming-language\/extensions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"type":"topic","title":"Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","url":"\/documentation\/the-swift-programming-language\/protocols","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"abstract":[{"type":"text","text":"Access the elements of a collection."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","title":"Subscripts","url":"\/documentation\/the-swift-programming-language\/subscripts","role":"article","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","title":"Type Casting","type":"topic","url":"\/documentation\/the-swift-programming-language\/typecasting","kind":"article"},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"title":"Manual Memory Management","url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","titleInlineContent":[{"text":"Manual Memory Management","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","title":"Choosing Between Structures and Classes","titleInlineContent":[{"text":"Choosing Between Structures and Classes","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"abstract":[{"type":"text","text":"Perform asynchronous operations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","title":"Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency","role":"article","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"type":"topic","title":"Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","url":"\/documentation\/the-swift-programming-language\/initialization","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","title":"Methods","url":"\/documentation\/the-swift-programming-language\/methods","abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","title":"Deinitialization","url":"\/documentation\/the-swift-programming-language\/deinitialization","role":"article","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"type":"topic","title":"Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","kind":"article","url":"\/documentation\/the-swift-programming-language\/properties","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","title":"Automatic Reference Counting","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","role":"article","type":"topic","kind":"article"},"sharedStateClass":{"alt":null,"type":"image","identifier":"sharedStateClass","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateClass@2x.png"},{"url":"\/images\/sharedStateClass~dark@2x.png","traits":["2x","dark"]}]}}}