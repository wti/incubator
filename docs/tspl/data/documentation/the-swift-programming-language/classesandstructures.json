{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"title":"Structures and Classes"},"abstract":[{"type":"text","text":"Model custom types that encapsulate data."}],"primaryContentSections":[{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"text":" are general-purpose,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"text":" ","type":"text"},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}],"type":"paragraph"},{"inlineContent":[{"text":"Unlike other programming languages,","type":"text"},{"type":"text","text":" "},{"text":"Swift doesn’t require you to create separate interface and implementation files","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for custom structures and classes."},{"type":"text","text":" "},{"text":"In Swift, you define a structure or class in a single file,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the external interface to that class or structure is"},{"type":"text","text":" "},{"text":"automatically made available for other code to use.","type":"text"}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"inlineContent":[{"text":"object","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"text":" ","type":"text"},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"type":"text","text":"and much of this chapter describes functionality that applies to"},{"type":"text","text":" "},{"type":"text","text":"instances of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"text":" a class or a structure type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because of this, the more general term "},{"type":"emphasis","inlineContent":[{"text":"instance","type":"text"}]},{"text":" is used.","type":"text"}],"type":"paragraph"}]},{"type":"heading","anchor":"Comparing-Structures-and-Classes","level":2,"text":"Comparing Structures and Classes"},{"inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"text":" ","type":"text"},{"type":"text","text":"Both can:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Define properties to store values"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define methods to provide functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define subscripts to provide access to their values using subscript syntax","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Be extended to expand their functionality beyond a default implementation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For more information, see","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Inheritance enables one class to inherit the characteristics of another.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Type casting enables you to check and interpret the type of a class instance at runtime."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Deinitializers enable an instance of a class to free up any resources it has assigned.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}]}]}]},{"inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The additional capabilities that classes support"},{"type":"text","text":" "},{"type":"text","text":"come at the cost of increased complexity."},{"text":" ","type":"text"},{"text":"As a general guideline,","type":"text"},{"type":"text","text":" "},{"text":"prefer structures because they’re easier to reason about,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and use classes when they’re appropriate or necessary."},{"text":" ","type":"text"},{"type":"text","text":"In practice, this means most of the custom types you define"},{"text":" ","type":"text"},{"type":"text","text":"will be structures and enumerations."},{"text":" ","type":"text"},{"text":"For a more detailed comparison,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Classes and actors share many of the same characteristics and behaviors.","type":"text"},{"text":" ","type":"text"},{"text":"For information about actors, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"type":"text","text":"."}]}],"type":"aside","style":"note","name":"Note"},{"type":"heading","level":3,"text":"Definition Syntax","anchor":"Definition-Syntax"},{"inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"type":"text","text":" "},{"type":"text","text":"You introduce structures with the "},{"code":"struct","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"and classes with the ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"Both place their entire definition within a pair of braces:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"],"syntax":"swift"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"type":"text","text":" "},{"text":"you define a new Swift type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Give types "},{"code":"UpperCamelCase","type":"codeVoice"},{"type":"text","text":" names"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SomeClass"},{"text":" here)","type":"text"},{"type":"text","text":" "},{"text":"to match the capitalization of standard Swift types","type":"text"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"Give properties and methods "},{"code":"lowerCamelCase","type":"codeVoice"},{"text":" names","type":"text"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"code":"frameRate","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"incrementCount"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to differentiate them from type names."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"type":"codeListing","code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a new structure called "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"to describe a pixel-based display resolution.","type":"text"},{"type":"text","text":" "},{"text":"This structure has two stored properties called ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"height"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Stored properties are constants or variables that are bundled up and stored","type":"text"},{"text":" ","type":"text"},{"text":"as part of the structure or class.","type":"text"},{"type":"text","text":" "},{"text":"These two properties are inferred to be of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"by setting them to an initial integer value of "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"to describe a specific video mode for video display.","type":"text"},{"text":" ","type":"text"},{"text":"This class has four variable stored properties.","type":"text"},{"type":"text","text":" "},{"text":"The first, ","type":"text"},{"code":"resolution","type":"codeVoice"},{"type":"text","text":", is initialized with a new "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure instance,"},{"text":" ","type":"text"},{"text":"which infers a property type of ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For the other three properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instances will be initialized with"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"interlaced"},{"type":"text","text":" setting of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" (meaning “noninterlaced video”),"},{"type":"text","text":" "},{"type":"text","text":"a playback frame rate of "},{"code":"0.0","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and an optional ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" value called ","type":"text"},{"type":"codeVoice","code":"name"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" property is automatically given a default value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or “no ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" value”, because it’s of an optional type."}],"type":"paragraph"},{"text":"Structure and Class Instances","anchor":"Structure-and-Class-Instances","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure definition and the "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" class definition"},{"type":"text","text":" "},{"type":"text","text":"only describe what a "},{"type":"codeVoice","code":"Resolution"},{"text":" or ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" will look like."},{"type":"text","text":" "},{"text":"They themselves don’t describe a specific resolution or video mode.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To do that, you need to create an instance of the structure or class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax for creating instances is very similar for both structures and classes:"}]},{"code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Structures and classes both use initializer syntax for new instances.","type":"text"},{"text":" ","type":"text"},{"text":"The simplest form of initializer syntax uses the type name of the class or structure","type":"text"},{"type":"text","text":" "},{"text":"followed by empty parentheses, such as ","type":"text"},{"code":"Resolution()","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"VideoMode()"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This creates a new instance of the class or structure,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with any properties initialized to their default values."},{"text":" ","type":"text"},{"type":"text","text":"Class and structure initialization is described in more detail"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Accessing Properties","anchor":"Accessing-Properties","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can access the properties of an instance using ","type":"text"},{"inlineContent":[{"type":"text","text":"dot syntax"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"In dot syntax, you write the property name immediately after the instance name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by a period ("},{"code":".","type":"codeVoice"},{"type":"text","text":"), without any spaces:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"code":"someResolution.width","type":"codeVoice"},{"text":" refers to the ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"someResolution"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and returns its default initial value of "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can drill down into subproperties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"width"},{"text":" property in the ","type":"text"},{"type":"codeVoice","code":"resolution"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"VideoMode"},{"text":":","type":"text"}]},{"code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can also use dot syntax to assign a new value to a variable property:","type":"text"}],"type":"paragraph"},{"code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Memberwise Initializers for Structure Types","anchor":"Memberwise-Initializers-for-Structure-Types","type":"heading"},{"inlineContent":[{"type":"text","text":"All structures have an automatically generated "},{"inlineContent":[{"type":"text","text":"memberwise initializer"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which you can use to initialize the member properties of new structure instances.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initial values for the properties of the new instance"},{"text":" ","type":"text"},{"text":"can be passed to the memberwise initializer by name:","type":"text"}],"type":"paragraph"},{"code":["let vga = Resolution(width: 640, height: 480)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Unlike structures, class instances don’t receive a default memberwise initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initializers are described in more detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Structures-and-Enumerations-Are-Value-Types","level":2,"type":"heading","text":"Structures and Enumerations Are Value Types"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"value type"}],"type":"emphasis"},{"text":" is a type whose value is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"text":" ","type":"text"},{"type":"text","text":"when it’s assigned to a variable or constant,"},{"text":" ","type":"text"},{"text":"or when it’s passed to a function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve actually been using value types extensively throughout the previous chapters."},{"type":"text","text":" "},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"text":" ","type":"text"},{"type":"text","text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —"},{"type":"text","text":" "},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}]},{"type":"paragraph","inlineContent":[{"text":"All structures and enumerations are value types in Swift.","type":"text"},{"type":"text","text":" "},{"text":"This means that any structure and enumeration instances you create —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"type":"text","text":"are always copied when they’re passed around in your code."}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"Collections defined by the Swift standard library"},{"text":" ","type":"text"},{"text":"like arrays, dictionaries, and strings","type":"text"},{"text":" ","type":"text"},{"text":"use an optimization to reduce the performance cost of copying.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instead of making a copy immediately,"},{"text":" ","type":"text"},{"text":"these collections share the memory where the elements are stored","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between the original instance and any copies."},{"type":"text","text":" "},{"text":"If one of the copies of the collection is modified,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"type":"text","text":" "},{"text":"The behavior you see in your code","type":"text"},{"text":" ","type":"text"},{"text":"is always as if a copy took place immediately.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider this example, which uses the "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure from the previous example:"}]},{"type":"codeListing","syntax":"swift","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"]},{"inlineContent":[{"text":"This example declares a constant called ","type":"text"},{"code":"hd","type":"codeVoice"},{"type":"text","text":" "},{"text":"and sets it to a ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" instance initialized with"},{"type":"text","text":" "},{"text":"the width and height of full HD video","type":"text"},{"type":"text","text":" "},{"text":"(1920 pixels wide by 1080 pixels high).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then declares a variable called "},{"type":"codeVoice","code":"cinema"},{"text":" ","type":"text"},{"text":"and sets it to the current value of ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" is a structure,"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"copy"}]},{"type":"text","text":" of the existing instance is made,"},{"type":"text","text":" "},{"text":"and this new copy is assigned to ","type":"text"},{"type":"codeVoice","code":"cinema"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Even though "},{"type":"codeVoice","code":"hd"},{"text":" and ","type":"text"},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" now have the same width and height,"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}]},{"type":"paragraph","inlineContent":[{"text":"Next, the ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"cinema"},{"text":" is amended to be","type":"text"},{"type":"text","text":" "},{"text":"the width of the slightly wider 2K standard used for digital cinema projection","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(2048 pixels wide and 1080 pixels high):"}]},{"code":["cinema.width = 2048"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Checking the "},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"text":" ","type":"text"},{"type":"text","text":"shows that it has indeed changed to be "},{"type":"codeVoice","code":"2048"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""]},{"type":"paragraph","inlineContent":[{"text":"However, the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of the original ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"still has the old value of "},{"type":"codeVoice","code":"1920"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"cinema"},{"text":" was given the current value of ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"values"}]},{"type":"text","text":" stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" were copied into the new "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"The end result was two completely separate instances"},{"type":"text","text":" "},{"type":"text","text":"that contained the same numeric values."},{"text":" ","type":"text"},{"text":"However, because they’re separate instances,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"setting the width of "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"2048"},{"type":"text","text":" "},{"text":"doesn’t affect the width stored in ","type":"text"},{"code":"hd","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"as shown in the figure below:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"sharedStateStruct","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The same behavior applies to enumerations:","type":"text"}]},{"syntax":"swift","code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"rememberedDirection"},{"type":"text","text":" is assigned the value of "},{"code":"currentDirection","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"it’s actually set to a copy of that value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Changing the value of "},{"code":"currentDirection","type":"codeVoice"},{"text":" thereafter doesn’t affect","type":"text"},{"text":" ","type":"text"},{"text":"the copy of the original value that was stored in ","type":"text"},{"code":"rememberedDirection","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Classes-Are-Reference-Types","text":"Classes Are Reference Types","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike value types, "},{"inlineContent":[{"text":"reference types","type":"text"}],"type":"emphasis"},{"type":"text","text":" are "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" copied","type":"text"},{"type":"text","text":" "},{"text":"when they’re assigned to a variable or constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or when they’re passed to a function."},{"text":" ","type":"text"},{"type":"text","text":"Rather than a copy, a reference to the same existing instance is used."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example, using the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class defined above:"}]},{"code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"type":"codeVoice","code":"tenEighty"},{"text":" ","type":"text"},{"type":"text","text":"and sets it to refer to a new instance of the "},{"type":"codeVoice","code":"VideoMode"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The video mode is assigned a copy of the HD resolution of "},{"type":"codeVoice","code":"1920"},{"text":" by ","type":"text"},{"type":"codeVoice","code":"1080"},{"type":"text","text":" from before."},{"text":" ","type":"text"},{"type":"text","text":"It’s set to be interlaced,"},{"type":"text","text":" "},{"type":"text","text":"its name is set to "},{"code":"\"1080i\"","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and its frame rate is set to "},{"type":"codeVoice","code":"25.0"},{"text":" frames per second.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" is assigned to a new constant, called "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the frame rate of "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" is modified:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"]},{"type":"paragraph","inlineContent":[{"text":"Because classes are reference types,","type":"text"},{"text":" ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" actually both refer to the "},{"type":"emphasis","inlineContent":[{"text":"same","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"Effectively, they’re just two different names for the same single instance,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}]},{"inlineContent":[{"identifier":"sharedStateClass","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"frameRate"},{"text":" property of ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"shows that it correctly reports the new frame rate of "},{"code":"30.0","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"from the underlying "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" instance:"}]},{"code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" were far apart in your program’s code,","type":"text"},{"type":"text","text":" "},{"text":"it could be difficult to find all the ways that the video mode is changed.","type":"text"},{"text":" ","type":"text"},{"text":"Wherever you use ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you also have to think about the code that uses "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and vice versa.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast, value types are easier to reason about"},{"text":" ","type":"text"},{"type":"text","text":"because all of the code that interacts with the same value"},{"type":"text","text":" "},{"type":"text","text":"is close together in your source files."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" are declared as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constants","type":"text"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rather than variables."},{"type":"text","text":" "},{"text":"However, you can still change ","type":"text"},{"type":"codeVoice","code":"tenEighty.frameRate"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty.frameRate"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the values of the "},{"type":"codeVoice","code":"tenEighty"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" constants themselves don’t actually change."},{"text":" ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" themselves don’t “store” the "},{"type":"codeVoice","code":"VideoMode"},{"text":" instance —","type":"text"},{"type":"text","text":" "},{"text":"instead, they both ","type":"text"},{"inlineContent":[{"type":"text","text":"refer"}],"type":"emphasis"},{"type":"text","text":" to a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"It’s the "},{"code":"frameRate","type":"codeVoice"},{"text":" property of the underlying ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" that’s changed,"},{"type":"text","text":" "},{"type":"text","text":"not the values of the constant references to that "},{"code":"VideoMode","type":"codeVoice"},{"text":".","type":"text"}]},{"level":3,"anchor":"Identity-Operators","type":"heading","text":"Identity Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"text":"it’s possible for multiple constants and variables to refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same single instance of a class behind the scenes."},{"type":"text","text":" "},{"text":"(The same isn’t true for structures and enumerations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"type":"text","text":" "},{"text":"or passed to a function.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can sometimes be useful to find out whether two constants or variables refer to"},{"type":"text","text":" "},{"type":"text","text":"exactly the same instance of a class."},{"type":"text","text":" "},{"type":"text","text":"To enable this, Swift provides two identity operators:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identical to ("},{"code":"===","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not identical to ("},{"code":"!==","type":"codeVoice"},{"text":")","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use these operators to check whether two constants or variables refer to the same single instance:"}]},{"type":"codeListing","code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""],"syntax":"swift"},{"inlineContent":[{"text":"Note that ","type":"text"},{"inlineContent":[{"type":"text","text":"identical to"}],"type":"emphasis"},{"text":" (represented by three equal signs, or ","type":"text"},{"type":"codeVoice","code":"==="},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t mean the same thing as "},{"type":"emphasis","inlineContent":[{"text":"equal to","type":"text"}]},{"text":" (represented by two equal signs, or ","type":"text"},{"code":"==","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"Identical to","type":"text"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"text":"two constants or variables of class type refer to exactly the same class instance.","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"Equal to","type":"text"}],"type":"emphasis"},{"type":"text","text":" means that"},{"text":" ","type":"text"},{"text":"two instances are considered equal or equivalent in value,","type":"text"},{"text":" ","type":"text"},{"text":"for some appropriate meaning of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal"}]},{"type":"text","text":", as defined by the type’s designer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define your own custom structures and classes,"},{"type":"text","text":" "},{"type":"text","text":"it’s your responsibility to decide what qualifies as two instances being equal."},{"text":" ","type":"text"},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"text":" and ","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"type":"text","text":" "},{"type":"text","text":"is described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","isActive":true},{"type":"text","text":"."}]},{"level":3,"anchor":"Pointers","type":"heading","text":"Pointers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with C, C++, or Objective-C,"},{"type":"text","text":" "},{"type":"text","text":"you may know that these languages use "},{"inlineContent":[{"type":"text","text":"pointers"}],"type":"emphasis"},{"text":" to refer to addresses in memory.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A Swift constant or variable that refers to an instance of some reference type"},{"type":"text","text":" "},{"text":"is similar to a pointer in C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but isn’t a direct pointer to an address in memory,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t require you to write an asterisk ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that you are creating a reference."},{"text":" ","type":"text"},{"text":"Instead, these references are defined like any other constant or variable in Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The Swift standard library provides pointer and buffer types"},{"text":" ","type":"text"},{"type":"text","text":"that you can use if you need to interact with pointers directly —"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","type":"reference"},{"text":".","type":"text"}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","title":"Manual Memory Management","titleInlineContent":[{"text":"Manual Memory Management","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"url":"\/documentation\/the-swift-programming-language\/typecasting","type":"topic","kind":"article","title":"Type Casting","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","role":"article","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"type":"topic","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"abstract":[{"type":"text","text":"Perform asynchronous operations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency","title":"Concurrency","role":"article","kind":"article"},"sharedStateStruct":{"alt":null,"identifier":"sharedStateStruct","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateStruct@2x.png"},{"url":"\/images\/sharedStateStruct~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance","type":"topic","kind":"article","title":"Inheritance","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"url":"\/documentation\/the-swift-programming-language\/properties","type":"topic","kind":"article","title":"Properties","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"sharedStateClass":{"alt":null,"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateClass@2x.png"},{"url":"\/images\/sharedStateClass~dark@2x.png","traits":["2x","dark"]}],"identifier":"sharedStateClass"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"url":"\/documentation\/the-swift-programming-language\/methods","type":"topic","kind":"article","title":"Methods","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"url":"\/documentation\/the-swift-programming-language\/initialization","type":"topic","kind":"article","title":"Initialization","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","type":"topic","title":"Equivalence Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"url":"\/documentation\/the-swift-programming-language\/extensions","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"abstract":[{"type":"text","text":"Access the elements of a collection."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/subscripts","title":"Subscripts","role":"article"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"titleInlineContent":[{"text":"Choosing Between Structures and Classes","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","type":"link","title":"Choosing Between Structures and Classes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization","title":"Deinitialization","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic"}}}