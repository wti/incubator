{"abstract":[{"type":"text","text":"Model custom types that encapsulate data."}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"kind":"article","primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Structures","type":"text"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"text":" are general-purpose,","type":"text"},{"type":"text","text":" "},{"text":"flexible constructs that become the building blocks of your program’s code.","type":"text"},{"text":" ","type":"text"},{"text":"You define properties and methods to add functionality to your structures and classes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}]},{"type":"paragraph","inlineContent":[{"text":"Unlike other programming languages,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t require you to create separate interface and implementation files"},{"type":"text","text":" "},{"text":"for custom structures and classes.","type":"text"},{"type":"text","text":" "},{"text":"In Swift, you define a structure or class in a single file,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the external interface to that class or structure is"},{"type":"text","text":" "},{"type":"text","text":"automatically made available for other code to use."}]},{"name":"Note","content":[{"inlineContent":[{"text":"An instance of a class is traditionally known as an ","type":"text"},{"inlineContent":[{"text":"object","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"type":"text","text":" "},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"type":"text","text":"and much of this chapter describes functionality that applies to"},{"text":" ","type":"text"},{"type":"text","text":"instances of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"text":" a class or a structure type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because of this, the more general term "},{"inlineContent":[{"type":"text","text":"instance"}],"type":"emphasis"},{"text":" is used.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Comparing-Structures-and-Classes","level":2,"text":"Comparing Structures and Classes","type":"heading"},{"inlineContent":[{"text":"Structures and classes in Swift have many things in common.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Both can:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define properties to store values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define methods to provide functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define subscripts to provide access to their values using subscript syntax","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Be extended to expand their functionality beyond a default implementation"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"For more information, see"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"text":", and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Inheritance enables one class to inherit the characteristics of another.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Type casting enables you to check and interpret the type of a class instance at runtime.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Deinitializers enable an instance of a class to free up any resources it has assigned.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The additional capabilities that classes support"},{"text":" ","type":"text"},{"text":"come at the cost of increased complexity.","type":"text"},{"type":"text","text":" "},{"text":"As a general guideline,","type":"text"},{"type":"text","text":" "},{"text":"prefer structures because they’re easier to reason about,","type":"text"},{"text":" ","type":"text"},{"text":"and use classes when they’re appropriate or necessary.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In practice, this means most of the custom types you define"},{"type":"text","text":" "},{"type":"text","text":"will be structures and enumerations."},{"type":"text","text":" "},{"type":"text","text":"For a more detailed comparison,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes and actors share many of the same characteristics and behaviors."},{"text":" ","type":"text"},{"type":"text","text":"For information about actors, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"text":".","type":"text"}]}],"name":"Note","type":"aside"},{"text":"Definition Syntax","level":3,"type":"heading","anchor":"Definition-Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"type":"text","text":" "},{"type":"text","text":"You introduce structures with the "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"and classes with the ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Both place their entire definition within a pair of braces:"}]},{"code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"],"type":"codeListing","syntax":"swift"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"type":"text","text":" "},{"type":"text","text":"you define a new Swift type."},{"text":" ","type":"text"},{"type":"text","text":"Give types "},{"code":"UpperCamelCase","type":"codeVoice"},{"type":"text","text":" names"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"code":"SomeClass","type":"codeVoice"},{"text":" here)","type":"text"},{"type":"text","text":" "},{"text":"to match the capitalization of standard Swift types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"text":", and ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Give properties and methods "},{"code":"lowerCamelCase","type":"codeVoice"},{"text":" names","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to differentiate them from type names.","type":"text"}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The example above defines a new structure called "},{"code":"Resolution","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to describe a pixel-based display resolution."},{"text":" ","type":"text"},{"text":"This structure has two stored properties called ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" and ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Stored properties are constants or variables that are bundled up and stored","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of the structure or class."},{"text":" ","type":"text"},{"type":"text","text":"These two properties are inferred to be of type "},{"code":"Int","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"by setting them to an initial integer value of "},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a specific video mode for video display."},{"type":"text","text":" "},{"type":"text","text":"This class has four variable stored properties."},{"type":"text","text":" "},{"text":"The first, ","type":"text"},{"code":"resolution","type":"codeVoice"},{"type":"text","text":", is initialized with a new "},{"code":"Resolution","type":"codeVoice"},{"text":" structure instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which infers a property type of "},{"type":"codeVoice","code":"Resolution"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For the other three properties,","type":"text"},{"text":" ","type":"text"},{"text":"new ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instances will be initialized with"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"interlaced"},{"text":" setting of ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" (meaning “noninterlaced video”),","type":"text"},{"type":"text","text":" "},{"text":"a playback frame rate of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an optional "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value called "},{"code":"name","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"name"},{"text":" property is automatically given a default value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or “no ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":" value”, because it’s of an optional type."}],"type":"paragraph"},{"level":3,"text":"Structure and Class Instances","type":"heading","anchor":"Structure-and-Class-Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure definition and the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class definition"},{"text":" ","type":"text"},{"type":"text","text":"only describe what a "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"VideoMode"},{"text":" will look like.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They themselves don’t describe a specific resolution or video mode."},{"type":"text","text":" "},{"type":"text","text":"To do that, you need to create an instance of the structure or class."}]},{"inlineContent":[{"text":"The syntax for creating instances is very similar for both structures and classes:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes both use initializer syntax for new instances."},{"type":"text","text":" "},{"type":"text","text":"The simplest form of initializer syntax uses the type name of the class or structure"},{"text":" ","type":"text"},{"type":"text","text":"followed by empty parentheses, such as "},{"code":"Resolution()","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"VideoMode()"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This creates a new instance of the class or structure,"},{"text":" ","type":"text"},{"type":"text","text":"with any properties initialized to their default values."},{"text":" ","type":"text"},{"text":"Class and structure initialization is described in more detail","type":"text"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"text":".","type":"text"}]},{"text":"Accessing Properties","type":"heading","anchor":"Accessing-Properties","level":3},{"inlineContent":[{"text":"You can access the properties of an instance using ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"dot syntax"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In dot syntax, you write the property name immediately after the instance name,"},{"text":" ","type":"text"},{"text":"separated by a period (","type":"text"},{"code":".","type":"codeVoice"},{"type":"text","text":"), without any spaces:"}],"type":"paragraph"},{"type":"codeListing","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"someResolution.width"},{"text":" refers to the ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"someResolution","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and returns its default initial value of "},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can drill down into subproperties,"},{"type":"text","text":" "},{"type":"text","text":"such as the "},{"code":"width","type":"codeVoice"},{"type":"text","text":" property in the "},{"code":"resolution","type":"codeVoice"},{"text":" property of a ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can also use dot syntax to assign a new value to a variable property:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""]},{"level":3,"type":"heading","text":"Memberwise Initializers for Structure Types","anchor":"Memberwise-Initializers-for-Structure-Types"},{"inlineContent":[{"type":"text","text":"All structures have an automatically generated "},{"inlineContent":[{"type":"text","text":"memberwise initializer"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which you can use to initialize the member properties of new structure instances."},{"type":"text","text":" "},{"type":"text","text":"Initial values for the properties of the new instance"},{"type":"text","text":" "},{"text":"can be passed to the memberwise initializer by name:","type":"text"}],"type":"paragraph"},{"code":["let vga = Resolution(width: 640, height: 480)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Unlike structures, class instances don’t receive a default memberwise initializer."},{"text":" ","type":"text"},{"type":"text","text":"Initializers are described in more detail in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Structures and Enumerations Are Value Types","anchor":"Structures-and-Enumerations-Are-Value-Types","level":2},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"value type","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a type whose value is "},{"inlineContent":[{"type":"text","text":"copied"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"when it’s assigned to a variable or constant,","type":"text"},{"type":"text","text":" "},{"text":"or when it’s passed to a function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You’ve actually been using value types extensively throughout the previous chapters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"text":" ","type":"text"},{"text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}]},{"inlineContent":[{"type":"text","text":"All structures and enumerations are value types in Swift."},{"text":" ","type":"text"},{"type":"text","text":"This means that any structure and enumeration instances you create —"},{"type":"text","text":" "},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"type":"text","text":"are always copied when they’re passed around in your code."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collections defined by the Swift standard library"},{"text":" ","type":"text"},{"text":"like arrays, dictionaries, and strings","type":"text"},{"type":"text","text":" "},{"text":"use an optimization to reduce the performance cost of copying.","type":"text"},{"text":" ","type":"text"},{"text":"Instead of making a copy immediately,","type":"text"},{"type":"text","text":" "},{"text":"these collections share the memory where the elements are stored","type":"text"},{"text":" ","type":"text"},{"text":"between the original instance and any copies.","type":"text"},{"text":" ","type":"text"},{"text":"If one of the copies of the collection is modified,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"text":" ","type":"text"},{"text":"The behavior you see in your code","type":"text"},{"type":"text","text":" "},{"text":"is always as if a copy took place immediately.","type":"text"}]}],"style":"note","name":"Note"},{"inlineContent":[{"text":"Consider this example, which uses the ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure from the previous example:"}],"type":"paragraph"},{"code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a constant called "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" "},{"type":"text","text":"and sets it to a "},{"code":"Resolution","type":"codeVoice"},{"text":" instance initialized with","type":"text"},{"text":" ","type":"text"},{"text":"the width and height of full HD video","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(1920 pixels wide by 1080 pixels high)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then declares a variable called "},{"code":"cinema","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and sets it to the current value of "},{"code":"hd","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"code":"Resolution","type":"codeVoice"},{"text":" is a structure,","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"text":" of the existing instance is made,","type":"text"},{"text":" ","type":"text"},{"text":"and this new copy is assigned to ","type":"text"},{"code":"cinema","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Even though "},{"type":"codeVoice","code":"hd"},{"text":" and ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" now have the same width and height,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}]},{"inlineContent":[{"text":"Next, the ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"cinema"},{"text":" is amended to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the width of the slightly wider 2K standard used for digital cinema projection"},{"type":"text","text":" "},{"text":"(2048 pixels wide and 1080 pixels high):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["cinema.width = 2048"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"code":"cinema","type":"codeVoice"},{"text":" ","type":"text"},{"text":"shows that it has indeed changed to be ","type":"text"},{"type":"codeVoice","code":"2048"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""]},{"inlineContent":[{"type":"text","text":"However, the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of the original "},{"type":"codeVoice","code":"hd"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"still has the old value of "},{"type":"codeVoice","code":"1920"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" was given the current value of "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"values","type":"text"}]},{"type":"text","text":" stored in "},{"code":"hd","type":"codeVoice"},{"type":"text","text":" were copied into the new "},{"code":"cinema","type":"codeVoice"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The end result was two completely separate instances"},{"type":"text","text":" "},{"type":"text","text":"that contained the same numeric values."},{"text":" ","type":"text"},{"text":"However, because they’re separate instances,","type":"text"},{"type":"text","text":" "},{"text":"setting the width of ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"2048"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t affect the width stored in "},{"type":"codeVoice","code":"hd"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below:"}]},{"type":"paragraph","inlineContent":[{"identifier":"sharedStateStruct","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same behavior applies to enumerations:"}]},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"rememberedDirection"},{"text":" is assigned the value of ","type":"text"},{"type":"codeVoice","code":"currentDirection"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"it’s actually set to a copy of that value."},{"text":" ","type":"text"},{"text":"Changing the value of ","type":"text"},{"code":"currentDirection","type":"codeVoice"},{"text":" thereafter doesn’t affect","type":"text"},{"text":" ","type":"text"},{"text":"the copy of the original value that was stored in ","type":"text"},{"type":"codeVoice","code":"rememberedDirection"},{"text":".","type":"text"}]},{"type":"heading","anchor":"Classes-Are-Reference-Types","level":2,"text":"Classes Are Reference Types"},{"type":"paragraph","inlineContent":[{"text":"Unlike value types, ","type":"text"},{"inlineContent":[{"text":"reference types","type":"text"}],"type":"emphasis"},{"type":"text","text":" are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" copied","type":"text"},{"type":"text","text":" "},{"text":"when they’re assigned to a variable or constant,","type":"text"},{"text":" ","type":"text"},{"text":"or when they’re passed to a function.","type":"text"},{"text":" ","type":"text"},{"text":"Rather than a copy, a reference to the same existing instance is used.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here’s an example, using the "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class defined above:"}],"type":"paragraph"},{"type":"codeListing","code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"code":"tenEighty","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and sets it to refer to a new instance of the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"The video mode is assigned a copy of the HD resolution of "},{"code":"1920","type":"codeVoice"},{"type":"text","text":" by "},{"code":"1080","type":"codeVoice"},{"text":" from before.","type":"text"},{"type":"text","text":" "},{"text":"It’s set to be interlaced,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its name is set to "},{"type":"codeVoice","code":"\"1080i\""},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and its frame rate is set to "},{"type":"codeVoice","code":"25.0"},{"text":" frames per second.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" is assigned to a new constant, called "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the frame rate of "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" is modified:"}],"type":"paragraph"},{"syntax":"swift","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"],"type":"codeListing"},{"inlineContent":[{"text":"Because classes are reference types,","type":"text"},{"type":"text","text":" "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" actually both refer to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"Effectively, they’re just two different names for the same single instance,"},{"text":" ","type":"text"},{"type":"text","text":"as shown in the figure below:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"sharedStateClass","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Checking the ","type":"text"},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"type":"text","text":"shows that it correctly reports the new frame rate of "},{"code":"30.0","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"from the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance:"}]},{"code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"tenEighty"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" were far apart in your program’s code,","type":"text"},{"text":" ","type":"text"},{"text":"it could be difficult to find all the ways that the video mode is changed.","type":"text"},{"text":" ","type":"text"},{"text":"Wherever you use ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"you also have to think about the code that uses ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and vice versa.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast, value types are easier to reason about"},{"text":" ","type":"text"},{"type":"text","text":"because all of the code that interacts with the same value"},{"type":"text","text":" "},{"type":"text","text":"is close together in your source files."}]},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" are declared as "},{"type":"emphasis","inlineContent":[{"text":"constants","type":"text"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rather than variables."},{"type":"text","text":" "},{"type":"text","text":"However, you can still change "},{"code":"tenEighty.frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"code":"alsoTenEighty.frameRate","type":"codeVoice"},{"text":" because","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the values of the "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" constants themselves don’t actually change.","type":"text"},{"text":" ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" themselves don’t “store” the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance —"},{"text":" ","type":"text"},{"type":"text","text":"instead, they both "},{"inlineContent":[{"type":"text","text":"refer"}],"type":"emphasis"},{"text":" to a ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" instance behind the scenes.","type":"text"},{"type":"text","text":" "},{"text":"It’s the ","type":"text"},{"type":"codeVoice","code":"frameRate"},{"text":" property of the underlying ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" that’s changed,"},{"type":"text","text":" "},{"text":"not the values of the constant references to that ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":"."}]},{"text":"Identity Operators","anchor":"Identity-Operators","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"text":" ","type":"text"},{"type":"text","text":"it’s possible for multiple constants and variables to refer to"},{"text":" ","type":"text"},{"type":"text","text":"the same single instance of a class behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"(The same isn’t true for structures and enumerations,"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"type":"text","text":" "},{"type":"text","text":"or passed to a function.)"}]},{"inlineContent":[{"text":"It can sometimes be useful to find out whether two constants or variables refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exactly the same instance of a class."},{"type":"text","text":" "},{"type":"text","text":"To enable this, Swift provides two identity operators:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Identical to ("},{"code":"===","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Not identical to ("},{"type":"codeVoice","code":"!=="},{"type":"text","text":")"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Use these operators to check whether two constants or variables refer to the same single instance:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""]},{"inlineContent":[{"type":"text","text":"Note that "},{"inlineContent":[{"type":"text","text":"identical to"}],"type":"emphasis"},{"text":" (represented by three equal signs, or ","type":"text"},{"code":"===","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"doesn’t mean the same thing as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"equal to","type":"text"}]},{"type":"text","text":" (represented by two equal signs, or "},{"type":"codeVoice","code":"=="},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Identical to"}]},{"text":" means that","type":"text"},{"type":"text","text":" "},{"text":"two constants or variables of class type refer to exactly the same class instance.","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"Equal to","type":"text"}]},{"text":" means that","type":"text"},{"type":"text","text":" "},{"text":"two instances are considered equal or equivalent in value,","type":"text"},{"type":"text","text":" "},{"text":"for some appropriate meaning of ","type":"text"},{"inlineContent":[{"type":"text","text":"equal"}],"type":"emphasis"},{"type":"text","text":", as defined by the type’s designer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When you define your own custom structures and classes,","type":"text"},{"type":"text","text":" "},{"text":"it’s your responsibility to decide what qualifies as two instances being equal.","type":"text"},{"type":"text","text":" "},{"text":"The process of defining your own implementations of the ","type":"text"},{"code":"==","type":"codeVoice"},{"type":"text","text":" and "},{"code":"!=","type":"codeVoice"},{"text":" operators","type":"text"},{"text":" ","type":"text"},{"text":"is described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators"},{"text":".","type":"text"}]},{"text":"Pointers","level":3,"type":"heading","anchor":"Pointers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with C, C++, or Objective-C,"},{"text":" ","type":"text"},{"text":"you may know that these languages use ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pointers","type":"text"}]},{"type":"text","text":" to refer to addresses in memory."},{"type":"text","text":" "},{"type":"text","text":"A Swift constant or variable that refers to an instance of some reference type"},{"type":"text","text":" "},{"type":"text","text":"is similar to a pointer in C,"},{"text":" ","type":"text"},{"text":"but isn’t a direct pointer to an address in memory,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and doesn’t require you to write an asterisk ("},{"type":"codeVoice","code":"*"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"to indicate that you are creating a reference.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, these references are defined like any other constant or variable in Swift."},{"type":"text","text":" "},{"type":"text","text":"The Swift standard library provides pointer and buffer types"},{"type":"text","text":" "},{"text":"that you can use if you need to interact with pointers directly —","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"},{"text":".","type":"text"}]}],"kind":"content"}],"metadata":{"title":"Structures and Classes"},"references":{"sharedStateClass":{"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateClass@2x.png"},{"traits":["2x","dark"],"url":"\/images\/sharedStateClass~dark@2x.png"}],"identifier":"sharedStateClass","alt":null},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","title":"Choosing Between Structures and Classes","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","titleInlineContent":[{"type":"text","text":"Choosing Between Structures and Classes"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"role":"article","title":"Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"abstract":[{"text":"Access stored and computed values that are part of an instance or type.","type":"text"}],"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","title":"Properties","url":"\/documentation\/the-swift-programming-language\/properties","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"role":"article","title":"Concurrency","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"abstract":[{"text":"Define and call functions that are part of an instance or type.","type":"text"}],"role":"article","title":"Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","url":"\/documentation\/the-swift-programming-language\/methods","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"abstract":[{"text":"Determine a value’s runtime type and give it more specific type information.","type":"text"}],"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","title":"Type Casting","url":"\/documentation\/the-swift-programming-language\/typecasting","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","abstract":[],"title":"Equivalence Operators","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","type":"topic"},"sharedStateStruct":{"identifier":"sharedStateStruct","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateStruct@2x.png"},{"traits":["2x","dark"],"url":"\/images\/sharedStateStruct~dark@2x.png"}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/subscripts","abstract":[{"text":"Access the elements of a collection.","type":"text"}],"title":"Subscripts","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/inheritance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","title":"Manual Memory Management","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","titleInlineContent":[{"type":"text","text":"Manual Memory Management"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","title":"Automatic Reference Counting","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","role":"article","kind":"article","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"kind":"article","type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/deinitialization","abstract":[{"text":"Release resources that require custom cleanup.","type":"text"}],"title":"Deinitialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"}}}