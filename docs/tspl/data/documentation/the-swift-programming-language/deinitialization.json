{"metadata":{"title":"Deinitialization"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated."},{"type":"text","text":" "},{"text":"You write deinitializers with the ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":" keyword,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"Deinitializers are only available on class types.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"How Deinitialization Works","anchor":"How-Deinitialization-Works","level":2},{"type":"paragraph","inlineContent":[{"text":"Swift automatically deallocates your instances when they’re no longer needed,","type":"text"},{"type":"text","text":" "},{"text":"to free up resources.","type":"text"},{"type":"text","text":" "},{"text":"Swift handles the memory management of instances through","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"text":"automatic reference counting","type":"text"}],"type":"emphasis"},{"text":" (","type":"text"},{"inlineContent":[{"type":"text","text":"ARC"}],"type":"emphasis"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Typically you don’t need to perform manual cleanup when your instances are deallocated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, when you are working with your own resources,"},{"text":" ","type":"text"},{"text":"you might need to perform some additional cleanup yourself.","type":"text"},{"type":"text","text":" "},{"text":"For example, if you create a custom class to open a file and write some data to it,","type":"text"},{"text":" ","type":"text"},{"text":"you might need to close the file before the class instance is deallocated.","type":"text"}]},{"inlineContent":[{"text":"Class definitions can have at most one deinitializer per class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The deinitializer doesn’t take any parameters"},{"type":"text","text":" "},{"type":"text","text":"and is written without parentheses:"}],"type":"paragraph"},{"code":["deinit {","    \/\/ perform the deinitialization","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Deinitializers are called automatically, just before instance deallocation takes place."},{"text":" ","type":"text"},{"text":"You aren’t allowed to call a deinitializer yourself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Superclass deinitializers are inherited by their subclasses,"},{"text":" ","type":"text"},{"type":"text","text":"and the superclass deinitializer is called automatically at the end of"},{"text":" ","type":"text"},{"type":"text","text":"a subclass deinitializer implementation."},{"text":" ","type":"text"},{"text":"Superclass deinitializers are always called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even if a subclass doesn’t provide its own deinitializer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because an instance isn’t deallocated until after its deinitializer is called,"},{"text":" ","type":"text"},{"text":"a deinitializer can access all properties of the instance it’s called on","type":"text"},{"text":" ","type":"text"},{"text":"and can modify its behavior based on those properties","type":"text"},{"text":" ","type":"text"},{"text":"(such as looking up the name of a file that needs to be closed).","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Deinitializers-in-Action","text":"Deinitializers in Action","type":"heading"},{"inlineContent":[{"text":"Here’s an example of a deinitializer in action.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This example defines two new types, "},{"type":"codeVoice","code":"Bank"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Player"},{"type":"text","text":", for a simple game."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Bank","type":"codeVoice"},{"text":" class manages a made-up currency,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can never have more than 10,000 coins in circulation."},{"text":" ","type":"text"},{"text":"There can only ever be one ","type":"text"},{"type":"codeVoice","code":"Bank"},{"text":" in the game,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"code":"Bank","type":"codeVoice"},{"type":"text","text":" is implemented as a class with type properties and methods"},{"type":"text","text":" "},{"type":"text","text":"to store and manage its current state:"}],"type":"paragraph"},{"syntax":"swift","code":["class Bank {","    static var coinsInBank = 10_000","    static func distribute(coins numberOfCoinsRequested: Int) -> Int {","        let numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)","        coinsInBank -= numberOfCoinsToVend","        return numberOfCoinsToVend","    }","    static func receive(coins: Int) {","        coinsInBank += coins","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"Bank"},{"type":"text","text":" keeps track of the current number of coins it holds with its "},{"type":"codeVoice","code":"coinsInBank"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It also offers two methods — "},{"type":"codeVoice","code":"distribute(coins:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"receive(coins:)"},{"type":"text","text":" —"},{"type":"text","text":" "},{"text":"to handle the distribution and collection of coins.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"distribute(coins:)"},{"text":" method checks that there are enough coins in the bank before distributing them.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If there aren’t enough coins,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bank"},{"text":" returns a smaller number than the number that was requested","type":"text"},{"text":" ","type":"text"},{"text":"(and returns zero if no coins are left in the bank).","type":"text"},{"type":"text","text":" "},{"text":"It returns an integer value to indicate the actual number of coins that were provided.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"receive(coins:)"},{"text":" method simply adds the received number of coins back into the bank’s coin store.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Player","type":"codeVoice"},{"type":"text","text":" class describes a player in the game."},{"text":" ","type":"text"},{"text":"Each player has a certain number of coins stored in their purse at any time.","type":"text"},{"type":"text","text":" "},{"text":"This is represented by the player’s ","type":"text"},{"type":"codeVoice","code":"coinsInPurse"},{"text":" property:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Player {","    var coinsInPurse: Int","    init(coins: Int) {","        coinsInPurse = Bank.distribute(coins: coins)","    }","    func win(coins: Int) {","        coinsInPurse += Bank.distribute(coins: coins)","    }","    deinit {","        Bank.receive(coins: coinsInPurse)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Each ","type":"text"},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance is initialized with a starting allowance of"},{"type":"text","text":" "},{"type":"text","text":"a specified number of coins from the bank during initialization,"},{"text":" ","type":"text"},{"type":"text","text":"although a "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance may receive fewer than that number"},{"text":" ","type":"text"},{"text":"if not enough coins are available.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Player"},{"text":" class defines a ","type":"text"},{"type":"codeVoice","code":"win(coins:)"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"which retrieves a certain number of coins from the bank","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and adds them to the player’s purse."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Player","type":"codeVoice"},{"type":"text","text":" class also implements a deinitializer,"},{"type":"text","text":" "},{"text":"which is called just before a ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" instance is deallocated.","type":"text"},{"type":"text","text":" "},{"text":"Here, the deinitializer simply returns all of the player’s coins to the bank:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var playerOne: Player? = Player(coins: 100)","print(\"A new player has joined the game with \\(playerOne!.coinsInPurse) coins\")","\/\/ Prints \"A new player has joined the game with 100 coins\"","print(\"There are now \\(Bank.coinsInBank) coins left in the bank\")","\/\/ Prints \"There are now 9900 coins left in the bank\""]},{"inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"Player"},{"text":" instance is created, with a request for 100 coins if they’re available.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This "},{"code":"Player","type":"codeVoice"},{"type":"text","text":" instance is stored in an optional "},{"code":"Player","type":"codeVoice"},{"type":"text","text":" variable called "},{"code":"playerOne","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"An optional variable is used here, because players can leave the game at any point."},{"text":" ","type":"text"},{"type":"text","text":"The optional lets you track whether there’s currently a player in the game."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"playerOne"},{"text":" is an optional, it’s qualified with an exclamation point (","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"when its "},{"type":"codeVoice","code":"coinsInPurse"},{"type":"text","text":" property is accessed to print its default number of coins,"},{"text":" ","type":"text"},{"text":"and whenever its ","type":"text"},{"code":"win(coins:)","type":"codeVoice"},{"type":"text","text":" method is called:"}]},{"syntax":"swift","code":["playerOne!.win(coins: 2_000)","print(\"PlayerOne won 2000 coins & now has \\(playerOne!.coinsInPurse) coins\")","\/\/ Prints \"PlayerOne won 2000 coins & now has 2100 coins\"","print(\"The bank now only has \\(Bank.coinsInBank) coins left\")","\/\/ Prints \"The bank now only has 7900 coins left\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here, the player has won 2,000 coins."},{"text":" ","type":"text"},{"type":"text","text":"The player’s purse now contains 2,100 coins,"},{"type":"text","text":" "},{"type":"text","text":"and the bank has only 7,900 coins left."}],"type":"paragraph"},{"type":"codeListing","code":["playerOne = nil","print(\"PlayerOne has left the game\")","\/\/ Prints \"PlayerOne has left the game\"","print(\"The bank now has \\(Bank.coinsInBank) coins\")","\/\/ Prints \"The bank now has 10000 coins\""],"syntax":"swift"},{"inlineContent":[{"text":"The player has now left the game.","type":"text"},{"text":" ","type":"text"},{"text":"This is indicated by setting the optional ","type":"text"},{"type":"codeVoice","code":"playerOne"},{"type":"text","text":" variable to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"meaning “no ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" instance.”","type":"text"},{"text":" ","type":"text"},{"text":"At the point that this happens,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"playerOne"},{"type":"text","text":" variable’s reference to the "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance is broken."},{"type":"text","text":" "},{"text":"No other properties or variables are still referring to the ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so it’s deallocated in order to free up its memory."},{"type":"text","text":" "},{"text":"Just before this happens, its deinitializer is called automatically,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and its coins are returned to the bank."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"abstract":[],"role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","title":"Automatic Reference Counting","type":"topic","role":"article","kind":"article"}}}