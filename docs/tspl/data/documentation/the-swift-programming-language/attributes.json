{"sections":[],"kind":"article","primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"text":" ","type":"text"},{"type":"text","text":"those that apply to declarations and those that apply to types."},{"text":" ","type":"text"},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that,","type":"text"},{"type":"text","text":" "},{"text":"although the function returns a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the compiler shouldn’t generate a warning if the return value is unused."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You specify an attribute by writing the "},{"code":"@","type":"codeVoice"},{"text":" symbol followed by the attribute’s name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and any arguments that the attribute accepts:"}]},{"type":"codeListing","syntax":"swift","code":["@<#attribute name#>","@<#attribute name#>(<#attribute arguments#>)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some declaration attributes accept arguments"},{"type":"text","text":" "},{"type":"text","text":"that specify more information about the attribute"},{"text":" ","type":"text"},{"text":"and how it applies to a particular declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These "},{"inlineContent":[{"type":"text","text":"attribute arguments"}],"type":"emphasis"},{"text":" are enclosed in parentheses,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and their format is defined by the attribute they belong to."}]},{"type":"paragraph","inlineContent":[{"text":"Attached macros and property wrappers also use attribute syntax.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about how macros expand,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about property wrappers,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper"},{"type":"text","text":"."}]},{"anchor":"Declaration-Attributes","type":"heading","level":2,"text":"Declaration Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply a declaration attribute to declarations only."}]},{"anchor":"attached","level":3,"type":"heading","text":"attached"},{"type":"paragraph","inlineContent":[{"text":"Apply the ","type":"text"},{"type":"codeVoice","code":"attached"},{"type":"text","text":" attribute to a macro declaration."},{"type":"text","text":" "},{"type":"text","text":"The arguments to this attribute indicate the macro’s role."},{"type":"text","text":" "},{"text":"For a macro that has multiple roles,","type":"text"},{"text":" ","type":"text"},{"text":"apply the ","type":"text"},{"type":"codeVoice","code":"attached"},{"type":"text","text":" macro multiple times, once for each role."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first argument to this attribute"},{"text":" ","type":"text"},{"type":"text","text":"indicates the macros role:"}]},{"items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"peer"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"PeerMacro","type":"codeVoice"},{"text":" protocol. These macros produce new declarations in the same scope as the declaration that the macro is attached to. For example, applying a peer macro to a method of a structure can define additional methods and properties on that structure.","type":"text"}]}]},"term":{"inlineContent":[{"text":"Peer macros","type":"text"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Write ","type":"text"},{"type":"codeVoice","code":"member"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"MemberMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros produce new declarations that are members of the type or extension that the macro is attached to. For example, applying a member macro to a structure declaration can define additional methods and properties on that structure."}],"type":"paragraph"}]},"term":{"inlineContent":[{"text":"Member macros","type":"text"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"memberAttribute"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"MemberAttributeMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros add attributes to members of the type or extension that the macro is attached to."}],"type":"paragraph"}]},"term":{"inlineContent":[{"text":"Member attribute","type":"text"}]}},{"term":{"inlineContent":[{"type":"text","text":"Accessor macros"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"accessor"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"code":"AccessorMacro","type":"codeVoice"},{"text":" protocol. These macros add accessors to the stored property they’re attached to, turning it into a computed property.","type":"text"}]}]}},{"definition":{"content":[{"inlineContent":[{"text":"Write ","type":"text"},{"code":"extension","type":"codeVoice"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"type":"codeVoice","code":"ExtensionMacro"},{"type":"text","text":" protocol. These macros can add protocol conformance, a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause, and new declarations that are members of the type the macro is attached to. If the macro adds protocol conformances, include the "},{"code":"conformances:","type":"codeVoice"},{"type":"text","text":" argument and specify those protocols. The conformance list contains protocol names, type aliases that refer to conformance list items, or protocol compositions of conformance list items. An extension macro on a nested type expands to an extension at the top level of that file. You can’t write an extension macro on an extension, a type alias, or a type that’s nested inside a function, or use an extension macro to add an extension that has a peer macro."}],"type":"paragraph"}]},"term":{"inlineContent":[{"text":"Extension macros","type":"text"}]}}],"type":"termList"},{"type":"paragraph","inlineContent":[{"text":"The peer, member, and accessor macro roles require a ","type":"text"},{"code":"names:","type":"codeVoice"},{"text":" argument,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"listing the names of the symbols that the macro generates."},{"text":" ","type":"text"},{"type":"text","text":"The extension macro role also requires a "},{"code":"names:","type":"codeVoice"},{"text":" argument","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if the macro adds declarations inside the extension."},{"type":"text","text":" "},{"text":"When a macro declaration includes the ","type":"text"},{"code":"names:","type":"codeVoice"},{"type":"text","text":" argument,"},{"text":" ","type":"text"},{"text":"the macro implementation must generate","type":"text"},{"type":"text","text":" "},{"text":"only symbol with names that match that list.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"That said,"},{"type":"text","text":" "},{"type":"text","text":"a macro need not generate a symbol for every listed name."},{"type":"text","text":" "},{"type":"text","text":"The value for that argument is a list of one or more of the following:"}]},{"items":[{"content":[{"inlineContent":[{"code":"named(<#name#>)","type":"codeVoice"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"name","type":"text"}]},{"text":" is that fixed symbol name,","type":"text"},{"text":" ","type":"text"},{"text":"for a name that’s known in advance.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"overloaded"},{"text":" ","type":"text"},{"type":"text","text":"for a name that’s the same as an existing symbol."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"prefixed(<#prefix#>)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"prefix","type":"text"}]},{"type":"text","text":" is prepended to the symbol name,"},{"type":"text","text":" "},{"type":"text","text":"for a name that starts with a fixed string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"suffixed(<#suffix#>"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"inlineContent":[{"text":"suffix","type":"text"}],"type":"emphasis"},{"type":"text","text":" is appended to the symbol name,"},{"text":" ","type":"text"},{"type":"text","text":"for a name that ends with a fixed string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"arbitrary"},{"type":"text","text":" "},{"type":"text","text":"for a name that can’t be determined until macro expansion."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"As a special case,","type":"text"},{"text":" ","type":"text"},{"text":"you can write ","type":"text"},{"type":"codeVoice","code":"prefixed($)"},{"type":"text","text":" "},{"type":"text","text":"for a macro that behaves similar to a property wrapper."}]},{"text":"available","anchor":"available","level":3,"type":"heading"},{"inlineContent":[{"text":"Apply this attribute to indicate a declaration’s life cycle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"relative to certain Swift language versions"},{"type":"text","text":" "},{"type":"text","text":"or certain platforms and operating system versions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute always appears"},{"type":"text","text":" "},{"text":"with a list of two or more comma-separated attribute arguments.","type":"text"},{"type":"text","text":" "},{"text":"These arguments begin with one of the following platform or language names:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"iOS"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"iOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macOS"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"macOSApplicationExtension"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"macCatalyst","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"macCatalystApplicationExtension","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"watchOS","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"watchOSApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tvOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"tvOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"visionOS","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"swift","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"You can also use an asterisk (","type":"text"},{"code":"*","type":"codeVoice"},{"text":") to indicate the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"availability of the declaration on all of the platform names listed above."},{"type":"text","text":" "},{"text":"An ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"that specifies availability using a Swift version number","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t use the asterisk."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The remaining arguments can appear in any order"},{"type":"text","text":" "},{"text":"and specify additional information about the declaration’s life cycle,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including important milestones."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"unavailable","type":"codeVoice"},{"text":" argument indicates that the declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isn’t available on the specified platform."},{"text":" ","type":"text"},{"text":"This argument can’t be used when specifying Swift version availability.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"introduced"},{"text":" argument indicates the first version","type":"text"},{"text":" ","type":"text"},{"text":"of the specified platform or language in which the declaration was introduced.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["introduced: <#version number#>"]},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"version number"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers,"},{"text":" ","type":"text"},{"type":"text","text":"separated by periods."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"deprecated"},{"type":"text","text":" argument indicates the first version"},{"text":" ","type":"text"},{"type":"text","text":"of the specified platform or language in which the declaration was deprecated."},{"type":"text","text":" "},{"text":"It has the following form:","type":"text"}]},{"code":["deprecated: <#version number#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The optional "},{"inlineContent":[{"text":"version number","type":"text"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers,"},{"text":" ","type":"text"},{"type":"text","text":"separated by periods."},{"text":" ","type":"text"},{"type":"text","text":"Omitting the version number indicates that the declaration is currently deprecated,"},{"type":"text","text":" "},{"type":"text","text":"without giving any information about when the deprecation occurred."},{"text":" ","type":"text"},{"type":"text","text":"If you omit the version number, omit the colon ("},{"type":"codeVoice","code":":"},{"text":") as well.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"obsoleted","type":"codeVoice"},{"type":"text","text":" argument indicates the first version"},{"text":" ","type":"text"},{"text":"of the specified platform or language in which the declaration was obsoleted.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When a declaration is obsoleted,"},{"text":" ","type":"text"},{"text":"it’s removed from the specified platform or language and can no longer be used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It has the following form:"}]},{"code":["obsoleted: <#version number#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"version number","type":"text"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers, separated by periods."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"message","type":"codeVoice"},{"text":" argument provides a textual message that the compiler displays","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when emitting a warning or error about the use of a deprecated or obsoleted declaration."},{"type":"text","text":" "},{"text":"It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["message: <#message#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"message"}]},{"type":"text","text":" consists of a string literal."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"renamed","type":"codeVoice"},{"type":"text","text":" argument provides a textual message"},{"type":"text","text":" "},{"type":"text","text":"that indicates the new name for a declaration that’s been renamed."},{"text":" ","type":"text"},{"type":"text","text":"The compiler displays the new name"},{"text":" ","type":"text"},{"type":"text","text":"when emitting an error about the use of a renamed declaration."},{"type":"text","text":" "},{"text":"It has the following form:","type":"text"}],"type":"paragraph"},{"code":["renamed: <#new name#>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"new name"}],"type":"emphasis"},{"text":" consists of a string literal.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply the "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"renamed"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unavailable"},{"type":"text","text":" arguments"},{"type":"text","text":" "},{"type":"text","text":"to a type alias declaration, as shown below,"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that the name of a declaration changed"},{"type":"text","text":" "},{"type":"text","text":"between releases of a framework or library."},{"type":"text","text":" "},{"type":"text","text":"This combination results in a compile-time error"},{"text":" ","type":"text"},{"text":"that the declaration has been renamed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ First release","protocol MyProtocol {","    \/\/ protocol definition","}"]},{"type":"codeListing","code":["\/\/ Subsequent release renames MyProtocol","protocol MyRenamedProtocol {","    \/\/ protocol definition","}","","@available(*, unavailable, renamed: \"MyRenamedProtocol\")","typealias MyProtocol = MyRenamedProtocol"],"syntax":"swift"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply multiple "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attributes on a single declaration"},{"text":" ","type":"text"},{"type":"text","text":"to specify the declaration’s availability on different platforms"},{"type":"text","text":" "},{"type":"text","text":"and different versions of Swift."},{"type":"text","text":" "},{"text":"The declaration that the ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute applies to"},{"type":"text","text":" "},{"text":"is ignored if the attribute specifies","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a platform or language version that doesn’t match the current target."},{"text":" ","type":"text"},{"type":"text","text":"If you use multiple "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes,"},{"type":"text","text":" "},{"type":"text","text":"the effective availability is the combination of"},{"type":"text","text":" "},{"type":"text","text":"the platform and Swift availabilities."}]},{"type":"paragraph","inlineContent":[{"text":"If an ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute only specifies an ","type":"text"},{"type":"codeVoice","code":"introduced"},{"text":" argument","type":"text"},{"type":"text","text":" "},{"text":"in addition to a platform or language name argument,","type":"text"},{"type":"text","text":" "},{"text":"you can use the following shorthand syntax instead:","type":"text"}]},{"code":["@available(<#platform name#> <#version number#>, *)","@available(swift <#version number#>)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The shorthand syntax for ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concisely expresses availability for multiple platforms."},{"type":"text","text":" "},{"text":"Although the two forms are functionally equivalent,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the shorthand form is preferred whenever possible."}],"type":"paragraph"},{"syntax":"swift","code":["@available(iOS 10.0, macOS 10.12, *)","class MyClass {","    \/\/ class definition","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"available"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"that specifies availability using a Swift version number","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t additionally specify a declaration’s platform availability."},{"type":"text","text":" "},{"text":"Instead, use separate ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attributes to specify a Swift","type":"text"},{"type":"text","text":" "},{"text":"version availability and one or more platform availabilities.","type":"text"}],"type":"paragraph"},{"code":["@available(swift 3.0.2)","@available(macOS 10.12, *)","struct MyStruct {","    \/\/ struct definition","}"],"syntax":"swift","type":"codeListing"},{"text":"backDeployed","level":3,"type":"heading","anchor":"backDeployed"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a function, method, subscript, or computed property","type":"text"},{"text":" ","type":"text"},{"text":"to include a copy of the symbol’s implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in programs that call or access the symbol."},{"text":" ","type":"text"},{"type":"text","text":"You use this attribute to annotate symbols that ship as part of a platform,"},{"text":" ","type":"text"},{"type":"text","text":"like the APIs that are included with an operating system."},{"text":" ","type":"text"},{"text":"This attribute marks symbols that can be made available retroactively","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by including a copy of their implementation in programs that access them."},{"type":"text","text":" "},{"type":"text","text":"Copying the implementation is also known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"emitting into the client"}]},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute takes a "},{"type":"codeVoice","code":"before:"},{"text":" argument,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specifying the first version of platforms that provide this symbol."},{"type":"text","text":" "},{"type":"text","text":"These platform versions have the same meaning"},{"text":" ","type":"text"},{"type":"text","text":"as the platform version you specify for the "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"text":"Unlike the ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"the list can’t contain an asterisk ("},{"code":"*","type":"codeVoice"},{"text":") to refer to all versions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, consider the following code:"}]},{"code":["@available(iOS 16, *)","@backDeployed(before: iOS 17)","func someFunction() { \/* ... *\/ }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"type":"text","text":"the iOS SDK provides "},{"type":"codeVoice","code":"someFunction()"},{"text":" starting in iOS 17.","type":"text"},{"text":" ","type":"text"},{"text":"In addition,","type":"text"},{"text":" ","type":"text"},{"text":"the SDK makes ","type":"text"},{"code":"someFunction()","type":"codeVoice"},{"type":"text","text":" available on iOS 16 using back deployment."}]},{"inlineContent":[{"text":"When compiling code that calls this function,","type":"text"},{"text":" ","type":"text"},{"text":"Swift inserts a layer of indirection that finds the function’s implementation.","type":"text"},{"text":" ","type":"text"},{"text":"If the code is run using a version of the SDK that includes this function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the SDK’s implementation is used."},{"text":" ","type":"text"},{"type":"text","text":"Otherwise, the copy included in the caller is used."},{"text":" ","type":"text"},{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"code":"someFunction()","type":"codeVoice"},{"type":"text","text":" uses the implementation from the SDK"},{"text":" ","type":"text"},{"type":"text","text":"when running on iOS 17 or later,"},{"type":"text","text":" "},{"text":"and when running on iOS 16","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it uses the copy of "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" that’s included in the caller."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When the caller’s minimum deployment target"},{"type":"text","text":" "},{"text":"is the same as or greater than","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the first version of the SDK that includes the symbol,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler can optimize away the runtime check"},{"type":"text","text":" "},{"type":"text","text":"and call the SDK’s implementation directly."},{"text":" ","type":"text"},{"text":"In this case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you access the back-deployed symbol directly,"},{"type":"text","text":" "},{"type":"text","text":"the compiler can also omit"},{"text":" ","type":"text"},{"type":"text","text":"the copy of the symbol’s implementation from the client."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"Functions, methods, subscripts, and computed properties"},{"type":"text","text":" "},{"type":"text","text":"that meet the following criteria can be back deployed:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The declaration is "},{"type":"codeVoice","code":"public"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"@usableFromInline"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"For class instance methods and class type methods,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the method is marked "},{"type":"codeVoice","code":"final"},{"type":"text","text":" and isn’t marked "},{"code":"@objc","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The implementation satisfies the requirements for an inlinable function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"heading","anchor":"discardableResult","text":"discardableResult","level":3},{"inlineContent":[{"text":"Apply this attribute to a function or method declaration","type":"text"},{"type":"text","text":" "},{"text":"to suppress the compiler warning","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the function or method that returns a value"},{"type":"text","text":" "},{"text":"is called without using its result.","type":"text"}],"type":"paragraph"},{"text":"dynamicCallable","level":3,"anchor":"dynamicCallable","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"type":"text","text":" "},{"text":"to treat instances of the type as callable functions.","type":"text"},{"type":"text","text":" "},{"text":"The type must implement either a ","type":"text"},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"or both."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call an instance of a dynamically callable type"},{"type":"text","text":" "},{"text":"as if it’s a function that takes any number of arguments.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@dynamicCallable","struct TelephoneExchange {","    func dynamicallyCall(withArguments phoneNumber: [Int]) {","        if phoneNumber == [4, 1, 1] {","            print(\"Get Swift help on forums.swift.org\")","        } else {","            print(\"Unrecognized number\")","        }","    }","}","","let dial = TelephoneExchange()","","\/\/ Use a dynamic method call.","dial(4, 1, 1)","\/\/ Prints \"Get Swift help on forums.swift.org\"","","dial(8, 6, 7, 5, 3, 0, 9)","\/\/ Prints \"Unrecognized number\"","","\/\/ Call the underlying method directly.","dial.dynamicallyCall(withArguments: [4, 1, 1])"]},{"inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"protocol — like "},{"code":"[Int]","type":"codeVoice"},{"text":" in the example above.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The return type can be any type."}],"type":"paragraph"},{"inlineContent":[{"text":"You can include labels in a dynamic method call","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you implement the "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@dynamicCallable","struct Repeater {","    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {","        return pairs","            .map { label, count in","                repeatElement(label, count: count).joined(separator: \" \")","            }","            .joined(separator: \"\\n\")","    }","}","","let repeatLabels = Repeater()","print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))","\/\/ a","\/\/ b b","\/\/ c c c","\/\/ b b","\/\/ a"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The declaration of the "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"must have a single parameter that conforms to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},{"type":"text","text":" "},{"type":"text","text":"protocol,"},{"type":"text","text":" "},{"text":"and the return type can be any type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The parameter’s "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"must be"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The previous example uses "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"as the parameter type"},{"text":" ","type":"text"},{"type":"text","text":"so that callers can include duplicate parameter labels —"},{"type":"text","text":" "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" appear multiple times in the call to "},{"code":"repeat","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you implement both ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall"},{"text":" methods,","type":"text"},{"type":"text","text":" "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"type":"text","text":" is called"},{"text":" ","type":"text"},{"type":"text","text":"when the method call includes keyword arguments."},{"type":"text","text":" "},{"type":"text","text":"In all other cases, "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"text":" is called.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can only call a dynamically callable instance"},{"type":"text","text":" "},{"type":"text","text":"with arguments and a return value that match the types you specify"},{"type":"text","text":" "},{"text":"in one of your ","type":"text"},{"code":"dynamicallyCall","type":"codeVoice"},{"text":" method implementations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The call in the following example doesn’t compile because"},{"type":"text","text":" "},{"type":"text","text":"there isn’t an implementation of "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"text":" ","type":"text"},{"type":"text","text":"that takes "},{"type":"codeVoice","code":"KeyValuePairs<String, String>"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["repeatLabels(a: \"four\") \/\/ Error"],"type":"codeListing"},{"anchor":"dynamicMemberLookup","text":"dynamicMemberLookup","level":3,"type":"heading"},{"inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration, or protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to enable members to be looked up by name at runtime."},{"type":"text","text":" "},{"type":"text","text":"The type must implement a "},{"code":"subscript(dynamicMember:)","type":"codeVoice"},{"type":"text","text":" subscript."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In an explicit member expression,"},{"text":" ","type":"text"},{"text":"if there isn’t a corresponding declaration for the named member,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the expression is understood as a call to"},{"text":" ","type":"text"},{"text":"the type’s ","type":"text"},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" subscript,"},{"text":" ","type":"text"},{"text":"passing information about the member as the argument.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The subscript can accept a parameter that’s either a key path or a member name;"},{"text":" ","type":"text"},{"text":"if you implement both subscripts,","type":"text"},{"type":"text","text":" "},{"text":"the subscript that takes key path argument is used.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An implementation of "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"text":" ","type":"text"},{"text":"can accept key paths using an argument of type","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It can accept member names using an argument of a type that conforms to the"},{"type":"text","text":" "},{"overridingTitle":"ExpressibleByStringLiteral","isActive":true,"overridingTitleInlineContent":[{"code":"ExpressibleByStringLiteral","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","type":"reference"},{"type":"text","text":" protocol —"},{"type":"text","text":" "},{"type":"text","text":"in most cases, "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The subscript’s return type can be any type."}]},{"inlineContent":[{"type":"text","text":"Dynamic member lookup by member name"},{"text":" ","type":"text"},{"text":"can be used to create a wrapper type around data","type":"text"},{"text":" ","type":"text"},{"text":"that can’t be type checked at compile time,","type":"text"},{"type":"text","text":" "},{"text":"such as when bridging data from other languages into Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["@dynamicMemberLookup","struct DynamicStruct {","    let dictionary = [\"someDynamicMember\": 325,","                      \"someOtherMember\": 787]","    subscript(dynamicMember member: String) -> Int {","        return dictionary[member] ?? 1054","    }","}","let s = DynamicStruct()","","\/\/ Use dynamic member lookup.","let dynamic = s.someDynamicMember","print(dynamic)","\/\/ Prints \"325\"","","\/\/ Call the underlying subscript directly.","let equivalent = s[dynamicMember: \"someDynamicMember\"]","print(dynamic == equivalent)","\/\/ Prints \"true\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookup by key path"},{"text":" ","type":"text"},{"type":"text","text":"can be used to implement a wrapper type"},{"type":"text","text":" "},{"text":"in a way that supports compile-time type checking.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["struct Point { var x, y: Int }","","@dynamicMemberLookup","struct PassthroughWrapper<Value> {","    var value: Value","    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {","        get { return value[keyPath: member] }","    }","}","","let point = Point(x: 381, y: 431)","let wrapper = PassthroughWrapper(value: point)","print(wrapper.x)"],"type":"codeListing"},{"level":3,"text":"freestanding","anchor":"freestanding","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Apply the ","type":"text"},{"code":"freestanding","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to the declaration of a freestanding macro.","type":"text"}]},{"type":"heading","level":3,"anchor":"frozen","text":"frozen"},{"inlineContent":[{"text":"Apply this attribute to a structure or enumeration declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to restrict the kinds of changes you can make to the type."},{"type":"text","text":" "},{"type":"text","text":"This attribute is allowed only when compiling in library evolution mode."},{"type":"text","text":" "},{"text":"Future versions of the library can’t change the declaration","type":"text"},{"type":"text","text":" "},{"text":"by adding, removing, or reordering","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an enumeration’s cases"},{"text":" ","type":"text"},{"text":"or a structure’s stored instance properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These changes are allowed on nonfrozen types,"},{"type":"text","text":" "},{"text":"but they break ABI compatibility for frozen types.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"When the compiler isn’t in library evolution mode,"},{"text":" ","type":"text"},{"text":"all structures and enumerations are implicitly frozen,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and this attribute is ignored."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"In library evolution mode,"},{"text":" ","type":"text"},{"type":"text","text":"code that interacts with members of nonfrozen structures and enumerations"},{"type":"text","text":" "},{"text":"is compiled in a way that allows it to continue working without recompiling","type":"text"},{"type":"text","text":" "},{"text":"even if a future version of the library","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"adds, removes, or reorders some of that type’s members."},{"text":" ","type":"text"},{"type":"text","text":"The compiler makes this possible using techniques like"},{"type":"text","text":" "},{"text":"looking up information at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and adding a layer of indirection."},{"text":" ","type":"text"},{"text":"Marking a structure or enumeration as frozen","type":"text"},{"type":"text","text":" "},{"text":"gives up this flexibility to gain performance:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Future versions of the library can make only limited changes to the type,"},{"type":"text","text":" "},{"text":"but the compiler can make additional optimizations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in code that interacts with the type’s members."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Frozen types,","type":"text"},{"text":" ","type":"text"},{"text":"the types of the stored properties of frozen structures,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the associated values of frozen enumeration cases"},{"type":"text","text":" "},{"text":"must be public or marked with the ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"text":"The properties of a frozen structure can’t have property observers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and expressions that provide the initial value for stored instance properties"},{"type":"text","text":" "},{"text":"must follow the same restrictions as inlinable functions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"To enable library evolution mode on the command line,"},{"type":"text","text":" "},{"text":"pass the ","type":"text"},{"code":"-enable-library-evolution","type":"codeVoice"},{"text":" option to the Swift compiler.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To enable it in Xcode,"},{"type":"text","text":" "},{"text":"set the “Build Libraries for Distribution” build setting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"BUILD_LIBRARY_FOR_DISTRIBUTION"},{"text":") to Yes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A switch statement over a frozen enumeration doesn’t require a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" case,"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Including a ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" or "},{"code":"@unknown default","type":"codeVoice"},{"type":"text","text":" case"},{"type":"text","text":" "},{"text":"when switching over a frozen enumeration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produces a warning because that code is never executed."}]},{"text":"GKInspectable","type":"heading","level":3,"anchor":"GKInspectable"},{"inlineContent":[{"type":"text","text":"Apply this attribute to expose a custom GameplayKit component property"},{"text":" ","type":"text"},{"type":"text","text":"to the SpriteKit editor UI."},{"type":"text","text":" "},{"type":"text","text":"Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}],"type":"paragraph"},{"text":"inlinable","level":3,"type":"heading","anchor":"inlinable"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"text":" ","type":"text"},{"type":"text","text":"function, method, computed property, subscript,"},{"type":"text","text":" "},{"text":"convenience initializer, or deinitializer declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to expose that declaration’s implementation"},{"text":" ","type":"text"},{"text":"as part of the module’s public interface.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The compiler is allowed to replace calls to an inlinable symbol"},{"type":"text","text":" "},{"type":"text","text":"with a copy of the symbol’s implementation at the call site."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inlinable code"},{"text":" ","type":"text"},{"text":"can interact with ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":" symbols declared in any module,"},{"type":"text","text":" "},{"type":"text","text":"and it can interact with "},{"type":"codeVoice","code":"internal"},{"text":" symbols","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"declared in the same module"},{"type":"text","text":" "},{"text":"that are marked with the ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"type":"text","text":"Inlinable code can’t interact with "},{"code":"private","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"text":" symbols.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This attribute can’t be applied"},{"type":"text","text":" "},{"type":"text","text":"to declarations that are nested inside functions"},{"text":" ","type":"text"},{"text":"or to ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" or "},{"type":"codeVoice","code":"private"},{"type":"text","text":" declarations."},{"type":"text","text":" "},{"text":"Functions and closures that are defined inside an inlinable function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are implicitly inlinable,"},{"type":"text","text":" "},{"text":"even though they can’t be marked with this attribute.","type":"text"}],"type":"paragraph"},{"text":"main","anchor":"main","level":3,"type":"heading"},{"inlineContent":[{"text":"Apply this attribute to a structure, class, or enumeration declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it contains the top-level entry point for program flow."},{"text":" ","type":"text"},{"type":"text","text":"The type must provide a "},{"type":"codeVoice","code":"main"},{"type":"text","text":" type function"},{"text":" ","type":"text"},{"text":"that doesn’t take any arguments and returns ","type":"text"},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["@main","struct MyTopLevel {","    static func main() {","        \/\/ Top-level code goes here","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Another way to describe the requirements of the ","type":"text"},{"type":"codeVoice","code":"main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"is that the type you write this attribute on"},{"type":"text","text":" "},{"type":"text","text":"must satisfy the same requirements"},{"type":"text","text":" "},{"text":"as types that conform to the following hypothetical protocol:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["protocol ProvidesMain {","    static func main() throws","}"]},{"inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can contain at most one top-level entry point,"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"nonobjc","text":"nonobjc","type":"heading"},{"inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"method, property, subscript, or initializer declaration"},{"text":" ","type":"text"},{"text":"to suppress an implicit ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute tells the compiler"},{"text":" ","type":"text"},{"type":"text","text":"to make the declaration unavailable in Objective-C code,"},{"text":" ","type":"text"},{"text":"even though it’s possible to represent it in Objective-C.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Applying this attribute to an extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has the same effect as"},{"type":"text","text":" "},{"type":"text","text":"applying it to every member of that extension"},{"text":" ","type":"text"},{"text":"that isn’t explicitly marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You use the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute to resolve circularity"},{"type":"text","text":" "},{"type":"text","text":"for bridging methods in a class marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"text":"and to allow overloading of methods and initializers","type":"text"},{"text":" ","type":"text"},{"text":"in a class marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}]},{"type":"paragraph","inlineContent":[{"text":"A method marked with the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"can’t override a method marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, a method marked with the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"can override a method marked with the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"Similarly, a method marked with the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"can’t satisfy a protocol requirement"},{"type":"text","text":" "},{"text":"for a method marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"text":"NSApplicationMain","level":3,"type":"heading","anchor":"NSApplicationMain"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it’s the application delegate."},{"type":"text","text":" "},{"text":"Using this attribute is equivalent to calling the","type":"text"},{"text":" ","type":"text"},{"code":"NSApplicationMain(_:_:)","type":"codeVoice"},{"type":"text","text":" function."}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t use this attribute,","type":"text"},{"type":"text","text":" "},{"text":"supply a ","type":"text"},{"code":"main.swift","type":"codeVoice"},{"type":"text","text":" file with code at the top level"},{"type":"text","text":" "},{"type":"text","text":"that calls the "},{"code":"NSApplicationMain(_:_:)","type":"codeVoice"},{"text":" function as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import AppKit","NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"]},{"inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable"},{"text":" ","type":"text"},{"type":"text","text":"can contain at most one top-level entry point,"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"type":"heading","text":"NSCopying","anchor":"NSCopying"},{"inlineContent":[{"text":"Apply this attribute to a stored variable property of a class.","type":"text"},{"text":" ","type":"text"},{"text":"This attribute causes the property’s setter to be synthesized with a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"of the property’s value — returned by the "},{"type":"codeVoice","code":"copyWithZone(_:)"},{"type":"text","text":" method — instead of the"},{"type":"text","text":" "},{"type":"text","text":"value of the property itself."},{"text":" ","type":"text"},{"type":"text","text":"The type of the property must conform to the "},{"code":"NSCopying","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" attribute behaves in a way similar to the Objective-C "},{"type":"codeVoice","code":"copy"},{"type":"text","text":" "},{"type":"text","text":"property attribute."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"NSManaged","text":"NSManaged"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to an instance method or stored variable property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a class that inherits from "},{"code":"NSManagedObject","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that Core Data dynamically provides its implementation at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on the associated entity description."},{"text":" ","type":"text"},{"type":"text","text":"For a property marked with the "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"Core Data also provides the storage at runtime."},{"type":"text","text":" "},{"text":"Applying this attribute also implies the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"heading","text":"objc","level":3,"anchor":"objc"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to any declaration that can be represented in Objective-C —","type":"text"},{"text":" ","type":"text"},{"text":"for example, nonnested classes, protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"nongeneric enumerations (constrained to integer raw-value types),"},{"type":"text","text":" "},{"text":"properties and methods (including getters and setters) of classes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocols and optional members of a protocol,"},{"text":" ","type":"text"},{"type":"text","text":"initializers, and subscripts."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute tells the compiler"},{"type":"text","text":" "},{"text":"that a declaration is available to use in Objective-C code.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Applying this attribute to an extension"},{"type":"text","text":" "},{"type":"text","text":"has the same effect as"},{"text":" ","type":"text"},{"type":"text","text":"applying it to every member of that extension"},{"text":" ","type":"text"},{"text":"that isn’t explicitly marked with the ","type":"text"},{"code":"nonobjc","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"inlineContent":[{"text":"The compiler implicitly adds the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to subclasses of any class defined in Objective-C."},{"text":" ","type":"text"},{"text":"However, the subclass must not be generic,","type":"text"},{"type":"text","text":" "},{"text":"and must not inherit from any generic classes.","type":"text"},{"text":" ","type":"text"},{"text":"You can explicitly add the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to a subclass that meets these criteria,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to specify its Objective-C name as discussed below."},{"text":" ","type":"text"},{"text":"Protocols that are marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute can’t inherit"},{"type":"text","text":" "},{"text":"from protocols that aren’t marked with this attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"text":" attribute is also implicitly added in the following cases:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration is an override in a subclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the superclass’s declaration has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The declaration satisfies a requirement"},{"type":"text","text":" "},{"type":"text","text":"from a protocol that has the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration has the "},{"code":"IBAction","type":"codeVoice"},{"type":"text","text":", "},{"code":"IBSegueAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"type":"text","text":", "},{"code":"IBInspectable","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":", or "},{"type":"codeVoice","code":"GKInspectable"},{"text":" attribute.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"If you apply the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute to an enumeration,"},{"text":" ","type":"text"},{"type":"text","text":"each enumeration case is exposed to Objective-C code"},{"text":" ","type":"text"},{"type":"text","text":"as the concatenation of the enumeration name and the case name."},{"text":" ","type":"text"},{"type":"text","text":"The first letter of the case name is capitalized."},{"text":" ","type":"text"},{"type":"text","text":"For example, a case named "},{"code":"venus","type":"codeVoice"},{"text":" in a Swift ","type":"text"},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration"},{"type":"text","text":" "},{"type":"text","text":"is exposed to Objective-C code as a case named "},{"type":"codeVoice","code":"PlanetVenus"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute optionally accepts a single attribute argument,"},{"text":" ","type":"text"},{"text":"which consists of an identifier.","type":"text"},{"text":" ","type":"text"},{"text":"The identifier specifies the name to be exposed to Objective-C","type":"text"},{"type":"text","text":" "},{"text":"for the entity that the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute applies to."},{"text":" ","type":"text"},{"type":"text","text":"You can use this argument to name"},{"text":" ","type":"text"},{"type":"text","text":"classes, enumerations, enumeration cases, protocols,"},{"text":" ","type":"text"},{"text":"methods, getters, setters, and initializers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you specify the Objective-C name"},{"type":"text","text":" "},{"type":"text","text":"for a class, protocol, or enumeration,"},{"type":"text","text":" "},{"type":"text","text":"include a three-letter prefix on the name,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The example below exposes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the getter for the "},{"type":"codeVoice","code":"enabled"},{"text":" property of the ","type":"text"},{"type":"codeVoice","code":"ExampleClass"},{"text":" ","type":"text"},{"text":"to Objective-C code as ","type":"text"},{"type":"codeVoice","code":"isEnabled"},{"type":"text","text":" "},{"text":"rather than just as the name of the property itself.","type":"text"}],"type":"paragraph"},{"code":["class ExampleClass: NSObject {","    @objc var enabled: Bool {","        @objc(isEnabled) get {","            \/\/ Return the appropriate value","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c"},{"type":"text","text":"."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The argument to the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"can also change the runtime name for that declaration.","type":"text"},{"type":"text","text":" "},{"text":"You use the runtime name when calling functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that interact with the Objective-C runtime,"},{"type":"text","text":" "},{"text":"like ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and when specifying class names in an app’s Info.plist file."},{"type":"text","text":" "},{"text":"If you specify a name by passing an argument,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that name is used as the name in Objective-C code"},{"type":"text","text":" "},{"type":"text","text":"and as the runtime name."},{"type":"text","text":" "},{"text":"If you omit the argument,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the name used in Objective-C code matches the name in Swift code,"},{"text":" ","type":"text"},{"type":"text","text":"and the runtime name follows the normal Swift compiler convention"},{"type":"text","text":" "},{"type":"text","text":"of name mangling."}]}],"name":"Note"},{"type":"heading","level":3,"anchor":"objcMembers","text":"objcMembers"},{"inlineContent":[{"text":"Apply this attribute to a class declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to implicitly apply the "},{"code":"objc","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"to all Objective-C compatible members of the class,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its extensions, its subclasses, and all of the extensions of its subclasses."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Most code should use the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute instead,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to expose only the declarations that are needed."},{"type":"text","text":" "},{"type":"text","text":"If you need to expose many declarations,"},{"type":"text","text":" "},{"type":"text","text":"you can group them in an extension that has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"objcMembers"},{"type":"text","text":" attribute is a convenience for"},{"type":"text","text":" "},{"text":"libraries that make heavy use of","type":"text"},{"type":"text","text":" "},{"text":"the introspection facilities of the Objective-C runtime.","type":"text"},{"type":"text","text":" "},{"text":"Applying the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute when it isn’t needed"},{"text":" ","type":"text"},{"type":"text","text":"can increase your binary size and adversely affect performance."}]},{"text":"propertyWrapper","level":3,"anchor":"propertyWrapper","type":"heading"},{"inlineContent":[{"text":"Apply this attribute to a class, structure, or enumeration declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to use that type as a property wrapper."},{"text":" ","type":"text"},{"type":"text","text":"When you apply this attribute to a type,"},{"type":"text","text":" "},{"text":"you create a custom attribute with the same name as the type.","type":"text"},{"type":"text","text":" "},{"text":"Apply that new attribute to a property of a class, structure, or enumeration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the property through an instance of the wrapper type;"},{"type":"text","text":" "},{"text":"apply the attribute to a local stored variable declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the variable the same way."},{"text":" ","type":"text"},{"type":"text","text":"Computed variables, global variables, and constants can’t use property wrappers."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The wrapper must define a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" instance property."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"wrapped value"}],"type":"emphasis"},{"text":" of the property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is the value that the getter and setter for this property expose."},{"text":" ","type":"text"},{"type":"text","text":"In most cases, "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" is a computed value,"},{"type":"text","text":" "},{"text":"but it can be a stored value instead.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The wrapper defines and manages"},{"type":"text","text":" "},{"type":"text","text":"any underlying storage needed by its wrapped value."},{"text":" ","type":"text"},{"type":"text","text":"The compiler synthesizes storage for the instance of the wrapper type"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with an underscore ("},{"code":"_","type":"codeVoice"},{"type":"text","text":") —"},{"text":" ","type":"text"},{"text":"for example, the wrapper for ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" is stored as ","type":"text"},{"type":"codeVoice","code":"_someProperty"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The synthesized storage for the wrapper has an access control level of ","type":"text"},{"type":"codeVoice","code":"private"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property that has a property wrapper"},{"text":" ","type":"text"},{"type":"text","text":"can include "},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" blocks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but it can’t override the compiler-synthesized "},{"type":"codeVoice","code":"get"},{"text":" or ","type":"text"},{"code":"set","type":"codeVoice"},{"type":"text","text":" blocks."}]},{"type":"paragraph","inlineContent":[{"text":"Swift provides two forms of syntactic sugar","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for initialization of a property wrapper."},{"type":"text","text":" "},{"text":"You can use assignment syntax in the definition of a wrapped value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to pass the expression on the right-hand side of the assignment"},{"type":"text","text":" "},{"type":"text","text":"as the argument to the "},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"text":"of the property wrapper’s initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can also provide arguments to the attribute"},{"text":" ","type":"text"},{"text":"when you apply it to a property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and those arguments are passed to the property wrapper’s initializer."},{"text":" ","type":"text"},{"type":"text","text":"For example, in the code below,"},{"type":"text","text":" "},{"code":"SomeStruct","type":"codeVoice"},{"type":"text","text":" calls each of the initializers that "},{"code":"SomeWrapper","type":"codeVoice"},{"text":" defines.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct SomeWrapper {","    var wrappedValue: Int","    var someValue: Double","    init() {","        self.wrappedValue = 100","        self.someValue = 12.3","    }","    init(wrappedValue: Int) {","        self.wrappedValue = wrappedValue","        self.someValue = 45.6","    }","    init(wrappedValue value: Int, custom: Double) {","        self.wrappedValue = value","        self.someValue = custom","    }","}","","struct SomeStruct {","    \/\/ Uses init()","    @SomeWrapper var a: Int","","    \/\/ Uses init(wrappedValue:)","    @SomeWrapper var b = 10","","    \/\/ Both use init(wrappedValue:custom:)","    @SomeWrapper(custom: 98.7) var c = 30","    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"projected value","type":"text"}],"type":"emphasis"},{"text":" for a wrapped property is a second value","type":"text"},{"type":"text","text":" "},{"text":"that a property wrapper can use to expose additional functionality.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The author of a property wrapper type"},{"type":"text","text":" "},{"text":"is responsible for determining the meaning of its projected value","type":"text"},{"text":" ","type":"text"},{"text":"and defining the interface that the projected value exposes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To project a value from a property wrapper,"},{"type":"text","text":" "},{"text":"define a ","type":"text"},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":" instance property on the wrapper type."},{"text":" ","type":"text"},{"type":"text","text":"The compiler synthesizes an identifier for the projected value"},{"text":" ","type":"text"},{"text":"by prefixing the name of the wrapped property with a dollar sign (","type":"text"},{"code":"$","type":"codeVoice"},{"text":") —","type":"text"},{"text":" ","type":"text"},{"text":"for example, the projected value for ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" is ","type":"text"},{"code":"$someProperty","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The projected value has the same access control level"},{"type":"text","text":" "},{"text":"as the original wrapped property.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@propertyWrapper","struct WrapperWithProjection {","    var wrappedValue: Int","    var projectedValue: SomeProjection {","        return SomeProjection(wrapper: self)","    }","}","struct SomeProjection {","    var wrapper: WrapperWithProjection","}","","struct SomeStruct {","    @WrapperWithProjection var x = 123","}","let s = SomeStruct()","s.x           \/\/ Int value","s.$x          \/\/ SomeProjection value","s.$x.wrapper  \/\/ WrapperWithProjection value"],"syntax":"swift"},{"level":3,"anchor":"resultBuilder","type":"heading","text":"resultBuilder"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to use that type as a result builder."},{"type":"text","text":" "},{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"result builder"}]},{"type":"text","text":" is a type"},{"type":"text","text":" "},{"type":"text","text":"that builds a nested data structure step by step."},{"text":" ","type":"text"},{"text":"You use result builders to implement a domain-specific language (DSL)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for creating nested data structures in a natural, declarative way."},{"text":" ","type":"text"},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"resultBuilder"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders"},{"text":".","type":"text"}]},{"anchor":"Result-Building-Methods","type":"heading","text":"Result-Building Methods","level":4},{"inlineContent":[{"text":"A result builder implements static methods described below.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because all of the result builder’s functionality"},{"text":" ","type":"text"},{"type":"text","text":"is exposed through static methods,"},{"text":" ","type":"text"},{"type":"text","text":"you don’t ever initialize an instance of that type."},{"text":" ","type":"text"},{"text":"A result builder must implement either the ","type":"text"},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"or both the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" methods."},{"text":" ","type":"text"},{"text":"The other methods —","type":"text"},{"text":" ","type":"text"},{"text":"which enable additional functionality in the DSL —","type":"text"},{"type":"text","text":" "},{"text":"are optional.","type":"text"},{"text":" ","type":"text"},{"text":"The declaration of a result builder type","type":"text"},{"text":" ","type":"text"},{"text":"doesn’t actually have to include any protocol conformance.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The description of the static methods uses three types as placeholders."},{"type":"text","text":" "},{"text":"The type ","type":"text"},{"type":"codeVoice","code":"Expression"},{"type":"text","text":" is a placeholder"},{"text":" ","type":"text"},{"type":"text","text":"for the type of the result builder’s input,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Component"},{"type":"text","text":" is a placeholder for the type of a partial result,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"FinalResult","type":"codeVoice"},{"text":" is a placeholder","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the type of the result that the result builder produces."},{"type":"text","text":" "},{"text":"You replace these types with the actual types that your result builder uses.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If your result-building methods"},{"type":"text","text":" "},{"type":"text","text":"don’t specify a type for "},{"type":"codeVoice","code":"Expression"},{"text":" or ","type":"text"},{"code":"FinalResult","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"they default to being the same as ","type":"text"},{"code":"Component","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The block-building methods are as follows:"}],"type":"paragraph"},{"type":"termList","items":[{"term":{"inlineContent":[{"code":"static func buildBlock(_ components: Component...) -> Component","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combines an array of partial results into a single partial result."}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result component from the first component. Implement both this method and "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":", this approach reduces the need for generic overloads that handle different numbers of arguments."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildPartialBlock(first: Component) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Builds a partial result component by combining an accumulated component with a new component. Implement both this method and ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"code":"buildBlock(_:)","type":"codeVoice"},{"type":"text","text":", this approach reduces the need for generic overloads that handle different numbers of arguments."}]}]},"term":{"inlineContent":[{"code":"static func buildPartialBlock(accumulated: Component, next: Component) -> Component","type":"codeVoice"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A result builder can implement all three of the block-building methods listed above;"},{"text":" ","type":"text"},{"type":"text","text":"in that case, availability determines which method is called."},{"type":"text","text":" "},{"type":"text","text":"By default, Swift calls the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"text":" ","type":"text"},{"text":"methods. To make Swift call ","type":"text"},{"type":"codeVoice","code":"buildBlock(_:)"},{"text":" instead,","type":"text"},{"text":" ","type":"text"},{"text":"mark the enclosing declaration as being available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before the availability you write on "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The additional result-building methods are as follows:","type":"text"}]},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildOptional(_ component: Component?) -> Component"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result from a partial result that can be ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Implement this method to support "},{"type":"codeVoice","code":"if"},{"text":" statements that don’t include an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildEither(first: Component) -> Component"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result whose value varies depending on some condition. Implement both this method and ","type":"text"},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" to support ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements and "},{"code":"if","type":"codeVoice"},{"text":" statements that include an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildEither(second: Component) -> Component","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Builds a partial result whose value varies depending on some condition. Implement both this method and ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"text":" to support ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statements and ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statements that include an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" clause.","type":"text"}]}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result from an array of partial results. Implement this method to support "},{"code":"for","type":"codeVoice"},{"text":" loops.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildArray(_ components: [Component]) -> Component"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an expression. You can implement this method to perform preprocessing — for example, converting expressions to an internal type — or to provide additional information for type inference at use sites."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildExpression(_ expression: Expression) -> Component"}]}},{"term":{"inlineContent":[{"code":"static func buildFinalResult(_ component: Component) -> FinalResult","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildLimitedAvailability(_ component: Component) -> Component"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the code below defines a simple result builder"},{"text":" ","type":"text"},{"text":"that builds an array of integers.","type":"text"},{"type":"text","text":" "},{"text":"This code defines ","type":"text"},{"type":"codeVoice","code":"Component"},{"type":"text","text":" and "},{"code":"Expression","type":"codeVoice"},{"text":" as type aliases,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make it easier to match the examples below to the list of methods above."}]},{"syntax":"swift","type":"codeListing","code":["@resultBuilder","struct ArrayBuilder {","    typealias Component = [Int]","    typealias Expression = Int","    static func buildExpression(_ element: Expression) -> Component {","        return [element]","    }","    static func buildOptional(_ component: Component?) -> Component {","        guard let component = component else { return [] }","        return component","    }","    static func buildEither(first component: Component) -> Component {","        return component","    }","    static func buildEither(second component: Component) -> Component {","        return component","    }","    static func buildArray(_ components: [Component]) -> Component {","        return Array(components.joined())","    }","    static func buildBlock(_ components: Component...) -> Component {","        return Array(components.joined())","    }","}"]},{"text":"Result Transformations","level":4,"anchor":"Result-Transformations","type":"heading"},{"inlineContent":[{"text":"The following syntactic transformations are applied recursively","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to turn code that uses result-builder syntax"},{"text":" ","type":"text"},{"text":"into code that calls the static methods of the result builder type:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the result builder has a ","type":"text"},{"type":"codeVoice","code":"buildExpression(_:)"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"each expression becomes a call to that method.","type":"text"},{"type":"text","text":" "},{"text":"This transformation is always first.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"code":["@ArrayBuilder var builderNumber: [Int] { 10 }","var manualNumber = ArrayBuilder.buildExpression(10)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"An assignment statement is transformed like an expression,"},{"text":" ","type":"text"},{"type":"text","text":"but is understood to evaluate to "},{"type":"codeVoice","code":"()"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You can define an overload of ","type":"text"},{"type":"codeVoice","code":"buildExpression(_:)"},{"type":"text","text":" "},{"text":"that takes an argument of type ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":" to handle assignments specifically."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement that checks an availability condition"},{"type":"text","text":" "},{"type":"text","text":"becomes a call to the "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"This transformation happens before the transformation into a call to","type":"text"},{"text":" ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"buildOptional(_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"buildLimitedAvailability(_:)"},{"type":"text","text":" method to erase type information"},{"text":" ","type":"text"},{"text":"that changes depending on which branch is taken.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"buildEither(first:)"},{"text":" and  ","type":"text"},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" methods below"},{"text":" ","type":"text"},{"type":"text","text":"use a generic type that captures type information about both branches."}],"type":"paragraph"},{"code":["protocol Drawable {","    func draw() -> String","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Line<D: Drawable>: Drawable {","      var elements: [D]","      func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct DrawEither<First: Drawable, Second: Drawable>: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","","@resultBuilder","struct DrawingBuilder {","    static func buildBlock<D: Drawable>(_ components: D...) -> Line<D> {","        return Line(elements: components)","    }","    static func buildEither<First, Second>(first: First)","            -> DrawEither<First, Second> {","        return DrawEither(content: first)","    }","    static func buildEither<First, Second>(second: Second)","            -> DrawEither<First, Second> {","        return DrawEither(content: second)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, this approach causes a problem in code that has availability checks:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@available(macOS 99, *)","struct FutureText: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","@DrawingBuilder var brokenDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")  \/\/ Problem","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of brokenDrawing is Line<DrawEither<Line<FutureText>, Line<Text>>>"]},{"inlineContent":[{"text":"In the code above,","type":"text"},{"type":"text","text":" "},{"code":"FutureText","type":"codeVoice"},{"type":"text","text":" appears as part of the type of "},{"code":"brokenDrawing","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"because it’s one of the types in the "},{"code":"DrawEither","type":"codeVoice"},{"text":" generic type.","type":"text"},{"text":" ","type":"text"},{"text":"This could cause your program to crash if ","type":"text"},{"type":"codeVoice","code":"FutureText"},{"type":"text","text":" "},{"text":"isn’t available at runtime,","type":"text"},{"text":" ","type":"text"},{"text":"even in the case where that type is explicitly not being used.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To solve this problem,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implement a "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"to erase type information.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the code below builds an ","type":"text"},{"type":"codeVoice","code":"AnyDrawable"},{"text":" value","type":"text"},{"type":"text","text":" "},{"text":"from its availability check.","type":"text"}]},{"type":"codeListing","code":["struct AnyDrawable: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","extension DrawingBuilder {","    static func buildLimitedAvailability(_ content: Drawable) -> AnyDrawable {","        return AnyDrawable(content: content)","    }","}","","@DrawingBuilder var typeErasedDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of typeErasedDrawing is Line<DrawEither<AnyDrawable, Line<Text>>>"],"syntax":"swift"}]},{"content":[{"inlineContent":[{"text":"A branch statement becomes a series of nested calls to the","type":"text"},{"text":" ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The statements’ conditions and cases are mapped onto"},{"text":" ","type":"text"},{"text":"the leaf nodes of a binary tree,","type":"text"},{"text":" ","type":"text"},{"text":"and the statement becomes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a nested call to the "},{"type":"codeVoice","code":"buildEither"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"following the path to that leaf node from the root node."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, if you write a switch statement that has three cases,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler uses a binary tree with three leaf nodes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Likewise,"},{"text":" ","type":"text"},{"type":"text","text":"because the path from the root node to the second case is"},{"type":"text","text":" "},{"type":"text","text":"“second child” and then “first child”,"},{"type":"text","text":" "},{"text":"that case becomes a nested call like","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildEither(first: buildEither(second: ... ))"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let someNumber = 19","@ArrayBuilder var builderConditional: [Int] {","    if someNumber < 12 {","        31","    } else if someNumber == 19 {","        32","    } else {","        33","    }","}","","var manualConditional: [Int]","if someNumber < 12 {","    let partialResult = ArrayBuilder.buildExpression(31)","    let outerPartialResult = ArrayBuilder.buildEither(first: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else if someNumber == 19 {","    let partialResult = ArrayBuilder.buildExpression(32)","    let outerPartialResult = ArrayBuilder.buildEither(second: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else {","    let partialResult = ArrayBuilder.buildExpression(33)","    manualConditional = ArrayBuilder.buildEither(second: partialResult)","}"]}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement that might not produce a value,"},{"text":" ","type":"text"},{"text":"like an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement without an "},{"type":"codeVoice","code":"else"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"text":"becomes a call to ","type":"text"},{"code":"buildOptional(_:)","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"type":"codeVoice","code":"if"},{"text":" statement’s condition is satisfied,","type":"text"},{"text":" ","type":"text"},{"text":"its code block is transformed and passed as the argument;","type":"text"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"code":"buildOptional(_:)","type":"codeVoice"},{"type":"text","text":" is called with "},{"code":"nil","type":"codeVoice"},{"text":" as its argument.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}],"type":"paragraph"},{"code":["@ArrayBuilder var builderOptional: [Int] {","    if (someNumber % 2) == 1 { 20 }","}","","var partialResult: [Int]? = nil","if (someNumber % 2) == 1 {","    partialResult = ArrayBuilder.buildExpression(20)","}","var manualOptional = ArrayBuilder.buildOptional(partialResult)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"If the result builder implements"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"text":"a code block or ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement becomes a call to those methods."},{"type":"text","text":" "},{"type":"text","text":"The first statement inside of the block"},{"text":" ","type":"text"},{"type":"text","text":"is transformed to become an argument"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the remaining statements become nested calls"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"For example, the following declarations are equivalent:"}],"type":"paragraph"},{"syntax":"swift","code":["struct DrawBoth<First: Drawable, Second: Drawable>: Drawable {","    var first: First","    var second: Second","    func draw() -> String { return first.draw() + second.draw() }","}","","@resultBuilder","struct DrawingPartialBlockBuilder {","    static func buildPartialBlock<D: Drawable>(first: D) -> D {","        return first","    }","    static func buildPartialBlock<Accumulated: Drawable, Next: Drawable>(","        accumulated: Accumulated, next: Next","    ) -> DrawBoth<Accumulated, Next> {","        return DrawBoth(first: accumulated, second: next)","    }","}","","@DrawingPartialBlockBuilder var builderBlock: some Drawable {","    Text(\"First\")","    Line(elements: [Text(\"Second\"), Text(\"Third\")])","    Text(\"Last\")","}","","let partialResult1 = DrawingPartialBlockBuilder.buildPartialBlock(first: Text(\"first\"))","let partialResult2 = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult1,","    next: Line(elements: [Text(\"Second\"), Text(\"Third\")])",")","let manualResult = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult2,","    next: Text(\"Last\")",")"],"type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"Otherwise, a code block or "},{"code":"do","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"text":"becomes a call to the ","type":"text"},{"code":"buildBlock(_:)","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"Each of the statements inside of the block is transformed,"},{"text":" ","type":"text"},{"text":"one at a time,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and they become the arguments to the "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"For example, the following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"code":["@ArrayBuilder var builderBlock: [Int] {","    100","    200","    300","}","","var manualBlock = ArrayBuilder.buildBlock(","    ArrayBuilder.buildExpression(100),","    ArrayBuilder.buildExpression(200),","    ArrayBuilder.buildExpression(300)",")"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":" loop becomes a temporary variable, a "},{"code":"for","type":"codeVoice"},{"text":" loop,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and call to the "},{"type":"codeVoice","code":"buildArray(_:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"The new ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":" loop iterates over the sequence"},{"text":" ","type":"text"},{"text":"and appends each partial result to that array.","type":"text"},{"text":" ","type":"text"},{"text":"The temporary array is passed as the argument in the ","type":"text"},{"type":"codeVoice","code":"buildArray(_:)"},{"text":" call.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderArray: [Int] {","    for i in 5...7 {","        100 + i","    }","}","","var temporary: [[Int]] = []","for i in 5...7 {","    let partialResult = ArrayBuilder.buildExpression(100 + i)","    temporary.append(partialResult)","}","let manualArray = ArrayBuilder.buildArray(temporary)"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the result builder has a "},{"type":"codeVoice","code":"buildFinalResult(_:)"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"the final result becomes a call to that method."},{"text":" ","type":"text"},{"text":"This transformation is always last.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Although the transformation behavior is described in terms of temporary variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using a result builder doesn’t actually create any new declarations"},{"type":"text","text":" "},{"type":"text","text":"that are visible from the rest of your code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can’t use","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"text":", ","type":"text"},{"code":"continue","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"defer"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":", or "},{"code":"return","type":"codeVoice"},{"text":" statements,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"text":"in the code that a result builder transforms.","type":"text"}]},{"inlineContent":[{"text":"The transformation process doesn’t change declarations in the code,","type":"text"},{"text":" ","type":"text"},{"text":"which lets you use temporary constants and variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to build up expressions piece by piece."},{"text":" ","type":"text"},{"type":"text","text":"It also doesn’t change"},{"type":"text","text":" "},{"code":"throw","type":"codeVoice"},{"type":"text","text":" statements,"},{"text":" ","type":"text"},{"type":"text","text":"compile-time diagnostic statements,"},{"text":" ","type":"text"},{"type":"text","text":"or closures that contain a "},{"type":"codeVoice","code":"return"},{"text":" statement.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Whenever possible, transformations are coalesced.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"4 + 5 * 6"},{"type":"text","text":" becomes"},{"text":" ","type":"text"},{"type":"codeVoice","code":"buildExpression(4 + 5 * 6)"},{"text":" rather multiple calls to that function.","type":"text"},{"text":" ","type":"text"},{"text":"Likewise, nested branch statements become","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single binary tree of calls to the "},{"type":"codeVoice","code":"buildEither"},{"type":"text","text":" methods."}],"type":"paragraph"},{"text":"Custom Result-Builder Attributes","type":"heading","level":4,"anchor":"Custom-Result-Builder-Attributes"},{"inlineContent":[{"text":"Creating a result builder type creates a custom attribute with the same name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can apply that attribute in the following places:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"On a function declaration,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the function."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a variable or subscript declaration that includes a getter,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the getter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"On a parameter in a function declaration,"},{"text":" ","type":"text"},{"text":"the result builder builds the body of a closure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s passed as the corresponding argument."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Applying a result builder attribute doesn’t impact ABI compatibility.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Applying a result builder attribute to a parameter"},{"type":"text","text":" "},{"text":"makes that attribute part of the function’s interface,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can affect source compatibility."}]},{"anchor":"requiresstoredpropertyinits","type":"heading","level":3,"text":"requires_stored_property_inits"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class declaration"},{"text":" ","type":"text"},{"text":"to require all stored properties within the class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide default values as part of their definitions."},{"type":"text","text":" "},{"type":"text","text":"This attribute is inferred for any class"},{"text":" ","type":"text"},{"text":"that inherits from ","type":"text"},{"code":"NSManagedObject","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"testable","level":3,"type":"heading","anchor":"testable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an "},{"code":"import","type":"codeVoice"},{"type":"text","text":" declaration"},{"type":"text","text":" "},{"type":"text","text":"to import that module with changes to its access control"},{"text":" ","type":"text"},{"text":"that simplify testing the module’s code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Entities in the imported module"},{"type":"text","text":" "},{"text":"that are marked with the ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" access-level modifier","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are imported as if they were declared with the "},{"code":"public","type":"codeVoice"},{"text":" access-level modifier.","type":"text"},{"type":"text","text":" "},{"text":"Classes and class members","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are marked with the "},{"type":"codeVoice","code":"internal"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"text":"are imported as if they were declared with the ","type":"text"},{"type":"codeVoice","code":"open"},{"type":"text","text":" access-level modifier."},{"type":"text","text":" "},{"type":"text","text":"The imported module must be compiled with testing enabled."}]},{"text":"UIApplicationMain","type":"heading","level":3,"anchor":"UIApplicationMain"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it’s the application delegate."},{"type":"text","text":" "},{"type":"text","text":"Using this attribute is equivalent to calling the"},{"type":"text","text":" "},{"code":"UIApplicationMain","type":"codeVoice"},{"type":"text","text":" function and"},{"type":"text","text":" "},{"type":"text","text":"passing this class’s name as the name of the delegate class."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"text":" ","type":"text"},{"type":"text","text":"supply a "},{"type":"codeVoice","code":"main.swift"},{"type":"text","text":" file with code at the top level"},{"text":" ","type":"text"},{"type":"text","text":"that calls the "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","type":"reference"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"if your app uses a custom subclass of ","type":"text"},{"code":"UIApplication","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"as its principal class,"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"type":"codeVoice","code":"UIApplicationMain(_:_:_:_:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"instead of using this attribute."}]},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code"},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"unchecked","anchor":"unchecked"},{"inlineContent":[{"text":"Apply this attribute to a protocol type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of a type declaration’s list of adopted protocols"},{"type":"text","text":" "},{"text":"to turn off enforcement of that protocol’s requirements.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only supported protocol is "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"level":3,"anchor":"usableFromInline","type":"heading","text":"usableFromInline"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function, method, computed property, subscript,"},{"type":"text","text":" "},{"text":"initializer, or deinitializer declaration","type":"text"},{"text":" ","type":"text"},{"text":"to allow that symbol to be used in inlinable code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s defined in the same module as the declaration."},{"type":"text","text":" "},{"type":"text","text":"The declaration must have the "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" access-level modifier."},{"text":" ","type":"text"},{"type":"text","text":"A structure or class marked "},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"type":"text","text":"can use only types that are public or "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" for its properties."},{"text":" ","type":"text"},{"type":"text","text":"An enumeration marked "},{"code":"usableFromInline","type":"codeVoice"},{"text":" ","type":"text"},{"text":"can use only types that are public or ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"for the raw values and associated values of its cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the "},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier,"},{"type":"text","text":" "},{"text":"this attribute","type":"text"},{"text":" ","type":"text"},{"text":"exposes the declaration as part of the module’s public interface.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"type":"codeVoice","code":"public"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the compiler doesn’t allow declarations marked with "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" "},{"type":"text","text":"to be referenced by name in code outside the module,"},{"type":"text","text":" "},{"type":"text","text":"even though the declaration’s symbol is exported."},{"type":"text","text":" "},{"type":"text","text":"However, code outside the module might still be able"},{"text":" ","type":"text"},{"text":"to interact with the declaration’s symbol by using runtime behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declarations marked with the "},{"type":"codeVoice","code":"inlinable"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are implicitly usable from inlinable code."},{"text":" ","type":"text"},{"type":"text","text":"Although either "},{"code":"inlinable","type":"codeVoice"},{"type":"text","text":" or "},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"can be applied to "},{"code":"internal","type":"codeVoice"},{"text":" declarations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"applying both attributes is an error."}]},{"level":3,"text":"warn_unqualified_access","anchor":"warnunqualifiedaccess","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"top-level function, instance method, or class or static method"},{"type":"text","text":" "},{"type":"text","text":"to trigger warnings when that function or method is used"},{"type":"text","text":" "},{"type":"text","text":"without a preceding qualifier,"},{"type":"text","text":" "},{"type":"text","text":"such as a module name, type name, or instance variable or constant."},{"type":"text","text":" "},{"text":"Use this attribute to help discourage ambiguity between functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the same name that are accessible from the same scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"the Swift standard library includes both a top-level","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"function and a"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min"},{"type":"text","text":" "},{"type":"text","text":"method for sequences with comparable elements."},{"type":"text","text":" "},{"text":"The sequence method is declared with the ","type":"text"},{"type":"codeVoice","code":"warn_unqualified_access"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to help reduce confusion","type":"text"},{"type":"text","text":" "},{"text":"when attempting to use one or the other from within a ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" extension.","type":"text"}]},{"type":"heading","anchor":"Declaration-Attributes-Used-by-Interface-Builder","text":"Declaration Attributes Used by Interface Builder","level":3},{"type":"paragraph","inlineContent":[{"text":"Interface Builder attributes are declaration attributes","type":"text"},{"type":"text","text":" "},{"text":"used by Interface Builder to synchronize with Xcode.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift provides the following Interface Builder attributes:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"code":"IBSegueAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"IBInspectable"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These attributes are conceptually the same as their"},{"type":"text","text":" "},{"type":"text","text":"Objective-C counterparts."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You apply the "},{"code":"IBOutlet","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBInspectable"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to property declarations of a class."},{"type":"text","text":" "},{"text":"You apply the ","type":"text"},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":" and "},{"code":"IBSegueAction","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to method declarations of a class","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":" attribute to class declarations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", or "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"also implies the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}]},{"text":"Type Attributes","level":2,"anchor":"Type-Attributes","type":"heading"},{"inlineContent":[{"text":"You can apply type attributes to types only.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"autoclosure","anchor":"autoclosure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to delay the evaluation of an expression"},{"text":" ","type":"text"},{"text":"by automatically wrapping that expression in a closure with no arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You apply it to a parameter’s type in a function or method declaration,"},{"text":" ","type":"text"},{"type":"text","text":"for a parameter whose type is a function type that takes no arguments"},{"type":"text","text":" "},{"text":"and that returns a value of the type of the expression.","type":"text"},{"type":"text","text":" "},{"text":"For an example of how to use the ","type":"text"},{"code":"autoclosure","type":"codeVoice"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":"."}]},{"anchor":"convention","text":"convention","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to the type of a function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate its calling conventions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"convention","type":"codeVoice"},{"text":" attribute always appears with","type":"text"},{"type":"text","text":" "},{"text":"one of the following arguments:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swift"},{"text":" argument indicates a Swift function reference.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is the standard calling convention for function values in Swift."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"block"},{"text":" argument indicates an Objective-C compatible block reference.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function value is represented as a reference to the block object,"},{"type":"text","text":" "},{"text":"which is an ","type":"text"},{"code":"id","type":"codeVoice"},{"text":"-compatible Objective-C object that embeds its invocation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function within the object."},{"type":"text","text":" "},{"text":"The invocation function uses the C calling convention.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"c"},{"text":" argument indicates a C function reference.","type":"text"},{"type":"text","text":" "},{"text":"The function value carries no context and uses the C calling convention.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"With a few exceptions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a function of any calling convention can be used"},{"text":" ","type":"text"},{"text":"when a function any other calling convention is needed.","type":"text"},{"type":"text","text":" "},{"text":"A nongeneric global function,","type":"text"},{"type":"text","text":" "},{"text":"a local function that doesn’t capture any local variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a closure that doesn’t capture any local variables"},{"type":"text","text":" "},{"text":"can be converted to the C calling convention.","type":"text"},{"text":" ","type":"text"},{"text":"Other Swift functions can’t be converted to the C calling convention.","type":"text"},{"type":"text","text":" "},{"text":"A function with the Objective-C block calling convention","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t be converted to the C calling convention."}],"type":"paragraph"},{"type":"heading","level":3,"text":"escaping","anchor":"escaping"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a parameter’s type in a function or method declaration"},{"type":"text","text":" "},{"text":"to indicate that the parameter’s value can be stored for later execution.","type":"text"},{"type":"text","text":" "},{"text":"This means that the value is allowed to outlive the lifetime of the call.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Function type parameters with the "},{"code":"escaping","type":"codeVoice"},{"type":"text","text":" type attribute"},{"text":" ","type":"text"},{"type":"text","text":"require explicit use of "},{"code":"self.","type":"codeVoice"},{"type":"text","text":" for properties or methods."},{"text":" ","type":"text"},{"text":"For an example of how to use the ","type":"text"},{"code":"escaping","type":"codeVoice"},{"text":" attribute,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"Sendable","type":"heading","anchor":"Sendable"},{"inlineContent":[{"text":"Apply this attribute to the type of a function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that the function or closure is sendable."},{"text":" ","type":"text"},{"type":"text","text":"Applying this attribute to a function type"},{"text":" ","type":"text"},{"type":"text","text":"has the same meaning as conforming a non–function type"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"overridingTitle":"Sendable","overridingTitleInlineContent":[{"type":"codeVoice","code":"Sendable"}],"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"This attribute is inferred on functions and closures","type":"text"},{"text":" ","type":"text"},{"text":"if the function or closure is used in a context","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that expects a sendable value,"},{"text":" ","type":"text"},{"text":"and the function or closure satisfies the requirements to be sendable.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A sendable function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is a subtype of the corresponding nonsendable function type."}],"type":"paragraph"},{"type":"heading","anchor":"Switch-Case-Attributes","level":2,"text":"Switch Case Attributes"},{"type":"paragraph","inlineContent":[{"text":"You can apply switch case attributes to switch cases only.","type":"text"}]},{"anchor":"unknown","type":"heading","level":3,"text":"unknown"},{"inlineContent":[{"text":"Apply this attribute to a switch case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it isn’t expected to be matched"},{"type":"text","text":" "},{"type":"text","text":"by any case of the enumeration that’s known"},{"type":"text","text":" "},{"type":"text","text":"at the time the code is compiled."},{"text":" ","type":"text"},{"type":"text","text":"For an example of how to use the "},{"code":"unknown","type":"codeVoice"},{"text":" attribute,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"attribute"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"@","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute-name"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute-argument-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"attribute-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute-argument-clause"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"attributes","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"balanced-tokens","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"balanced-tokens","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"balanced-token","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"text":"balanced-tokens","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"balanced-token","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"["}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"balanced-tokens"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"]","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"{"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"}","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"text":" → Any identifier, keyword, literal, or operator ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"text":" → Any punctuation except  ","type":"text"},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":",  "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"["}]},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"code":"]","type":"codeVoice"}]},{"text":",  ","type":"text"},{"inlineContent":[{"code":"{","type":"codeVoice"}],"type":"strong"},{"text":", or  ","type":"text"},{"inlineContent":[{"code":"}","type":"codeVoice"}],"type":"strong"}]}],"style":"note","name":"Grammar of an attribute"}],"kind":"content"}],"abstract":[{"type":"text","text":"Add information to declarations and types."}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Attributes"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"type":"topic","kind":"section","abstract":[],"title":"Function Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba":{"titleInlineContent":[{"type":"text","text":"Xcode Help"}],"url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","type":"link","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","title":"Xcode Help"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","title":"ExpressibleByDictionaryLiteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByDictionaryLiteral"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders":{"title":"Result Builders","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","abstract":[],"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders","kind":"section"},"https://developer.apple.com/documentation/swift/expressiblebystringliteral":{"titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByStringLiteral"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","title":"ExpressibleByStringLiteral"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","title":"Escaping Closures","kind":"section"},"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","title":"ExpressibleByArrayLiteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}]},"https://developer.apple.com/documentation/swift/referencewritablekeypath":{"titleInlineContent":[{"type":"codeVoice","code":"ReferenceWritableKeyPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","title":"ReferenceWritableKeyPath"},"https://developer.apple.com/documentation/swift/1538339-min/":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","title":"min(_:_:)","type":"link","titleInlineContent":[{"type":"codeVoice","code":"min(_:_:)"}]},"https://developer.apple.com/documentation/swift/sendable":{"titleInlineContent":[{"type":"codeVoice","code":"Sendable"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","title":"Sendable"},"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain":{"url":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","title":"UIApplicationMain(_:_:_:_:)","type":"link","titleInlineContent":[{"type":"codeVoice","code":"UIApplicationMain(_:_:_:_:)"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","type":"topic","title":"Autoclosures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper":{"url":"\/documentation\/the-swift-programming-language\/attributes#propertyWrapper","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","title":"propertyWrapper","abstract":[]},"https://developer.apple.com/documentation/swift/keyvaluepairs":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","title":"KeyValuePairs","type":"link","titleInlineContent":[{"type":"codeVoice","code":"KeyValuePairs"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#inlinable":{"url":"\/documentation\/the-swift-programming-language\/attributes#inlinable","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","title":"inlinable","abstract":[]},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","title":"Conventions","type":"link","titleInlineContent":[{"type":"text","text":"Conventions"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Top-Level-Code":{"url":"\/documentation\/the-swift-programming-language\/declarations#Top-Level-Code","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","title":"Top-Level Code","abstract":[]},"https://developer.apple.com/documentation/swift/writablekeypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","title":"WritableKeyPath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"WritableKeyPath"}]},"https://developer.apple.com/documentation/swift/keypath":{"titleInlineContent":[{"type":"codeVoice","code":"KeyPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","title":"KeyPath"},"https://developer.apple.com/documentation/swift/sequence/1641174-min":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","title":"min()","type":"link","titleInlineContent":[{"type":"codeVoice","code":"min()"}]},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key":{"titleInlineContent":[{"type":"codeVoice","code":"Key"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","title":"Key"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","title":"Programming with Objective-C","type":"link","titleInlineContent":[{"type":"text","text":"Programming with Objective-C"}]},"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring":{"titleInlineContent":[{"type":"codeVoice","code":"NSClassFromString(_:)"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","title":"NSClassFromString(_:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"title":"Switching Over Future Enumeration Cases","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","kind":"section"},"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","title":"Importing Swift into Objective-C","type":"link","titleInlineContent":[{"type":"text","text":"Importing Swift into Objective-C"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Macro-Expansion-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Macro-Expansion-Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression","title":"Macro-Expansion Expression","abstract":[]}}}