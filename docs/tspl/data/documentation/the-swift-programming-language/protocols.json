{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","interfaceLanguage":"swift"},"metadata":{"title":"Protocols"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol"}]},{"type":"text","text":" defines a blueprint of"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and other requirements"},{"text":" ","type":"text"},{"text":"that suit a particular task or piece of functionality.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The protocol can then be "},{"type":"emphasis","inlineContent":[{"text":"adopted","type":"text"}]},{"type":"text","text":" by a class, structure, or enumeration"},{"text":" ","type":"text"},{"type":"text","text":"to provide an actual implementation of those requirements."},{"text":" ","type":"text"},{"type":"text","text":"Any type that satisfies the requirements of a protocol is said to"},{"type":"text","text":" "},{"inlineContent":[{"text":"conform","type":"text"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition to specifying requirements that conforming types must implement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can extend a protocol to implement some of these requirements"},{"type":"text","text":" "},{"type":"text","text":"or to implement additional functionality that conforming types can take advantage of."}]},{"type":"heading","level":2,"anchor":"Protocol-Syntax","text":"Protocol Syntax"},{"inlineContent":[{"type":"text","text":"You define protocols in a very similar way to classes, structures, and enumerations:"}],"type":"paragraph"},{"code":["protocol SomeProtocol {","    \/\/ protocol definition goes here","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom types state that they adopt a particular protocol"},{"text":" ","type":"text"},{"text":"by placing the protocol’s name after the type’s name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by a colon, as part of their definition."},{"text":" ","type":"text"},{"type":"text","text":"Multiple protocols can be listed, and are separated by commas:"}]},{"type":"codeListing","code":["struct SomeStructure: FirstProtocol, AnotherProtocol {","    \/\/ structure definition goes here","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If a class has a superclass, list the superclass name"},{"type":"text","text":" "},{"type":"text","text":"before any protocols it adopts, followed by a comma:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {","    \/\/ class definition goes here","}"]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Because protocols are types,","type":"text"},{"type":"text","text":" "},{"text":"begin their names with a capital letter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"FullyNamed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RandomNumberGenerator"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to match the names of other types in Swift","type":"text"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":").","type":"text"}]}]},{"type":"heading","text":"Property Requirements","anchor":"Property-Requirements","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A protocol can require any conforming type to provide"},{"text":" ","type":"text"},{"type":"text","text":"an instance property or type property with a particular name and type."},{"type":"text","text":" "},{"type":"text","text":"The protocol doesn’t specify whether the property should be"},{"text":" ","type":"text"},{"type":"text","text":"a stored property or a computed property —"},{"text":" ","type":"text"},{"text":"it only specifies the required property name and type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The protocol also specifies whether each property must be gettable"},{"type":"text","text":" "},{"type":"text","text":"or gettable "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" settable."}]},{"inlineContent":[{"text":"If a protocol requires a property to be gettable and settable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that property requirement can’t be fulfilled by"},{"type":"text","text":" "},{"type":"text","text":"a constant stored property or a read-only computed property."},{"text":" ","type":"text"},{"text":"If the protocol only requires a property to be gettable,","type":"text"},{"type":"text","text":" "},{"text":"the requirement can be satisfied by any kind of property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it’s valid for the property to be also settable"},{"type":"text","text":" "},{"text":"if this is useful for your own code.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property requirements are always declared as variable properties,"},{"type":"text","text":" "},{"type":"text","text":"prefixed with the "},{"type":"codeVoice","code":"var"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Gettable and settable properties are indicated by writing"},{"type":"text","text":" "},{"type":"codeVoice","code":"{ get set }"},{"text":" after their type declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and gettable properties are indicated by writing "},{"code":"{ get }","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["protocol SomeProtocol {","    var mustBeSettable: Int { get set }","    var doesNotNeedToBeSettable: Int { get }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Always prefix type property requirements with the "},{"code":"static","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"when you define them in a protocol."},{"text":" ","type":"text"},{"text":"This rule pertains even though type property requirements can be prefixed with","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" or "},{"type":"codeVoice","code":"static"},{"text":" keyword when implemented by a class:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol AnotherProtocol {","    static var someTypeProperty: Int { get set }","}"]},{"inlineContent":[{"type":"text","text":"Here’s an example of a protocol with a single instance property requirement:"}],"type":"paragraph"},{"type":"codeListing","code":["protocol FullyNamed {","    var fullName: String { get }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"FullyNamed"},{"type":"text","text":" protocol requires a conforming type to provide a fully qualified name."},{"type":"text","text":" "},{"text":"The protocol doesn’t specify anything else about the nature of the conforming type —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it only specifies that the type must be able to provide a full name for itself."},{"text":" ","type":"text"},{"type":"text","text":"The protocol states that any "},{"code":"FullyNamed","type":"codeVoice"},{"type":"text","text":" type must have"},{"text":" ","type":"text"},{"type":"text","text":"a gettable instance property called "},{"type":"codeVoice","code":"fullName"},{"type":"text","text":", which is of type "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a simple structure that adopts and conforms to"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"FullyNamed"},{"type":"text","text":" protocol:"}]},{"syntax":"swift","code":["struct Person: FullyNamed {","    var fullName: String","}","let john = Person(fullName: \"John Appleseed\")","\/\/ john.fullName is \"John Appleseed\""],"type":"codeListing"},{"inlineContent":[{"text":"This example defines a structure called ","type":"text"},{"code":"Person","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents a specific named person."},{"text":" ","type":"text"},{"text":"It states that it adopts the ","type":"text"},{"code":"FullyNamed","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"as part of the first line of its definition."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each instance of ","type":"text"},{"code":"Person","type":"codeVoice"},{"type":"text","text":" has a single stored property called "},{"code":"fullName","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is of type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This matches the single requirement of the ","type":"text"},{"type":"codeVoice","code":"FullyNamed"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and means that "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" has correctly conformed to the protocol."},{"type":"text","text":" "},{"type":"text","text":"(Swift reports an error at compile time if a protocol requirement isn’t fulfilled.)"}]},{"inlineContent":[{"text":"Here’s a more complex class, which also adopts and conforms to the ","type":"text"},{"type":"codeVoice","code":"FullyNamed"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Starship: FullyNamed {","    var prefix: String?","    var name: String","    init(name: String, prefix: String? = nil) {","        self.name = name","        self.prefix = prefix","    }","    var fullName: String {","        return (prefix != nil ? prefix! + \" \" : \"\") + name","    }","}","var ncc1701 = Starship(name: \"Enterprise\", prefix: \"USS\")","\/\/ ncc1701.fullName is \"USS Enterprise\""]},{"type":"paragraph","inlineContent":[{"text":"This class implements the ","type":"text"},{"code":"fullName","type":"codeVoice"},{"text":" property requirement as","type":"text"},{"text":" ","type":"text"},{"text":"a computed read-only property for a starship.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Each "},{"code":"Starship","type":"codeVoice"},{"type":"text","text":" class instance stores a mandatory "},{"type":"codeVoice","code":"name"},{"text":" and an optional ","type":"text"},{"type":"codeVoice","code":"prefix"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"fullName"},{"text":" property uses the ","type":"text"},{"code":"prefix","type":"codeVoice"},{"type":"text","text":" value if it exists,"},{"text":" ","type":"text"},{"type":"text","text":"and prepends it to the beginning of "},{"code":"name","type":"codeVoice"},{"text":" to create a full name for the starship.","type":"text"}]},{"type":"heading","text":"Method Requirements","anchor":"Method-Requirements","level":2},{"type":"paragraph","inlineContent":[{"text":"Protocols can require specific instance methods and type methods","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to be implemented by conforming types."},{"text":" ","type":"text"},{"type":"text","text":"These methods are written as part of the protocol’s definition"},{"type":"text","text":" "},{"text":"in exactly the same way as for normal instance and type methods,","type":"text"},{"text":" ","type":"text"},{"text":"but without curly braces or a method body.","type":"text"},{"type":"text","text":" "},{"text":"Variadic parameters are allowed, subject to the same rules as for normal methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Default values, however, can’t be specified for method parameters within a protocol’s definition."}]},{"inlineContent":[{"text":"As with type property requirements,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you always prefix type method requirements with the "},{"code":"static","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"when they’re defined in a protocol.","type":"text"},{"type":"text","text":" "},{"text":"This is true even though type method requirements are prefixed with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"class","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword when implemented by a class:","type":"text"}],"type":"paragraph"},{"code":["protocol SomeProtocol {","    static func someTypeMethod()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a protocol with a single instance method requirement:","type":"text"}]},{"code":["protocol RandomNumberGenerator {","    func random() -> Double","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This protocol, "},{"type":"codeVoice","code":"RandomNumberGenerator"},{"text":", requires any conforming type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to have an instance method called "},{"type":"codeVoice","code":"random"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns a ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value whenever it’s called."},{"text":" ","type":"text"},{"text":"Although it’s not specified as part of the protocol,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s assumed that this value will be"},{"type":"text","text":" "},{"text":"a number from ","type":"text"},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" up to (but not including) "},{"type":"codeVoice","code":"1.0"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"RandomNumberGenerator","type":"codeVoice"},{"type":"text","text":" protocol doesn’t make any assumptions"},{"type":"text","text":" "},{"type":"text","text":"about how each random number will be generated —"},{"type":"text","text":" "},{"text":"it simply requires the generator to provide a standard way","type":"text"},{"type":"text","text":" "},{"text":"to generate a new random number.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an implementation of a class that adopts and conforms to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"RandomNumberGenerator"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"This class implements a pseudorandom number generator algorithm known as","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"inlineContent":[{"type":"text","text":"linear congruential generator"}],"type":"emphasis"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class LinearCongruentialGenerator: RandomNumberGenerator {","    var lastRandom = 42.0","    let m = 139968.0","    let a = 3877.0","    let c = 29573.0","    func random() -> Double {","        lastRandom = ((lastRandom * a + c)","            .truncatingRemainder(dividingBy:m))","        return lastRandom \/ m","    }","}","let generator = LinearCongruentialGenerator()","print(\"Here's a random number: \\(generator.random())\")","\/\/ Prints \"Here's a random number: 0.3746499199817101\"","print(\"And another one: \\(generator.random())\")","\/\/ Prints \"And another one: 0.729023776863283\""]},{"text":"Mutating Method Requirements","type":"heading","anchor":"Mutating-Method-Requirements","level":2},{"inlineContent":[{"text":"It’s sometimes necessary for a method to modify (or ","type":"text"},{"inlineContent":[{"type":"text","text":"mutate"}],"type":"emphasis"},{"text":") the instance it belongs to.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For instance methods on value types (that is, structures and enumerations)"},{"text":" ","type":"text"},{"text":"you place the ","type":"text"},{"type":"codeVoice","code":"mutating"},{"text":" keyword before a method’s ","type":"text"},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"to indicate that the method is allowed to modify the instance it belongs to","type":"text"},{"text":" ","type":"text"},{"text":"and any properties of that instance.","type":"text"},{"type":"text","text":" "},{"text":"This process is described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods#Modifying-Value-Types-from-Within-Instance-Methods","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you define a protocol instance method requirement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s intended to mutate instances of any type that adopts the protocol,"},{"text":" ","type":"text"},{"text":"mark the method with the ","type":"text"},{"code":"mutating","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of the protocol’s definition."},{"text":" ","type":"text"},{"type":"text","text":"This enables structures and enumerations to adopt the protocol"},{"text":" ","type":"text"},{"text":"and satisfy that method requirement.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you mark a protocol instance method requirement as ","type":"text"},{"type":"codeVoice","code":"mutating"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"you don’t need to write the ","type":"text"},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword when writing"},{"type":"text","text":" "},{"text":"an implementation of that method for a class.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"mutating"},{"text":" keyword is only used by structures and enumerations.","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"The example below defines a protocol called ","type":"text"},{"code":"Togglable","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which defines a single instance method requirement called ","type":"text"},{"type":"codeVoice","code":"toggle"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"As its name suggests, the "},{"type":"codeVoice","code":"toggle()"},{"type":"text","text":" method is intended to"},{"text":" ","type":"text"},{"text":"toggle or invert the state of any conforming type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"typically by modifying a property of that type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"toggle()"},{"text":" method is marked with the ","type":"text"},{"type":"codeVoice","code":"mutating"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of the "},{"code":"Togglable","type":"codeVoice"},{"type":"text","text":" protocol definition,"},{"type":"text","text":" "},{"text":"to indicate that the method is expected to mutate the state of a conforming instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when it’s called:"}],"type":"paragraph"},{"code":["protocol Togglable {","    mutating func toggle()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you implement the "},{"code":"Togglable","type":"codeVoice"},{"type":"text","text":" protocol for a structure or enumeration,"},{"text":" ","type":"text"},{"text":"that structure or enumeration can conform to the protocol","type":"text"},{"type":"text","text":" "},{"text":"by providing an implementation of the ","type":"text"},{"type":"codeVoice","code":"toggle()"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s also marked as "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines an enumeration called "},{"type":"codeVoice","code":"OnOffSwitch"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This enumeration toggles between two states,"},{"text":" ","type":"text"},{"type":"text","text":"indicated by the enumeration cases "},{"type":"codeVoice","code":"on"},{"type":"text","text":" and "},{"type":"codeVoice","code":"off"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The enumeration’s ","type":"text"},{"type":"codeVoice","code":"toggle"},{"type":"text","text":" implementation is marked as "},{"type":"codeVoice","code":"mutating"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to match the "},{"code":"Togglable","type":"codeVoice"},{"type":"text","text":" protocol’s requirements:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum OnOffSwitch: Togglable {","    case off, on","    mutating func toggle() {","        switch self {","        case .off:","            self = .on","        case .on:","            self = .off","        }","    }","}","var lightSwitch = OnOffSwitch.off","lightSwitch.toggle()","\/\/ lightSwitch is now equal to .on"]},{"text":"Initializer Requirements","type":"heading","anchor":"Initializer-Requirements","level":2},{"inlineContent":[{"type":"text","text":"Protocols can require specific initializers"},{"text":" ","type":"text"},{"type":"text","text":"to be implemented by conforming types."},{"text":" ","type":"text"},{"type":"text","text":"You write these initializers as part of the protocol’s definition"},{"type":"text","text":" "},{"text":"in exactly the same way as for normal initializers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but without curly braces or an initializer body:"}],"type":"paragraph"},{"type":"codeListing","code":["protocol SomeProtocol {","    init(someParameter: Int)","}"],"syntax":"swift"},{"type":"heading","anchor":"Class-Implementations-of-Protocol-Initializer-Requirements","text":"Class Implementations of Protocol Initializer Requirements","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can implement a protocol initializer requirement on a conforming class"},{"text":" ","type":"text"},{"text":"as either a designated initializer or a convenience initializer.","type":"text"},{"text":" ","type":"text"},{"text":"In both cases,","type":"text"},{"type":"text","text":" "},{"text":"you must mark the initializer implementation with the ","type":"text"},{"type":"codeVoice","code":"required"},{"text":" modifier:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class SomeClass: SomeProtocol {","    required init(someParameter: Int) {","        \/\/ initializer implementation goes here","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The use of the "},{"type":"codeVoice","code":"required"},{"text":" modifier ensures that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you provide an explicit or inherited implementation of the initializer requirement"},{"type":"text","text":" "},{"type":"text","text":"on all subclasses of the conforming class,"},{"type":"text","text":" "},{"type":"text","text":"such that they also conform to the protocol."}]},{"type":"paragraph","inlineContent":[{"text":"For more information on required initializers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"You don’t need to mark protocol initializer implementations with the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier"},{"text":" ","type":"text"},{"type":"text","text":"on classes that are marked with the "},{"code":"final","type":"codeVoice"},{"text":" modifier,","type":"text"},{"type":"text","text":" "},{"text":"because final classes can’t subclassed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Preventing-Overrides","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"If a subclass overrides a designated initializer from a superclass,"},{"text":" ","type":"text"},{"text":"and also implements a matching initializer requirement from a protocol,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mark the initializer implementation with both the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" and "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifiers:"}],"type":"paragraph"},{"type":"codeListing","code":["protocol SomeProtocol {","    init()","}","","class SomeSuperClass {","    init() {","        \/\/ initializer implementation goes here","    }","}","","class SomeSubClass: SomeSuperClass, SomeProtocol {","    \/\/ \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass","    required override init() {","        \/\/ initializer implementation goes here","    }","}"],"syntax":"swift"},{"type":"heading","text":"Failable Initializer Requirements","anchor":"Failable-Initializer-Requirements","level":3},{"inlineContent":[{"type":"text","text":"Protocols can define failable initializer requirements for conforming types,"},{"text":" ","type":"text"},{"text":"as defined in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A failable initializer requirement can be satisfied by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a failable or nonfailable initializer on a conforming type."},{"type":"text","text":" "},{"type":"text","text":"A nonfailable initializer requirement can be satisfied by"},{"type":"text","text":" "},{"type":"text","text":"a nonfailable initializer or an implicitly unwrapped failable initializer."}]},{"text":"Protocols as Types","type":"heading","level":2,"anchor":"Protocols-as-Types"},{"type":"paragraph","inlineContent":[{"text":"Protocols don’t actually implement any functionality themselves.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Regardless, you can use a protocol as a type in your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most common way to use a protocol as a type"},{"text":" ","type":"text"},{"type":"text","text":"is to use a protocol as a generic constraint."},{"type":"text","text":" "},{"type":"text","text":"Code with generic constraints can work with"},{"type":"text","text":" "},{"type":"text","text":"any type that conforms to the protocol,"},{"text":" ","type":"text"},{"type":"text","text":"and the specific type is chosen by the code that uses the API."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"when you call a function that takes an argument"},{"type":"text","text":" "},{"text":"and that argument’s type is generic,","type":"text"},{"text":" ","type":"text"},{"text":"the caller chooses the type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Code with an opaque type"},{"type":"text","text":" "},{"text":"works with some type that conforms to the protocol.","type":"text"},{"type":"text","text":" "},{"text":"The underlying type is known at compile time,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the API implementation chooses that type,"},{"type":"text","text":" "},{"text":"but that type’s identity is hidden from clients of the API.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Using an opaque type lets you prevent implementation details of an API"},{"type":"text","text":" "},{"type":"text","text":"from leaking through the layer of abstraction —"},{"type":"text","text":" "},{"type":"text","text":"for example, by hiding the specific return type from a function,"},{"text":" ","type":"text"},{"type":"text","text":"and only guaranteeing that the value conforms to a given protocol."}]},{"inlineContent":[{"text":"Code with a boxed protocol type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"works with any type, chosen at runtime, that conforms to the protocol."},{"text":" ","type":"text"},{"type":"text","text":"To support this runtime flexibility,"},{"text":" ","type":"text"},{"type":"text","text":"Swift adds a level of indirection when necessary —"},{"text":" ","type":"text"},{"text":"known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"box"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which has a performance cost.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because of this flexibility,"},{"text":" ","type":"text"},{"text":"Swift doesn’t know the underlying type at compile time,","type":"text"},{"text":" ","type":"text"},{"text":"which means you can access only the members","type":"text"},{"text":" ","type":"text"},{"text":"that are required by the protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Accessing any other APIs on the underlying type"},{"type":"text","text":" "},{"type":"text","text":"requires casting at runtime."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information about using protocols as generic constraints,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For information about opaque types, and boxed protocol types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Delegation","anchor":"Delegation"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Delegation"}],"type":"emphasis"},{"text":" is a design pattern that enables","type":"text"},{"type":"text","text":" "},{"text":"a class or structure to hand off (or ","type":"text"},{"inlineContent":[{"text":"delegate","type":"text"}],"type":"emphasis"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"some of its responsibilities to an instance of another type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This design pattern is implemented by defining"},{"type":"text","text":" "},{"text":"a protocol that encapsulates the delegated responsibilities,","type":"text"},{"type":"text","text":" "},{"text":"such that a conforming type (known as a delegate)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is guaranteed to provide the functionality that has been delegated."},{"type":"text","text":" "},{"type":"text","text":"Delegation can be used to respond to a particular action,"},{"text":" ","type":"text"},{"text":"or to retrieve data from an external source without needing to know","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the underlying type of that source."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines two protocols for use with dice-based board games:"}]},{"code":["protocol DiceGame {","    var dice: Dice { get }","    func play()","}","protocol DiceGameDelegate: AnyObject {","    func gameDidStart(_ game: DiceGame)","    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)","    func gameDidEnd(_ game: DiceGame)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"DiceGame","type":"codeVoice"},{"text":" protocol is a protocol that can be adopted","type":"text"},{"type":"text","text":" "},{"text":"by any game that involves dice.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DiceGameDelegate"},{"text":" protocol can be adopted","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to track the progress of a "},{"code":"DiceGame","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To prevent strong reference cycles,"},{"type":"text","text":" "},{"text":"delegates are declared as weak references.","type":"text"},{"type":"text","text":" "},{"text":"For information about weak references,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-Between-Class-Instances","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Marking the protocol as class-only"},{"type":"text","text":" "},{"text":"lets the ","type":"text"},{"type":"codeVoice","code":"SnakesAndLadders"},{"text":" class later in this chapter","type":"text"},{"type":"text","text":" "},{"text":"declare that its delegate must use a weak reference.","type":"text"},{"type":"text","text":" "},{"text":"A class-only protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is marked by its inheritance from "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s a version of the "},{"type":"emphasis","inlineContent":[{"text":"Snakes and Ladders","type":"text"}]},{"type":"text","text":" game originally introduced in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This version is adapted to use a ","type":"text"},{"code":"Dice","type":"codeVoice"},{"type":"text","text":" instance for its dice-rolls;"},{"type":"text","text":" "},{"type":"text","text":"to adopt the "},{"code":"DiceGame","type":"codeVoice"},{"type":"text","text":" protocol;"},{"text":" ","type":"text"},{"text":"and to notify a ","type":"text"},{"type":"codeVoice","code":"DiceGameDelegate"},{"text":" about its progress:","type":"text"}],"type":"paragraph"},{"code":["class SnakesAndLadders: DiceGame {","    let finalSquare = 25","    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())","    var square = 0","    var board: [Int]","    init() {","        board = Array(repeating: 0, count: finalSquare + 1)","        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08","    }","    weak var delegate: DiceGameDelegate?","    func play() {","        square = 0","        delegate?.gameDidStart(self)","        gameLoop: while square != finalSquare {","            let diceRoll = dice.roll()","            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)","            switch square + diceRoll {","            case finalSquare:","                break gameLoop","            case let newSquare where newSquare > finalSquare:","                continue gameLoop","            default:","                square += diceRoll","                square += board[square]","            }","        }","        delegate?.gameDidEnd(self)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For a description of the ","type":"text"},{"inlineContent":[{"text":"Snakes and Ladders","type":"text"}],"type":"emphasis"},{"type":"text","text":" gameplay,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This version of the game is wrapped up as a class called ","type":"text"},{"type":"codeVoice","code":"SnakesAndLadders"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which adopts the ","type":"text"},{"type":"codeVoice","code":"DiceGame"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"It provides a gettable ","type":"text"},{"type":"codeVoice","code":"dice"},{"type":"text","text":" property and a "},{"code":"play()","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in order to conform to the protocol."},{"type":"text","text":" "},{"type":"text","text":"(The "},{"code":"dice","type":"codeVoice"},{"text":" property is declared as a constant property","type":"text"},{"type":"text","text":" "},{"text":"because it doesn’t need to change after initialization,","type":"text"},{"type":"text","text":" "},{"text":"and the protocol only requires that it must be gettable.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"type":"text","text":" game board setup takes place within"},{"text":" ","type":"text"},{"text":"the class’s ","type":"text"},{"type":"codeVoice","code":"init()"},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"type":"text","text":"All game logic is moved into the protocol’s "},{"code":"play","type":"codeVoice"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which uses the protocol’s required "},{"type":"codeVoice","code":"dice"},{"text":" property to provide its dice roll values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Note that the ","type":"text"},{"code":"delegate","type":"codeVoice"},{"text":" property is defined as an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" "},{"code":"DiceGameDelegate","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"because a delegate isn’t required in order to play the game."},{"type":"text","text":" "},{"type":"text","text":"Because it’s of an optional type,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"delegate","type":"codeVoice"},{"text":" property is automatically set to an initial value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Thereafter, the game instantiator has the option to set the property to a suitable delegate.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because the "},{"code":"DiceGameDelegate","type":"codeVoice"},{"type":"text","text":" protocol is class-only, you can declare the"},{"text":" ","type":"text"},{"text":"delegate to be ","type":"text"},{"type":"codeVoice","code":"weak"},{"type":"text","text":" to prevent reference cycles."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"DiceGameDelegate"},{"type":"text","text":" provides three methods for tracking the progress of a game."},{"type":"text","text":" "},{"text":"These three methods have been incorporated into the game logic within","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"play()"},{"text":" method above, and are called when","type":"text"},{"text":" ","type":"text"},{"text":"a new game starts, a new turn begins, or the game ends.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" property is an "},{"type":"emphasis","inlineContent":[{"text":"optional","type":"text"}]},{"text":" ","type":"text"},{"code":"DiceGameDelegate","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"play()"},{"text":" method uses optional chaining each time it calls a method on the delegate.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"delegate","type":"codeVoice"},{"text":" property is nil,","type":"text"},{"text":" ","type":"text"},{"text":"these delegate calls fail gracefully and without error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" property is non-nil,"},{"type":"text","text":" "},{"text":"the delegate methods are called,","type":"text"},{"text":" ","type":"text"},{"text":"and are passed the ","type":"text"},{"code":"SnakesAndLadders","type":"codeVoice"},{"type":"text","text":" instance as a parameter."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This next example shows a class called "},{"code":"DiceGameTracker","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which adopts the ","type":"text"},{"type":"codeVoice","code":"DiceGameDelegate"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["class DiceGameTracker: DiceGameDelegate {","    var numberOfTurns = 0","    func gameDidStart(_ game: DiceGame) {","        numberOfTurns = 0","        if game is SnakesAndLadders {","            print(\"Started a new game of Snakes and Ladders\")","        }","        print(\"The game is using a \\(game.dice.sides)-sided dice\")","    }","    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {","        numberOfTurns += 1","        print(\"Rolled a \\(diceRoll)\")","    }","    func gameDidEnd(_ game: DiceGame) {","        print(\"The game lasted for \\(numberOfTurns) turns\")","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"DiceGameTracker","type":"codeVoice"},{"type":"text","text":" implements all three methods required by "},{"type":"codeVoice","code":"DiceGameDelegate"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"It uses these methods to keep track of the number of turns a game has taken."},{"type":"text","text":" "},{"text":"It resets a ","type":"text"},{"code":"numberOfTurns","type":"codeVoice"},{"text":" property to zero when the game starts,","type":"text"},{"text":" ","type":"text"},{"text":"increments it each time a new turn begins,","type":"text"},{"type":"text","text":" "},{"text":"and prints out the total number of turns once the game has ended.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of "},{"code":"gameDidStart(_:)","type":"codeVoice"},{"text":" shown above uses the ","type":"text"},{"type":"codeVoice","code":"game"},{"text":" parameter","type":"text"},{"type":"text","text":" "},{"text":"to print some introductory information about the game that’s about to be played.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"game"},{"type":"text","text":" parameter has a type of "},{"type":"codeVoice","code":"DiceGame"},{"type":"text","text":", not "},{"type":"codeVoice","code":"SnakesAndLadders"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so "},{"code":"gameDidStart(_:)","type":"codeVoice"},{"type":"text","text":" can access and use only methods and properties that"},{"type":"text","text":" "},{"text":"are implemented as part of the ","type":"text"},{"type":"codeVoice","code":"DiceGame"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, the method is still able to use type casting to"},{"type":"text","text":" "},{"text":"query the type of the underlying instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this example, it checks whether "},{"type":"codeVoice","code":"game"},{"type":"text","text":" is actually"},{"type":"text","text":" "},{"type":"text","text":"an instance of "},{"code":"SnakesAndLadders","type":"codeVoice"},{"type":"text","text":" behind the scenes,"},{"text":" ","type":"text"},{"type":"text","text":"and prints an appropriate message if so."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"gameDidStart(_:)","type":"codeVoice"},{"type":"text","text":" method also accesses the "},{"type":"codeVoice","code":"dice"},{"type":"text","text":" property of the passed "},{"code":"game","type":"codeVoice"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"code":"game","type":"codeVoice"},{"type":"text","text":" is known to conform to the "},{"code":"DiceGame","type":"codeVoice"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"it’s guaranteed to have a ","type":"text"},{"code":"dice","type":"codeVoice"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"gameDidStart(_:)"},{"type":"text","text":" method is able to access and print the dice’s "},{"code":"sides","type":"codeVoice"},{"text":" property,","type":"text"},{"type":"text","text":" "},{"text":"regardless of what kind of game is being played.","type":"text"}]},{"inlineContent":[{"text":"Here’s how ","type":"text"},{"type":"codeVoice","code":"DiceGameTracker"},{"text":" looks in action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let tracker = DiceGameTracker()","let game = SnakesAndLadders()","game.delegate = tracker","game.play()","\/\/ Started a new game of Snakes and Ladders","\/\/ The game is using a 6-sided dice","\/\/ Rolled a 3","\/\/ Rolled a 5","\/\/ Rolled a 4","\/\/ Rolled a 5","\/\/ The game lasted for 4 turns"]},{"type":"heading","level":2,"text":"Adding Protocol Conformance with an Extension","anchor":"Adding-Protocol-Conformance-with-an-Extension"},{"inlineContent":[{"type":"text","text":"You can extend an existing type to adopt and conform to a new protocol,"},{"type":"text","text":" "},{"type":"text","text":"even if you don’t have access to the source code for the existing type."},{"text":" ","type":"text"},{"type":"text","text":"Extensions can add new properties, methods, and subscripts to an existing type,"},{"type":"text","text":" "},{"text":"and are therefore able to add any requirements that a protocol may demand.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more about extensions, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Existing instances of a type automatically adopt and conform to a protocol"},{"text":" ","type":"text"},{"type":"text","text":"when that conformance is added to the instance’s type in an extension."}]}],"type":"aside","style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"For example, this protocol, called "},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":", can be implemented by"},{"text":" ","type":"text"},{"text":"any type that has a way to be represented as text.","type":"text"},{"type":"text","text":" "},{"text":"This might be a description of itself, or a text version of its current state:","type":"text"}],"type":"paragraph"},{"code":["protocol TextRepresentable {","    var textualDescription: String { get }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Dice"},{"type":"text","text":" class from above can be extended to adopt and conform to "},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["extension Dice: TextRepresentable {","    var textualDescription: String {","        return \"A \\(sides)-sided dice\"","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This extension adopts the new protocol in exactly the same way","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as if "},{"code":"Dice","type":"codeVoice"},{"type":"text","text":" had provided it in its original implementation."},{"type":"text","text":" "},{"text":"The protocol name is provided after the type name, separated by a colon,","type":"text"},{"text":" ","type":"text"},{"text":"and an implementation of all requirements of the protocol","type":"text"},{"text":" ","type":"text"},{"text":"is provided within the extension’s curly braces.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any "},{"code":"Dice","type":"codeVoice"},{"text":" instance can now be treated as ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())","print(d12.textualDescription)","\/\/ Prints \"A 12-sided dice\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, the "},{"type":"codeVoice","code":"SnakesAndLadders"},{"type":"text","text":" game class can be extended to"},{"type":"text","text":" "},{"type":"text","text":"adopt and conform to the "},{"type":"codeVoice","code":"TextRepresentable"},{"text":" protocol:","type":"text"}]},{"syntax":"swift","code":["extension SnakesAndLadders: TextRepresentable {","    var textualDescription: String {","        return \"A game of Snakes and Ladders with \\(finalSquare) squares\"","    }","}","print(game.textualDescription)","\/\/ Prints \"A game of Snakes and Ladders with 25 squares\""],"type":"codeListing"},{"level":3,"anchor":"Conditionally-Conforming-to-a-Protocol","type":"heading","text":"Conditionally Conforming to a Protocol"},{"inlineContent":[{"type":"text","text":"A generic type may be able to satisfy the requirements of a protocol"},{"text":" ","type":"text"},{"type":"text","text":"only under certain conditions,"},{"type":"text","text":" "},{"type":"text","text":"such as when the type’s generic parameter conforms to the protocol."},{"type":"text","text":" "},{"type":"text","text":"You can make a generic type conditionally conform to a protocol"},{"type":"text","text":" "},{"text":"by listing constraints when extending the type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Write these constraints after the name of the protocol you’re adopting"},{"text":" ","type":"text"},{"type":"text","text":"by writing a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause."},{"type":"text","text":" "},{"text":"For more about generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following extension"},{"text":" ","type":"text"},{"type":"text","text":"makes "},{"type":"codeVoice","code":"Array"},{"text":" instances conform to the ","type":"text"},{"code":"TextRepresentable","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"whenever they store elements of a type that conforms to "},{"type":"codeVoice","code":"TextRepresentable"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["extension Array: TextRepresentable where Element: TextRepresentable {","    var textualDescription: String {","        let itemsAsText = self.map { $0.textualDescription }","        return \"[\" + itemsAsText.joined(separator: \", \") + \"]\"","    }","}","let myDice = [d6, d12]","print(myDice.textualDescription)","\/\/ Prints \"[A 6-sided dice, A 12-sided dice]\""],"type":"codeListing","syntax":"swift"},{"text":"Declaring Protocol Adoption with an Extension","level":3,"anchor":"Declaring-Protocol-Adoption-with-an-Extension","type":"heading"},{"inlineContent":[{"text":"If a type already conforms to all of the requirements of a protocol,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but hasn’t yet stated that it adopts that protocol,"},{"type":"text","text":" "},{"type":"text","text":"you can make it adopt the protocol with an empty extension:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Hamster {","    var name: String","    var textualDescription: String {","        return \"A hamster named \\(name)\"","    }","}","extension Hamster: TextRepresentable {}"],"type":"codeListing"},{"inlineContent":[{"text":"Instances of ","type":"text"},{"code":"Hamster","type":"codeVoice"},{"type":"text","text":" can now be used wherever "},{"type":"codeVoice","code":"TextRepresentable"},{"text":" is the required type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let simonTheHamster = Hamster(name: \"Simon\")","let somethingTextRepresentable: TextRepresentable = simonTheHamster","print(somethingTextRepresentable.textualDescription)","\/\/ Prints \"A hamster named Simon\""]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Types don’t automatically adopt a protocol just by satisfying its requirements.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They must always explicitly declare their adoption of the protocol."}]}]},{"anchor":"Adopting-a-Protocol-Using-a-Synthesized-Implementation","text":"Adopting a Protocol Using a Synthesized Implementation","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Swift can automatically provide the protocol conformance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for "},{"code":"Equatable","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" ","type":"text"},{"type":"text","text":"in many simple cases."},{"type":"text","text":" "},{"type":"text","text":"Using this synthesized implementation"},{"type":"text","text":" "},{"type":"text","text":"means you don’t have to write repetitive boilerplate code"},{"type":"text","text":" "},{"type":"text","text":"to implement the protocol requirements yourself."}]},{"inlineContent":[{"type":"text","text":"Swift provides a synthesized implementation of "},{"type":"codeVoice","code":"Equatable"},{"text":" ","type":"text"},{"text":"for the following kinds of custom types:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures that have only stored properties that conform to the "},{"type":"codeVoice","code":"Equatable"},{"text":" protocol","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enumerations that have only associated types that conform to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol"}]}]},{"content":[{"inlineContent":[{"text":"Enumerations that have no associated types","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"To receive a synthesized implementation of "},{"type":"codeVoice","code":"=="},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"declare conformance to "},{"code":"Equatable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"in the file that contains the original declaration,"},{"text":" ","type":"text"},{"text":"without implementing an ","type":"text"},{"code":"==","type":"codeVoice"},{"type":"text","text":" operator yourself."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol provides a default implementation of "},{"code":"!=","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines a "},{"code":"Vector3D","type":"codeVoice"},{"text":" structure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for a three-dimensional position vector "},{"type":"codeVoice","code":"(x, y, z)"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"similar to the ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" structure."},{"text":" ","type":"text"},{"text":"Because the ","type":"text"},{"code":"x","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"y"},{"text":", and ","type":"text"},{"code":"z","type":"codeVoice"},{"type":"text","text":" properties are all of an "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" type,"},{"text":" ","type":"text"},{"code":"Vector3D","type":"codeVoice"},{"text":" receives synthesized implementations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the equivalence operators."}],"type":"paragraph"},{"syntax":"swift","code":["struct Vector3D: Equatable {","    var x = 0.0, y = 0.0, z = 0.0","}","","let twoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)","let anotherTwoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)","if twoThreeFour == anotherTwoThreeFour {","    print(\"These two vectors are also equivalent.\")","}","\/\/ Prints \"These two vectors are also equivalent.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Swift provides a synthesized implementation of ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" ","type":"text"},{"text":"for the following kinds of custom types:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures that have only stored properties that conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol"}]}]},{"content":[{"inlineContent":[{"text":"Enumerations that have only associated types that conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" protocol","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Enumerations that have no associated types","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"To receive a synthesized implementation of "},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"declare conformance to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" "},{"text":"in the file that contains the original declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without implementing a "},{"code":"hash(into:)","type":"codeVoice"},{"text":" method yourself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Swift provides a synthesized implementation of ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" "},{"text":"for enumerations that don’t have a raw value.","type":"text"},{"type":"text","text":" "},{"text":"If the enumeration has associated types,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"they must all conform to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"To receive a synthesized implementation of ","type":"text"},{"type":"codeVoice","code":"<"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"declare conformance to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" "},{"type":"text","text":"in the file that contains the original enumeration declaration,"},{"type":"text","text":" "},{"type":"text","text":"without implementing a "},{"code":"<","type":"codeVoice"},{"type":"text","text":" operator yourself."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol’s default implementation"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"codeVoice","code":"<="},{"type":"text","text":", "},{"type":"codeVoice","code":">"},{"type":"text","text":", and "},{"code":">=","type":"codeVoice"},{"type":"text","text":" provides the remaining comparison operators."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a "},{"code":"SkillLevel","type":"codeVoice"},{"text":" enumeration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with cases for beginners, intermediates, and experts."},{"type":"text","text":" "},{"type":"text","text":"Experts are additionally ranked by the number of stars they have."}]},{"type":"codeListing","syntax":"swift","code":["enum SkillLevel: Comparable {","    case beginner","    case intermediate","    case expert(stars: Int)","}","var levels = [SkillLevel.intermediate, SkillLevel.beginner,","              SkillLevel.expert(stars: 5), SkillLevel.expert(stars: 3)]","for level in levels.sorted() {","    print(level)","}","\/\/ Prints \"beginner\"","\/\/ Prints \"intermediate\"","\/\/ Prints \"expert(stars: 3)\"","\/\/ Prints \"expert(stars: 5)\""]},{"type":"heading","level":2,"text":"Collections of Protocol Types","anchor":"Collections-of-Protocol-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A protocol can be used as the type to be stored in"},{"text":" ","type":"text"},{"text":"a collection such as an array or a dictionary,","type":"text"},{"type":"text","text":" "},{"text":"as mentioned in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocols-as-Types"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This example creates an array of "},{"type":"codeVoice","code":"TextRepresentable"},{"text":" things:","type":"text"}]},{"syntax":"swift","code":["let things: [TextRepresentable] = [game, d12, simonTheHamster]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"It’s now possible to iterate over the items in the array,"},{"text":" ","type":"text"},{"text":"and print each item’s textual description:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for thing in things {","    print(thing.textualDescription)","}","\/\/ A game of Snakes and Ladders with 25 squares","\/\/ A 12-sided dice","\/\/ A hamster named Simon"]},{"inlineContent":[{"text":"Note that the ","type":"text"},{"code":"thing","type":"codeVoice"},{"text":" constant is of type ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"It’s not of type ","type":"text"},{"type":"codeVoice","code":"Dice"},{"type":"text","text":", or "},{"code":"DiceGame","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"Hamster","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even if the actual instance behind the scenes is of one of those types."},{"text":" ","type":"text"},{"text":"Nonetheless, because it’s of type ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and anything that’s ","type":"text"},{"code":"TextRepresentable","type":"codeVoice"},{"type":"text","text":" is known to have a "},{"code":"textualDescription","type":"codeVoice"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"it’s safe to access "},{"type":"codeVoice","code":"thing.textualDescription"},{"text":" each time through the loop.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Protocol Inheritance","type":"heading","anchor":"Protocol-Inheritance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A protocol can "},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" one or more other protocols","type":"text"},{"type":"text","text":" "},{"text":"and can add further requirements on top of the requirements it inherits.","type":"text"},{"type":"text","text":" "},{"text":"The syntax for protocol inheritance is similar to the syntax for class inheritance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but with the option to list multiple inherited protocols, separated by commas:"}]},{"code":["protocol InheritingProtocol: SomeProtocol, AnotherProtocol {","    \/\/ protocol definition goes here","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of a protocol that inherits","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":" protocol from above:"}]},{"syntax":"swift","type":"codeListing","code":["protocol PrettyTextRepresentable: TextRepresentable {","    var prettyTextualDescription: String { get }","}"]},{"type":"paragraph","inlineContent":[{"text":"This example defines a new protocol, ","type":"text"},{"code":"PrettyTextRepresentable","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which inherits from ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Anything that adopts ","type":"text"},{"type":"codeVoice","code":"PrettyTextRepresentable"},{"text":" must satisfy all of the requirements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enforced by "},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":","},{"type":"text","text":" "},{"inlineContent":[{"text":"plus","type":"text"}],"type":"emphasis"},{"text":" the additional requirements enforced by ","type":"text"},{"code":"PrettyTextRepresentable","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"In this example, ","type":"text"},{"type":"codeVoice","code":"PrettyTextRepresentable"},{"text":" adds a single requirement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to provide a gettable property called "},{"type":"codeVoice","code":"prettyTextualDescription"},{"type":"text","text":" that returns a "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SnakesAndLadders"},{"text":" class can be extended to adopt and conform to ","type":"text"},{"type":"codeVoice","code":"PrettyTextRepresentable"},{"text":":","type":"text"}]},{"syntax":"swift","code":["extension SnakesAndLadders: PrettyTextRepresentable {","    var prettyTextualDescription: String {","        var output = textualDescription + \":\\n\"","        for index in 1...finalSquare {","            switch board[index] {","            case let ladder where ladder > 0:","                output += \"▲ \"","            case let snake where snake < 0:","                output += \"▼ \"","            default:","                output += \"○ \"","            }","        }","        return output","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This extension states that it adopts the ","type":"text"},{"code":"PrettyTextRepresentable","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"and provides an implementation of the ","type":"text"},{"type":"codeVoice","code":"prettyTextualDescription"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"SnakesAndLadders"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"Anything that’s "},{"type":"codeVoice","code":"PrettyTextRepresentable"},{"text":" must also be ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the implementation of "},{"code":"prettyTextualDescription","type":"codeVoice"},{"type":"text","text":" starts"},{"type":"text","text":" "},{"text":"by accessing the ","type":"text"},{"code":"textualDescription","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"type":"codeVoice","code":"TextRepresentable"},{"type":"text","text":" protocol to begin an output string."},{"type":"text","text":" "},{"type":"text","text":"It appends a colon and a line break,"},{"type":"text","text":" "},{"type":"text","text":"and uses this as the start of its pretty text representation."},{"type":"text","text":" "},{"text":"It then iterates through the array of board squares,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and appends a geometric shape to represent the contents of each square:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If the square’s value is greater than ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", it’s the base of a ladder,"},{"type":"text","text":" "},{"type":"text","text":"and is represented by "},{"type":"codeVoice","code":"▲"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"If the square’s value is less than ","type":"text"},{"type":"codeVoice","code":"0"},{"text":", it’s the head of a snake,","type":"text"},{"type":"text","text":" "},{"text":"and is represented by ","type":"text"},{"type":"codeVoice","code":"▼"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Otherwise, the square’s value is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", and it’s a “free” square,"},{"text":" ","type":"text"},{"text":"represented by ","type":"text"},{"code":"○","type":"codeVoice"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"prettyTextualDescription"},{"type":"text","text":" property can now be used to print a pretty text description"},{"type":"text","text":" "},{"text":"of any ","type":"text"},{"type":"codeVoice","code":"SnakesAndLadders"},{"text":" instance:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(game.prettyTextualDescription)","\/\/ A game of Snakes and Ladders with 25 squares:","\/\/ ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○"]},{"level":2,"type":"heading","anchor":"Class-Only-Protocols","text":"Class-Only Protocols"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can limit protocol adoption to class types (and not structures or enumerations)"},{"text":" ","type":"text"},{"text":"by adding the ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"text":" protocol to a protocol’s inheritance list.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["protocol SomeClassOnlyProtocol: AnyObject, SomeInheritedProtocol {","    \/\/ class-only protocol definition goes here","}"]},{"inlineContent":[{"type":"text","text":"In the example above, "},{"code":"SomeClassOnlyProtocol","type":"codeVoice"},{"text":" can only be adopted by class types.","type":"text"},{"type":"text","text":" "},{"text":"It’s a compile-time error to write a structure or enumeration definition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that tries to adopt "},{"code":"SomeClassOnlyProtocol","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a class-only protocol when the behavior defined by that protocol’s requirements"},{"type":"text","text":" "},{"type":"text","text":"assumes or requires that a conforming type has"},{"type":"text","text":" "},{"text":"reference semantics rather than value semantics.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more about reference and value semantics,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"text":"Protocol Composition","level":2,"anchor":"Protocol-Composition","type":"heading"},{"inlineContent":[{"text":"It can be useful to require a type to conform to multiple protocols at the same time.","type":"text"},{"text":" ","type":"text"},{"text":"You can combine multiple protocols into a single requirement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol composition"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Protocol compositions behave as if you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined a temporary local protocol that has the combined requirements"},{"text":" ","type":"text"},{"text":"of all protocols in the composition.","type":"text"},{"type":"text","text":" "},{"text":"Protocol compositions don’t define any new protocol types.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Protocol compositions have the form ","type":"text"},{"type":"codeVoice","code":"SomeProtocol & AnotherProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can list as many protocols as you need,"},{"type":"text","text":" "},{"type":"text","text":"separating them with ampersands ("},{"type":"codeVoice","code":"&"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In addition to its list of protocols,"},{"text":" ","type":"text"},{"text":"a protocol composition can also contain one class type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which you can use to specify a required superclass."}]},{"inlineContent":[{"type":"text","text":"Here’s an example that combines two protocols called "},{"code":"Named","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Aged"},{"text":" ","type":"text"},{"type":"text","text":"into a single protocol composition requirement on a function parameter:"}],"type":"paragraph"},{"syntax":"swift","code":["protocol Named {","    var name: String { get }","}","protocol Aged {","    var age: Int { get }","}","struct Person: Named, Aged {","    var name: String","    var age: Int","}","func wishHappyBirthday(to celebrator: Named & Aged) {","    print(\"Happy birthday, \\(celebrator.name), you're \\(celebrator.age)!\")","}","let birthdayPerson = Person(name: \"Malcolm\", age: 21)","wishHappyBirthday(to: birthdayPerson)","\/\/ Prints \"Happy birthday, Malcolm, you're 21!\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In this example,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Named"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"has a single requirement for a gettable "},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Aged","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"has a single requirement for a gettable ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"age"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Both protocols are adopted by a structure called "},{"type":"codeVoice","code":"Person"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The example also defines a ","type":"text"},{"type":"codeVoice","code":"wishHappyBirthday(to:)"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"celebrator"},{"type":"text","text":" parameter is "},{"type":"codeVoice","code":"Named & Aged"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which means “any type that conforms to both the "},{"type":"codeVoice","code":"Named"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Aged"},{"text":" protocols.”","type":"text"},{"type":"text","text":" "},{"text":"It doesn’t matter which specific type is passed to the function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as long as it conforms to both of the required protocols."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example then creates a new ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance called "},{"type":"codeVoice","code":"birthdayPerson"},{"type":"text","text":" "},{"text":"and passes this new instance to the ","type":"text"},{"code":"wishHappyBirthday(to:)","type":"codeVoice"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"Person"},{"text":" conforms to both protocols, this call is valid,","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"wishHappyBirthday(to:)"},{"text":" function can print its birthday greeting.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here’s an example that combines"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Named","type":"codeVoice"},{"text":" protocol from the previous example","type":"text"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"Location"},{"type":"text","text":" class:"}],"type":"paragraph"},{"code":["class Location {","    var latitude: Double","    var longitude: Double","    init(latitude: Double, longitude: Double) {","        self.latitude = latitude","        self.longitude = longitude","    }","}","class City: Location, Named {","    var name: String","    init(name: String, latitude: Double, longitude: Double) {","        self.name = name","        super.init(latitude: latitude, longitude: longitude)","    }","}","func beginConcert(in location: Location & Named) {","    print(\"Hello, \\(location.name)!\")","}","","let seattle = City(name: \"Seattle\", latitude: 47.6, longitude: -122.3)","beginConcert(in: seattle)","\/\/ Prints \"Hello, Seattle!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"beginConcert(in:)"},{"type":"text","text":" function takes"},{"type":"text","text":" "},{"type":"text","text":"a parameter of type "},{"code":"Location & Named","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means “any type that’s a subclass of "},{"type":"codeVoice","code":"Location"},{"type":"text","text":" "},{"text":"and that conforms to the ","type":"text"},{"type":"codeVoice","code":"Named"},{"type":"text","text":" protocol.”"},{"text":" ","type":"text"},{"type":"text","text":"In this case, "},{"type":"codeVoice","code":"City"},{"text":" satisfies both requirements.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing "},{"code":"birthdayPerson","type":"codeVoice"},{"type":"text","text":" to the "},{"code":"beginConcert(in:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"is invalid because "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" isn’t a subclass of "},{"type":"codeVoice","code":"Location"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Likewise,"},{"type":"text","text":" "},{"text":"if you made a subclass of ","type":"text"},{"type":"codeVoice","code":"Location"},{"type":"text","text":" "},{"type":"text","text":"that didn’t conform to the "},{"type":"codeVoice","code":"Named"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"code":"beginConcert(in:)","type":"codeVoice"},{"type":"text","text":" with an instance of that type"},{"type":"text","text":" "},{"type":"text","text":"is also invalid."}]},{"text":"Checking for Protocol Conformance","anchor":"Checking-for-Protocol-Conformance","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"is"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as"},{"text":" operators described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"type":"text","text":" "},{"text":"to check for protocol conformance, and to cast to a specific protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Checking for and casting to a protocol"},{"text":" ","type":"text"},{"type":"text","text":"follows exactly the same syntax as checking for and casting to a type:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"is"},{"type":"text","text":" operator returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if an instance conforms to a protocol"},{"text":" ","type":"text"},{"type":"text","text":"and returns "},{"type":"codeVoice","code":"false"},{"text":" if it doesn’t.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"as?","type":"codeVoice"},{"text":" version of the downcast operator returns","type":"text"},{"text":" ","type":"text"},{"text":"an optional value of the protocol’s type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and this value is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the instance doesn’t conform to that protocol."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"as!","type":"codeVoice"},{"type":"text","text":" version of the downcast operator forces the downcast to the protocol type"},{"text":" ","type":"text"},{"type":"text","text":"and triggers a runtime error if the downcast doesn’t succeed."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a protocol called "},{"type":"codeVoice","code":"HasArea"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a single property requirement of a gettable ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" property called ","type":"text"},{"code":"area","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["protocol HasArea {","    var area: Double { get }","}"]},{"inlineContent":[{"text":"Here are two classes, ","type":"text"},{"code":"Circle","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Country"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"both of which conform to the "},{"code":"HasArea","type":"codeVoice"},{"text":" protocol:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Circle: HasArea {","    let pi = 3.1415927","    var radius: Double","    var area: Double { return pi * radius * radius }","    init(radius: Double) { self.radius = radius }","}","class Country: HasArea {","    var area: Double","    init(area: Double) { self.area = area }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Circle"},{"text":" class implements the ","type":"text"},{"code":"area","type":"codeVoice"},{"text":" property requirement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a computed property, based on a stored "},{"code":"radius","type":"codeVoice"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" class implements the ","type":"text"},{"code":"area","type":"codeVoice"},{"text":" requirement directly as a stored property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both classes correctly conform to the "},{"type":"codeVoice","code":"HasArea"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s a class called "},{"type":"codeVoice","code":"Animal"},{"text":", which doesn’t conform to the ","type":"text"},{"type":"codeVoice","code":"HasArea"},{"text":" protocol:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Animal {","    var legs: Int","    init(legs: Int) { self.legs = legs }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Circle"},{"type":"text","text":", "},{"code":"Country","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Animal","type":"codeVoice"},{"type":"text","text":" classes don’t have a shared base class."},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, they’re all classes, and so instances of all three types"},{"text":" ","type":"text"},{"type":"text","text":"can be used to initialize an array that stores values of type "},{"type":"codeVoice","code":"AnyObject"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let objects: [AnyObject] = [","    Circle(radius: 2.0),","    Country(area: 243_610),","    Animal(legs: 4)","]"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"objects","type":"codeVoice"},{"text":" array is initialized with an array literal containing","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"Circle","type":"codeVoice"},{"text":" instance with a radius of 2 units;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"Country"},{"text":" instance initialized with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the surface area of the United Kingdom in square kilometers;"},{"type":"text","text":" "},{"type":"text","text":"and an "},{"code":"Animal","type":"codeVoice"},{"type":"text","text":" instance with four legs."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"objects"},{"text":" array can now be iterated,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and each object in the array can be checked to see if"},{"type":"text","text":" "},{"text":"it conforms to the ","type":"text"},{"type":"codeVoice","code":"HasArea"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"syntax":"swift","code":["for object in objects {","    if let objectWithArea = object as? HasArea {","        print(\"Area is \\(objectWithArea.area)\")","    } else {","        print(\"Something that doesn't have an area\")","    }","}","\/\/ Area is 12.5663708","\/\/ Area is 243610.0","\/\/ Something that doesn't have an area"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Whenever an object in the array conforms to the "},{"type":"codeVoice","code":"HasArea"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"the optional value returned by the "},{"type":"codeVoice","code":"as?"},{"text":" operator is unwrapped with optional binding","type":"text"},{"type":"text","text":" "},{"text":"into a constant called ","type":"text"},{"code":"objectWithArea","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"objectWithArea","type":"codeVoice"},{"type":"text","text":" constant is known to be of type "},{"type":"codeVoice","code":"HasArea"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and so its "},{"type":"codeVoice","code":"area"},{"type":"text","text":" property can be accessed and printed in a type-safe way."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that the underlying objects aren’t changed by the casting process."},{"type":"text","text":" "},{"type":"text","text":"They continue to be a "},{"type":"codeVoice","code":"Circle"},{"type":"text","text":", a "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" and an "},{"code":"Animal","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"However, at the point that they’re stored in the ","type":"text"},{"code":"objectWithArea","type":"codeVoice"},{"text":" constant,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they’re only known to be of type "},{"type":"codeVoice","code":"HasArea"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and so only their ","type":"text"},{"type":"codeVoice","code":"area"},{"type":"text","text":" property can be accessed."}],"type":"paragraph"},{"type":"heading","text":"Optional Protocol Requirements","anchor":"Optional-Protocol-Requirements","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define "},{"type":"emphasis","inlineContent":[{"text":"optional requirements","type":"text"}]},{"type":"text","text":" for protocols."},{"text":" ","type":"text"},{"type":"text","text":"These requirements don’t have to be implemented by types that conform to the protocol."},{"type":"text","text":" "},{"text":"Optional requirements are prefixed by the ","type":"text"},{"code":"optional","type":"codeVoice"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"as part of the protocol’s definition."},{"text":" ","type":"text"},{"type":"text","text":"Optional requirements are available so that you can write code"},{"text":" ","type":"text"},{"type":"text","text":"that interoperates with Objective-C."},{"type":"text","text":" "},{"type":"text","text":"Both the protocol and the optional requirement"},{"text":" ","type":"text"},{"type":"text","text":"must be marked with the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"type":"text","text":"Note that "},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" protocols can be adopted only by classes,"},{"type":"text","text":" "},{"type":"text","text":"not by structures or enumerations."}]},{"type":"paragraph","inlineContent":[{"text":"When you use a method or property in an optional requirement,","type":"text"},{"type":"text","text":" "},{"text":"its type automatically becomes an optional.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a method of type "},{"code":"(Int) -> String","type":"codeVoice"},{"text":" becomes ","type":"text"},{"type":"codeVoice","code":"((Int) -> String)?"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that the entire function type"},{"type":"text","text":" "},{"text":"is wrapped in the optional,","type":"text"},{"type":"text","text":" "},{"text":"not the method’s return value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An optional protocol requirement can be called with optional chaining,"},{"type":"text","text":" "},{"type":"text","text":"to account for the possibility that the requirement was not implemented"},{"type":"text","text":" "},{"type":"text","text":"by a type that conforms to the protocol."},{"text":" ","type":"text"},{"type":"text","text":"You check for an implementation of an optional method"},{"type":"text","text":" "},{"type":"text","text":"by writing a question mark after the name of the method when it’s called,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"someOptionalMethod?(someArgument)"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For information on optional chaining, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The following example defines an integer-counting class called "},{"code":"Counter","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which uses an external data source to provide its increment amount."},{"text":" ","type":"text"},{"type":"text","text":"This data source is defined by the "},{"code":"CounterDataSource","type":"codeVoice"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"which has two optional requirements:","type":"text"}],"type":"paragraph"},{"code":["@objc protocol CounterDataSource {","    @objc optional func increment(forCount count: Int) -> Int","    @objc optional var fixedIncrement: Int { get }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"CounterDataSource"},{"type":"text","text":" protocol defines"},{"text":" ","type":"text"},{"type":"text","text":"an optional method requirement called "},{"type":"codeVoice","code":"increment(forCount:)"},{"type":"text","text":" "},{"type":"text","text":"and an optional property requirement called "},{"code":"fixedIncrement","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These requirements define two different ways for data sources to provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an appropriate increment amount for a "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" instance."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strictly speaking, you can write a custom class"},{"type":"text","text":" "},{"type":"text","text":"that conforms to "},{"type":"codeVoice","code":"CounterDataSource"},{"text":" without implementing","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"either","type":"text"}]},{"text":" protocol requirement.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They’re both optional, after all."},{"text":" ","type":"text"},{"type":"text","text":"Although technically allowed, this wouldn’t make for a very good data source."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Counter"},{"text":" class, defined below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has an optional "},{"code":"dataSource","type":"codeVoice"},{"text":" property of type ","type":"text"},{"code":"CounterDataSource?","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Counter {","    var count = 0","    var dataSource: CounterDataSource?","    func increment() {","        if let amount = dataSource?.increment?(forCount: count) {","            count += amount","        } else if let amount = dataSource?.fixedIncrement {","            count += amount","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" class stores its current value in a variable property called "},{"type":"codeVoice","code":"count"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Counter","type":"codeVoice"},{"text":" class also defines a method called ","type":"text"},{"type":"codeVoice","code":"increment"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which increments the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property every time the method is called."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"increment()","type":"codeVoice"},{"type":"text","text":" method first tries to retrieve an increment amount"},{"type":"text","text":" "},{"type":"text","text":"by looking for an implementation of the "},{"type":"codeVoice","code":"increment(forCount:)"},{"type":"text","text":" method on its data source."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"increment()"},{"type":"text","text":" method uses optional chaining to try to call "},{"type":"codeVoice","code":"increment(forCount:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and passes the current "},{"code":"count","type":"codeVoice"},{"type":"text","text":" value as the method’s single argument."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that "},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" levels of optional chaining are at play here."},{"text":" ","type":"text"},{"type":"text","text":"First, it’s possible that "},{"code":"dataSource","type":"codeVoice"},{"type":"text","text":" may be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and so "},{"type":"codeVoice","code":"dataSource"},{"text":" has a question mark after its name to indicate that","type":"text"},{"type":"text","text":" "},{"code":"increment(forCount:)","type":"codeVoice"},{"text":" should be called only if ","type":"text"},{"type":"codeVoice","code":"dataSource"},{"text":" isn’t ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Second, even if "},{"type":"codeVoice","code":"dataSource"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"does","type":"text"}]},{"type":"text","text":" exist,"},{"type":"text","text":" "},{"type":"text","text":"there’s no guarantee that it implements "},{"type":"codeVoice","code":"increment(forCount:)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because it’s an optional requirement."},{"type":"text","text":" "},{"text":"Here, the possibility that ","type":"text"},{"type":"codeVoice","code":"increment(forCount:)"},{"text":" might not be implemented","type":"text"},{"type":"text","text":" "},{"text":"is also handled by optional chaining.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The call to "},{"type":"codeVoice","code":"increment(forCount:)"},{"text":" happens","type":"text"},{"text":" ","type":"text"},{"text":"only if ","type":"text"},{"code":"increment(forCount:)","type":"codeVoice"},{"type":"text","text":" exists —"},{"text":" ","type":"text"},{"text":"that is, if it isn’t ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This is why "},{"type":"codeVoice","code":"increment(forCount:)"},{"type":"text","text":" is also written with a question mark after its name."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because the call to ","type":"text"},{"code":"increment(forCount:)","type":"codeVoice"},{"text":" can fail for either of these two reasons,","type":"text"},{"text":" ","type":"text"},{"text":"the call returns an ","type":"text"},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"text":"This is true even though ","type":"text"},{"code":"increment(forCount:)","type":"codeVoice"},{"type":"text","text":" is defined as returning"},{"type":"text","text":" "},{"text":"a non-optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value in the definition of "},{"code":"CounterDataSource","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Even though there are two optional chaining operations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one after another,"},{"text":" ","type":"text"},{"text":"the result is still wrapped in a single optional.","type":"text"},{"text":" ","type":"text"},{"text":"For more information about using multiple optional chaining operations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Linking-Multiple-Levels-of-Chaining"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"After calling "},{"code":"increment(forCount:)","type":"codeVoice"},{"type":"text","text":", the optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" that it returns"},{"text":" ","type":"text"},{"text":"is unwrapped into a constant called ","type":"text"},{"type":"codeVoice","code":"amount"},{"type":"text","text":", using optional binding."},{"type":"text","text":" "},{"type":"text","text":"If the optional "},{"type":"codeVoice","code":"Int"},{"text":" does contain a value —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is, if the delegate and method both exist,"},{"type":"text","text":" "},{"type":"text","text":"and the method returned a value —"},{"type":"text","text":" "},{"text":"the unwrapped ","type":"text"},{"type":"codeVoice","code":"amount"},{"text":" is added onto the stored ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property,","type":"text"},{"text":" ","type":"text"},{"text":"and incrementation is complete.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If it’s "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" possible to retrieve a value from the "},{"type":"codeVoice","code":"increment(forCount:)"},{"text":" method —","type":"text"},{"text":" ","type":"text"},{"text":"either because ","type":"text"},{"type":"codeVoice","code":"dataSource"},{"text":" is nil,","type":"text"},{"text":" ","type":"text"},{"text":"or because the data source doesn’t implement ","type":"text"},{"code":"increment(forCount:)","type":"codeVoice"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then the "},{"type":"codeVoice","code":"increment()"},{"text":" method tries to retrieve a value","type":"text"},{"text":" ","type":"text"},{"text":"from the data source’s ","type":"text"},{"code":"fixedIncrement","type":"codeVoice"},{"text":" property instead.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"fixedIncrement"},{"text":" property is also an optional requirement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its value is an optional "},{"type":"codeVoice","code":"Int"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"text":"even though ","type":"text"},{"type":"codeVoice","code":"fixedIncrement"},{"text":" is defined as a non-optional ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" property","type":"text"},{"type":"text","text":" "},{"text":"as part of the ","type":"text"},{"code":"CounterDataSource","type":"codeVoice"},{"text":" protocol definition.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here’s a simple "},{"type":"codeVoice","code":"CounterDataSource"},{"type":"text","text":" implementation where the data source"},{"type":"text","text":" "},{"text":"returns a constant value of ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":" every time it’s queried."},{"type":"text","text":" "},{"type":"text","text":"It does this by implementing the optional "},{"code":"fixedIncrement","type":"codeVoice"},{"type":"text","text":" property requirement:"}],"type":"paragraph"},{"code":["class ThreeSource: NSObject, CounterDataSource {","    let fixedIncrement = 3","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use an instance of "},{"type":"codeVoice","code":"ThreeSource"},{"type":"text","text":" as the data source for a new "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" instance:"}]},{"code":["var counter = Counter()","counter.dataSource = ThreeSource()","for _ in 1...4 {","    counter.increment()","    print(counter.count)","}","\/\/ 3","\/\/ 6","\/\/ 9","\/\/ 12"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above creates a new "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" instance;"},{"text":" ","type":"text"},{"type":"text","text":"sets its data source to be a new "},{"code":"ThreeSource","type":"codeVoice"},{"type":"text","text":" instance;"},{"type":"text","text":" "},{"text":"and calls the counter’s ","type":"text"},{"code":"increment()","type":"codeVoice"},{"text":" method four times.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As expected, the counter’s "},{"code":"count","type":"codeVoice"},{"text":" property increases by three","type":"text"},{"text":" ","type":"text"},{"text":"each time ","type":"text"},{"code":"increment()","type":"codeVoice"},{"type":"text","text":" is called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a more complex data source called "},{"type":"codeVoice","code":"TowardsZeroSource"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which makes a ","type":"text"},{"type":"codeVoice","code":"Counter"},{"text":" instance count up or down towards zero","type":"text"},{"type":"text","text":" "},{"text":"from its current ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" value:"}]},{"syntax":"swift","type":"codeListing","code":["class TowardsZeroSource: NSObject, CounterDataSource {","    func increment(forCount count: Int) -> Int {","        if count == 0 {","            return 0","        } else if count < 0 {","            return 1","        } else {","            return -1","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"TowardsZeroSource"},{"type":"text","text":" class implements"},{"type":"text","text":" "},{"type":"text","text":"the optional "},{"code":"increment(forCount:)","type":"codeVoice"},{"text":" method from the ","type":"text"},{"code":"CounterDataSource","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and uses the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" argument value to work out which direction to count in."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"count","type":"codeVoice"},{"text":" is already zero, the method returns ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" "},{"type":"text","text":"to indicate that no further counting should take place."}]},{"inlineContent":[{"type":"text","text":"You can use an instance of "},{"code":"TowardsZeroSource","type":"codeVoice"},{"text":" with the existing ","type":"text"},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"to count from "},{"type":"codeVoice","code":"-4"},{"text":" to zero.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Once the counter reaches zero, no more counting takes place:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["counter.count = -4","counter.dataSource = TowardsZeroSource()","for _ in 1...5 {","    counter.increment()","    print(counter.count)","}","\/\/ -3","\/\/ -2","\/\/ -1","\/\/ 0","\/\/ 0"]},{"type":"heading","anchor":"Protocol-Extensions","level":2,"text":"Protocol Extensions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocols can be extended to provide method,"},{"type":"text","text":" "},{"type":"text","text":"initializer, subscript, and computed property implementations"},{"text":" ","type":"text"},{"text":"to conforming types.","type":"text"},{"text":" ","type":"text"},{"text":"This allows you to define behavior on protocols themselves,","type":"text"},{"type":"text","text":" "},{"text":"rather than in each type’s individual conformance or in a global function.","type":"text"}]},{"inlineContent":[{"text":"For example, the ","type":"text"},{"type":"codeVoice","code":"RandomNumberGenerator"},{"text":" protocol can be extended","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide a "},{"type":"codeVoice","code":"randomBool()"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"text":"which uses the result of the required ","type":"text"},{"type":"codeVoice","code":"random()"},{"type":"text","text":" method"},{"type":"text","text":" "},{"text":"to return a random ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" value:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension RandomNumberGenerator {","    func randomBool() -> Bool {","        return random() > 0.5","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"By creating an extension on the protocol,","type":"text"},{"type":"text","text":" "},{"text":"all conforming types automatically gain this method implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without any additional modification."}]},{"syntax":"swift","code":["let generator = LinearCongruentialGenerator()","print(\"Here's a random number: \\(generator.random())\")","\/\/ Prints \"Here's a random number: 0.3746499199817101\"","print(\"And here's a random Boolean: \\(generator.randomBool())\")","\/\/ Prints \"And here's a random Boolean: true\""],"type":"codeListing"},{"inlineContent":[{"text":"Protocol extensions can add implementations to conforming types","type":"text"},{"type":"text","text":" "},{"text":"but can’t make a protocol extend or inherit from another protocol.","type":"text"},{"type":"text","text":" "},{"text":"Protocol inheritance is always specified in the protocol declaration itself.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Providing Default Implementations","anchor":"Providing-Default-Implementations"},{"inlineContent":[{"type":"text","text":"You can use protocol extensions to provide a default implementation"},{"type":"text","text":" "},{"type":"text","text":"to any method or computed property requirement of that protocol."},{"text":" ","type":"text"},{"text":"If a conforming type provides its own implementation of a required method or property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that implementation will be used instead of the one provided by the extension."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol requirements with default implementations provided by extensions"},{"text":" ","type":"text"},{"type":"text","text":"are distinct from optional protocol requirements."},{"text":" ","type":"text"},{"type":"text","text":"Although conforming types don’t have to provide their own implementation of either,"},{"text":" ","type":"text"},{"text":"requirements with default implementations can be called without optional chaining.","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"code":"PrettyTextRepresentable","type":"codeVoice"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"text":"which inherits the ","type":"text"},{"type":"codeVoice","code":"TextRepresentable"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"can provide a default implementation of its required ","type":"text"},{"code":"prettyTextualDescription","type":"codeVoice"},{"type":"text","text":" property"},{"type":"text","text":" "},{"text":"to simply return the result of accessing the ","type":"text"},{"type":"codeVoice","code":"textualDescription"},{"text":" property:","type":"text"}]},{"code":["extension PrettyTextRepresentable  {","    var prettyTextualDescription: String {","        return textualDescription","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Adding Constraints to Protocol Extensions","level":3,"anchor":"Adding-Constraints-to-Protocol-Extensions"},{"inlineContent":[{"type":"text","text":"When you define a protocol extension,"},{"text":" ","type":"text"},{"type":"text","text":"you can specify constraints that conforming types"},{"type":"text","text":" "},{"type":"text","text":"must satisfy before the methods and properties of the extension are available."},{"text":" ","type":"text"},{"type":"text","text":"You write these constraints after the name of the protocol you’re extending"},{"type":"text","text":" "},{"text":"by writing a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause.","type":"text"},{"type":"text","text":" "},{"text":"For more about generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can define an extension to the "},{"code":"Collection","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"that applies to any collection whose elements conform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"code":"Equatable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By constraining a collection’s elements to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"a part of the Swift standard library,"},{"type":"text","text":" "},{"text":"you can use the ","type":"text"},{"type":"codeVoice","code":"=="},{"text":" and ","type":"text"},{"type":"codeVoice","code":"!="},{"text":" operators to check for equality and inequality between two elements.","type":"text"}],"type":"paragraph"},{"code":["extension Collection where Element: Equatable {","    func allEqual() -> Bool {","        for element in self {","            if element != self.first {","                return false","            }","        }","        return true","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"allEqual()"},{"type":"text","text":" method returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" "},{"text":"only if all the elements in the collection are equal.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Consider two arrays of integers,","type":"text"},{"type":"text","text":" "},{"text":"one where all the elements are the same,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and one where they aren’t:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let equalNumbers = [100, 100, 100, 100, 100]","let differentNumbers = [100, 100, 200, 100, 200]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because arrays conform to "},{"type":"codeVoice","code":"Collection"},{"text":" ","type":"text"},{"type":"text","text":"and integers conform to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"equalNumbers"},{"type":"text","text":" and "},{"type":"codeVoice","code":"differentNumbers"},{"text":" can use the ","type":"text"},{"type":"codeVoice","code":"allEqual()"},{"text":" method:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["print(equalNumbers.allEqual())","\/\/ Prints \"true\"","print(differentNumbers.allEqual())","\/\/ Prints \"false\""]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"If a conforming type satisfies the requirements for multiple constrained extensions"},{"type":"text","text":" "},{"type":"text","text":"that provide implementations for the same method or property,"},{"type":"text","text":" "},{"text":"Swift uses the implementation corresponding to the most specialized constraints.","type":"text"}],"type":"paragraph"}],"name":"Note"}],"kind":"content"}],"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining","title":"Optional Chaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocols-as-Types":{"abstract":[],"title":"Protocols as Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocols-as-Types","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Protocols-as-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/classesandstructures#Structures-and-Enumerations-Are-Value-Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","title":"Structures and Enumerations Are Value Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Required-Initializers":{"url":"\/documentation\/the-swift-programming-language\/initialization#Required-Initializers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","type":"topic","title":"Required Initializers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Linking-Multiple-Levels-of-Chaining":{"abstract":[],"title":"Linking Multiple Levels of Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Linking-Multiple-Levels-of-Chaining","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Linking-Multiple-Levels-of-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"url":"\/documentation\/the-swift-programming-language\/extensions","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Preventing-Overrides":{"url":"\/documentation\/the-swift-programming-language\/inheritance#Preventing-Overrides","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Preventing-Overrides","type":"topic","title":"Preventing Overrides","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Break":{"abstract":[],"title":"Break","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow#Break"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"topic","title":"Generic Where Clauses","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"abstract":[],"title":"Class-Only Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"type":"topic","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"title":"Control Flow","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","url":"\/documentation\/the-swift-programming-language\/controlflow","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"type":"topic","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","url":"\/documentation\/the-swift-programming-language\/generics","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Classes-Are-Reference-Types":{"title":"Classes Are Reference Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","abstract":[],"url":"\/documentation\/the-swift-programming-language\/classesandstructures#Classes-Are-Reference-Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"type":"topic","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"title":"Opaque and Boxed Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","url":"\/documentation\/the-swift-programming-language\/opaquetypes","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Strong-Reference-Cycles-Between-Class-Instances":{"abstract":[],"title":"Strong Reference Cycles Between Class Instances","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-Between-Class-Instances","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Strong-Reference-Cycles-Between-Class-Instances"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Failable-Initializers":{"url":"\/documentation\/the-swift-programming-language\/initialization#Failable-Initializers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers","type":"topic","title":"Failable Initializers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods#Modifying-Value-Types-from-Within-Instance-Methods":{"abstract":[],"title":"Modifying Value Types from Within Instance Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods#Modifying-Value-Types-from-Within-Instance-Methods","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods#Modifying-Value-Types-from-Within-Instance-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"url":"\/documentation\/the-swift-programming-language\/typecasting","type":"topic","kind":"article","title":"Type Casting","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"}}}