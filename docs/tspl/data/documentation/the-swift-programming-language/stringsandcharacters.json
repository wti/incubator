{"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"code":"\"hello, world\"","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"text":" ","type":"text"},{"type":"text","text":"including as a collection of "},{"code":"Character","type":"codeVoice"},{"text":" values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"text":" types provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a fast, Unicode-compliant way to work with text in your code."},{"type":"text","text":" "},{"type":"text","text":"The syntax for string creation and manipulation is lightweight and readable,"},{"type":"text","text":" "},{"text":"with a string literal syntax that’s similar to C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"String concatenation is as simple as"},{"type":"text","text":" "},{"text":"combining two strings with the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"text":"and string mutability is managed by choosing between a constant or a variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just like any other value in Swift."},{"text":" ","type":"text"},{"text":"You can also use strings to insert","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constants, variables, literals, and expressions into longer strings,"},{"type":"text","text":" "},{"text":"in a process known as string interpolation.","type":"text"},{"text":" ","type":"text"},{"text":"This makes it easy to create custom string values for display, storage, and printing.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Despite this simplicity of syntax,"},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" type is a fast, modern string implementation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Every string is composed of encoding-independent Unicode characters,"},{"type":"text","text":" "},{"type":"text","text":"and provides support for accessing those characters in various Unicode representations."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" type is bridged with Foundation’s ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" class."},{"type":"text","text":" "},{"type":"text","text":"Foundation also extends "},{"code":"String","type":"codeVoice"},{"text":" to expose methods defined by ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This means, if you import Foundation,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can access those "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" methods on "},{"type":"codeVoice","code":"String"},{"text":" without casting.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For more information about using "},{"type":"codeVoice","code":"String"},{"text":" with Foundation and Cocoa,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"anchor":"String-Literals","type":"heading","text":"String Literals","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can include predefined "},{"code":"String","type":"codeVoice"},{"text":" values within your code as ","type":"text"},{"inlineContent":[{"type":"text","text":"string literals"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A string literal is a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by double quotation marks ("},{"type":"codeVoice","code":"\""},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Use a string literal as an initial value for a constant or variable:"}],"type":"paragraph"},{"syntax":"swift","code":["let someString = \"Some string literal value\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that Swift infers a type of ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"someString"},{"text":" constant","type":"text"},{"text":" ","type":"text"},{"text":"because it’s initialized with a string literal value.","type":"text"}]},{"text":"Multiline String Literals","type":"heading","level":3,"anchor":"Multiline-String-Literals"},{"type":"paragraph","inlineContent":[{"text":"If you need a string that spans several lines,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a multiline string literal —"},{"text":" ","type":"text"},{"type":"text","text":"a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by three double quotation marks:"}]},{"code":["let quotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin,","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on","till you come to the end; then stop.\"","\"\"\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A multiline string literal includes all of the lines between","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its opening and closing quotation marks."},{"type":"text","text":" "},{"type":"text","text":"The string begins on the first line after the opening quotation marks ("},{"code":"\"\"\"","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and ends on the line before the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"text":"which means that neither of the strings below","type":"text"},{"type":"text","text":" "},{"type":"text","text":"start or end with a line break:"}]},{"code":["let singleLineString = \"These are the same.\"","let multilineString = \"\"\"","These are the same.","\"\"\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When your source code includes a line break"},{"type":"text","text":" "},{"text":"inside of a multiline string literal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that line break also appears in the string’s value."},{"text":" ","type":"text"},{"type":"text","text":"If you want to use line breaks"},{"text":" ","type":"text"},{"type":"text","text":"to make your source code easier to read,"},{"type":"text","text":" "},{"text":"but you don’t want the line breaks to be part of the string’s value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"write a backslash ("},{"type":"codeVoice","code":"\\"},{"text":") at the end of those lines:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let softWrappedQuotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin, \\","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on \\","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"text":"To make a multiline string literal that begins or ends with a line feed,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write a blank line as the first or last line."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let lineBreaks = \"\"\"","","This string starts with a line break.","It also ends with a line break.","","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string can be indented to match the surrounding code."},{"type":"text","text":" "},{"text":"The whitespace before the closing quotation marks (","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tells Swift what whitespace to ignore before all of the other lines."},{"type":"text","text":" "},{"type":"text","text":"However, if you write whitespace at the beginning of a line"},{"type":"text","text":" "},{"type":"text","text":"in addition to what’s before the closing quotation marks,"},{"text":" ","type":"text"},{"type":"text","text":"that whitespace "},{"type":"emphasis","inlineContent":[{"text":"is","type":"text"}]},{"text":" included.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"multilineStringWhitespace"}]},{"inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though the entire multiline string literal is indented,"},{"text":" ","type":"text"},{"text":"the first and last lines in the string don’t begin with any whitespace.","type":"text"},{"type":"text","text":" "},{"text":"The middle line has more indentation than the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"text":"so it starts with that extra four-space indentation.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Special-Characters-in-String-Literals","text":"Special Characters in String Literals"},{"inlineContent":[{"type":"text","text":"String literals can include the following special characters:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The escaped special characters "},{"code":"\\0","type":"codeVoice"},{"type":"text","text":" (null character), "},{"type":"codeVoice","code":"\\\\"},{"type":"text","text":" (backslash),"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\t"},{"type":"text","text":" (horizontal tab), "},{"code":"\\n","type":"codeVoice"},{"type":"text","text":" (line feed), "},{"type":"codeVoice","code":"\\r"},{"type":"text","text":" (carriage return),"},{"type":"text","text":" "},{"code":"\\\"","type":"codeVoice"},{"text":" (double quotation mark) and ","type":"text"},{"type":"codeVoice","code":"\\'"},{"type":"text","text":" (single quotation mark)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An arbitrary Unicode scalar value, written as ","type":"text"},{"type":"codeVoice","code":"\\u{"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"code":"}","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is a 1–8 digit hexadecimal number"},{"type":"text","text":" "},{"type":"text","text":"(Unicode is discussed in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode","isActive":true},{"type":"text","text":" below)"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The code below shows four examples of these special characters."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"wiseWords"},{"text":" constant contains two escaped double quotation marks.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"dollarSign"},{"text":", ","type":"text"},{"type":"codeVoice","code":"blackHeart"},{"type":"text","text":", and "},{"code":"sparklingHeart","type":"codeVoice"},{"type":"text","text":" constants"},{"type":"text","text":" "},{"type":"text","text":"demonstrate the Unicode scalar format:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"","\/\/ \"Imagination is more important than knowledge\" - Einstein","let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024","let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665","let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because multiline string literals use three double quotation marks instead of just one,"},{"type":"text","text":" "},{"text":"you can include a double quotation mark (","type":"text"},{"type":"codeVoice","code":"\""},{"text":") inside of a multiline string literal","type":"text"},{"type":"text","text":" "},{"text":"without escaping it.","type":"text"},{"type":"text","text":" "},{"text":"To include the text ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"escape at least one of the quotation marks."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["let threeDoubleQuotationMarks = \"\"\"","Escaping the first quotation mark \\\"\"\"","Escaping all three quotation marks \\\"\\\"\\\"","\"\"\""],"type":"codeListing"},{"type":"heading","text":"Extended String Delimiters","anchor":"Extended-String-Delimiters","level":3},{"inlineContent":[{"text":"You can place a string literal within ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended delimiters"}]},{"text":" ","type":"text"},{"type":"text","text":"to include special characters in a string"},{"type":"text","text":" "},{"type":"text","text":"without invoking their effect."},{"text":" ","type":"text"},{"text":"You place your string within quotation marks (","type":"text"},{"type":"codeVoice","code":"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and surround that with number signs ("},{"type":"codeVoice","code":"#"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, printing the string literal "},{"code":"#\"Line 1\\nLine 2\"#","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"prints the line feed escape sequence ("},{"type":"codeVoice","code":"\\n"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than printing the string across two lines."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need the special effects of a character in a string literal,"},{"type":"text","text":" "},{"text":"match the number of number signs within the string","type":"text"},{"type":"text","text":" "},{"text":"following the escape character (","type":"text"},{"type":"codeVoice","code":"\\"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"For example, if your string is "},{"type":"codeVoice","code":"#\"Line 1\\nLine 2\"#"},{"type":"text","text":" "},{"type":"text","text":"and you want to break the line,"},{"type":"text","text":" "},{"type":"text","text":"you can use "},{"type":"codeVoice","code":"#\"Line 1\\#nLine 2\"#"},{"text":" instead.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"###\"Line1\\###nLine2\"###"},{"type":"text","text":" also breaks the line."}]},{"inlineContent":[{"type":"text","text":"String literals created using extended delimiters can also be multiline string literals."},{"type":"text","text":" "},{"text":"You can use extended delimiters to include the text ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overriding the default behavior that ends the literal. For example:"}],"type":"paragraph"},{"code":["let threeMoreDoubleQuotationMarks = #\"\"\"","Here are three more double quotes: \"\"\"","\"\"\"#"],"syntax":"swift","type":"codeListing"},{"text":"Initializing an Empty String","anchor":"Initializing-an-Empty-String","level":2,"type":"heading"},{"inlineContent":[{"text":"To create an empty ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value as the starting point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for building a longer string,"},{"type":"text","text":" "},{"text":"either assign an empty string literal to a variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or initialize a new "},{"type":"codeVoice","code":"String"},{"text":" instance with initializer syntax:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var emptyString = \"\"               \/\/ empty string literal","var anotherEmptyString = String()  \/\/ initializer syntax","\/\/ these two strings are both empty, and are equivalent to each other"]},{"type":"paragraph","inlineContent":[{"text":"Find out whether a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value is empty"},{"text":" ","type":"text"},{"text":"by checking its Boolean ","type":"text"},{"type":"codeVoice","code":"isEmpty"},{"text":" property:","type":"text"}]},{"type":"codeListing","code":["if emptyString.isEmpty {","    print(\"Nothing to see here\")","}","\/\/ Prints \"Nothing to see here\""],"syntax":"swift"},{"type":"heading","anchor":"String-Mutability","level":2,"text":"String Mutability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You indicate whether a particular "},{"code":"String","type":"codeVoice"},{"type":"text","text":" can be modified (or "},{"type":"emphasis","inlineContent":[{"text":"mutated","type":"text"}]},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"by assigning it to a variable (in which case it can be modified),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or to a constant (in which case it can’t be modified):"}]},{"code":["var variableString = \"Horse\"","variableString += \" and carriage\"","\/\/ variableString is now \"Horse and carriage\"","","let constantString = \"Highlander\"","constantString += \" and another Highlander\"","\/\/ this reports a compile-time error - a constant string cannot be modified"],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach is different from string mutation in Objective-C and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"where you choose between two classes ("},{"type":"codeVoice","code":"NSString"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"NSMutableString"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate whether a string can be mutated."}]}],"name":"Note","type":"aside","style":"note"},{"level":2,"text":"Strings Are Value Types","anchor":"Strings-Are-Value-Types","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"text":" type is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"value type"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"If you create a new ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that "},{"code":"String","type":"codeVoice"},{"text":" value is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"text":" when it’s passed to a function or method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or when it’s assigned to a constant or variable."},{"text":" ","type":"text"},{"type":"text","text":"In each case, a new copy of the existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is created,"},{"type":"text","text":" "},{"type":"text","text":"and the new copy is passed or assigned, not the original version."},{"type":"text","text":" "},{"text":"Value types are described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s copy-by-default "},{"type":"codeVoice","code":"String"},{"text":" behavior ensures that","type":"text"},{"type":"text","text":" "},{"text":"when a function or method passes you a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"text":"it’s clear that you own that exact ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"type":"text","text":"regardless of where it came from."},{"type":"text","text":" "},{"type":"text","text":"You can be confident that the string you are passed won’t be modified"},{"type":"text","text":" "},{"text":"unless you modify it yourself.","type":"text"}]},{"inlineContent":[{"text":"Behind the scenes, Swift’s compiler optimizes string usage","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so that actual copying takes place only when absolutely necessary."},{"type":"text","text":" "},{"text":"This means you always get great performance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when working with strings as value types."}],"type":"paragraph"},{"type":"heading","text":"Working with Characters","level":2,"anchor":"Working-with-Characters"},{"type":"paragraph","inlineContent":[{"text":"You can access the individual ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values for a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"text":"by iterating over the string with a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}]},{"syntax":"swift","type":"codeListing","code":["for character in \"Dog!🐶\" {","    print(character)","}","\/\/ D","\/\/ o","\/\/ g","\/\/ !","\/\/ 🐶"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" loop is described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Alternatively, you can create a stand-alone "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"from a single-character string literal by providing a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type annotation:"}],"type":"paragraph"},{"syntax":"swift","code":["let exclamationMark: Character = \"!\""],"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" values can be constructed by passing an array of "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values"},{"type":"text","text":" "},{"text":"as an argument to its initializer:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]","let catString = String(catCharacters)","print(catString)","\/\/ Prints \"Cat!🐱\""],"type":"codeListing"},{"type":"heading","anchor":"Concatenating-Strings-and-Characters","text":"Concatenating Strings and Characters","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" values can be added together (or "},{"inlineContent":[{"type":"text","text":"concatenated"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"with the addition operator ("},{"code":"+","type":"codeVoice"},{"type":"text","text":") to create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value:"}]},{"syntax":"swift","type":"codeListing","code":["let string1 = \"hello\"","let string2 = \" there\"","var welcome = string1 + string2","\/\/ welcome now equals \"hello there\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also append a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value to an existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable"},{"type":"text","text":" "},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"text":"):","type":"text"}]},{"code":["var instruction = \"look over\"","instruction += string2","\/\/ instruction now equals \"look over there\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can append a ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" value to a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"String"},{"text":" type’s ","type":"text"},{"code":"append()","type":"codeVoice"},{"type":"text","text":" method:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let exclamationMark: Character = \"!\"","welcome.append(exclamationMark)","\/\/ welcome now equals \"hello there!\""]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t append a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Character"},{"text":" to an existing ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because a "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value must contain a single character only."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re using multiline string literals"},{"text":" ","type":"text"},{"text":"to build up the lines of a longer string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you want every line in the string to end with a line break,"},{"text":" ","type":"text"},{"type":"text","text":"including the last line."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"code":["let badStart = \"\"\"","    one","    two","    \"\"\"","let end = \"\"\"","    three","    \"\"\"","print(badStart + end)","\/\/ Prints two lines:","\/\/ one","\/\/ twothree","","let goodStart = \"\"\"","    one","    two","","    \"\"\"","print(goodStart + end)","\/\/ Prints three lines:","\/\/ one","\/\/ two","\/\/ three"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"text","text":"concatenating "},{"code":"badStart","type":"codeVoice"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"text":"produces a two-line string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which isn’t the desired result."},{"type":"text","text":" "},{"text":"Because the last line of ","type":"text"},{"type":"codeVoice","code":"badStart"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t end with a line break,"},{"type":"text","text":" "},{"type":"text","text":"that line gets combined with the first line of "},{"type":"codeVoice","code":"end"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"text":" ","type":"text"},{"type":"text","text":"both lines of "},{"code":"goodStart","type":"codeVoice"},{"text":" end with a line break,","type":"text"},{"text":" ","type":"text"},{"text":"so when it’s combined with ","type":"text"},{"code":"end","type":"codeVoice"},{"type":"text","text":" "},{"text":"the result has three lines,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as expected."}]},{"type":"heading","level":2,"anchor":"String-Interpolation","text":"String Interpolation"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"String interpolation"}]},{"text":" is a way to construct a new ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"text":"from a mix of constants, variables, literals, and expressions","type":"text"},{"type":"text","text":" "},{"text":"by including their values inside a string literal.","type":"text"},{"type":"text","text":" "},{"text":"You can use string interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in both single-line and multiline string literals."},{"type":"text","text":" "},{"text":"Each item that you insert into the string literal is wrapped in","type":"text"},{"type":"text","text":" "},{"text":"a pair of parentheses, prefixed by a backslash (","type":"text"},{"type":"codeVoice","code":"\\"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let multiplier = 3","let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"","\/\/ message is \"3 times 2.5 is 7.5\""]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"text":"the value of ","type":"text"},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is inserted into a string literal as "},{"type":"codeVoice","code":"\\(multiplier)"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This placeholder is replaced with the actual value of ","type":"text"},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"when the string interpolation is evaluated to create an actual string."}]},{"inlineContent":[{"type":"text","text":"The value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is also part of a larger expression later in the string."},{"type":"text","text":" "},{"text":"This expression calculates the value of ","type":"text"},{"code":"Double(multiplier) * 2.5","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and inserts the result (","type":"text"},{"type":"codeVoice","code":"7.5"},{"text":") into the string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this case, the expression is written as "},{"code":"\\(Double(multiplier) * 2.5)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"when it’s included inside the string literal.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use extended string delimiters to create strings containing"},{"type":"text","text":" "},{"text":"characters that would otherwise be treated as a string interpolation.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","code":["print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)","\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To use string interpolation","type":"text"},{"type":"text","text":" "},{"text":"inside a string that uses extended delimiters,","type":"text"},{"text":" ","type":"text"},{"text":"match the number of number signs after the backslash","type":"text"},{"type":"text","text":" "},{"text":"to the number of number signs at the beginning and end of the string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"type":"codeListing","code":["print(#\"6 times 7 is \\#(6 * 7).\"#)","\/\/ Prints \"6 times 7 is 42.\""],"syntax":"swift"},{"type":"aside","content":[{"inlineContent":[{"text":"The expressions you write inside parentheses within an interpolated string","type":"text"},{"type":"text","text":" "},{"text":"can’t contain an unescaped backslash (","type":"text"},{"code":"\\","type":"codeVoice"},{"type":"text","text":"), a carriage return, or a line feed."},{"text":" ","type":"text"},{"text":"However, they can contain other string literals.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note"},{"type":"heading","anchor":"Unicode","level":2,"text":"Unicode"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Unicode","type":"text"}]},{"type":"text","text":" is an international standard for"},{"text":" ","type":"text"},{"text":"encoding, representing, and processing text in different writing systems.","type":"text"},{"type":"text","text":" "},{"text":"It enables you to represent almost any character from any language in a standardized form,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to read and write those characters to and from an external source"},{"type":"text","text":" "},{"text":"such as a text file or web page.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" types are fully Unicode-compliant,"},{"type":"text","text":" "},{"text":"as described in this section.","type":"text"}]},{"level":3,"anchor":"Unicode-Scalar-Values","type":"heading","text":"Unicode Scalar Values"},{"type":"paragraph","inlineContent":[{"text":"Behind the scenes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"text":" type is built from ","type":"text"},{"inlineContent":[{"type":"text","text":"Unicode scalar values"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A Unicode scalar value is a unique 21-bit number for a character or modifier,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"U+0061","type":"codeVoice"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"text":" (","type":"text"},{"code":"\"a\"","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"U+1F425"},{"text":" for ","type":"text"},{"code":"FRONT-FACING BABY CHICK","type":"codeVoice"},{"text":" (","type":"text"},{"code":"\"🐥\"","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"Note that not all 21-bit Unicode scalar values are assigned to a character —","type":"text"},{"text":" ","type":"text"},{"text":"some scalars are reserved for future assignment or for use in UTF-16 encoding.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Scalar values that have been assigned to a character typically also have a name,"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" in the examples above."}]},{"anchor":"Extended-Grapheme-Clusters","text":"Extended Grapheme Clusters","type":"heading","level":3},{"inlineContent":[{"text":"Every instance of Swift’s ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type represents"},{"text":" ","type":"text"},{"type":"text","text":"a single "},{"inlineContent":[{"type":"text","text":"extended grapheme cluster"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"An extended grapheme cluster is a sequence of one or more Unicode scalars"},{"type":"text","text":" "},{"type":"text","text":"that (when combined) produce a single human-readable character."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example."},{"text":" ","type":"text"},{"type":"text","text":"The letter "},{"code":"é","type":"codeVoice"},{"text":" can be represented as the single Unicode scalar ","type":"text"},{"type":"codeVoice","code":"é"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"U+00E9"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"However, the same letter can also be represented as a "},{"type":"emphasis","inlineContent":[{"text":"pair","type":"text"}]},{"text":" of scalars —","type":"text"},{"type":"text","text":" "},{"text":"a standard letter ","type":"text"},{"type":"codeVoice","code":"e"},{"type":"text","text":" ("},{"code":"LATIN SMALL LETTER E","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"U+0065","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"followed by the "},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"text":" scalar (","type":"text"},{"type":"codeVoice","code":"U+0301"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" scalar is graphically applied to the scalar that precedes it,"},{"type":"text","text":" "},{"type":"text","text":"turning an "},{"type":"codeVoice","code":"e"},{"text":" into an ","type":"text"},{"code":"é","type":"codeVoice"},{"text":" when it’s rendered by","type":"text"},{"type":"text","text":" "},{"text":"a Unicode-aware text-rendering system.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, the letter "},{"code":"é","type":"codeVoice"},{"type":"text","text":" is represented as a single Swift "},{"type":"codeVoice","code":"Character"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that represents an extended grapheme cluster."},{"text":" ","type":"text"},{"text":"In the first case, the cluster contains a single scalar;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the second case, it’s a cluster of two scalars:"}]},{"syntax":"swift","type":"codeListing","code":["let eAcute: Character = \"\\u{E9}\"                         \/\/ é","let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́","\/\/ eAcute is é, combinedEAcute is é"]},{"inlineContent":[{"text":"Extended grapheme clusters are a flexible way to represent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"many complex script characters as a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"For example, Hangul syllables from the Korean alphabet"},{"text":" ","type":"text"},{"text":"can be represented as either a precomposed or decomposed sequence.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Both of these representations qualify as a single "},{"type":"codeVoice","code":"Character"},{"text":" value in Swift:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한","let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ","\/\/ precomposed is 한, decomposed is 한"]},{"inlineContent":[{"type":"text","text":"Extended grapheme clusters enable"},{"text":" ","type":"text"},{"type":"text","text":"scalars for enclosing marks (such as "},{"type":"codeVoice","code":"COMBINING ENCLOSING CIRCLE"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"U+20DD"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to enclose other Unicode scalars as part of a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"","\/\/ enclosedEAcute is é⃝"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalars for regional indicator symbols"},{"text":" ","type":"text"},{"text":"can be combined in pairs to make a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"such as this combination of "},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER U"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+1F1FA"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"REGIONAL INDICATOR SYMBOL LETTER S","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+1F1F8"},{"text":"):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"","\/\/ regionalIndicatorForUS is 🇺🇸"]},{"anchor":"Counting-Characters","level":2,"type":"heading","text":"Counting Characters"},{"inlineContent":[{"type":"text","text":"To retrieve a count of the "},{"code":"Character","type":"codeVoice"},{"text":" values in a string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"count"},{"text":" property of the string:","type":"text"}],"type":"paragraph"},{"code":["let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"","print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")","\/\/ Prints \"unusualMenagerie has 40 characters\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that Swift’s use of extended grapheme clusters for "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"means that string concatenation and modification may not always affect"},{"type":"text","text":" "},{"text":"a string’s character count.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, if you initialize a new string with the four-character word ","type":"text"},{"code":"cafe","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and then append a ","type":"text"},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0301"},{"text":") to the end of the string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the resulting string will still have a character count of "},{"code":"4","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a fourth character of "},{"code":"é","type":"codeVoice"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"e"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var word = \"cafe\"","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in cafe is 4\"","","word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301","","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in café is 4\""]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters can be composed of multiple Unicode scalars."},{"type":"text","text":" "},{"type":"text","text":"This means that different characters —"},{"type":"text","text":" "},{"type":"text","text":"and different representations of the same character —"},{"type":"text","text":" "},{"type":"text","text":"can require different amounts of memory to store."},{"type":"text","text":" "},{"type":"text","text":"Because of this, characters in Swift don’t each take up"},{"type":"text","text":" "},{"type":"text","text":"the same amount of memory within a string’s representation."},{"type":"text","text":" "},{"text":"As a result, the number of characters in a string can’t be calculated","type":"text"},{"type":"text","text":" "},{"text":"without iterating through the string to determine","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its extended grapheme cluster boundaries."},{"text":" ","type":"text"},{"type":"text","text":"If you are working with particularly long string values,"},{"text":" ","type":"text"},{"type":"text","text":"be aware that the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"must iterate over the Unicode scalars in the entire string","type":"text"},{"type":"text","text":" "},{"text":"in order to determine the characters for that string.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The count of the characters returned by the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"isn’t always the same as the ","type":"text"},{"type":"codeVoice","code":"length"},{"type":"text","text":" property of"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"NSString"},{"text":" that contains the same characters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The length of an "},{"type":"codeVoice","code":"NSString"},{"text":" is based on","type":"text"},{"type":"text","text":" "},{"text":"the number of 16-bit code units within the string’s UTF-16 representation","type":"text"},{"type":"text","text":" "},{"text":"and not the number of Unicode extended grapheme clusters within the string.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"anchor":"Accessing-and-Modifying-a-String","type":"heading","level":2,"text":"Accessing and Modifying a String"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a string through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"text":"String Indices","type":"heading","anchor":"String-Indices","level":3},{"inlineContent":[{"type":"text","text":"Each "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value has an associated "},{"type":"emphasis","inlineContent":[{"type":"text","text":"index type"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"String.Index"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which corresponds to the position of each ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" in the string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above,"},{"text":" ","type":"text"},{"text":"different characters can require different amounts of memory to store,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so in order to determine which "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" is at a particular position,"},{"text":" ","type":"text"},{"text":"you must iterate over each Unicode scalar from the start or end of that ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For this reason, Swift strings can’t be indexed by integer values."}]},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" property to access"},{"type":"text","text":" "},{"text":"the position of the first ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" of a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property is the position after the last character in a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"As a result,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property isn’t a valid argument to a string’s subscript."},{"text":" ","type":"text"},{"text":"If a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" is empty, ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"text":" are equal.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the indices before and after a given index"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"type":"codeVoice","code":"index(before:)"},{"type":"text","text":" and "},{"code":"index(after:)","type":"codeVoice"},{"text":" methods of ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To access an index farther away from the given index,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"instead of calling one of these methods multiple times.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to access"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" at a particular "},{"code":"String","type":"codeVoice"},{"type":"text","text":" index."}]},{"syntax":"swift","code":["let greeting = \"Guten Tag!\"","greeting[greeting.startIndex]","\/\/ G","greeting[greeting.index(before: greeting.endIndex)]","\/\/ !","greeting[greeting.index(after: greeting.startIndex)]","\/\/ u","let index = greeting.index(greeting.startIndex, offsetBy: 7)","greeting[index]","\/\/ a"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Attempting to access an index outside of a string’s range"},{"text":" ","type":"text"},{"text":"or a ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" at an index outside of a string’s range","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will trigger a runtime error."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["greeting[greeting.endIndex] \/\/ Error","greeting.index(after: greeting.endIndex) \/\/ Error"]},{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"indices","type":"codeVoice"},{"text":" property to access all of the","type":"text"},{"text":" ","type":"text"},{"text":"indices of individual characters in a string.","type":"text"}],"type":"paragraph"},{"code":["for index in greeting.indices {","    print(\"\\(greeting[index]) \", terminator: \"\")","}","\/\/ Prints \"G u t e n   T a g ! \""],"syntax":"swift","type":"codeListing"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"You can use the "},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" properties"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"index(before:)","type":"codeVoice"},{"type":"text","text":", "},{"code":"index(after:)","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"code":"Collection","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"type":"text","text":", as shown here,"},{"text":" ","type":"text"},{"text":"as well as collection types such as ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"type":"codeVoice","code":"Dictionary"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":"."}],"type":"paragraph"}]},{"text":"Inserting and Removing","anchor":"Inserting-and-Removing","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To insert a single character into a string at a specified index,"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"and to insert the contents of another string at a specified index,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"text":" method.","type":"text"}]},{"type":"codeListing","code":["var welcome = \"hello\"","welcome.insert(\"!\", at: welcome.endIndex)","\/\/ welcome now equals \"hello!\"","","welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there!\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To remove a single character from a string at a specified index,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"and to remove a substring at a specified range,","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"removeSubrange(_:)"},{"text":" method:","type":"text"}],"type":"paragraph"},{"code":["welcome.remove(at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there\"","","let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex","welcome.removeSubrange(range)","\/\/ welcome now equals \"hello\""],"syntax":"swift","type":"codeListing"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"text":", ","type":"text"},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"removeSubrange(_:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"text":"on any type that conforms to the ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"type":"codeVoice","code":"String"},{"type":"text","text":", as shown here,"},{"text":" ","type":"text"},{"type":"text","text":"as well as collection types such as "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"code":"Dictionary","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Note"},{"level":2,"type":"heading","anchor":"Substrings","text":"Substrings"},{"inlineContent":[{"type":"text","text":"When you get a substring from a string —"},{"type":"text","text":" "},{"type":"text","text":"for example, using a subscript or a method like "},{"code":"prefix(_:)","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result is an instance"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not another string."},{"type":"text","text":" "},{"text":"Substrings in Swift have most of the same methods as strings,","type":"text"},{"text":" ","type":"text"},{"text":"which means you can work with substrings","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the same way you work with strings."},{"text":" ","type":"text"},{"type":"text","text":"However, unlike strings,"},{"text":" ","type":"text"},{"type":"text","text":"you use substrings for only a short amount of time"},{"text":" ","type":"text"},{"text":"while performing actions on a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you’re ready to store the result for a longer time,"},{"text":" ","type":"text"},{"type":"text","text":"you convert the substring to an instance of "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let greeting = \"Hello, world!\"","let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex","let beginning = greeting[..<index]","\/\/ beginning is \"Hello\"","","\/\/ Convert the result to a String for long-term storage.","let newString = String(beginning)"]},{"type":"paragraph","inlineContent":[{"text":"Like strings, each substring has a region of memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the characters that make up the substring are stored."},{"text":" ","type":"text"},{"type":"text","text":"The difference between strings and substrings"},{"type":"text","text":" "},{"text":"is that, as a performance optimization,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a substring can reuse part of the memory"},{"text":" ","type":"text"},{"type":"text","text":"that’s used to store the original string,"},{"text":" ","type":"text"},{"text":"or part of the memory that’s used to store another substring.","type":"text"},{"type":"text","text":" "},{"text":"(Strings have a similar optimization,","type":"text"},{"type":"text","text":" "},{"text":"but if two strings share memory, they’re equal.)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This performance optimization means"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to pay the performance cost of copying memory"},{"type":"text","text":" "},{"type":"text","text":"until you modify either the string or substring."},{"type":"text","text":" "},{"text":"As mentioned above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"substrings aren’t suitable for long-term storage —"},{"text":" ","type":"text"},{"type":"text","text":"because they reuse the storage of the original string,"},{"text":" ","type":"text"},{"type":"text","text":"the entire original string must be kept in memory"},{"type":"text","text":" "},{"text":"as long as any of its substrings are being used.","type":"text"}]},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"greeting"},{"text":" is a string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which means it has a region of memory"},{"type":"text","text":" "},{"text":"where the characters that make up the string are stored.","type":"text"},{"type":"text","text":" "},{"text":"Because","type":"text"},{"type":"text","text":" "},{"code":"beginning","type":"codeVoice"},{"text":" is a substring of ","type":"text"},{"type":"codeVoice","code":"greeting"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it reuses the memory that "},{"code":"greeting","type":"codeVoice"},{"type":"text","text":" uses."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"text":" ","type":"text"},{"code":"newString","type":"codeVoice"},{"type":"text","text":" is a string —"},{"type":"text","text":" "},{"type":"text","text":"when it’s created from the substring,"},{"text":" ","type":"text"},{"type":"text","text":"it has its own storage."},{"type":"text","text":" "},{"type":"text","text":"The figure below shows these relationships:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"stringSubstring","type":"image"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both "},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" conform to the"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","type":"reference"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"text":"which means it’s often convenient for string-manipulation functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to accept a "},{"code":"StringProtocol","type":"codeVoice"},{"text":" value.","type":"text"},{"type":"text","text":" "},{"text":"You can call such functions with either a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"code":"Substring","type":"codeVoice"},{"text":" value.","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"anchor":"Comparing-Strings","type":"heading","level":2,"text":"Comparing Strings"},{"inlineContent":[{"type":"text","text":"Swift provides three ways to compare textual values:"},{"text":" ","type":"text"},{"text":"string and character equality, prefix equality, and suffix equality.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"String and Character Equality","level":3,"anchor":"String-and-Character-Equality"},{"type":"paragraph","inlineContent":[{"text":"String and character equality is checked with the “equal to” operator (","type":"text"},{"code":"==","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators","isActive":true},{"text":":","type":"text"}]},{"syntax":"swift","code":["let quotation = \"We're a lot alike, you and I.\"","let sameQuotation = \"We're a lot alike, you and I.\"","if quotation == sameQuotation {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Two ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values (or two "},{"type":"codeVoice","code":"Character"},{"text":" values) are considered equal if","type":"text"},{"type":"text","text":" "},{"type":"text","text":"their extended grapheme clusters are "},{"inlineContent":[{"text":"canonically equivalent","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Extended grapheme clusters are canonically equivalent if they have","type":"text"},{"type":"text","text":" "},{"text":"the same linguistic meaning and appearance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if they’re composed from different Unicode scalars behind the scenes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, "},{"code":"LATIN SMALL LETTER E WITH ACUTE","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+00E9"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is canonically equivalent to "},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0065"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"followed by ","type":"text"},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0301"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Both of these extended grapheme clusters are valid ways to represent the character ","type":"text"},{"code":"é","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so they’re considered to be canonically equivalent:"}]},{"code":["\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE","let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"","","\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT","let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"","","if eAcuteQuestion == combinedEAcuteQuestion {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversely, "},{"type":"codeVoice","code":"LATIN CAPITAL LETTER A"},{"type":"text","text":" ("},{"code":"U+0041","type":"codeVoice"},{"type":"text","text":", or "},{"code":"\"A\"","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as used in English, is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" equivalent to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CYRILLIC CAPITAL LETTER A"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0410"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"А\""},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"as used in Russian.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The characters are visually similar,"},{"type":"text","text":" "},{"text":"but don’t have the same linguistic meaning:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let latinCapitalLetterA: Character = \"\\u{41}\"","","let cyrillicCapitalLetterA: Character = \"\\u{0410}\"","","if latinCapitalLetterA != cyrillicCapitalLetterA {","    print(\"These two characters aren't equivalent.\")","}","\/\/ Prints \"These two characters aren't equivalent.\""]},{"content":[{"type":"paragraph","inlineContent":[{"text":"String and character comparisons in Swift aren’t locale-sensitive.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"type":"heading","text":"Prefix and Suffix Equality","level":3,"anchor":"Prefix-and-Suffix-Equality"},{"inlineContent":[{"type":"text","text":"To check whether a string has a particular string prefix or suffix,"},{"type":"text","text":" "},{"text":"call the string’s ","type":"text"},{"type":"codeVoice","code":"hasPrefix(_:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"hasSuffix(_:)"},{"text":" methods,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both of which take a single argument of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and return a Boolean value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The examples below consider an array of strings representing","type":"text"},{"type":"text","text":" "},{"text":"the scene locations from the first two acts of Shakespeare’s ","type":"text"},{"inlineContent":[{"type":"text","text":"Romeo and Juliet"}],"type":"emphasis"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let romeoAndJuliet = [","    \"Act 1 Scene 1: Verona, A public place\",","    \"Act 1 Scene 2: Capulet's mansion\",","    \"Act 1 Scene 3: A room in Capulet's mansion\",","    \"Act 1 Scene 4: A street outside Capulet's mansion\",","    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",","    \"Act 2 Scene 1: Outside Capulet's mansion\",","    \"Act 2 Scene 2: Capulet's orchard\",","    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",","    \"Act 2 Scene 4: A street in Verona\",","    \"Act 2 Scene 5: Capulet's mansion\",","    \"Act 2 Scene 6: Friar Lawrence's cell\"","]"]},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"code":"hasPrefix(_:)","type":"codeVoice"},{"type":"text","text":" method with the "},{"type":"codeVoice","code":"romeoAndJuliet"},{"type":"text","text":" array"},{"text":" ","type":"text"},{"type":"text","text":"to count the number of scenes in Act 1 of the play:"}]},{"code":["var act1SceneCount = 0","for scene in romeoAndJuliet {","    if scene.hasPrefix(\"Act 1 \") {","        act1SceneCount += 1","    }","}","print(\"There are \\(act1SceneCount) scenes in Act 1\")","\/\/ Prints \"There are 5 scenes in Act 1\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, use the "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"text":" method to count the number of scenes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that take place in or around Capulet’s mansion and Friar Lawrence’s cell:"}]},{"type":"codeListing","syntax":"swift","code":["var mansionCount = 0","var cellCount = 0","for scene in romeoAndJuliet {","    if scene.hasSuffix(\"Capulet's mansion\") {","        mansionCount += 1","    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {","        cellCount += 1","    }","}","print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")","\/\/ Prints \"6 mansion scenes; 2 cell scenes\""]},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"hasPrefix(_:)"},{"text":" and ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"perform a character-by-character canonical equivalence comparison between"},{"type":"text","text":" "},{"type":"text","text":"the extended grapheme clusters in each string,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside"},{"level":2,"anchor":"Unicode-Representations-of-Strings","type":"heading","text":"Unicode Representations of Strings"},{"inlineContent":[{"text":"When a Unicode string is written to a text file or some other storage,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Unicode scalars in that string are encoded in one of"},{"text":" ","type":"text"},{"type":"text","text":"several Unicode-defined "},{"type":"emphasis","inlineContent":[{"type":"text","text":"encoding forms"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Each form encodes the string in small chunks known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"code units"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These include the UTF-8 encoding form (which encodes a string as 8-bit code units),","type":"text"},{"type":"text","text":" "},{"text":"the UTF-16 encoding form (which encodes a string as 16-bit code units),","type":"text"},{"type":"text","text":" "},{"text":"and the UTF-32 encoding form (which encodes a string as 32-bit code units).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift provides several different ways to access Unicode representations of strings.","type":"text"},{"text":" ","type":"text"},{"text":"You can iterate over the string with a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"text":"to access its individual ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values as Unicode extended grapheme clusters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This process is described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Working-with-Characters"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Alternatively, access a "},{"code":"String","type":"codeVoice"},{"text":" value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in one of three other Unicode-compliant representations:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"A collection of UTF-8 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf8"},{"text":" property)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A collection of UTF-16 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf16"},{"text":" property)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A collection of 21-bit Unicode scalar values,"},{"text":" ","type":"text"},{"type":"text","text":"equivalent to the string’s UTF-32 encoding form"},{"type":"text","text":" "},{"text":"(accessed with the string’s ","type":"text"},{"type":"codeVoice","code":"unicodeScalars"},{"type":"text","text":" property)"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Each example below shows a different representation of the following string,"},{"text":" ","type":"text"},{"text":"which is made up of the characters ","type":"text"},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"type":"codeVoice","code":"o"},{"text":", ","type":"text"},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"‼"},{"text":" (","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"text":", or Unicode scalar ","type":"text"},{"code":"U+203C","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"and the 🐶 character (","type":"text"},{"code":"DOG FACE","type":"codeVoice"},{"text":", or Unicode scalar ","type":"text"},{"code":"U+1F436","type":"codeVoice"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","code":["let dogString = \"Dog‼🐶\""],"syntax":"swift"},{"text":"UTF-8 Representation","level":3,"type":"heading","anchor":"UTF-8-Representation"},{"inlineContent":[{"text":"You can access a UTF-8 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"code":"utf8","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"This property is of type "},{"code":"String.UTF8View","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a collection of unsigned 8-bit ("},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":") values,"},{"type":"text","text":" "},{"type":"text","text":"one for each byte in the string’s UTF-8 representation:"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"UTF8"}],"type":"paragraph"},{"code":["for codeUnit in dogString.utf8 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the first three decimal "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"text":", ","type":"text"},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"code":"103","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"represent the characters "},{"code":"D","type":"codeVoice"},{"type":"text","text":", "},{"code":"o","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"g","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whose UTF-8 representation is the same as their ASCII representation."},{"type":"text","text":" "},{"text":"The next three decimal ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"text":"(","type":"text"},{"type":"codeVoice","code":"226"},{"text":", ","type":"text"},{"type":"codeVoice","code":"128"},{"type":"text","text":", "},{"type":"codeVoice","code":"188"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"are a three-byte UTF-8 representation of the ","type":"text"},{"code":"DOUBLE EXCLAMATION MARK","type":"codeVoice"},{"text":" character.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The last four "},{"code":"codeUnit","type":"codeVoice"},{"text":" values (","type":"text"},{"type":"codeVoice","code":"240"},{"type":"text","text":", "},{"type":"codeVoice","code":"159"},{"text":", ","type":"text"},{"code":"144","type":"codeVoice"},{"type":"text","text":", "},{"code":"182","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"are a four-byte UTF-8 representation of the ","type":"text"},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."}]},{"level":3,"text":"UTF-16 Representation","type":"heading","anchor":"UTF-16-Representation"},{"type":"paragraph","inlineContent":[{"text":"You can access a UTF-16 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf16"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"type":"codeVoice","code":"String.UTF16View"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a collection of unsigned 16-bit (","type":"text"},{"type":"codeVoice","code":"UInt16"},{"text":") values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one for each 16-bit code unit in the string’s UTF-16 representation:"}]},{"type":"paragraph","inlineContent":[{"identifier":"UTF16","type":"image"}]},{"syntax":"swift","type":"codeListing","code":["for codeUnit in dogString.utf16 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 55357 56374 \""]},{"type":"paragraph","inlineContent":[{"text":"Again, the first three ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"text":", ","type":"text"},{"type":"codeVoice","code":"111"},{"text":", ","type":"text"},{"code":"103","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"represent the characters ","type":"text"},{"code":"D","type":"codeVoice"},{"text":", ","type":"text"},{"code":"o","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"whose UTF-16 code units have the same values as in the string’s UTF-8 representation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(because these Unicode scalars represent ASCII characters)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fourth "},{"code":"codeUnit","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is a decimal equivalent of"},{"text":" ","type":"text"},{"type":"text","text":"the hexadecimal value "},{"code":"203C","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which represents the Unicode scalar ","type":"text"},{"code":"U+203C","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."},{"type":"text","text":" "},{"text":"This character can be represented as a single code unit in UTF-16.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fifth and sixth "},{"code":"codeUnit","type":"codeVoice"},{"type":"text","text":" values ("},{"type":"codeVoice","code":"55357"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"56374"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are a UTF-16 surrogate pair representation of the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"These values are a high-surrogate value of "},{"code":"U+D83D","type":"codeVoice"},{"type":"text","text":" (decimal value "},{"code":"55357","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"and a low-surrogate value of "},{"code":"U+DC36","type":"codeVoice"},{"text":" (decimal value ","type":"text"},{"code":"56374","type":"codeVoice"},{"text":").","type":"text"}]},{"text":"Unicode Scalar Representation","type":"heading","level":3,"anchor":"Unicode-Scalar-Representation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access a Unicode scalar representation of a "},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"by iterating over its ","type":"text"},{"code":"unicodeScalars","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"code":"UnicodeScalarView","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is a collection of values of type "},{"type":"codeVoice","code":"UnicodeScalar"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"Each ","type":"text"},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":" has a "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property that returns"},{"type":"text","text":" "},{"type":"text","text":"the scalar’s 21-bit value, represented within a "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":" value:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"UnicodeScalar","type":"image"}],"type":"paragraph"},{"syntax":"swift","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar.value) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 128054 \""],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" properties for the first three "},{"type":"codeVoice","code":"UnicodeScalar"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"type":"codeVoice","code":"111"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"once again represent the characters ","type":"text"},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fourth "},{"type":"codeVoice","code":"codeUnit"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"text":") is again a decimal equivalent of","type":"text"},{"type":"text","text":" "},{"text":"the hexadecimal value ","type":"text"},{"code":"203C","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" property of the fifth and final ","type":"text"},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":", "},{"type":"codeVoice","code":"128054"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"is a decimal equivalent of the hexadecimal value ","type":"text"},{"type":"codeVoice","code":"1F436"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which represents the Unicode scalar ","type":"text"},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"DOG FACE"},{"text":" character.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an alternative to querying their "},{"type":"codeVoice","code":"value"},{"text":" properties,","type":"text"},{"type":"text","text":" "},{"text":"each ","type":"text"},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":" value can also be used to construct a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"such as with string interpolation:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar) \")","}","\/\/ D","\/\/ o","\/\/ g","\/\/ ‼","\/\/ 🐶"]}],"kind":"content"}],"kind":"article","abstract":[{"type":"text","text":"Store and manipulate text."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"title":"Strings and Characters"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","interfaceLanguage":"swift"},"references":{"multilineStringWhitespace":{"type":"image","identifier":"multilineStringWhitespace","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/multilineStringWhitespace@2x.png"},{"url":"\/images\/multilineStringWhitespace~dark@2x.png","traits":["2x","dark"]}]},"UTF16":{"identifier":"UTF16","alt":null,"type":"image","variants":[{"url":"\/images\/UTF16@2x.png","traits":["2x","light"]},{"url":"\/images\/UTF16~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/swift/substring":{"type":"link","title":"Substring","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","titleInlineContent":[{"code":"Substring","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/substring"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Unicode":{"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Unicode","type":"topic","abstract":[],"title":"Unicode","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode","kind":"section"},"UnicodeScalar":{"type":"image","identifier":"UnicodeScalar","alt":null,"variants":[{"url":"\/images\/UnicodeScalar@2x.png","traits":["2x","light"]},{"url":"\/images\/UnicodeScalar~dark@2x.png","traits":["2x","dark"]}]},"stringSubstring":{"alt":null,"type":"image","variants":[{"url":"\/images\/stringSubstring@2x.png","traits":["2x","light"]},{"url":"\/images\/stringSubstring~dark@2x.png","traits":["2x","dark"]}],"identifier":"stringSubstring"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Comparison-Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators","url":"\/documentation\/the-swift-programming-language\/basicoperators#Comparison-Operators","abstract":[],"type":"topic","kind":"section","title":"Comparison Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Working-with-Characters":{"kind":"section","title":"Working with Characters","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Working-with-Characters","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Working-with-Characters","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","kind":"section","title":"For-In Loops","url":"\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops","type":"topic","abstract":[]},"https://developer.apple.com/documentation/swift/stringprotocol":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","type":"link","title":"StringProtocol","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","titleInlineContent":[{"code":"StringProtocol","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/string#2919514":{"title":"Bridging Between String and NSString","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","url":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","titleInlineContent":[{"text":"Bridging Between String and NSString","type":"text"}],"type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/classesandstructures#Structures-and-Enumerations-Are-Value-Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","title":"Structures and Enumerations Are Value Types","kind":"section"},"UTF8":{"type":"image","identifier":"UTF8","alt":null,"variants":[{"url":"\/images\/UTF8@2x.png","traits":["2x","light"]},{"url":"\/images\/UTF8~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-and-Character-Equality":{"kind":"section","title":"String and Character Equality","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-and-Character-Equality","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-and-Character-Equality","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"}}}