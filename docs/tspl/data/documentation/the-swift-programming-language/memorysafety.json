{"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"text":" ","type":"text"},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift also makes sure that multiple accesses"},{"text":" ","type":"text"},{"type":"text","text":"to the same area of memory don’t conflict,"},{"type":"text","text":" "},{"type":"text","text":"by requiring code that modifies a location in memory"},{"text":" ","type":"text"},{"text":"to have exclusive access to that memory.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because Swift manages memory automatically,"},{"text":" ","type":"text"},{"type":"text","text":"most of the time you don’t have to think about accessing memory at all."},{"text":" ","type":"text"},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"it’s important to understand where potential conflicts can occur,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so you can avoid writing code that has conflicting access to memory."},{"text":" ","type":"text"},{"type":"text","text":"If your code does contain conflicts,"},{"text":" ","type":"text"},{"text":"you’ll get a compile-time or runtime error.","type":"text"}],"type":"paragraph"},{"anchor":"Understanding-Conflicting-Access-to-Memory","level":2,"type":"heading","text":"Understanding Conflicting Access to Memory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Access to memory happens in your code"},{"text":" ","type":"text"},{"type":"text","text":"when you do things like set the value of a variable"},{"text":" ","type":"text"},{"text":"or pass an argument to a function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code contains both a read access and a write access:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ A write access to the memory where one is stored.","var one = 1","","\/\/ A read access from the memory where one is stored.","print(\"We're number \\(one)!\")"]},{"type":"paragraph","inlineContent":[{"text":"A conflicting access to memory can occur","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when different parts of your code are trying"},{"text":" ","type":"text"},{"type":"text","text":"to access the same location in memory at the same time."},{"type":"text","text":" "},{"type":"text","text":"Multiple accesses to a location in memory at the same time"},{"type":"text","text":" "},{"text":"can produce unpredictable or inconsistent behavior.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In Swift, there are ways to modify a value"},{"type":"text","text":" "},{"type":"text","text":"that span several lines of code,"},{"type":"text","text":" "},{"type":"text","text":"making it possible to attempt to access a value"},{"type":"text","text":" "},{"text":"in the middle of its own modification.","type":"text"}]},{"inlineContent":[{"text":"You can see a similar problem","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by thinking about how you update a budget"},{"text":" ","type":"text"},{"type":"text","text":"that’s written on a piece of paper."},{"type":"text","text":" "},{"type":"text","text":"Updating the budget is a two-step process:"},{"text":" ","type":"text"},{"type":"text","text":"First you add the items’ names and prices,"},{"text":" ","type":"text"},{"type":"text","text":"and then you change the total amount"},{"type":"text","text":" "},{"type":"text","text":"to reflect the items currently on the list."},{"type":"text","text":" "},{"text":"Before and after the update,","type":"text"},{"text":" ","type":"text"},{"text":"you can read any information from the budget","type":"text"},{"text":" ","type":"text"},{"text":"and get a correct answer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as shown in the figure below."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"memory_shopping","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you’re adding items to the budget,"},{"type":"text","text":" "},{"type":"text","text":"it’s in a temporary, invalid state"},{"type":"text","text":" "},{"text":"because the total amount hasn’t been updated","type":"text"},{"type":"text","text":" "},{"text":"to reflect the newly added items.","type":"text"},{"type":"text","text":" "},{"text":"Reading the total amount","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"during the process of adding an item"},{"type":"text","text":" "},{"text":"gives you incorrect information.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This example also demonstrates","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a challenge you may encounter"},{"type":"text","text":" "},{"type":"text","text":"when fixing conflicting access to memory:"},{"text":" ","type":"text"},{"type":"text","text":"There are sometimes multiple ways to fix the conflict"},{"type":"text","text":" "},{"type":"text","text":"that produce different answers,"},{"text":" ","type":"text"},{"type":"text","text":"and it’s not always obvious which answer is correct."},{"type":"text","text":" "},{"text":"In this example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"depending on whether you wanted the original total amount"},{"type":"text","text":" "},{"text":"or the updated total amount,","type":"text"},{"type":"text","text":" "},{"text":"either $5 or $320 could be the correct answer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Before you can fix the conflicting access,"},{"type":"text","text":" "},{"text":"you have to determine what it was intended to do.","type":"text"}]},{"content":[{"inlineContent":[{"text":"If you’ve written concurrent or multithreaded code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conflicting access to memory might be a familiar problem."},{"text":" ","type":"text"},{"text":"However,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the conflicting access discussed here can happen"},{"type":"text","text":" "},{"text":"on a single thread and","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"doesn’t","type":"text"}]},{"text":" involve concurrent or multithreaded code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you have conflicting access to memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from within a single thread,"},{"text":" ","type":"text"},{"text":"Swift guarantees that you’ll get an error","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at either compile time or runtime."},{"text":" ","type":"text"},{"type":"text","text":"For multithreaded code,"},{"type":"text","text":" "},{"type":"text","text":"use "},{"identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"to help detect conflicting access across threads.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"heading","level":3,"text":"Characteristics of Memory Access","anchor":"Characteristics-of-Memory-Access"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are three characteristics of memory access"},{"text":" ","type":"text"},{"text":"to consider in the context of conflicting access:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whether the access is a read or a write,"},{"text":" ","type":"text"},{"text":"the duration of the access,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the location in memory being accessed."},{"type":"text","text":" "},{"text":"Specifically,","type":"text"},{"type":"text","text":" "},{"text":"a conflict occurs if you have two accesses","type":"text"},{"text":" ","type":"text"},{"text":"that meet all of the following conditions:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At least one is a write access or a nonatomic access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"They access the same location in memory.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Their durations overlap."}]}]}]},{"inlineContent":[{"type":"text","text":"The difference between a read and write access"},{"text":" ","type":"text"},{"text":"is usually obvious:","type":"text"},{"text":" ","type":"text"},{"text":"a write access changes the location in memory,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but a read access doesn’t."},{"type":"text","text":" "},{"type":"text","text":"The location in memory"},{"text":" ","type":"text"},{"text":"refers to what is being accessed —","type":"text"},{"type":"text","text":" "},{"text":"for example, a variable, constant, or property.","type":"text"},{"type":"text","text":" "},{"text":"The duration of a memory access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is either instantaneous or long-term."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An operation is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"atomic","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"if it uses only C atomic operations;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise it’s nonatomic."},{"type":"text","text":" "},{"type":"text","text":"For a list of those functions, see the "},{"type":"codeVoice","code":"stdatomic(3)"},{"type":"text","text":" man page."}]},{"inlineContent":[{"text":"An access is ","type":"text"},{"inlineContent":[{"type":"text","text":"instantaneous"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"if it’s not possible for other code to run","type":"text"},{"type":"text","text":" "},{"text":"after that access starts but before it ends.","type":"text"},{"text":" ","type":"text"},{"text":"By their nature, two instantaneous accesses can’t happen at the same time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Most memory access is instantaneous."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all the read and write accesses in the code listing below are instantaneous:"}],"type":"paragraph"},{"syntax":"swift","code":["func oneMore(than number: Int) -> Int {","    return number + 1","}","","var myNumber = 1","myNumber = oneMore(than: myNumber)","print(myNumber)","\/\/ Prints \"2\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"there are several ways to access memory,","type":"text"},{"text":" ","type":"text"},{"text":"called ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"long-term","type":"text"}]},{"text":" accesses,","type":"text"},{"type":"text","text":" "},{"text":"that span the execution of other code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The difference between instantaneous access and long-term access"},{"type":"text","text":" "},{"type":"text","text":"is that it’s possible for other code to run"},{"type":"text","text":" "},{"type":"text","text":"after a long-term access starts but before it ends,"},{"type":"text","text":" "},{"text":"which is called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"overlap"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A long-term access can overlap"},{"text":" ","type":"text"},{"type":"text","text":"with other long-term accesses and instantaneous accesses."}]},{"inlineContent":[{"type":"text","text":"Overlapping accesses appear primarily in code that uses"},{"text":" ","type":"text"},{"text":"in-out parameters in functions and methods","type":"text"},{"text":" ","type":"text"},{"text":"or mutating methods of a structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The specific kinds of Swift code that use long-term accesses"},{"text":" ","type":"text"},{"text":"are discussed in the sections below.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Conflicting Access to In-Out Parameters","type":"heading","anchor":"Conflicting-Access-to-In-Out-Parameters"},{"type":"paragraph","inlineContent":[{"text":"A function has long-term write access","type":"text"},{"text":" ","type":"text"},{"text":"to all of its in-out parameters.","type":"text"},{"text":" ","type":"text"},{"text":"The write access for an in-out parameter starts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after all of the non-in-out parameters have been evaluated"},{"type":"text","text":" "},{"type":"text","text":"and lasts for the entire duration of that function call."},{"type":"text","text":" "},{"type":"text","text":"If there are multiple in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"the write accesses start in the same order as the parameters appear."}]},{"inlineContent":[{"text":"One consequence of this long-term write access","type":"text"},{"type":"text","text":" "},{"text":"is that you can’t access the original","type":"text"},{"type":"text","text":" "},{"text":"variable that was passed as in-out,","type":"text"},{"text":" ","type":"text"},{"text":"even if scoping rules and access control would otherwise permit it —","type":"text"},{"text":" ","type":"text"},{"text":"any access to the original creates a conflict.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["var stepSize = 1","","func increment(_ number: inout Int) {","    number += stepSize","}","","increment(&stepSize)","\/\/ Error: conflicting accesses to stepSize"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"stepSize"},{"text":" is a global variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it’s normally accessible from within "},{"code":"increment(_:)","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"the read access to ","type":"text"},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" overlaps with"},{"type":"text","text":" "},{"type":"text","text":"the write access to "},{"type":"codeVoice","code":"number"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As shown in the figure below,"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"number"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stepSize"},{"text":" refer to the same location in memory.","type":"text"},{"type":"text","text":" "},{"text":"The read and write accesses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"refer to the same memory and they overlap,"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}]},{"inlineContent":[{"identifier":"memory_increment","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"One way to solve this conflict","type":"text"},{"type":"text","text":" "},{"text":"is to make an explicit copy of ","type":"text"},{"code":"stepSize","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Make an explicit copy.","var copyOfStepSize = stepSize","increment(&copyOfStepSize)","","\/\/ Update the original.","stepSize = copyOfStepSize","\/\/ stepSize is now 2"],"syntax":"swift"},{"inlineContent":[{"text":"When you make a copy of ","type":"text"},{"code":"stepSize","type":"codeVoice"},{"type":"text","text":" before calling "},{"type":"codeVoice","code":"increment(_:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"it’s clear that the value of "},{"code":"copyOfStepSize","type":"codeVoice"},{"text":" is incremented","type":"text"},{"text":" ","type":"text"},{"text":"by the current step size.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The read access ends before the write access starts,"},{"text":" ","type":"text"},{"text":"so there isn’t a conflict.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Another consequence of long-term write access"},{"text":" ","type":"text"},{"type":"text","text":"to in-out parameters is that"},{"type":"text","text":" "},{"text":"passing a single variable","type":"text"},{"type":"text","text":" "},{"text":"as the argument for multiple in-out parameters","type":"text"},{"type":"text","text":" "},{"text":"of the same function","type":"text"},{"type":"text","text":" "},{"text":"produces a conflict.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func balance(_ x: inout Int, _ y: inout Int) {","    let sum = x + y","    x = sum \/ 2","    y = sum - x","}","var playerOneScore = 42","var playerTwoScore = 30","balance(&playerOneScore, &playerTwoScore)  \/\/ OK","balance(&playerOneScore, &playerOneScore)","\/\/ Error: conflicting accesses to playerOneScore"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"balance(_:_:)","type":"codeVoice"},{"type":"text","text":" function above"},{"text":" ","type":"text"},{"text":"modifies its two parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to divide the total value evenly between them."},{"text":" ","type":"text"},{"type":"text","text":"Calling it with "},{"type":"codeVoice","code":"playerOneScore"},{"type":"text","text":" and "},{"code":"playerTwoScore","type":"codeVoice"},{"text":" as arguments","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doesn’t produce a conflict —"},{"type":"text","text":" "},{"type":"text","text":"there are two write accesses that overlap in time,"},{"text":" ","type":"text"},{"text":"but they access different locations in memory.","type":"text"},{"text":" ","type":"text"},{"text":"In contrast,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passing "},{"type":"codeVoice","code":"playerOneScore"},{"text":" as the value for both parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict"},{"type":"text","text":" "},{"type":"text","text":"because it tries to perform two write accesses"},{"type":"text","text":" "},{"text":"to the same location in memory at the same time.","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because operators are functions,"},{"type":"text","text":" "},{"text":"they can also have long-term accesses to their in-out parameters.","type":"text"},{"text":" ","type":"text"},{"text":"For example, if ","type":"text"},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" was an operator function named "},{"code":"<^>","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"writing "},{"code":"playerOneScore <^> playerOneScore","type":"codeVoice"},{"text":" ","type":"text"},{"text":"would result in the same conflict","type":"text"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"code":"balance(&playerOneScore, &playerOneScore)","type":"codeVoice"},{"type":"text","text":"."}]}]},{"text":"Conflicting Access to self in Methods","type":"heading","level":2,"anchor":"Conflicting-Access-to-self-in-Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A mutating method on a structure has write access to "},{"type":"codeVoice","code":"self"},{"text":" ","type":"text"},{"type":"text","text":"for the duration of the method call."},{"text":" ","type":"text"},{"type":"text","text":"For example, consider a game where each player"},{"text":" ","type":"text"},{"type":"text","text":"has a health amount, which decreases when taking damage,"},{"text":" ","type":"text"},{"type":"text","text":"and an energy amount, which decreases when using special abilities."}]},{"syntax":"swift","type":"codeListing","code":["struct Player {","    var name: String","    var health: Int","    var energy: Int","","    static let maxHealth = 10","    mutating func restoreHealth() {","        health = Player.maxHealth","    }","}"]},{"inlineContent":[{"text":"In the ","type":"text"},{"code":"restoreHealth()","type":"codeVoice"},{"text":" method above,","type":"text"},{"text":" ","type":"text"},{"text":"a write access to ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" starts at the beginning of the method"},{"text":" ","type":"text"},{"type":"text","text":"and lasts until the method returns."},{"type":"text","text":" "},{"text":"In this case, there’s no other code","type":"text"},{"text":" ","type":"text"},{"text":"inside ","type":"text"},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" "},{"type":"text","text":"that could have an overlapping access to the properties of a "},{"type":"codeVoice","code":"Player"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"shareHealth(with:)","type":"codeVoice"},{"type":"text","text":" method below"},{"type":"text","text":" "},{"text":"takes another ","type":"text"},{"type":"codeVoice","code":"Player"},{"type":"text","text":" instance as an in-out parameter,"},{"type":"text","text":" "},{"text":"creating the possibility of overlapping accesses.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Player {","    mutating func shareHealth(with teammate: inout Player) {","        balance(&teammate.health, &health)","    }","}","","var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","var maria = Player(name: \"Maria\", health: 5, energy: 10)","oscar.shareHealth(with: &maria)  \/\/ OK"],"syntax":"swift"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"calling the "},{"code":"shareHealth(with:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"for Oscar’s player to share health with Maria’s player","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t cause a conflict."},{"type":"text","text":" "},{"type":"text","text":"There’s a write access to "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" during the method call"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" is the value of "},{"code":"self","type":"codeVoice"},{"type":"text","text":" in a mutating method,"},{"text":" ","type":"text"},{"type":"text","text":"and there’s a write access to "},{"type":"codeVoice","code":"maria"},{"text":" ","type":"text"},{"type":"text","text":"for the same duration"},{"type":"text","text":" "},{"text":"because ","type":"text"},{"type":"codeVoice","code":"maria"},{"type":"text","text":" was passed as an in-out parameter."},{"text":" ","type":"text"},{"text":"As shown in the figure below,","type":"text"},{"text":" ","type":"text"},{"text":"they access different locations in memory.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Even though the two write accesses overlap in time,"},{"type":"text","text":" "},{"type":"text","text":"they don’t conflict."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"memory_share_health_maria","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"if you pass "},{"code":"oscar","type":"codeVoice"},{"type":"text","text":" as the argument to "},{"code":"shareHealth(with:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"there’s a conflict:"}]},{"code":["oscar.shareHealth(with: &oscar)","\/\/ Error: conflicting accesses to oscar"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The mutating method needs write access to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"text":"for the duration of the method,","type":"text"},{"text":" ","type":"text"},{"text":"and the in-out parameter needs write access to ","type":"text"},{"type":"codeVoice","code":"teammate"},{"type":"text","text":" "},{"text":"for the same duration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Within the method,"},{"text":" ","type":"text"},{"type":"text","text":"both "},{"code":"self","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"teammate"},{"text":" refer to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the same location in memory —"},{"type":"text","text":" "},{"text":"as shown in the figure below.","type":"text"},{"text":" ","type":"text"},{"text":"The two write accesses","type":"text"},{"type":"text","text":" "},{"text":"refer to the same memory and they overlap,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"memory_share_health_oscar"}],"type":"paragraph"},{"text":"Conflicting Access to Properties","level":2,"type":"heading","anchor":"Conflicting-Access-to-Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types like structures, tuples, and enumerations"},{"type":"text","text":" "},{"type":"text","text":"are made up of individual constituent values,"},{"type":"text","text":" "},{"text":"such as the properties of a structure or the elements of a tuple.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because these are value types, mutating any piece of the value"},{"type":"text","text":" "},{"type":"text","text":"mutates the whole value,"},{"type":"text","text":" "},{"text":"meaning read or write access to one of the properties","type":"text"},{"type":"text","text":" "},{"text":"requires read or write access to the whole value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"overlapping write accesses to the elements of a tuple"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict:"}]},{"syntax":"swift","code":["var playerInformation = (health: 10, energy: 20)","balance(&playerInformation.health, &playerInformation.energy)","\/\/ Error: conflicting access to properties of playerInformation"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"calling ","type":"text"},{"type":"codeVoice","code":"balance(_:_:)"},{"text":" on the elements of a tuple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict"},{"text":" ","type":"text"},{"text":"because there are overlapping write accesses to ","type":"text"},{"code":"playerInformation","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both "},{"code":"playerInformation.health","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"playerInformation.energy"},{"text":" ","type":"text"},{"type":"text","text":"are passed as in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"which means "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" needs write access to them"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the function call."},{"type":"text","text":" "},{"type":"text","text":"In both cases, a write access to the tuple element"},{"text":" ","type":"text"},{"text":"requires a write access to the entire tuple.","type":"text"},{"text":" ","type":"text"},{"text":"This means there are two write accesses to ","type":"text"},{"type":"codeVoice","code":"playerInformation"},{"type":"text","text":" "},{"type":"text","text":"with durations that overlap,"},{"type":"text","text":" "},{"type":"text","text":"causing a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code below shows that the same error appears"},{"type":"text","text":" "},{"text":"for overlapping write accesses","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the properties of a structure"},{"text":" ","type":"text"},{"type":"text","text":"that’s stored in a global variable."}]},{"code":["var holly = Player(name: \"Holly\", health: 10, energy: 10)","balance(&holly.health, &holly.energy)  \/\/ Error"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In practice,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"most access to the properties of a structure"},{"text":" ","type":"text"},{"type":"text","text":"can overlap safely."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"if the variable "},{"code":"holly","type":"codeVoice"},{"type":"text","text":" in the example above"},{"text":" ","type":"text"},{"text":"is changed to a local variable instead of a global variable,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler can prove that overlapping access","type":"text"},{"type":"text","text":" "},{"text":"to stored properties of the structure is safe:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func someFunction() {","    var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","    balance(&oscar.health, &oscar.energy)  \/\/ OK","}"],"type":"codeListing"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"text":"Oscar’s health and energy are passed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the two in-out parameters to "},{"type":"codeVoice","code":"balance(_:_:)"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler can prove that memory safety is preserved"},{"text":" ","type":"text"},{"type":"text","text":"because the two stored properties don’t interact in any way."}],"type":"paragraph"},{"inlineContent":[{"text":"The restriction against","type":"text"},{"type":"text","text":" "},{"text":"overlapping access to properties of a structure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"isn’t always necessary to preserve memory safety."},{"text":" ","type":"text"},{"type":"text","text":"Memory safety is the desired guarantee,"},{"type":"text","text":" "},{"text":"but exclusive access is a stricter requirement than memory safety —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means some code preserves memory safety,"},{"text":" ","type":"text"},{"text":"even though it violates exclusive access to memory.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift allows this memory-safe code if the compiler can prove"},{"type":"text","text":" "},{"type":"text","text":"that the nonexclusive access to memory is still safe."},{"text":" ","type":"text"},{"text":"Specifically, it can prove","type":"text"},{"type":"text","text":" "},{"text":"that overlapping access to properties of a structure is safe","type":"text"},{"type":"text","text":" "},{"text":"if the following conditions apply:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’re accessing only stored properties of an instance,"},{"type":"text","text":" "},{"text":"not computed properties or class properties.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The structure is the value of a local variable,","type":"text"},{"text":" ","type":"text"},{"text":"not a global variable.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The structure is either not captured by any closures,"},{"type":"text","text":" "},{"type":"text","text":"or it’s captured only by nonescaping closures."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"If the compiler can’t prove the access is safe,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it doesn’t allow the access."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"Memory Safety"},"references":{"https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early":{"identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","titleInlineContent":[{"text":"Thread Sanitizer","type":"text"}],"type":"link","url":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","title":"Thread Sanitizer"},"memory_share_health_maria":{"type":"image","identifier":"memory_share_health_maria","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/memory_share_health_maria@2x.png"},{"url":"\/images\/memory_share_health_maria~dark@2x.png","traits":["2x","dark"]}]},"memory_share_health_oscar":{"identifier":"memory_share_health_oscar","variants":[{"traits":["2x","light"],"url":"\/images\/memory_share_health_oscar@2x.png"},{"url":"\/images\/memory_share_health_oscar~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"memory_shopping":{"type":"image","identifier":"memory_shopping","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/memory_shopping@2x.png"},{"url":"\/images\/memory_shopping~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"memory_increment":{"identifier":"memory_increment","variants":[{"traits":["2x","light"],"url":"\/images\/memory_increment@2x.png"},{"url":"\/images\/memory_increment~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null}}}