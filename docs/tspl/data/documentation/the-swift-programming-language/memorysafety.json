{"abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"Swift ensures that variables are initialized before they’re used,"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"text":" ","type":"text"},{"text":"and array indices are checked for out-of-bounds errors.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift also makes sure that multiple accesses","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the same area of memory don’t conflict,"},{"text":" ","type":"text"},{"text":"by requiring code that modifies a location in memory","type":"text"},{"type":"text","text":" "},{"text":"to have exclusive access to that memory.","type":"text"},{"text":" ","type":"text"},{"text":"Because Swift manages memory automatically,","type":"text"},{"type":"text","text":" "},{"text":"most of the time you don’t have to think about accessing memory at all.","type":"text"},{"text":" ","type":"text"},{"text":"However,","type":"text"},{"type":"text","text":" "},{"text":"it’s important to understand where potential conflicts can occur,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so you can avoid writing code that has conflicting access to memory."},{"text":" ","type":"text"},{"text":"If your code does contain conflicts,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a compile-time or runtime error."}]},{"type":"heading","text":"Understanding Conflicting Access to Memory","anchor":"Understanding-Conflicting-Access-to-Memory","level":2},{"inlineContent":[{"type":"text","text":"Access to memory happens in your code"},{"text":" ","type":"text"},{"text":"when you do things like set the value of a variable","type":"text"},{"type":"text","text":" "},{"text":"or pass an argument to a function.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"the following code contains both a read access and a write access:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ A write access to the memory where one is stored.","var one = 1","","\/\/ A read access from the memory where one is stored.","print(\"We're number \\(one)!\")"]},{"inlineContent":[{"text":"A conflicting access to memory can occur","type":"text"},{"text":" ","type":"text"},{"text":"when different parts of your code are trying","type":"text"},{"text":" ","type":"text"},{"text":"to access the same location in memory at the same time.","type":"text"},{"type":"text","text":" "},{"text":"Multiple accesses to a location in memory at the same time","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can produce unpredictable or inconsistent behavior."},{"text":" ","type":"text"},{"type":"text","text":"In Swift, there are ways to modify a value"},{"type":"text","text":" "},{"text":"that span several lines of code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making it possible to attempt to access a value"},{"text":" ","type":"text"},{"type":"text","text":"in the middle of its own modification."}],"type":"paragraph"},{"inlineContent":[{"text":"You can see a similar problem","type":"text"},{"type":"text","text":" "},{"text":"by thinking about how you update a budget","type":"text"},{"text":" ","type":"text"},{"text":"that’s written on a piece of paper.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Updating the budget is a two-step process:"},{"text":" ","type":"text"},{"type":"text","text":"First you add the items’ names and prices,"},{"type":"text","text":" "},{"text":"and then you change the total amount","type":"text"},{"type":"text","text":" "},{"text":"to reflect the items currently on the list.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Before and after the update,"},{"text":" ","type":"text"},{"text":"you can read any information from the budget","type":"text"},{"type":"text","text":" "},{"text":"and get a correct answer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"memory_shopping","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you’re adding items to the budget,"},{"type":"text","text":" "},{"type":"text","text":"it’s in a temporary, invalid state"},{"type":"text","text":" "},{"text":"because the total amount hasn’t been updated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the newly added items."},{"text":" ","type":"text"},{"type":"text","text":"Reading the total amount"},{"text":" ","type":"text"},{"type":"text","text":"during the process of adding an item"},{"type":"text","text":" "},{"type":"text","text":"gives you incorrect information."}]},{"inlineContent":[{"type":"text","text":"This example also demonstrates"},{"text":" ","type":"text"},{"text":"a challenge you may encounter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when fixing conflicting access to memory:"},{"type":"text","text":" "},{"text":"There are sometimes multiple ways to fix the conflict","type":"text"},{"text":" ","type":"text"},{"text":"that produce different answers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it’s not always obvious which answer is correct."},{"text":" ","type":"text"},{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"type":"text","text":"depending on whether you wanted the original total amount"},{"text":" ","type":"text"},{"type":"text","text":"or the updated total amount,"},{"text":" ","type":"text"},{"type":"text","text":"either $5 or $320 could be the correct answer."},{"text":" ","type":"text"},{"text":"Before you can fix the conflicting access,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you have to determine what it was intended to do."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"If you’ve written concurrent or multithreaded code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conflicting access to memory might be a familiar problem."},{"text":" ","type":"text"},{"text":"However,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the conflicting access discussed here can happen"},{"type":"text","text":" "},{"type":"text","text":"on a single thread and"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"doesn’t"}]},{"type":"text","text":" involve concurrent or multithreaded code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you have conflicting access to memory"},{"type":"text","text":" "},{"text":"from within a single thread,","type":"text"},{"type":"text","text":" "},{"text":"Swift guarantees that you’ll get an error","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at either compile time or runtime."},{"text":" ","type":"text"},{"type":"text","text":"For multithreaded code,"},{"type":"text","text":" "},{"text":"use ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","type":"reference"},{"text":" ","type":"text"},{"text":"to help detect conflicting access across threads.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"anchor":"Characteristics-of-Memory-Access","type":"heading","level":3,"text":"Characteristics of Memory Access"},{"inlineContent":[{"text":"There are three characteristics of memory access","type":"text"},{"type":"text","text":" "},{"text":"to consider in the context of conflicting access:","type":"text"},{"text":" ","type":"text"},{"text":"whether the access is a read or a write,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the duration of the access,"},{"type":"text","text":" "},{"text":"and the location in memory being accessed.","type":"text"},{"type":"text","text":" "},{"text":"Specifically,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a conflict occurs if you have two accesses"},{"type":"text","text":" "},{"text":"that meet all of the following conditions:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"At least one is a write access or a nonatomic access.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They access the same location in memory."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Their durations overlap."}]}]}]},{"inlineContent":[{"text":"The difference between a read and write access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is usually obvious:"},{"type":"text","text":" "},{"type":"text","text":"a write access changes the location in memory,"},{"type":"text","text":" "},{"type":"text","text":"but a read access doesn’t."},{"text":" ","type":"text"},{"text":"The location in memory","type":"text"},{"text":" ","type":"text"},{"text":"refers to what is being accessed —","type":"text"},{"text":" ","type":"text"},{"text":"for example, a variable, constant, or property.","type":"text"},{"type":"text","text":" "},{"text":"The duration of a memory access","type":"text"},{"type":"text","text":" "},{"text":"is either instantaneous or long-term.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An operation is "},{"inlineContent":[{"type":"text","text":"atomic"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"if it uses only C atomic operations;"},{"type":"text","text":" "},{"text":"otherwise it’s nonatomic.","type":"text"},{"type":"text","text":" "},{"text":"For a list of those functions, see the ","type":"text"},{"type":"codeVoice","code":"stdatomic(3)"},{"text":" man page.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An access is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"instantaneous","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"if it’s not possible for other code to run"},{"type":"text","text":" "},{"text":"after that access starts but before it ends.","type":"text"},{"type":"text","text":" "},{"text":"By their nature, two instantaneous accesses can’t happen at the same time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Most memory access is instantaneous."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"all the read and write accesses in the code listing below are instantaneous:"}]},{"code":["func oneMore(than number: Int) -> Int {","    return number + 1","}","","var myNumber = 1","myNumber = oneMore(than: myNumber)","print(myNumber)","\/\/ Prints \"2\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However,","type":"text"},{"type":"text","text":" "},{"text":"there are several ways to access memory,","type":"text"},{"text":" ","type":"text"},{"text":"called ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"long-term","type":"text"}]},{"text":" accesses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that span the execution of other code."},{"type":"text","text":" "},{"text":"The difference between instantaneous access and long-term access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is that it’s possible for other code to run"},{"text":" ","type":"text"},{"text":"after a long-term access starts but before it ends,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overlap"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A long-term access can overlap","type":"text"},{"text":" ","type":"text"},{"text":"with other long-term accesses and instantaneous accesses.","type":"text"}]},{"inlineContent":[{"text":"Overlapping accesses appear primarily in code that uses","type":"text"},{"text":" ","type":"text"},{"text":"in-out parameters in functions and methods","type":"text"},{"type":"text","text":" "},{"text":"or mutating methods of a structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The specific kinds of Swift code that use long-term accesses"},{"type":"text","text":" "},{"type":"text","text":"are discussed in the sections below."}],"type":"paragraph"},{"text":"Conflicting Access to In-Out Parameters","type":"heading","level":2,"anchor":"Conflicting-Access-to-In-Out-Parameters"},{"inlineContent":[{"type":"text","text":"A function has long-term write access"},{"text":" ","type":"text"},{"text":"to all of its in-out parameters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The write access for an in-out parameter starts"},{"text":" ","type":"text"},{"type":"text","text":"after all of the non-in-out parameters have been evaluated"},{"type":"text","text":" "},{"text":"and lasts for the entire duration of that function call.","type":"text"},{"text":" ","type":"text"},{"text":"If there are multiple in-out parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the write accesses start in the same order as the parameters appear."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"One consequence of this long-term write access","type":"text"},{"type":"text","text":" "},{"text":"is that you can’t access the original","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable that was passed as in-out,"},{"type":"text","text":" "},{"type":"text","text":"even if scoping rules and access control would otherwise permit it —"},{"text":" ","type":"text"},{"type":"text","text":"any access to the original creates a conflict."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var stepSize = 1","","func increment(_ number: inout Int) {","    number += stepSize","}","","increment(&stepSize)","\/\/ Error: conflicting accesses to stepSize"]},{"inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" is a global variable,"},{"text":" ","type":"text"},{"type":"text","text":"and it’s normally accessible from within "},{"code":"increment(_:)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"However,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the read access to "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" overlaps with"},{"type":"text","text":" "},{"text":"the write access to ","type":"text"},{"type":"codeVoice","code":"number"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As shown in the figure below,"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":" and "},{"code":"stepSize","type":"codeVoice"},{"text":" refer to the same location in memory.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The read and write accesses"},{"type":"text","text":" "},{"text":"refer to the same memory and they overlap,","type":"text"},{"type":"text","text":" "},{"text":"producing a conflict.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"memory_increment","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to solve this conflict"},{"type":"text","text":" "},{"text":"is to make an explicit copy of ","type":"text"},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Make an explicit copy.","var copyOfStepSize = stepSize","increment(&copyOfStepSize)","","\/\/ Update the original.","stepSize = copyOfStepSize","\/\/ stepSize is now 2"]},{"type":"paragraph","inlineContent":[{"text":"When you make a copy of ","type":"text"},{"type":"codeVoice","code":"stepSize"},{"text":" before calling ","type":"text"},{"code":"increment(_:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s clear that the value of "},{"code":"copyOfStepSize","type":"codeVoice"},{"text":" is incremented","type":"text"},{"text":" ","type":"text"},{"text":"by the current step size.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The read access ends before the write access starts,"},{"type":"text","text":" "},{"text":"so there isn’t a conflict.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Another consequence of long-term write access","type":"text"},{"type":"text","text":" "},{"text":"to in-out parameters is that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"passing a single variable"},{"type":"text","text":" "},{"type":"text","text":"as the argument for multiple in-out parameters"},{"text":" ","type":"text"},{"type":"text","text":"of the same function"},{"type":"text","text":" "},{"text":"produces a conflict.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["func balance(_ x: inout Int, _ y: inout Int) {","    let sum = x + y","    x = sum \/ 2","    y = sum - x","}","var playerOneScore = 42","var playerTwoScore = 30","balance(&playerOneScore, &playerTwoScore)  \/\/ OK","balance(&playerOneScore, &playerOneScore)","\/\/ Error: conflicting accesses to playerOneScore"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"balance(_:_:)"},{"type":"text","text":" function above"},{"type":"text","text":" "},{"type":"text","text":"modifies its two parameters"},{"type":"text","text":" "},{"text":"to divide the total value evenly between them.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Calling it with "},{"type":"codeVoice","code":"playerOneScore"},{"text":" and ","type":"text"},{"code":"playerTwoScore","type":"codeVoice"},{"type":"text","text":" as arguments"},{"text":" ","type":"text"},{"text":"doesn’t produce a conflict —","type":"text"},{"type":"text","text":" "},{"text":"there are two write accesses that overlap in time,","type":"text"},{"text":" ","type":"text"},{"text":"but they access different locations in memory.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"passing "},{"type":"codeVoice","code":"playerOneScore"},{"type":"text","text":" as the value for both parameters"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict"},{"type":"text","text":" "},{"text":"because it tries to perform two write accesses","type":"text"},{"text":" ","type":"text"},{"text":"to the same location in memory at the same time.","type":"text"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because operators are functions,"},{"text":" ","type":"text"},{"text":"they can also have long-term accesses to their in-out parameters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, if "},{"code":"balance(_:_:)","type":"codeVoice"},{"type":"text","text":" was an operator function named "},{"code":"<^>","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"writing "},{"type":"codeVoice","code":"playerOneScore <^> playerOneScore"},{"type":"text","text":" "},{"type":"text","text":"would result in the same conflict"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"type":"codeVoice","code":"balance(&playerOneScore, &playerOneScore)"},{"type":"text","text":"."}]}]},{"type":"heading","anchor":"Conflicting-Access-to-self-in-Methods","level":2,"text":"Conflicting Access to self in Methods"},{"inlineContent":[{"text":"A mutating method on a structure has write access to ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the duration of the method call.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, consider a game where each player"},{"type":"text","text":" "},{"text":"has a health amount, which decreases when taking damage,","type":"text"},{"text":" ","type":"text"},{"text":"and an energy amount, which decreases when using special abilities.","type":"text"}],"type":"paragraph"},{"code":["struct Player {","    var name: String","    var health: Int","    var energy: Int","","    static let maxHealth = 10","    mutating func restoreHealth() {","        health = Player.maxHealth","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the ","type":"text"},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" method above,"},{"text":" ","type":"text"},{"type":"text","text":"a write access to "},{"type":"codeVoice","code":"self"},{"text":" starts at the beginning of the method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and lasts until the method returns."},{"type":"text","text":" "},{"text":"In this case, there’s no other code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inside "},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" "},{"text":"that could have an overlapping access to the properties of a ","type":"text"},{"code":"Player","type":"codeVoice"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"shareHealth(with:)"},{"text":" method below","type":"text"},{"type":"text","text":" "},{"text":"takes another ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" instance as an in-out parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"creating the possibility of overlapping accesses."}]},{"type":"codeListing","syntax":"swift","code":["extension Player {","    mutating func shareHealth(with teammate: inout Player) {","        balance(&teammate.health, &health)","    }","}","","var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","var maria = Player(name: \"Maria\", health: 5, energy: 10)","oscar.shareHealth(with: &maria)  \/\/ OK"]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"text":"calling the ","type":"text"},{"code":"shareHealth(with:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"for Oscar’s player to share health with Maria’s player","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doesn’t cause a conflict."},{"type":"text","text":" "},{"text":"There’s a write access to ","type":"text"},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" during the method call"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" is the value of "},{"code":"self","type":"codeVoice"},{"type":"text","text":" in a mutating method,"},{"type":"text","text":" "},{"type":"text","text":"and there’s a write access to "},{"type":"codeVoice","code":"maria"},{"text":" ","type":"text"},{"type":"text","text":"for the same duration"},{"type":"text","text":" "},{"text":"because ","type":"text"},{"type":"codeVoice","code":"maria"},{"text":" was passed as an in-out parameter.","type":"text"},{"type":"text","text":" "},{"text":"As shown in the figure below,","type":"text"},{"text":" ","type":"text"},{"text":"they access different locations in memory.","type":"text"},{"type":"text","text":" "},{"text":"Even though the two write accesses overlap in time,","type":"text"},{"type":"text","text":" "},{"text":"they don’t conflict.","type":"text"}]},{"inlineContent":[{"identifier":"memory_share_health_maria","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However,"},{"type":"text","text":" "},{"text":"if you pass ","type":"text"},{"code":"oscar","type":"codeVoice"},{"text":" as the argument to ","type":"text"},{"code":"shareHealth(with:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"there’s a conflict:"}]},{"code":["oscar.shareHealth(with: &oscar)","\/\/ Error: conflicting accesses to oscar"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The mutating method needs write access to ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the duration of the method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the in-out parameter needs write access to "},{"code":"teammate","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the same duration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Within the method,"},{"text":" ","type":"text"},{"text":"both ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"teammate"},{"text":" refer to","type":"text"},{"text":" ","type":"text"},{"text":"the same location in memory —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below."},{"text":" ","type":"text"},{"type":"text","text":"The two write accesses"},{"text":" ","type":"text"},{"text":"refer to the same memory and they overlap,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_share_health_oscar"}]},{"type":"heading","anchor":"Conflicting-Access-to-Properties","text":"Conflicting Access to Properties","level":2},{"inlineContent":[{"type":"text","text":"Types like structures, tuples, and enumerations"},{"type":"text","text":" "},{"type":"text","text":"are made up of individual constituent values,"},{"type":"text","text":" "},{"type":"text","text":"such as the properties of a structure or the elements of a tuple."},{"text":" ","type":"text"},{"type":"text","text":"Because these are value types, mutating any piece of the value"},{"text":" ","type":"text"},{"type":"text","text":"mutates the whole value,"},{"text":" ","type":"text"},{"text":"meaning read or write access to one of the properties","type":"text"},{"text":" ","type":"text"},{"text":"requires read or write access to the whole value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"overlapping write accesses to the elements of a tuple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict:"}],"type":"paragraph"},{"syntax":"swift","code":["var playerInformation = (health: 10, energy: 20)","balance(&playerInformation.health, &playerInformation.energy)","\/\/ Error: conflicting access to properties of playerInformation"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"calling ","type":"text"},{"type":"codeVoice","code":"balance(_:_:)"},{"text":" on the elements of a tuple","type":"text"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict"},{"text":" ","type":"text"},{"text":"because there are overlapping write accesses to ","type":"text"},{"type":"codeVoice","code":"playerInformation"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Both ","type":"text"},{"code":"playerInformation.health","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"playerInformation.energy"},{"type":"text","text":" "},{"text":"are passed as in-out parameters,","type":"text"},{"text":" ","type":"text"},{"text":"which means ","type":"text"},{"code":"balance(_:_:)","type":"codeVoice"},{"text":" needs write access to them","type":"text"},{"type":"text","text":" "},{"text":"for the duration of the function call.","type":"text"},{"type":"text","text":" "},{"text":"In both cases, a write access to the tuple element","type":"text"},{"text":" ","type":"text"},{"text":"requires a write access to the entire tuple.","type":"text"},{"type":"text","text":" "},{"text":"This means there are two write accesses to ","type":"text"},{"code":"playerInformation","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with durations that overlap,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causing a conflict."}]},{"type":"paragraph","inlineContent":[{"text":"The code below shows that the same error appears","type":"text"},{"type":"text","text":" "},{"text":"for overlapping write accesses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the properties of a structure"},{"type":"text","text":" "},{"text":"that’s stored in a global variable.","type":"text"}]},{"syntax":"swift","code":["var holly = Player(name: \"Holly\", health: 10, energy: 10)","balance(&holly.health, &holly.energy)  \/\/ Error"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In practice,"},{"type":"text","text":" "},{"text":"most access to the properties of a structure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can overlap safely."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"if the variable "},{"code":"holly","type":"codeVoice"},{"text":" in the example above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is changed to a local variable instead of a global variable,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler can prove that overlapping access"},{"type":"text","text":" "},{"type":"text","text":"to stored properties of the structure is safe:"}]},{"code":["func someFunction() {","    var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","    balance(&oscar.health, &oscar.energy)  \/\/ OK","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"text":"Oscar’s health and energy are passed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the two in-out parameters to "},{"type":"codeVoice","code":"balance(_:_:)"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler can prove that memory safety is preserved"},{"type":"text","text":" "},{"type":"text","text":"because the two stored properties don’t interact in any way."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The restriction against"},{"text":" ","type":"text"},{"type":"text","text":"overlapping access to properties of a structure"},{"type":"text","text":" "},{"text":"isn’t always necessary to preserve memory safety.","type":"text"},{"type":"text","text":" "},{"text":"Memory safety is the desired guarantee,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but exclusive access is a stricter requirement than memory safety —"},{"type":"text","text":" "},{"text":"which means some code preserves memory safety,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though it violates exclusive access to memory."},{"type":"text","text":" "},{"text":"Swift allows this memory-safe code if the compiler can prove","type":"text"},{"type":"text","text":" "},{"text":"that the nonexclusive access to memory is still safe.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Specifically, it can prove"},{"type":"text","text":" "},{"type":"text","text":"that overlapping access to properties of a structure is safe"},{"type":"text","text":" "},{"type":"text","text":"if the following conditions apply:"}]},{"items":[{"content":[{"inlineContent":[{"text":"You’re accessing only stored properties of an instance,","type":"text"},{"text":" ","type":"text"},{"text":"not computed properties or class properties.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The structure is the value of a local variable,"},{"type":"text","text":" "},{"text":"not a global variable.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The structure is either not captured by any closures,","type":"text"},{"type":"text","text":" "},{"text":"or it’s captured only by nonescaping closures.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"If the compiler can’t prove the access is safe,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it doesn’t allow the access."}]}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},"sections":[],"metadata":{"title":"Memory Safety"},"references":{"memory_share_health_oscar":{"alt":null,"identifier":"memory_share_health_oscar","type":"image","variants":[{"url":"\/images\/memory_share_health_oscar@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_share_health_oscar~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early":{"titleInlineContent":[{"type":"text","text":"Thread Sanitizer"}],"url":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","type":"link","title":"Thread Sanitizer","identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early"},"memory_shopping":{"alt":null,"identifier":"memory_shopping","type":"image","variants":[{"url":"\/images\/memory_shopping@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_shopping~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"memory_increment":{"alt":null,"type":"image","identifier":"memory_increment","variants":[{"url":"\/images\/memory_increment@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_increment~dark@2x.png","traits":["2x","dark"]}]},"memory_share_health_maria":{"alt":null,"identifier":"memory_share_health_maria","type":"image","variants":[{"url":"\/images\/memory_share_health_maria@2x.png","traits":["2x","light"]},{"url":"\/images\/memory_share_health_maria~dark@2x.png","traits":["2x","dark"]}]}}}