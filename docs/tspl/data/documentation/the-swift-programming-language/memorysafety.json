{"kind":"article","identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Memory Safety"},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"Swift ensures that variables are initialized before they’re used,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory isn’t accessed after it’s been deallocated,"},{"text":" ","type":"text"},{"type":"text","text":"and array indices are checked for out-of-bounds errors."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also makes sure that multiple accesses"},{"text":" ","type":"text"},{"type":"text","text":"to the same area of memory don’t conflict,"},{"type":"text","text":" "},{"text":"by requiring code that modifies a location in memory","type":"text"},{"type":"text","text":" "},{"text":"to have exclusive access to that memory.","type":"text"},{"text":" ","type":"text"},{"text":"Because Swift manages memory automatically,","type":"text"},{"type":"text","text":" "},{"text":"most of the time you don’t have to think about accessing memory at all.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"it’s important to understand where potential conflicts can occur,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so you can avoid writing code that has conflicting access to memory."},{"type":"text","text":" "},{"type":"text","text":"If your code does contain conflicts,"},{"type":"text","text":" "},{"text":"you’ll get a compile-time or runtime error.","type":"text"}]},{"anchor":"Understanding-Conflicting-Access-to-Memory","type":"heading","text":"Understanding Conflicting Access to Memory","level":2},{"type":"paragraph","inlineContent":[{"text":"Access to memory happens in your code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you do things like set the value of a variable"},{"text":" ","type":"text"},{"text":"or pass an argument to a function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code contains both a read access and a write access:"}]},{"syntax":"swift","code":["\/\/ A write access to the memory where one is stored.","var one = 1","","\/\/ A read access from the memory where one is stored.","print(\"We're number \\(one)!\")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A conflicting access to memory can occur"},{"text":" ","type":"text"},{"type":"text","text":"when different parts of your code are trying"},{"type":"text","text":" "},{"type":"text","text":"to access the same location in memory at the same time."},{"text":" ","type":"text"},{"text":"Multiple accesses to a location in memory at the same time","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can produce unpredictable or inconsistent behavior."},{"text":" ","type":"text"},{"type":"text","text":"In Swift, there are ways to modify a value"},{"text":" ","type":"text"},{"type":"text","text":"that span several lines of code,"},{"type":"text","text":" "},{"text":"making it possible to attempt to access a value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the middle of its own modification."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can see a similar problem"},{"type":"text","text":" "},{"type":"text","text":"by thinking about how you update a budget"},{"type":"text","text":" "},{"text":"that’s written on a piece of paper.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Updating the budget is a two-step process:"},{"type":"text","text":" "},{"text":"First you add the items’ names and prices,","type":"text"},{"type":"text","text":" "},{"text":"and then you change the total amount","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the items currently on the list."},{"type":"text","text":" "},{"type":"text","text":"Before and after the update,"},{"text":" ","type":"text"},{"type":"text","text":"you can read any information from the budget"},{"type":"text","text":" "},{"type":"text","text":"and get a correct answer,"},{"text":" ","type":"text"},{"type":"text","text":"as shown in the figure below."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"memory_shopping","type":"image"}]},{"inlineContent":[{"text":"While you’re adding items to the budget,","type":"text"},{"text":" ","type":"text"},{"text":"it’s in a temporary, invalid state","type":"text"},{"text":" ","type":"text"},{"text":"because the total amount hasn’t been updated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the newly added items."},{"type":"text","text":" "},{"type":"text","text":"Reading the total amount"},{"type":"text","text":" "},{"type":"text","text":"during the process of adding an item"},{"type":"text","text":" "},{"type":"text","text":"gives you incorrect information."}],"type":"paragraph"},{"inlineContent":[{"text":"This example also demonstrates","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a challenge you may encounter"},{"type":"text","text":" "},{"text":"when fixing conflicting access to memory:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There are sometimes multiple ways to fix the conflict"},{"text":" ","type":"text"},{"type":"text","text":"that produce different answers,"},{"text":" ","type":"text"},{"text":"and it’s not always obvious which answer is correct.","type":"text"},{"type":"text","text":" "},{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"depending on whether you wanted the original total amount"},{"text":" ","type":"text"},{"type":"text","text":"or the updated total amount,"},{"type":"text","text":" "},{"type":"text","text":"either $5 or $320 could be the correct answer."},{"type":"text","text":" "},{"type":"text","text":"Before you can fix the conflicting access,"},{"text":" ","type":"text"},{"text":"you have to determine what it was intended to do.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"If you’ve written concurrent or multithreaded code,","type":"text"},{"type":"text","text":" "},{"text":"conflicting access to memory might be a familiar problem.","type":"text"},{"type":"text","text":" "},{"text":"However,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the conflicting access discussed here can happen"},{"type":"text","text":" "},{"text":"on a single thread and","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"doesn’t"}]},{"type":"text","text":" involve concurrent or multithreaded code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you have conflicting access to memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from within a single thread,"},{"type":"text","text":" "},{"text":"Swift guarantees that you’ll get an error","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at either compile time or runtime."},{"type":"text","text":" "},{"text":"For multithreaded code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early"},{"type":"text","text":" "},{"type":"text","text":"to help detect conflicting access across threads."}]}],"type":"aside","name":"Note","style":"note"},{"type":"heading","text":"Characteristics of Memory Access","anchor":"Characteristics-of-Memory-Access","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are three characteristics of memory access"},{"type":"text","text":" "},{"type":"text","text":"to consider in the context of conflicting access:"},{"text":" ","type":"text"},{"type":"text","text":"whether the access is a read or a write,"},{"type":"text","text":" "},{"type":"text","text":"the duration of the access,"},{"type":"text","text":" "},{"text":"and the location in memory being accessed.","type":"text"},{"type":"text","text":" "},{"text":"Specifically,","type":"text"},{"type":"text","text":" "},{"text":"a conflict occurs if you have two accesses","type":"text"},{"text":" ","type":"text"},{"text":"that meet all of the following conditions:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"At least one is a write access or a nonatomic access."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"They access the same location in memory."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Their durations overlap."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The difference between a read and write access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is usually obvious:"},{"text":" ","type":"text"},{"type":"text","text":"a write access changes the location in memory,"},{"type":"text","text":" "},{"type":"text","text":"but a read access doesn’t."},{"type":"text","text":" "},{"type":"text","text":"The location in memory"},{"text":" ","type":"text"},{"type":"text","text":"refers to what is being accessed —"},{"text":" ","type":"text"},{"type":"text","text":"for example, a variable, constant, or property."},{"text":" ","type":"text"},{"type":"text","text":"The duration of a memory access"},{"type":"text","text":" "},{"text":"is either instantaneous or long-term.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An operation is "},{"inlineContent":[{"type":"text","text":"atomic"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"if it uses only C atomic operations;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise it’s nonatomic."},{"type":"text","text":" "},{"type":"text","text":"For a list of those functions, see the "},{"type":"codeVoice","code":"stdatomic(3)"},{"type":"text","text":" man page."}]},{"type":"paragraph","inlineContent":[{"text":"An access is ","type":"text"},{"inlineContent":[{"type":"text","text":"instantaneous"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"if it’s not possible for other code to run","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after that access starts but before it ends."},{"type":"text","text":" "},{"text":"By their nature, two instantaneous accesses can’t happen at the same time.","type":"text"},{"type":"text","text":" "},{"text":"Most memory access is instantaneous.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"all the read and write accesses in the code listing below are instantaneous:"}]},{"code":["func oneMore(than number: Int) -> Int {","    return number + 1","}","","var myNumber = 1","myNumber = oneMore(than: myNumber)","print(myNumber)","\/\/ Prints \"2\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there are several ways to access memory,"},{"type":"text","text":" "},{"type":"text","text":"called "},{"inlineContent":[{"type":"text","text":"long-term"}],"type":"emphasis"},{"text":" accesses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that span the execution of other code."},{"type":"text","text":" "},{"type":"text","text":"The difference between instantaneous access and long-term access"},{"text":" ","type":"text"},{"type":"text","text":"is that it’s possible for other code to run"},{"type":"text","text":" "},{"type":"text","text":"after a long-term access starts but before it ends,"},{"type":"text","text":" "},{"text":"which is called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"overlap"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"A long-term access can overlap","type":"text"},{"text":" ","type":"text"},{"text":"with other long-term accesses and instantaneous accesses.","type":"text"}]},{"inlineContent":[{"text":"Overlapping accesses appear primarily in code that uses","type":"text"},{"type":"text","text":" "},{"text":"in-out parameters in functions and methods","type":"text"},{"text":" ","type":"text"},{"text":"or mutating methods of a structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The specific kinds of Swift code that use long-term accesses"},{"type":"text","text":" "},{"type":"text","text":"are discussed in the sections below."}],"type":"paragraph"},{"type":"heading","anchor":"Conflicting-Access-to-In-Out-Parameters","level":2,"text":"Conflicting Access to In-Out Parameters"},{"inlineContent":[{"type":"text","text":"A function has long-term write access"},{"type":"text","text":" "},{"type":"text","text":"to all of its in-out parameters."},{"text":" ","type":"text"},{"type":"text","text":"The write access for an in-out parameter starts"},{"type":"text","text":" "},{"type":"text","text":"after all of the non-in-out parameters have been evaluated"},{"type":"text","text":" "},{"type":"text","text":"and lasts for the entire duration of that function call."},{"text":" ","type":"text"},{"text":"If there are multiple in-out parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the write accesses start in the same order as the parameters appear."}],"type":"paragraph"},{"inlineContent":[{"text":"One consequence of this long-term write access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is that you can’t access the original"},{"type":"text","text":" "},{"type":"text","text":"variable that was passed as in-out,"},{"text":" ","type":"text"},{"type":"text","text":"even if scoping rules and access control would otherwise permit it —"},{"type":"text","text":" "},{"text":"any access to the original creates a conflict.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["var stepSize = 1","","func increment(_ number: inout Int) {","    number += stepSize","}","","increment(&stepSize)","\/\/ Error: conflicting accesses to stepSize"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"code":"stepSize","type":"codeVoice"},{"text":" is a global variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and it’s normally accessible from within "},{"code":"increment(_:)","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However,"},{"type":"text","text":" "},{"type":"text","text":"the read access to "},{"type":"codeVoice","code":"stepSize"},{"text":" overlaps with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the write access to "},{"code":"number","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"As shown in the figure below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both "},{"code":"number","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":" refer to the same location in memory."},{"text":" ","type":"text"},{"type":"text","text":"The read and write accesses"},{"type":"text","text":" "},{"text":"refer to the same memory and they overlap,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"producing a conflict."}]},{"inlineContent":[{"type":"image","identifier":"memory_increment"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One way to solve this conflict"},{"type":"text","text":" "},{"type":"text","text":"is to make an explicit copy of "},{"type":"codeVoice","code":"stepSize"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["\/\/ Make an explicit copy.","var copyOfStepSize = stepSize","increment(&copyOfStepSize)","","\/\/ Update the original.","stepSize = copyOfStepSize","\/\/ stepSize is now 2"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When you make a copy of ","type":"text"},{"type":"codeVoice","code":"stepSize"},{"text":" before calling ","type":"text"},{"code":"increment(_:)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s clear that the value of "},{"type":"codeVoice","code":"copyOfStepSize"},{"text":" is incremented","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by the current step size."},{"text":" ","type":"text"},{"type":"text","text":"The read access ends before the write access starts,"},{"type":"text","text":" "},{"text":"so there isn’t a conflict.","type":"text"}]},{"inlineContent":[{"text":"Another consequence of long-term write access","type":"text"},{"type":"text","text":" "},{"text":"to in-out parameters is that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passing a single variable"},{"text":" ","type":"text"},{"text":"as the argument for multiple in-out parameters","type":"text"},{"type":"text","text":" "},{"text":"of the same function","type":"text"},{"type":"text","text":" "},{"text":"produces a conflict.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func balance(_ x: inout Int, _ y: inout Int) {","    let sum = x + y","    x = sum \/ 2","    y = sum - x","}","var playerOneScore = 42","var playerTwoScore = 30","balance(&playerOneScore, &playerTwoScore)  \/\/ OK","balance(&playerOneScore, &playerOneScore)","\/\/ Error: conflicting accesses to playerOneScore"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"balance(_:_:)","type":"codeVoice"},{"text":" function above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"modifies its two parameters"},{"type":"text","text":" "},{"type":"text","text":"to divide the total value evenly between them."},{"text":" ","type":"text"},{"type":"text","text":"Calling it with "},{"type":"codeVoice","code":"playerOneScore"},{"text":" and ","type":"text"},{"code":"playerTwoScore","type":"codeVoice"},{"type":"text","text":" as arguments"},{"type":"text","text":" "},{"type":"text","text":"doesn’t produce a conflict —"},{"type":"text","text":" "},{"type":"text","text":"there are two write accesses that overlap in time,"},{"type":"text","text":" "},{"type":"text","text":"but they access different locations in memory."},{"text":" ","type":"text"},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"text":"passing ","type":"text"},{"code":"playerOneScore","type":"codeVoice"},{"text":" as the value for both parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"produces a conflict"},{"type":"text","text":" "},{"type":"text","text":"because it tries to perform two write accesses"},{"text":" ","type":"text"},{"type":"text","text":"to the same location in memory at the same time."}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Because operators are functions,"},{"type":"text","text":" "},{"text":"they can also have long-term accesses to their in-out parameters.","type":"text"},{"type":"text","text":" "},{"text":"For example, if ","type":"text"},{"code":"balance(_:_:)","type":"codeVoice"},{"text":" was an operator function named ","type":"text"},{"type":"codeVoice","code":"<^>"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"writing ","type":"text"},{"type":"codeVoice","code":"playerOneScore <^> playerOneScore"},{"text":" ","type":"text"},{"text":"would result in the same conflict","type":"text"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"code":"balance(&playerOneScore, &playerOneScore)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"},{"level":2,"text":"Conflicting Access to self in Methods","anchor":"Conflicting-Access-to-self-in-Methods","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A mutating method on a structure has write access to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the method call."},{"type":"text","text":" "},{"text":"For example, consider a game where each player","type":"text"},{"type":"text","text":" "},{"text":"has a health amount, which decreases when taking damage,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and an energy amount, which decreases when using special abilities."}]},{"type":"codeListing","syntax":"swift","code":["struct Player {","    var name: String","    var health: Int","    var energy: Int","","    static let maxHealth = 10","    mutating func restoreHealth() {","        health = Player.maxHealth","    }","}"]},{"inlineContent":[{"type":"text","text":"In the "},{"code":"restoreHealth()","type":"codeVoice"},{"type":"text","text":" method above,"},{"text":" ","type":"text"},{"text":"a write access to ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" starts at the beginning of the method"},{"text":" ","type":"text"},{"text":"and lasts until the method returns.","type":"text"},{"text":" ","type":"text"},{"text":"In this case, there’s no other code","type":"text"},{"text":" ","type":"text"},{"text":"inside ","type":"text"},{"type":"codeVoice","code":"restoreHealth()"},{"type":"text","text":" "},{"type":"text","text":"that could have an overlapping access to the properties of a "},{"code":"Player","type":"codeVoice"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"shareHealth(with:)"},{"type":"text","text":" method below"},{"text":" ","type":"text"},{"type":"text","text":"takes another "},{"type":"codeVoice","code":"Player"},{"text":" instance as an in-out parameter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"creating the possibility of overlapping accesses."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Player {","    mutating func shareHealth(with teammate: inout Player) {","        balance(&teammate.health, &health)","    }","}","","var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","var maria = Player(name: \"Maria\", health: 5, energy: 10)","oscar.shareHealth(with: &maria)  \/\/ OK"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"calling the ","type":"text"},{"code":"shareHealth(with:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"for Oscar’s player to share health with Maria’s player","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t cause a conflict."},{"type":"text","text":" "},{"type":"text","text":"There’s a write access to "},{"code":"oscar","type":"codeVoice"},{"type":"text","text":" during the method call"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"type":"codeVoice","code":"oscar"},{"type":"text","text":" is the value of "},{"code":"self","type":"codeVoice"},{"type":"text","text":" in a mutating method,"},{"text":" ","type":"text"},{"text":"and there’s a write access to ","type":"text"},{"type":"codeVoice","code":"maria"},{"text":" ","type":"text"},{"type":"text","text":"for the same duration"},{"type":"text","text":" "},{"type":"text","text":"because "},{"type":"codeVoice","code":"maria"},{"type":"text","text":" was passed as an in-out parameter."},{"text":" ","type":"text"},{"type":"text","text":"As shown in the figure below,"},{"type":"text","text":" "},{"type":"text","text":"they access different locations in memory."},{"type":"text","text":" "},{"type":"text","text":"Even though the two write accesses overlap in time,"},{"type":"text","text":" "},{"text":"they don’t conflict.","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"memory_share_health_maria"}],"type":"paragraph"},{"inlineContent":[{"text":"However,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you pass "},{"code":"oscar","type":"codeVoice"},{"type":"text","text":" as the argument to "},{"code":"shareHealth(with:)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"there’s a conflict:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["oscar.shareHealth(with: &oscar)","\/\/ Error: conflicting accesses to oscar"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The mutating method needs write access to ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" ","type":"text"},{"text":"for the duration of the method,","type":"text"},{"text":" ","type":"text"},{"text":"and the in-out parameter needs write access to ","type":"text"},{"type":"codeVoice","code":"teammate"},{"type":"text","text":" "},{"type":"text","text":"for the same duration."},{"text":" ","type":"text"},{"type":"text","text":"Within the method,"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" and ","type":"text"},{"code":"teammate","type":"codeVoice"},{"text":" refer to","type":"text"},{"type":"text","text":" "},{"text":"the same location in memory —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the figure below."},{"type":"text","text":" "},{"type":"text","text":"The two write accesses"},{"type":"text","text":" "},{"type":"text","text":"refer to the same memory and they overlap,"},{"text":" ","type":"text"},{"type":"text","text":"producing a conflict."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"memory_share_health_oscar"}]},{"level":2,"type":"heading","anchor":"Conflicting-Access-to-Properties","text":"Conflicting Access to Properties"},{"type":"paragraph","inlineContent":[{"text":"Types like structures, tuples, and enumerations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are made up of individual constituent values,"},{"type":"text","text":" "},{"type":"text","text":"such as the properties of a structure or the elements of a tuple."},{"type":"text","text":" "},{"text":"Because these are value types, mutating any piece of the value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutates the whole value,"},{"text":" ","type":"text"},{"type":"text","text":"meaning read or write access to one of the properties"},{"text":" ","type":"text"},{"type":"text","text":"requires read or write access to the whole value."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"overlapping write accesses to the elements of a tuple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produces a conflict:"}]},{"type":"codeListing","syntax":"swift","code":["var playerInformation = (health: 10, energy: 20)","balance(&playerInformation.health, &playerInformation.energy)","\/\/ Error: conflicting access to properties of playerInformation"]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"calling "},{"type":"codeVoice","code":"balance(_:_:)"},{"text":" on the elements of a tuple","type":"text"},{"text":" ","type":"text"},{"text":"produces a conflict","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because there are overlapping write accesses to "},{"type":"codeVoice","code":"playerInformation"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both "},{"type":"codeVoice","code":"playerInformation.health"},{"type":"text","text":" and "},{"type":"codeVoice","code":"playerInformation.energy"},{"type":"text","text":" "},{"type":"text","text":"are passed as in-out parameters,"},{"type":"text","text":" "},{"text":"which means ","type":"text"},{"code":"balance(_:_:)","type":"codeVoice"},{"type":"text","text":" needs write access to them"},{"type":"text","text":" "},{"type":"text","text":"for the duration of the function call."},{"type":"text","text":" "},{"text":"In both cases, a write access to the tuple element","type":"text"},{"text":" ","type":"text"},{"text":"requires a write access to the entire tuple.","type":"text"},{"type":"text","text":" "},{"text":"This means there are two write accesses to ","type":"text"},{"code":"playerInformation","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with durations that overlap,"},{"type":"text","text":" "},{"type":"text","text":"causing a conflict."}]},{"inlineContent":[{"type":"text","text":"The code below shows that the same error appears"},{"type":"text","text":" "},{"text":"for overlapping write accesses","type":"text"},{"text":" ","type":"text"},{"text":"to the properties of a structure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s stored in a global variable."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var holly = Player(name: \"Holly\", health: 10, energy: 10)","balance(&holly.health, &holly.energy)  \/\/ Error"]},{"type":"paragraph","inlineContent":[{"text":"In practice,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"most access to the properties of a structure"},{"text":" ","type":"text"},{"type":"text","text":"can overlap safely."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"if the variable ","type":"text"},{"code":"holly","type":"codeVoice"},{"text":" in the example above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is changed to a local variable instead of a global variable,"},{"text":" ","type":"text"},{"text":"the compiler can prove that overlapping access","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to stored properties of the structure is safe:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction() {","    var oscar = Player(name: \"Oscar\", health: 10, energy: 10)","    balance(&oscar.health, &oscar.energy)  \/\/ OK","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"type":"text","text":"Oscar’s health and energy are passed"},{"type":"text","text":" "},{"text":"as the two in-out parameters to ","type":"text"},{"type":"codeVoice","code":"balance(_:_:)"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The compiler can prove that memory safety is preserved","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because the two stored properties don’t interact in any way."}]},{"inlineContent":[{"text":"The restriction against","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"overlapping access to properties of a structure"},{"type":"text","text":" "},{"type":"text","text":"isn’t always necessary to preserve memory safety."},{"type":"text","text":" "},{"type":"text","text":"Memory safety is the desired guarantee,"},{"type":"text","text":" "},{"text":"but exclusive access is a stricter requirement than memory safety —","type":"text"},{"type":"text","text":" "},{"text":"which means some code preserves memory safety,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though it violates exclusive access to memory."},{"type":"text","text":" "},{"type":"text","text":"Swift allows this memory-safe code if the compiler can prove"},{"type":"text","text":" "},{"type":"text","text":"that the nonexclusive access to memory is still safe."},{"type":"text","text":" "},{"text":"Specifically, it can prove","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that overlapping access to properties of a structure is safe"},{"type":"text","text":" "},{"type":"text","text":"if the following conditions apply:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You’re accessing only stored properties of an instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not computed properties or class properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The structure is the value of a local variable,","type":"text"},{"type":"text","text":" "},{"text":"not a global variable.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The structure is either not captured by any closures,"},{"type":"text","text":" "},{"type":"text","text":"or it’s captured only by nonescaping closures."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"If the compiler can’t prove the access is safe,","type":"text"},{"text":" ","type":"text"},{"text":"it doesn’t allow the access.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"memory_shopping":{"identifier":"memory_shopping","variants":[{"traits":["2x","light"],"url":"\/images\/memory_shopping@2x.png"},{"traits":["2x","dark"],"url":"\/images\/memory_shopping~dark@2x.png"}],"alt":null,"type":"image"},"https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early":{"title":"Thread Sanitizer","url":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","identifier":"https:\/\/developer.apple.com\/documentation\/xcode\/diagnosing_memory_thread_and_crash_issues_early","type":"link","titleInlineContent":[{"text":"Thread Sanitizer","type":"text"}]},"memory_increment":{"identifier":"memory_increment","variants":[{"traits":["2x","light"],"url":"\/images\/memory_increment@2x.png"},{"traits":["2x","dark"],"url":"\/images\/memory_increment~dark@2x.png"}],"alt":null,"type":"image"},"memory_share_health_maria":{"alt":null,"type":"image","identifier":"memory_share_health_maria","variants":[{"traits":["2x","light"],"url":"\/images\/memory_share_health_maria@2x.png"},{"traits":["2x","dark"],"url":"\/images\/memory_share_health_maria~dark@2x.png"}]},"memory_share_health_oscar":{"identifier":"memory_share_health_oscar","variants":[{"traits":["2x","light"],"url":"\/images\/memory_share_health_oscar@2x.png"},{"traits":["2x","dark"],"url":"\/images\/memory_share_health_oscar~dark@2x.png"}],"alt":null,"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"}}}