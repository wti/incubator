{"kind":"article","sections":[],"abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Initialization"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"text":" ","type":"text"},{"type":"text","text":"This process involves setting an initial value for each stored property on that instance"},{"text":" ","type":"text"},{"text":"and performing any other setup or initialization that’s required","type":"text"},{"type":"text","text":" "},{"text":"before the new instance is ready for use.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You implement this initialization process by defining ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"initializers","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which are like special methods that can be called","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to create a new instance of a particular type."},{"text":" ","type":"text"},{"type":"text","text":"Unlike Objective-C initializers, Swift initializers don’t return a value."},{"type":"text","text":" "},{"type":"text","text":"Their primary role is to ensure that new instances of a type"},{"type":"text","text":" "},{"type":"text","text":"are correctly initialized before they’re used for the first time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of class types can also implement a "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which performs any custom cleanup just before an instance of that class is deallocated.","type":"text"},{"type":"text","text":" "},{"text":"For more information about deinitializers, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},{"text":".","type":"text"}]},{"anchor":"Setting-Initial-Values-for-Stored-Properties","type":"heading","level":2,"text":"Setting Initial Values for Stored Properties"},{"inlineContent":[{"type":"text","text":"Classes and structures "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" set all of their stored properties"},{"text":" ","type":"text"},{"type":"text","text":"to an appropriate initial value by the time"},{"text":" ","type":"text"},{"type":"text","text":"an instance of that class or structure is created."},{"type":"text","text":" "},{"type":"text","text":"Stored properties can’t be left in an indeterminate state."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can set an initial value for a stored property within an initializer,","type":"text"},{"type":"text","text":" "},{"text":"or by assigning a default property value as part of the property’s definition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These actions are described in the following sections."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you assign a default value to a stored property,"},{"text":" ","type":"text"},{"text":"or set its initial value within an initializer,","type":"text"},{"type":"text","text":" "},{"text":"the value of that property is set directly,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without calling any property observers."}]}],"name":"Note"},{"type":"heading","level":3,"anchor":"Initializers","text":"Initializers"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initializers"}]},{"type":"text","text":" are called to create a new instance of a particular type."},{"text":" ","type":"text"},{"text":"In its simplest form, an initializer is like an instance method with no parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"written using the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword:"}]},{"type":"codeListing","syntax":"swift","code":["init() {","    \/\/ perform some initialization here","}"]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a new structure called ","type":"text"},{"code":"Fahrenheit","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to store temperatures expressed in the Fahrenheit scale."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Fahrenheit"},{"text":" structure has one stored property,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"temperature"},{"type":"text","text":", which is of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":":"}]},{"code":["struct Fahrenheit {","    var temperature: Double","    init() {","        temperature = 32.0","    }","}","var f = Fahrenheit()","print(\"The default temperature is \\(f.temperature)° Fahrenheit\")","\/\/ Prints \"The default temperature is 32.0° Fahrenheit\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The structure defines a single initializer, "},{"code":"init","type":"codeVoice"},{"text":", with no parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which initializes the stored temperature with a value of "},{"code":"32.0","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"(the freezing point of water in degrees Fahrenheit)."}]},{"type":"heading","level":3,"anchor":"Default-Property-Values","text":"Default Property Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set the initial value of a stored property from within an initializer,"},{"type":"text","text":" "},{"text":"as shown above.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Alternatively, specify a "},{"inlineContent":[{"text":"default property value","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"as part of the property’s declaration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You specify a default property value by assigning an initial value to the property"},{"type":"text","text":" "},{"text":"when it’s defined.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If a property always takes the same initial value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provide a default value rather than setting a value within an initializer."},{"type":"text","text":" "},{"text":"The end result is the same,","type":"text"},{"type":"text","text":" "},{"text":"but the default value ties the property’s initialization more closely to its declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It makes for shorter, clearer initializers"},{"type":"text","text":" "},{"type":"text","text":"and enables you to infer the type of the property from its default value."},{"text":" ","type":"text"},{"type":"text","text":"The default value also makes it easier for you to take advantage of"},{"text":" ","type":"text"},{"text":"default initializers and initializer inheritance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described later in this chapter."}]}],"name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can write the "},{"code":"Fahrenheit","type":"codeVoice"},{"text":" structure from above in a simpler form","type":"text"},{"type":"text","text":" "},{"text":"by providing a default value for its ","type":"text"},{"type":"codeVoice","code":"temperature"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"at the point that the property is declared:"}]},{"syntax":"swift","type":"codeListing","code":["struct Fahrenheit {","    var temperature = 32.0","}"]},{"type":"heading","anchor":"Customizing-Initialization","level":2,"text":"Customizing Initialization"},{"type":"paragraph","inlineContent":[{"text":"You can customize the initialization process","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with input parameters and optional property types,"},{"text":" ","type":"text"},{"type":"text","text":"or by assigning constant properties during initialization,"},{"type":"text","text":" "},{"type":"text","text":"as described in the following sections."}]},{"level":3,"text":"Initialization Parameters","type":"heading","anchor":"Initialization-Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initialization parameters"}]},{"type":"text","text":" as part of an initializer’s definition,"},{"text":" ","type":"text"},{"type":"text","text":"to define the types and names of values that customize the initialization process."},{"text":" ","type":"text"},{"type":"text","text":"Initialization parameters have the same capabilities and syntax"},{"text":" ","type":"text"},{"type":"text","text":"as function and method parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a structure called "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which stores temperatures expressed in degrees Celsius."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Celsius"},{"text":" structure implements two custom initializers called","type":"text"},{"type":"text","text":" "},{"code":"init(fromFahrenheit:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"init(fromKelvin:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which initialize a new instance of the structure"},{"type":"text","text":" "},{"text":"with a value from a different temperature scale:","type":"text"}]},{"syntax":"swift","code":["struct Celsius {","    var temperatureInCelsius: Double","    init(fromFahrenheit fahrenheit: Double) {","        temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","    }","    init(fromKelvin kelvin: Double) {","        temperatureInCelsius = kelvin - 273.15","    }","}","let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)","\/\/ boilingPointOfWater.temperatureInCelsius is 100.0","let freezingPointOfWater = Celsius(fromKelvin: 273.15)","\/\/ freezingPointOfWater.temperatureInCelsius is 0.0"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The first initializer has a single initialization parameter","type":"text"},{"type":"text","text":" "},{"text":"with an argument label of ","type":"text"},{"type":"codeVoice","code":"fromFahrenheit"},{"type":"text","text":" and a parameter name of "},{"code":"fahrenheit","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The second initializer has a single initialization parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with an argument label of "},{"type":"codeVoice","code":"fromKelvin"},{"text":" and a parameter name of ","type":"text"},{"code":"kelvin","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Both initializers convert their single argument into","type":"text"},{"text":" ","type":"text"},{"text":"the corresponding Celsius value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and store this value in a property called "},{"type":"codeVoice","code":"temperatureInCelsius"},{"type":"text","text":"."}]},{"anchor":"Parameter-Names-and-Argument-Labels","text":"Parameter Names and Argument Labels","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"As with function and method parameters,","type":"text"},{"type":"text","text":" "},{"text":"initialization parameters can have both a parameter name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for use within the initializer’s body"},{"text":" ","type":"text"},{"type":"text","text":"and an argument label for use when calling the initializer."}]},{"type":"paragraph","inlineContent":[{"text":"However, initializers don’t have an identifying function name before their parentheses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the way that functions and methods do."},{"type":"text","text":" "},{"type":"text","text":"Therefore, the names and types of an initializer’s parameters"},{"text":" ","type":"text"},{"type":"text","text":"play a particularly important role in identifying which initializer should be called."},{"text":" ","type":"text"},{"type":"text","text":"Because of this, Swift provides an automatic argument label"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"inlineContent":[{"type":"text","text":"every"}],"type":"emphasis"},{"type":"text","text":" parameter in an initializer if you don’t provide one."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a structure called "},{"code":"Color","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with three constant properties called ","type":"text"},{"code":"red","type":"codeVoice"},{"text":", ","type":"text"},{"code":"green","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"blue"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These properties store a value between "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"1.0"},{"text":" ","type":"text"},{"text":"to indicate the amount of red, green, and blue in the color.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"Color","type":"codeVoice"},{"text":" provides an initializer with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"three appropriately named parameters of type "},{"type":"codeVoice","code":"Double"},{"text":" ","type":"text"},{"type":"text","text":"for its red, green, and blue components."},{"text":" ","type":"text"},{"code":"Color","type":"codeVoice"},{"text":" also provides a second initializer with a single ","type":"text"},{"code":"white","type":"codeVoice"},{"text":" parameter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is used to provide the same value for all three color components."}]},{"type":"codeListing","code":["struct Color {","    let red, green, blue: Double","    init(red: Double, green: Double, blue: Double) {","        self.red   = red","        self.green = green","        self.blue  = blue","    }","    init(white: Double) {","        red   = white","        green = white","        blue  = white","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Both initializers can be used to create a new "},{"code":"Color","type":"codeVoice"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"text":"by providing named values for each initializer parameter:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)","let halfGray = Color(white: 0.5)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that it isn’t possible to call these initializers","type":"text"},{"text":" ","type":"text"},{"text":"without using argument labels.","type":"text"},{"type":"text","text":" "},{"text":"Argument labels must always be used in an initializer if they’re defined,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and omitting them is a compile-time error:"}]},{"code":["let veryGreen = Color(0.0, 1.0, 0.0)","\/\/ this reports a compile-time error - argument labels are required"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Initializer Parameters Without Argument Labels","anchor":"Initializer-Parameters-Without-Argument-Labels","type":"heading"},{"inlineContent":[{"type":"text","text":"If you don’t want to use an argument label for an initializer parameter,"},{"type":"text","text":" "},{"type":"text","text":"write an underscore ("},{"code":"_","type":"codeVoice"},{"text":") instead of an explicit argument label for that parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to override the default behavior."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an expanded version of the "},{"type":"codeVoice","code":"Celsius"},{"text":" example","type":"text"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initialization-Parameters"},{"text":" above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with an additional initializer to create a new "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"from a ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value that’s already in the Celsius scale:"}],"type":"paragraph"},{"code":["struct Celsius {","    var temperatureInCelsius: Double","    init(fromFahrenheit fahrenheit: Double) {","        temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","    }","    init(fromKelvin kelvin: Double) {","        temperatureInCelsius = kelvin - 273.15","    }","    init(_ celsius: Double) {","        temperatureInCelsius = celsius","    }","}","let bodyTemperature = Celsius(37.0)","\/\/ bodyTemperature.temperatureInCelsius is 37.0"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The initializer call ","type":"text"},{"type":"codeVoice","code":"Celsius(37.0)"},{"type":"text","text":" is clear in its intent"},{"text":" ","type":"text"},{"type":"text","text":"without the need for an argument label."},{"type":"text","text":" "},{"text":"It’s therefore appropriate to write this initializer as ","type":"text"},{"type":"codeVoice","code":"init(_ celsius: Double)"},{"type":"text","text":" "},{"text":"so that it can be called by providing an unnamed ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"level":3,"anchor":"Optional-Property-Types","text":"Optional Property Types","type":"heading"},{"inlineContent":[{"text":"If your custom type has a stored property that’s logically allowed to have “no value” —","type":"text"},{"type":"text","text":" "},{"text":"perhaps because its value can’t be set during initialization,","type":"text"},{"type":"text","text":" "},{"text":"or because it’s allowed to have “no value” at some later point —","type":"text"},{"text":" ","type":"text"},{"text":"declare the property with an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"text":"Properties of optional type are automatically initialized with a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"indicating that the property is deliberately intended to have “no value yet”"},{"type":"text","text":" "},{"text":"during initialization.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example defines a class called "},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with an optional "},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"response"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["class SurveyQuestion {","    var text: String","    var response: String?","    init(text: String) {","        self.text = text","    }","    func ask() {","        print(text)","    }","}","let cheeseQuestion = SurveyQuestion(text: \"Do you like cheese?\")","cheeseQuestion.ask()","\/\/ Prints \"Do you like cheese?\"","cheeseQuestion.response = \"Yes, I do like cheese.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The response to a survey question can’t be known until it’s asked,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"response"},{"type":"text","text":" property is declared with a type of "},{"type":"codeVoice","code":"String?"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or “optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"It’s automatically assigned a default value of "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", meaning “no string yet”,"},{"text":" ","type":"text"},{"type":"text","text":"when a new instance of "},{"code":"SurveyQuestion","type":"codeVoice"},{"text":" is initialized.","type":"text"}]},{"level":3,"anchor":"Assigning-Constant-Properties-During-Initialization","text":"Assigning Constant Properties During Initialization","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign a value to a constant property"},{"type":"text","text":" "},{"text":"at any point during initialization,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as long as it’s set to a definite value by the time initialization finishes."},{"text":" ","type":"text"},{"type":"text","text":"Once a constant property is assigned a value,"},{"text":" ","type":"text"},{"type":"text","text":"it can’t be further modified."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For class instances,"},{"type":"text","text":" "},{"text":"a constant property can be modified during initialization","type":"text"},{"type":"text","text":" "},{"text":"only by the class that introduces it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It can’t be modified by a subclass."}]}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"You can revise the ","type":"text"},{"code":"SurveyQuestion","type":"codeVoice"},{"type":"text","text":" example from above to use"},{"type":"text","text":" "},{"type":"text","text":"a constant property rather than a variable property for the "},{"type":"codeVoice","code":"text"},{"text":" property of the question,","type":"text"},{"text":" ","type":"text"},{"text":"to indicate that the question doesn’t change once an instance of ","type":"text"},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":" is created."},{"type":"text","text":" "},{"text":"Even though the ","type":"text"},{"code":"text","type":"codeVoice"},{"text":" property is now a constant,","type":"text"},{"text":" ","type":"text"},{"text":"it can still be set within the class’s initializer:","type":"text"}]},{"type":"codeListing","code":["class SurveyQuestion {","    let text: String","    var response: String?","    init(text: String) {","        self.text = text","    }","    func ask() {","        print(text)","    }","}","let beetsQuestion = SurveyQuestion(text: \"How about beets?\")","beetsQuestion.ask()","\/\/ Prints \"How about beets?\"","beetsQuestion.response = \"I also like beets. (But not with cheese.)\""],"syntax":"swift"},{"type":"heading","anchor":"Default-Initializers","text":"Default Initializers","level":2},{"type":"paragraph","inlineContent":[{"text":"Swift provides a ","type":"text"},{"inlineContent":[{"type":"text","text":"default initializer"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"for any structure or class"},{"type":"text","text":" "},{"type":"text","text":"that provides default values for all of its properties"},{"type":"text","text":" "},{"text":"and doesn’t provide at least one initializer itself.","type":"text"},{"text":" ","type":"text"},{"text":"The default initializer simply creates a new instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with all of its properties set to their default values."}]},{"inlineContent":[{"text":"This example defines a class called ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which encapsulates the name, quantity, and purchase state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of an item in a shopping list:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ShoppingListItem {","    var name: String?","    var quantity = 1","    var purchased = false","}","var item = ShoppingListItem()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because all properties of the "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" class have default values,"},{"type":"text","text":" "},{"text":"and because it’s a base class with no superclass,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" automatically gains a default initializer implementation"},{"text":" ","type":"text"},{"type":"text","text":"that creates a new instance with all of its properties set to their default values."},{"text":" ","type":"text"},{"text":"(The ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" property is an optional ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" property,","type":"text"},{"type":"text","text":" "},{"text":"and so it automatically receives a default value of ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even though this value isn’t written in the code.)"},{"text":" ","type":"text"},{"text":"The example above uses the default initializer for the ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to create a new instance of the class with initializer syntax,"},{"text":" ","type":"text"},{"text":"written as ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem()"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and assigns this new instance to a variable called "},{"type":"codeVoice","code":"item"},{"type":"text","text":"."}]},{"level":3,"anchor":"Memberwise-Initializers-for-Structure-Types","type":"heading","text":"Memberwise Initializers for Structure Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structure types automatically receive a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise initializer"}]},{"text":" ","type":"text"},{"type":"text","text":"if they don’t define any of their own custom initializers."},{"text":" ","type":"text"},{"text":"Unlike a default initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the structure receives a memberwise initializer"},{"type":"text","text":" "},{"text":"even if it has stored properties that don’t have default values.","type":"text"}]},{"inlineContent":[{"text":"The memberwise initializer is a shorthand way","type":"text"},{"type":"text","text":" "},{"text":"to initialize the member properties of new structure instances.","type":"text"},{"text":" ","type":"text"},{"text":"Initial values for the properties of the new instance","type":"text"},{"text":" ","type":"text"},{"text":"can be passed to the memberwise initializer by name.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"Size","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with two properties called "},{"type":"codeVoice","code":"width"},{"text":" and ","type":"text"},{"code":"height","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Both properties are inferred to be of type "},{"code":"Double","type":"codeVoice"},{"text":" ","type":"text"},{"text":"by assigning a default value of ","type":"text"},{"type":"codeVoice","code":"0.0"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" structure automatically receives an "},{"type":"codeVoice","code":"init(width:height:)"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"which you can use to initialize a new "},{"code":"Size","type":"codeVoice"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Size {","    var width = 0.0, height = 0.0","}","let twoByTwo = Size(width: 2.0, height: 2.0)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When you call a memberwise initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can omit values for any properties"},{"type":"text","text":" "},{"text":"that have default values.","type":"text"},{"text":" ","type":"text"},{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Size","type":"codeVoice"},{"type":"text","text":" structure has a default value"},{"text":" ","type":"text"},{"type":"text","text":"for both its "},{"type":"codeVoice","code":"height"},{"type":"text","text":" and "},{"type":"codeVoice","code":"width"},{"text":" properties.","type":"text"},{"type":"text","text":" "},{"text":"You can omit either property or both properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the initializer uses the default value for anything you omit."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"syntax":"swift","code":["let zeroByTwo = Size(height: 2.0)","print(zeroByTwo.width, zeroByTwo.height)","\/\/ Prints \"0.0 2.0\"","","let zeroByZero = Size()","print(zeroByZero.width, zeroByZero.height)","\/\/ Prints \"0.0 0.0\""],"type":"codeListing"},{"anchor":"Initializer-Delegation-for-Value-Types","level":2,"type":"heading","text":"Initializer Delegation for Value Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializers can call other initializers to perform part of an instance’s initialization."},{"type":"text","text":" "},{"type":"text","text":"This process, known as "},{"inlineContent":[{"text":"initializer delegation","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"avoids duplicating code across multiple initializers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rules for how initializer delegation works,"},{"type":"text","text":" "},{"text":"and for what forms of delegation are allowed,","type":"text"},{"text":" ","type":"text"},{"text":"are different for value types and class types.","type":"text"},{"type":"text","text":" "},{"text":"Value types (structures and enumerations) don’t support inheritance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so their initializer delegation process is relatively simple,"},{"type":"text","text":" "},{"text":"because they can only delegate to another initializer that they provide themselves.","type":"text"},{"type":"text","text":" "},{"text":"Classes, however, can inherit from other classes,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This means that classes have additional responsibilities for ensuring that"},{"text":" ","type":"text"},{"type":"text","text":"all stored properties they inherit are assigned a suitable value during initialization."},{"type":"text","text":" "},{"type":"text","text":"These responsibilities are described in"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Class-Inheritance-and-Initialization","isActive":true},{"type":"text","text":" below."}]},{"type":"paragraph","inlineContent":[{"text":"For value types, you use ","type":"text"},{"code":"self.init","type":"codeVoice"},{"type":"text","text":" to refer to other initializers"},{"text":" ","type":"text"},{"type":"text","text":"from the same value type when writing your own custom initializers."},{"type":"text","text":" "},{"text":"You can call ","type":"text"},{"code":"self.init","type":"codeVoice"},{"text":" only from within an initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that if you define a custom initializer for a value type,"},{"type":"text","text":" "},{"text":"you will no longer have access to the default initializer","type":"text"},{"type":"text","text":" "},{"text":"(or the memberwise initializer, if it’s a structure) for that type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This constraint prevents a situation in which additional essential setup"},{"text":" ","type":"text"},{"text":"provided in a more complex initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is accidentally circumvented by someone using one of the automatic initializers."}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you want your custom value type to be initializable with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the default initializer and memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"and also with your own custom initializers,"},{"text":" ","type":"text"},{"text":"write your custom initializers in an extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than as part of the value type’s original implementation."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"The following example defines a custom ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure to represent a geometric rectangle."},{"type":"text","text":" "},{"type":"text","text":"The example requires two supporting structures called "},{"code":"Size","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Point","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"both of which provide default values of "},{"code":"0.0","type":"codeVoice"},{"text":" for all of their properties:","type":"text"}]},{"code":["struct Size {","    var width = 0.0, height = 0.0","}","struct Point {","    var x = 0.0, y = 0.0","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can initialize the "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure below in one of three ways —"},{"type":"text","text":" "},{"text":"by using its default zero-initialized ","type":"text"},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" property values,"},{"text":" ","type":"text"},{"text":"by providing a specific origin point and size,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or by providing a specific center point and size."},{"type":"text","text":" "},{"type":"text","text":"These initialization options are represented by"},{"text":" ","type":"text"},{"text":"three custom initializers that are part of the ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" structure’s definition:","type":"text"}]},{"code":["struct Rect {","    var origin = Point()","    var size = Size()","    init() {}","    init(origin: Point, size: Size) {","        self.origin = origin","        self.size = size","    }","    init(center: Point, size: Size) {","        let originX = center.x - (size.width \/ 2)","        let originY = center.y - (size.height \/ 2)","        self.init(origin: Point(x: originX, y: originY), size: size)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The first ","type":"text"},{"type":"codeVoice","code":"Rect"},{"text":" initializer, ","type":"text"},{"code":"init()","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"is functionally the same as the default initializer that the structure would have received","type":"text"},{"type":"text","text":" "},{"text":"if it didn’t have its own custom initializers.","type":"text"},{"text":" ","type":"text"},{"text":"This initializer has an empty body,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represented by an empty pair of curly braces "},{"code":"{}","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Calling this initializer returns a "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instance whose"},{"type":"text","text":" "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"size"},{"type":"text","text":" properties are both initialized with"},{"text":" ","type":"text"},{"type":"text","text":"the default values of "},{"code":"Point(x: 0.0, y: 0.0)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"Size(width: 0.0, height: 0.0)"},{"text":" ","type":"text"},{"type":"text","text":"from their property definitions:"}],"type":"paragraph"},{"code":["let basicRect = Rect()","\/\/ basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The second ","type":"text"},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is functionally the same as the memberwise initializer that the structure would have received"},{"type":"text","text":" "},{"type":"text","text":"if it didn’t have its own custom initializers."},{"type":"text","text":" "},{"type":"text","text":"This initializer simply assigns the "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"code":"size","type":"codeVoice"},{"text":" argument values to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the appropriate stored properties:"}]},{"code":["let originRect = Rect(origin: Point(x: 2.0, y: 2.0),","    size: Size(width: 5.0, height: 5.0))","\/\/ originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third "},{"type":"codeVoice","code":"Rect"},{"text":" initializer, ","type":"text"},{"type":"codeVoice","code":"init(center:size:)"},{"text":", is slightly more complex.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It starts by calculating an appropriate origin point based on"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"codeVoice","code":"center"},{"text":" point and a ","type":"text"},{"type":"codeVoice","code":"size"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"type":"text","text":"It then calls (or "},{"type":"emphasis","inlineContent":[{"text":"delegates","type":"text"}]},{"type":"text","text":") to the "},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":" initializer,"},{"type":"text","text":" "},{"text":"which stores the new origin and size values in the appropriate properties:","type":"text"}]},{"type":"codeListing","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","    size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(center:size:)"},{"type":"text","text":" initializer could have assigned"},{"text":" ","type":"text"},{"type":"text","text":"the new values of "},{"code":"origin","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"size","type":"codeVoice"},{"text":" to the appropriate properties itself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, it’s more convenient (and clearer in intent)"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"init(center:size:)"},{"text":" initializer to take advantage of an existing initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that already provides exactly that functionality."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"For an alternative way to write this example without defining","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"init()","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"init(origin:size:)","type":"codeVoice"},{"type":"text","text":" initializers yourself,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"heading","text":"Class Inheritance and Initialization","anchor":"Class-Inheritance-and-Initialization","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of a class’s stored properties —"},{"text":" ","type":"text"},{"type":"text","text":"including any properties the class inherits from its superclass —"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" be assigned an initial value during initialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift defines two kinds of initializers for class types"},{"text":" ","type":"text"},{"type":"text","text":"to help ensure all stored properties receive an initial value."},{"type":"text","text":" "},{"type":"text","text":"These are known as designated initializers and convenience initializers."}]},{"text":"Designated Initializers and Convenience Initializers","type":"heading","level":3,"anchor":"Designated-Initializers-and-Convenience-Initializers"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Designated initializers"}],"type":"emphasis"},{"type":"text","text":" are the primary initializers for a class."},{"text":" ","type":"text"},{"text":"A designated initializer fully initializes all properties introduced by that class","type":"text"},{"text":" ","type":"text"},{"text":"and calls an appropriate superclass initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to continue the initialization process up the superclass chain."}]},{"inlineContent":[{"type":"text","text":"Classes tend to have very few designated initializers,"},{"text":" ","type":"text"},{"text":"and it’s quite common for a class to have only one.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Designated initializers are “funnel” points through which initialization takes place,"},{"type":"text","text":" "},{"type":"text","text":"and through which the initialization process continues up the superclass chain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every class must have at least one designated initializer."},{"type":"text","text":" "},{"text":"In some cases, this requirement is satisfied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by inheriting one or more designated initializers from a superclass,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance","isActive":true},{"text":" below.","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Convenience initializers","type":"text"}],"type":"emphasis"},{"type":"text","text":" are secondary, supporting initializers for a class."},{"text":" ","type":"text"},{"type":"text","text":"You can define a convenience initializer to call a designated initializer"},{"text":" ","type":"text"},{"type":"text","text":"from the same class as the convenience initializer"},{"text":" ","type":"text"},{"type":"text","text":"with some of the designated initializer’s parameters set to default values."},{"type":"text","text":" "},{"text":"You can also define a convenience initializer to create","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an instance of that class for a specific use case or input value type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You don’t have to provide convenience initializers if your class doesn’t require them."},{"type":"text","text":" "},{"text":"Create convenience initializers whenever a shortcut to a common initialization pattern","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will save time or make initialization of the class clearer in intent."}]},{"text":"Syntax for Designated and Convenience Initializers","type":"heading","level":3,"anchor":"Syntax-for-Designated-and-Convenience-Initializers"},{"inlineContent":[{"type":"text","text":"Designated initializers for classes are written in the same way as"},{"type":"text","text":" "},{"type":"text","text":"simple initializers for value types:"}],"type":"paragraph"},{"code":["init(<#parameters#>) {","   <#statements#>","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Convenience initializers are written in the same style,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but with the "},{"type":"codeVoice","code":"convenience"},{"type":"text","text":" modifier placed before the "},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"separated by a space:"}]},{"code":["convenience init(<#parameters#>) {","   <#statements#>","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":3,"text":"Initializer Delegation for Class Types","anchor":"Initializer-Delegation-for-Class-Types"},{"type":"paragraph","inlineContent":[{"text":"To simplify the relationships between designated and convenience initializers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift applies the following three rules for delegation calls between initializers:"}]},{"type":"termList","items":[{"definition":{"content":[{"inlineContent":[{"text":"A designated initializer must call a designated initializer from its immediate superclass.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Rule 1"}],"type":"strong"}]}},{"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Rule 2"}],"type":"strong"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must call another initializer from the "},{"inlineContent":[{"type":"text","text":"same"}],"type":"emphasis"},{"text":" class.","type":"text"}]}]}},{"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Rule 3"}],"type":"strong"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"A convenience initializer must ultimately call a designated initializer.","type":"text"}]}]}}]},{"inlineContent":[{"type":"text","text":"A simple way to remember this is:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Designated initializers must always delegate "},{"inlineContent":[{"type":"text","text":"up"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Convenience initializers must always delegate ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"across","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These rules are illustrated in the figure below:"}]},{"inlineContent":[{"type":"image","identifier":"initializerDelegation01"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here, the superclass has a single designated initializer and two convenience initializers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"One convenience initializer calls another convenience initializer,"},{"text":" ","type":"text"},{"type":"text","text":"which in turn calls the single designated initializer."},{"text":" ","type":"text"},{"type":"text","text":"This satisfies rules 2 and 3 from above."},{"type":"text","text":" "},{"type":"text","text":"The superclass doesn’t itself have a further superclass, and so rule 1 doesn’t apply."}]},{"type":"paragraph","inlineContent":[{"text":"The subclass in this figure has two designated initializers and one convenience initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The convenience initializer must call one of the two designated initializers,"},{"type":"text","text":" "},{"type":"text","text":"because it can only call another initializer from the same class."},{"type":"text","text":" "},{"text":"This satisfies rules 2 and 3 from above.","type":"text"},{"text":" ","type":"text"},{"text":"Both designated initializers must call the single designated initializer","type":"text"},{"type":"text","text":" "},{"text":"from the superclass, to satisfy rule 1 from above.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"These rules don’t affect how users of your classes "},{"type":"emphasis","inlineContent":[{"text":"create","type":"text"}]},{"type":"text","text":" instances of each class."},{"type":"text","text":" "},{"text":"Any initializer in the diagram above can be used to create","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a fully initialized instance of the class they belong to."},{"type":"text","text":" "},{"text":"The rules only affect how you write the implementation of the class’s initializers.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"},{"inlineContent":[{"text":"The figure below shows a more complex class hierarchy for four classes.","type":"text"},{"type":"text","text":" "},{"text":"It illustrates how the designated initializers in this hierarchy","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"act as “funnel” points for class initialization,"},{"type":"text","text":" "},{"type":"text","text":"simplifying the interrelationships among classes in the chain:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializerDelegation02"}]},{"level":3,"text":"Two-Phase Initialization","type":"heading","anchor":"Two-Phase-Initialization"},{"inlineContent":[{"text":"Class initialization in Swift is a two-phase process.","type":"text"},{"text":" ","type":"text"},{"text":"In the first phase, each stored property is assigned an initial value","type":"text"},{"type":"text","text":" "},{"text":"by the class that introduced it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Once the initial state for every stored property has been determined,"},{"text":" ","type":"text"},{"type":"text","text":"the second phase begins,"},{"type":"text","text":" "},{"text":"and each class is given the opportunity to customize its stored properties further","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is considered ready for use."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The use of a two-phase initialization process makes initialization safe,"},{"text":" ","type":"text"},{"type":"text","text":"while still giving complete flexibility to each class in a class hierarchy."},{"text":" ","type":"text"},{"type":"text","text":"Two-phase initialization prevents property values"},{"text":" ","type":"text"},{"text":"from being accessed before they’re initialized,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and prevents property values from being set to a different value"},{"type":"text","text":" "},{"text":"by another initializer unexpectedly.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s two-phase initialization process is similar to initialization in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"The main difference is that during phase 1,"},{"type":"text","text":" "},{"type":"text","text":"Objective-C assigns zero or null values (such as "},{"type":"codeVoice","code":"0"},{"type":"text","text":" or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":") to every property."},{"type":"text","text":" "},{"type":"text","text":"Swift’s initialization flow is more flexible"},{"type":"text","text":" "},{"text":"in that it lets you set custom initial values,","type":"text"},{"type":"text","text":" "},{"text":"and can cope with types for which ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" isn’t a valid default value."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"Swift’s compiler performs four helpful safety-checks to make sure that"},{"type":"text","text":" "},{"text":"two-phase initialization is completed without error:","type":"text"}],"type":"paragraph"},{"type":"termList","items":[{"definition":{"content":[{"inlineContent":[{"type":"text","text":"A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 1"}]}]}}]},{"inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"the memory for an object is only considered fully initialized"},{"text":" ","type":"text"},{"type":"text","text":"once the initial state of all of its stored properties is known."},{"text":" ","type":"text"},{"type":"text","text":"In order for this rule to be satisfied, a designated initializer must make sure that"},{"text":" ","type":"text"},{"type":"text","text":"all of its own properties are initialized before it hands off up the chain."}],"type":"paragraph"},{"type":"termList","items":[{"definition":{"content":[{"inlineContent":[{"type":"text","text":"A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization."}],"type":"paragraph"}]},"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Safety check 2"}],"type":"strong"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must delegate to another initializer before assigning a value to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.","type":"text"}]}]},"term":{"inlineContent":[{"inlineContent":[{"text":"Safety check 3","type":"text"}],"type":"strong"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"An initializer can’t call any instance methods, read the values of any instance properties, or refer to ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" as a value until after the first phase of initialization is complete."}]}]},"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Safety check 4"}],"type":"strong"}]}}]},{"inlineContent":[{"text":"The class instance isn’t fully valid until the first phase ends.","type":"text"},{"type":"text","text":" "},{"text":"Properties can only be accessed, and methods can only be called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"once the class instance is known to be valid at the end of the first phase."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s how two-phase initialization plays out, based on the four safety checks above:","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Phase 1"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated or convenience initializer is called on a class."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory for a new instance of that class is allocated."},{"text":" ","type":"text"},{"type":"text","text":"The memory isn’t yet initialized."}]}]},{"content":[{"inlineContent":[{"text":"A designated initializer for that class confirms that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all stored properties introduced by that class have a value."},{"text":" ","type":"text"},{"type":"text","text":"The memory for these stored properties is now initialized."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The designated initializer hands off to a superclass initializer to perform the same task"},{"type":"text","text":" "},{"type":"text","text":"for its own stored properties."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"This continues up the class inheritance chain until the top of the chain is reached.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Once the top of the chain is reached,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the final class in the chain has ensured that all of its stored properties have a value,"},{"text":" ","type":"text"},{"type":"text","text":"the instance’s memory is considered to be fully initialized, and phase 1 is complete."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Phase 2"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Working back down from the top of the chain,","type":"text"},{"text":" ","type":"text"},{"text":"each designated initializer in the chain has the option to customize the instance further.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initializers are now able to access "},{"type":"codeVoice","code":"self"},{"text":" ","type":"text"},{"type":"text","text":"and can modify its properties, call its instance methods, and so on."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, any convenience initializers in the chain have the option"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance and to work with "},{"type":"codeVoice","code":"self"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 1 looks for an initialization call for a hypothetical subclass and superclass:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"twoPhaseInitialization01"}]},{"type":"paragraph","inlineContent":[{"text":"In this example, initialization begins with a call to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a convenience initializer on the subclass."},{"text":" ","type":"text"},{"type":"text","text":"This convenience initializer can’t yet modify any properties."},{"type":"text","text":" "},{"type":"text","text":"It delegates across to a designated initializer from the same class."}]},{"inlineContent":[{"type":"text","text":"The designated initializer makes sure that all of the subclass’s properties have a value,"},{"type":"text","text":" "},{"type":"text","text":"as per safety check 1. It then calls a designated initializer on its superclass"},{"type":"text","text":" "},{"type":"text","text":"to continue the initialization up the chain."}],"type":"paragraph"},{"inlineContent":[{"text":"The superclass’s designated initializer makes sure that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all of the superclass properties have a value."},{"type":"text","text":" "},{"text":"There are no further superclasses to initialize,","type":"text"},{"type":"text","text":" "},{"text":"and so no further delegation is needed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As soon as all properties of the superclass have an initial value,"},{"type":"text","text":" "},{"type":"text","text":"its memory is considered fully initialized, and phase 1 is complete."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 2 looks for the same initialization call:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"twoPhaseInitialization02"}]},{"type":"paragraph","inlineContent":[{"text":"The superclass’s designated initializer now has an opportunity","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance further"},{"type":"text","text":" "},{"text":"(although it doesn’t have to).","type":"text"}]},{"inlineContent":[{"text":"Once the superclass’s designated initializer is finished,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the subclass’s designated initializer can perform additional customization"},{"text":" ","type":"text"},{"type":"text","text":"(although again, it doesn’t have to)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Finally, once the subclass’s designated initializer is finished,"},{"text":" ","type":"text"},{"type":"text","text":"the convenience initializer that was originally called"},{"type":"text","text":" "},{"text":"can perform additional customization.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Initializer Inheritance and Overriding","type":"heading","anchor":"Initializer-Inheritance-and-Overriding"},{"inlineContent":[{"type":"text","text":"Unlike subclasses in Objective-C,"},{"text":" ","type":"text"},{"type":"text","text":"Swift subclasses don’t inherit their superclass initializers by default."},{"text":" ","type":"text"},{"type":"text","text":"Swift’s approach prevents a situation in which a simple initializer from a superclass"},{"text":" ","type":"text"},{"type":"text","text":"is inherited by a more specialized subclass"},{"type":"text","text":" "},{"text":"and is used to create a new instance of the subclass","type":"text"},{"text":" ","type":"text"},{"text":"that isn’t fully or correctly initialized.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Superclass initializers "},{"inlineContent":[{"type":"text","text":"are"}],"type":"emphasis"},{"type":"text","text":" inherited in certain circumstances,"},{"text":" ","type":"text"},{"type":"text","text":"but only when it’s safe and appropriate to do so."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance","isActive":true},{"text":" below.","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want a custom subclass to present"},{"text":" ","type":"text"},{"text":"one or more of the same initializers as its superclass,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can provide a custom implementation of those initializers within the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write a subclass initializer that matches a superclass "},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"text":" initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you are effectively providing an override of that designated initializer."},{"type":"text","text":" "},{"type":"text","text":"Therefore, you must write the "},{"type":"codeVoice","code":"override"},{"text":" modifier before the subclass’s initializer definition.","type":"text"},{"type":"text","text":" "},{"text":"This is true even if you are overriding an automatically provided default initializer,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"As with an overridden property, method or subscript,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the presence of the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier prompts Swift to check that"},{"text":" ","type":"text"},{"text":"the superclass has a matching designated initializer to be overridden,","type":"text"},{"type":"text","text":" "},{"text":"and validates that the parameters for your overriding initializer have been specified as intended.","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"text":"You always write the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" modifier when overriding a superclass designated initializer,","type":"text"},{"type":"text","text":" "},{"text":"even if your subclass’s implementation of the initializer is a convenience initializer.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conversely, if you write a subclass initializer that matches a superclass "},{"type":"emphasis","inlineContent":[{"type":"text","text":"convenience"}]},{"text":" initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that superclass convenience initializer can never be called directly by your subclass,"},{"text":" ","type":"text"},{"type":"text","text":"as per the rules described above in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Therefore, your subclass is not (strictly speaking) providing an override of the superclass initializer."},{"type":"text","text":" "},{"text":"As a result, you don’t write the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier when providing"},{"text":" ","type":"text"},{"text":"a matching implementation of a superclass convenience initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This base class declares a stored property called ","type":"text"},{"code":"numberOfWheels","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"numberOfWheels","type":"codeVoice"},{"text":" property is used by a computed property called ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"to create a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" description of the vehicle’s characteristics:"}]},{"syntax":"swift","type":"codeListing","code":["class Vehicle {","    var numberOfWheels = 0","    var description: String {","        return \"\\(numberOfWheels) wheel(s)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" class provides a default value for its only stored property,","type":"text"},{"type":"text","text":" "},{"text":"and doesn’t provide any custom initializers itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As a result, it automatically receives a default initializer,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The default initializer (when available) is always a designated initializer for a class,"},{"type":"text","text":" "},{"type":"text","text":"and can be used to create a new "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance with a "},{"code":"numberOfWheels","type":"codeVoice"},{"type":"text","text":" of "},{"code":"0","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let vehicle = Vehicle()","print(\"Vehicle: \\(vehicle.description)\")","\/\/ Vehicle: 0 wheel(s)"]},{"type":"paragraph","inlineContent":[{"text":"The next example defines a subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    override init() {","        super.init()","        numberOfWheels = 2","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" subclass defines a custom designated initializer, ","type":"text"},{"code":"init()","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This designated initializer matches a designated initializer from the superclass of "},{"code":"Bicycle","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" version of this initializer is marked with the "},{"type":"codeVoice","code":"override"},{"text":" modifier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"init()","type":"codeVoice"},{"type":"text","text":" initializer for "},{"type":"codeVoice","code":"Bicycle"},{"text":" starts by calling ","type":"text"},{"type":"codeVoice","code":"super.init()"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which calls the default initializer for the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class’s superclass, "},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This ensures that the ","type":"text"},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" inherited property is initialized by "},{"code":"Vehicle","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"before "},{"type":"codeVoice","code":"Bicycle"},{"text":" has the opportunity to modify the property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"After calling "},{"code":"super.init()","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the original value of ","type":"text"},{"code":"numberOfWheels","type":"codeVoice"},{"text":" is replaced with a new value of ","type":"text"},{"code":"2","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"If you create an instance of "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can call its inherited "},{"code":"description","type":"codeVoice"},{"type":"text","text":" computed property"},{"type":"text","text":" "},{"text":"to see how its ","type":"text"},{"code":"numberOfWheels","type":"codeVoice"},{"text":" property has been updated:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let bicycle = Bicycle()","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: 2 wheel(s)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a subclass initializer performs no customization"},{"type":"text","text":" "},{"type":"text","text":"in phase 2 of the initialization process,"},{"text":" ","type":"text"},{"type":"text","text":"and the superclass has a synchronous, zero-argument designated initializer,"},{"text":" ","type":"text"},{"type":"text","text":"you can omit a call to "},{"code":"super.init()","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"after assigning values to all of the subclass’s stored properties."},{"text":" ","type":"text"},{"text":"If the superclass’s initializer is asynchronous,","type":"text"},{"type":"text","text":" "},{"text":"you need to write ","type":"text"},{"code":"await super.init()","type":"codeVoice"},{"type":"text","text":" explicitly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines another subclass of "},{"type":"codeVoice","code":"Vehicle"},{"text":", called ","type":"text"},{"type":"codeVoice","code":"Hoverboard"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In its initializer, the "},{"code":"Hoverboard","type":"codeVoice"},{"type":"text","text":" class sets only its "},{"type":"codeVoice","code":"color"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instead of making an explicit call to "},{"code":"super.init()","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this initializer relies on an implicit call to its superclass’s initializer"},{"text":" ","type":"text"},{"type":"text","text":"to complete the process."}]},{"syntax":"swift","type":"codeListing","code":["class Hoverboard: Vehicle {","    var color: String","    init(color: String) {","        self.color = color","        \/\/ super.init() implicitly called here","    }","    override var description: String {","        return \"\\(super.description) in a beautiful \\(color)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"An instance of ","type":"text"},{"code":"Hoverboard","type":"codeVoice"},{"type":"text","text":" uses the default number of wheels"},{"type":"text","text":" "},{"type":"text","text":"supplied by the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" initializer."}]},{"code":["let hoverboard = Hoverboard(color: \"silver\")","print(\"Hoverboard: \\(hoverboard.description)\")","\/\/ Hoverboard: 0 wheel(s) in a beautiful silver"],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Subclasses can modify inherited variable properties during initialization,"},{"type":"text","text":" "},{"type":"text","text":"but can’t modify inherited constant properties."}]}]},{"level":3,"type":"heading","text":"Automatic Initializer Inheritance","anchor":"Automatic-Initializer-Inheritance"},{"inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"subclasses don’t inherit their superclass initializers by default."},{"type":"text","text":" "},{"text":"However, superclass initializers ","type":"text"},{"inlineContent":[{"type":"text","text":"are"}],"type":"emphasis"},{"type":"text","text":" automatically inherited if certain conditions are met."},{"type":"text","text":" "},{"text":"In practice, this means that","type":"text"},{"text":" ","type":"text"},{"text":"you don’t need to write initializer overrides in many common scenarios,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can inherit your superclass initializers with minimal effort whenever it’s safe to do so."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Assuming that you provide default values for any new properties you introduce in a subclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the following two rules apply:"}]},{"items":[{"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Rule 1"}],"type":"strong"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"text":"If your subclass provides an implementation of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" of its superclass designated initializers — either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition — then it automatically inherits all of the superclass convenience initializers.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"inlineContent":[{"text":"Rule 2","type":"text"}],"type":"strong"}]}}],"type":"termList"},{"inlineContent":[{"text":"These rules apply even if your subclass adds further convenience initializers.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"A subclass can implement a superclass designated initializer","type":"text"},{"text":" ","type":"text"},{"text":"as a subclass convenience initializer as part of satisfying rule 2.","type":"text"}]}],"type":"aside","name":"Note"},{"level":3,"text":"Designated and Convenience Initializers in Action","type":"heading","anchor":"Designated-and-Convenience-Initializers-in-Action"},{"type":"paragraph","inlineContent":[{"text":"The following example shows designated initializers, convenience initializers,","type":"text"},{"type":"text","text":" "},{"text":"and automatic initializer inheritance in action.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This example defines a hierarchy of three classes called"},{"type":"text","text":" "},{"code":"Food","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and demonstrates how their initializers interact.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The base class in the hierarchy is called ","type":"text"},{"type":"codeVoice","code":"Food"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a simple class to encapsulate the name of a foodstuff.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" class introduces a single "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"code":"name","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and provides two initializers for creating "},{"type":"codeVoice","code":"Food"},{"text":" instances:","type":"text"}]},{"type":"codeListing","code":["class Food {","    var name: String","    init(name: String) {","        self.name = name","    }","    convenience init() {","        self.init(name: \"[Unnamed]\")","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" class:"}]},{"type":"paragraph","inlineContent":[{"identifier":"initializersExample01","type":"image"}]},{"inlineContent":[{"type":"text","text":"Classes don’t have a default memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" class provides a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a single argument called "},{"code":"name","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initializer can be used to create a new "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" instance with a specific name:"}],"type":"paragraph"},{"code":["let namedMeat = Food(name: \"Bacon\")","\/\/ namedMeat's name is \"Bacon\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer from the "},{"type":"codeVoice","code":"Food"},{"text":" class","type":"text"},{"type":"text","text":" "},{"text":"is provided as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"type":"text","text":" initializer,"},{"text":" ","type":"text"},{"type":"text","text":"because it ensures that all stored properties of"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" instance are fully initialized."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Food"},{"text":" class doesn’t have a superclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"code":"init(name: String)","type":"codeVoice"},{"text":" initializer doesn’t need to call ","type":"text"},{"code":"super.init()","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to complete its initialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class also provides a "},{"inlineContent":[{"type":"text","text":"convenience"}],"type":"emphasis"},{"text":" initializer, ","type":"text"},{"type":"codeVoice","code":"init()"},{"type":"text","text":", with no arguments."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" initializer provides a default placeholder name for a new food"},{"text":" ","type":"text"},{"type":"text","text":"by delegating across to the "},{"type":"codeVoice","code":"Food"},{"text":" class’s ","type":"text"},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" with"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"type":"codeVoice","code":"name"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"[Unnamed]"},{"type":"text","text":":"}]},{"code":["let mysteryMeat = Food()","\/\/ mysteryMeat's name is \"[Unnamed]\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The second class in the hierarchy is a subclass of ","type":"text"},{"type":"codeVoice","code":"Food"},{"text":" called ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":" class models an ingredient in a cooking recipe."},{"type":"text","text":" "},{"type":"text","text":"It introduces an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" property called "},{"code":"quantity","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"(in addition to the "},{"type":"codeVoice","code":"name"},{"text":" property it inherits from ","type":"text"},{"code":"Food","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and defines two initializers for creating "},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" instances:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class RecipeIngredient: Food {","    var quantity: Int","    init(name: String, quantity: Int) {","        self.quantity = quantity","        super.init(name: name)","    }","    override convenience init(name: String) {","        self.init(name: name, quantity: 1)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" class:"}]},{"inlineContent":[{"type":"image","identifier":"initializersExample02"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" class has a single designated initializer,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(name: String, quantity: Int)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which can be used to populate all of the properties of a new "},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"text":"This initializer starts by assigning","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the passed "},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" argument to the "},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"text":"which is the only new property introduced by ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"After doing so, the initializer delegates up to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" initializer of the "},{"code":"Food","type":"codeVoice"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"This process satisfies safety check 1","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","type":"reference"},{"type":"text","text":" above."}],"type":"paragraph"},{"inlineContent":[{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":" also defines a convenience initializer, "},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is used to create a "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" instance by name alone.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This convenience initializer assumes a quantity of "},{"type":"codeVoice","code":"1"},{"text":" ","type":"text"},{"text":"for any ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" instance that’s created without an explicit quantity.","type":"text"},{"type":"text","text":" "},{"text":"The definition of this convenience initializer makes","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances quicker and more convenient to create,"},{"type":"text","text":" "},{"type":"text","text":"and avoids code duplication when creating"},{"text":" ","type":"text"},{"type":"text","text":"several single-quantity "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer simply delegates across to the class’s designated initializer,"},{"text":" ","type":"text"},{"type":"text","text":"passing in a "},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" value of "},{"code":"1","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" convenience initializer provided by "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" "},{"type":"text","text":"takes the same parameters as the "},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"text":" initializer from ","type":"text"},{"code":"Food","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Because this convenience initializer overrides a designated initializer from its superclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it must be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier"},{"text":" ","type":"text"},{"type":"text","text":"(as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" provides","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" initializer as a convenience initializer,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" has nonetheless provided an implementation of"},{"text":" ","type":"text"},{"type":"text","text":"all of its superclass’s designated initializers."},{"text":" ","type":"text"},{"type":"text","text":"Therefore, "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" automatically inherits"},{"type":"text","text":" "},{"type":"text","text":"all of its superclass’s convenience initializers too."}]},{"type":"paragraph","inlineContent":[{"text":"In this example, the superclass for ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Food"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which has a single convenience initializer called "},{"code":"init()","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This initializer is therefore inherited by "},{"code":"RecipeIngredient","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The inherited version of ","type":"text"},{"type":"codeVoice","code":"init()"},{"text":" functions in exactly the same way as the ","type":"text"},{"type":"codeVoice","code":"Food"},{"type":"text","text":" version,"},{"text":" ","type":"text"},{"text":"except that it delegates to the ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" version of "},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"rather than the "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" version."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All three of these initializers can be used to create new "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" instances:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let oneMysteryItem = RecipeIngredient()","let oneBacon = RecipeIngredient(name: \"Bacon\")","let sixEggs = RecipeIngredient(name: \"Eggs\", quantity: 6)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The third and final class in the hierarchy is"},{"text":" ","type":"text"},{"text":"a subclass of ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"ShoppingListItem"},{"text":" class models a recipe ingredient as it appears in a shopping list.","type":"text"}]},{"inlineContent":[{"text":"Every item in the shopping list starts out as “unpurchased”.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To represent this fact,"},{"text":" ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":" introduces a Boolean property called "},{"type":"codeVoice","code":"purchased"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"code":"ShoppingListItem","type":"codeVoice"},{"text":" also adds a computed ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"text":"which provides a textual description of a ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ShoppingListItem: RecipeIngredient {","    var purchased = false","    var description: String {","        var output = \"\\(quantity) x \\(name)\"","        output += purchased ? \" ✔\" : \" ✘\"","        return output","    }","}"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":" doesn’t define an initializer to provide"},{"text":" ","type":"text"},{"text":"an initial value for ","type":"text"},{"code":"purchased","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"because items in a shopping list (as modeled here) always start out unpurchased.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"Because it provides a default value for all of the properties it introduces","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t define any initializers itself,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" automatically inherits"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" of the designated and convenience initializers from its superclass.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The figure below shows the overall initializer chain for all three classes:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"initializersExample03","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"You can use all three of the inherited initializers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to create a new "},{"code":"ShoppingListItem","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"syntax":"swift","code":["var breakfastList = [","    ShoppingListItem(),","    ShoppingListItem(name: \"Bacon\"),","    ShoppingListItem(name: \"Eggs\", quantity: 6),","]","breakfastList[0].name = \"Orange juice\"","breakfastList[0].purchased = true","for item in breakfastList {","    print(item.description)","}","\/\/ 1 x Orange juice ✔","\/\/ 1 x Bacon ✘","\/\/ 6 x Eggs ✘"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here, a new array called "},{"code":"breakfastList","type":"codeVoice"},{"text":" is created from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an array literal containing three new "},{"type":"codeVoice","code":"ShoppingListItem"},{"text":" instances.","type":"text"},{"type":"text","text":" "},{"text":"The type of the array is inferred to be ","type":"text"},{"type":"codeVoice","code":"[ShoppingListItem]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After the array is created,"},{"type":"text","text":" "},{"text":"the name of the ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" at the start of the array"},{"text":" ","type":"text"},{"type":"text","text":"is changed from "},{"type":"codeVoice","code":"\"[Unnamed]\""},{"type":"text","text":" to "},{"type":"codeVoice","code":"\"Orange juice\""},{"type":"text","text":" "},{"text":"and it’s marked as having been purchased.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Printing the description of each item in the array"},{"type":"text","text":" "},{"type":"text","text":"shows that their default states have been set as expected."}],"type":"paragraph"},{"type":"heading","text":"Failable Initializers","anchor":"Failable-Initializers","level":2},{"inlineContent":[{"type":"text","text":"It’s sometimes useful to define a class, structure, or enumeration"},{"text":" ","type":"text"},{"type":"text","text":"for which initialization can fail."},{"type":"text","text":" "},{"type":"text","text":"This failure might be triggered by invalid initialization parameter values,"},{"text":" ","type":"text"},{"text":"the absence of a required external resource,","type":"text"},{"type":"text","text":" "},{"text":"or some other condition that prevents initialization from succeeding.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To cope with initialization conditions that can fail,"},{"text":" ","type":"text"},{"text":"define one or more failable initializers as part of","type":"text"},{"text":" ","type":"text"},{"text":"a class, structure, or enumeration definition.","type":"text"},{"text":" ","type":"text"},{"text":"You write a failable initializer","type":"text"},{"type":"text","text":" "},{"text":"by placing a question mark after the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword (","type":"text"},{"type":"codeVoice","code":"init?"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"You can’t define a failable and a nonfailable initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the same parameter types and names."}],"type":"paragraph"}],"name":"Note"},{"inlineContent":[{"text":"A failable initializer creates an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value of the type it initializes."},{"type":"text","text":" "},{"text":"You write ","type":"text"},{"type":"codeVoice","code":"return nil"},{"type":"text","text":" within a failable initializer"},{"type":"text","text":" "},{"text":"to indicate a point at which initialization failure can be triggered.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"Strictly speaking, initializers don’t return a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Rather, their role is to ensure that "},{"type":"codeVoice","code":"self"},{"text":" is fully and correctly initialized","type":"text"},{"type":"text","text":" "},{"text":"by the time that initialization ends.","type":"text"},{"type":"text","text":" "},{"text":"Although you write ","type":"text"},{"type":"codeVoice","code":"return nil"},{"type":"text","text":" to trigger an initialization failure,"},{"type":"text","text":" "},{"text":"you don’t use the ","type":"text"},{"code":"return","type":"codeVoice"},{"text":" keyword to indicate initialization success.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"For instance, failable initializers are implemented for numeric type conversions.","type":"text"},{"text":" ","type":"text"},{"text":"To ensure conversion between numeric types maintains the value exactly,","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"init(exactly:)"},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"type":"text","text":"If the type conversion can’t maintain the value,"},{"type":"text","text":" "},{"type":"text","text":"the initializer fails."}]},{"code":["let wholeNumber: Double = 12345.0","let pi = 3.14159","","if let valueMaintained = Int(exactly: wholeNumber) {","    print(\"\\(wholeNumber) conversion to Int maintains value of \\(valueMaintained)\")","}","\/\/ Prints \"12345.0 conversion to Int maintains value of 12345\"","","let valueChanged = Int(exactly: pi)","\/\/ valueChanged is of type Int?, not Int","","if valueChanged == nil {","    print(\"\\(pi) conversion to Int doesn't maintain value\")","}","\/\/ Prints \"3.14159 conversion to Int doesn't maintain value\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a constant "},{"code":"String","type":"codeVoice"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"species"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":" structure also defines a failable initializer"},{"text":" ","type":"text"},{"type":"text","text":"with a single parameter called "},{"code":"species","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This initializer checks if the "},{"code":"species","type":"codeVoice"},{"type":"text","text":" value passed to the initializer is an empty string."},{"text":" ","type":"text"},{"text":"If an empty string is found, an initialization failure is triggered.","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, the ","type":"text"},{"code":"species","type":"codeVoice"},{"type":"text","text":" property’s value is set, and initialization succeeds:"}]},{"syntax":"swift","code":["struct Animal {","    let species: String","    init?(species: String) {","        if species.isEmpty { return nil }","        self.species = species","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"You can use this failable initializer to try to initialize a new ","type":"text"},{"type":"codeVoice","code":"Animal"},{"text":" instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to check if initialization succeeded:"}],"type":"paragraph"},{"syntax":"swift","code":["let someCreature = Animal(species: \"Giraffe\")","\/\/ someCreature is of type Animal?, not Animal","","if let giraffe = someCreature {","    print(\"An animal was initialized with a species of \\(giraffe.species)\")","}","\/\/ Prints \"An animal was initialized with a species of Giraffe\""],"type":"codeListing"},{"inlineContent":[{"text":"If you pass an empty string value to the failable initializer’s ","type":"text"},{"type":"codeVoice","code":"species"},{"type":"text","text":" parameter,"},{"text":" ","type":"text"},{"text":"the initializer triggers an initialization failure:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let anonymousCreature = Animal(species: \"\")","\/\/ anonymousCreature is of type Animal?, not Animal","","if anonymousCreature == nil {","    print(\"The anonymous creature couldn't be initialized\")","}","\/\/ Prints \"The anonymous creature couldn't be initialized\""]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking for an empty string value (such as "},{"type":"codeVoice","code":"\"\""},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"\"Giraffe\""},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isn’t the same as checking for "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to indicate the absence of an "},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"In the example above, an empty string ("},{"code":"\"\"","type":"codeVoice"},{"type":"text","text":") is a valid, non-optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, it’s not appropriate for an animal"},{"type":"text","text":" "},{"text":"to have an empty string as the value of its ","type":"text"},{"type":"codeVoice","code":"species"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"To model this restriction,"},{"type":"text","text":" "},{"text":"the failable initializer triggers an initialization failure if an empty string is found.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"text":"Failable Initializers for Enumerations","level":3,"type":"heading","anchor":"Failable-Initializers-for-Enumerations"},{"inlineContent":[{"type":"text","text":"You can use a failable initializer to select an appropriate enumeration case"},{"type":"text","text":" "},{"text":"based on one or more parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The initializer can then fail if the provided parameters"},{"text":" ","type":"text"},{"text":"don’t match an appropriate enumeration case.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines an enumeration called "},{"code":"TemperatureUnit","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with three possible states (","type":"text"},{"type":"codeVoice","code":"kelvin"},{"type":"text","text":", "},{"code":"celsius","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"fahrenheit"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"A failable initializer is used to find an appropriate enumeration case","type":"text"},{"type":"text","text":" "},{"text":"for a ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" value representing a temperature symbol:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["enum TemperatureUnit {","    case kelvin, celsius, fahrenheit","    init?(symbol: Character) {","        switch symbol {","        case \"K\":","            self = .kelvin","        case \"C\":","            self = .celsius","        case \"F\":","            self = .fahrenheit","        default:","            return nil","        }","    }","}"]},{"inlineContent":[{"text":"You can use this failable initializer to choose","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate enumeration case for the three possible states"},{"type":"text","text":" "},{"text":"and to cause initialization to fail if the parameter doesn’t match one of these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"states:"}],"type":"paragraph"},{"code":["let fahrenheitUnit = TemperatureUnit(symbol: \"F\")","if fahrenheitUnit != nil {","    print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(symbol: \"X\")","if unknownUnit == nil {","    print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Failable Initializers for Enumerations with Raw Values","anchor":"Failable-Initializers-for-Enumerations-with-Raw-Values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Enumerations with raw values automatically receive a failable initializer,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"init?(rawValue:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"that takes a parameter called "},{"type":"codeVoice","code":"rawValue"},{"text":" of the appropriate raw-value type","type":"text"},{"text":" ","type":"text"},{"text":"and selects a matching enumeration case if one is found,","type":"text"},{"type":"text","text":" "},{"text":"or triggers an initialization failure if no matching value exists.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can rewrite the "},{"code":"TemperatureUnit","type":"codeVoice"},{"type":"text","text":" example from above"},{"type":"text","text":" "},{"type":"text","text":"to use raw values of type "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" "},{"type":"text","text":"and to take advantage of the "},{"type":"codeVoice","code":"init?(rawValue:)"},{"text":" initializer:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum TemperatureUnit: Character {","    case kelvin = \"K\", celsius = \"C\", fahrenheit = \"F\"","}","","let fahrenheitUnit = TemperatureUnit(rawValue: \"F\")","if fahrenheitUnit != nil {","    print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(rawValue: \"X\")","if unknownUnit == nil {","    print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""]},{"text":"Propagation of Initialization Failure","type":"heading","level":3,"anchor":"Propagation-of-Initialization-Failure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A failable initializer of a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"can delegate across to another failable initializer from the same class, structure, or enumeration."},{"type":"text","text":" "},{"type":"text","text":"Similarly, a subclass failable initializer can delegate up to a superclass failable initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In either case, if you delegate to another initializer that causes initialization to fail,"},{"type":"text","text":" "},{"text":"the entire initialization process fails immediately,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and no further initialization code is executed."}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A failable initializer can also delegate to a nonfailable initializer."},{"type":"text","text":" "},{"type":"text","text":"Use this approach if you need to add a potential failure state"},{"text":" ","type":"text"},{"type":"text","text":"to an existing initialization process that doesn’t otherwise fail."}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a subclass of "},{"code":"Product","type":"codeVoice"},{"type":"text","text":" called "},{"type":"codeVoice","code":"CartItem"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" class models an item in an online shopping cart."},{"type":"text","text":" "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" introduces a stored constant property called "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" "},{"type":"text","text":"and ensures that this property always has a value of at least "},{"code":"1","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["class Product {","    let name: String","    init?(name: String) {","        if name.isEmpty { return nil }","        self.name = name","    }","}","","class CartItem: Product {","    let quantity: Int","    init?(name: String, quantity: Int) {","        if quantity < 1 { return nil }","        self.quantity = quantity","        super.init(name: name)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The failable initializer for "},{"code":"CartItem","type":"codeVoice"},{"type":"text","text":" starts by"},{"type":"text","text":" "},{"type":"text","text":"validating that it has received a "},{"type":"codeVoice","code":"quantity"},{"type":"text","text":" value of "},{"code":"1","type":"codeVoice"},{"text":" or more.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" is invalid,"},{"text":" ","type":"text"},{"text":"the entire initialization process fails immediately","type":"text"},{"text":" ","type":"text"},{"text":"and no further initialization code is executed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Likewise, the failable initializer for "},{"type":"codeVoice","code":"Product"},{"type":"text","text":" "},{"text":"checks the ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"and the initializer process fails immediately","type":"text"},{"type":"text","text":" "},{"text":"if ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" is the empty string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you create a ","type":"text"},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with a nonempty name and a quantity of "},{"code":"1","type":"codeVoice"},{"type":"text","text":" or more,"},{"text":" ","type":"text"},{"type":"text","text":"initialization succeeds:"}]},{"syntax":"swift","code":["if let twoSocks = CartItem(name: \"sock\", quantity: 2) {","    print(\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\")","}","\/\/ Prints \"Item: sock, quantity: 2\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you try to create a ","type":"text"},{"code":"CartItem","type":"codeVoice"},{"text":" instance with a ","type":"text"},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" initializer causes initialization to fail:"}]},{"syntax":"swift","type":"codeListing","code":["if let zeroShirts = CartItem(name: \"shirt\", quantity: 0) {","    print(\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\")","} else {","    print(\"Unable to initialize zero shirts\")","}","\/\/ Prints \"Unable to initialize zero shirts\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, if you try to create a "},{"code":"CartItem","type":"codeVoice"},{"text":" instance with an empty ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"type":"text","text":"the superclass "},{"code":"Product","type":"codeVoice"},{"text":" initializer causes initialization to fail:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if let oneUnnamed = CartItem(name: \"\", quantity: 1) {","    print(\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\")","} else {","    print(\"Unable to initialize one unnamed product\")","}","\/\/ Prints \"Unable to initialize one unnamed product\""]},{"text":"Overriding a Failable Initializer","type":"heading","level":3,"anchor":"Overriding-a-Failable-Initializer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override a superclass failable initializer in a subclass,"},{"type":"text","text":" "},{"text":"just like any other initializer.","type":"text"},{"type":"text","text":" "},{"text":"Alternatively, you can override a superclass failable initializer","type":"text"},{"type":"text","text":" "},{"text":"with a subclass ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nonfailable","type":"text"}]},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"text":"This enables you to define a subclass for which initialization can’t fail,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though initialization of the superclass is allowed to fail."}]},{"type":"paragraph","inlineContent":[{"text":"Note that if you override a failable superclass initializer with a nonfailable subclass initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the only way to delegate up to the superclass initializer"},{"type":"text","text":" "},{"type":"text","text":"is to force-unwrap the result of the failable superclass initializer."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"You can override a failable initializer with a nonfailable initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but not the other way around."}]}],"style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a class called "},{"code":"Document","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This class models a document that can be initialized with"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" property that’s either a nonempty string value or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but can’t be an empty string:"}]},{"code":["class Document {","    var name: String?","    \/\/ this initializer creates a document with a nil name value","    init() {}","    \/\/ this initializer creates a document with a nonempty name value","    init?(name: String) {","        if name.isEmpty { return nil }","        self.name = name","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The next example defines a subclass of ","type":"text"},{"code":"Document","type":"codeVoice"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"text":" subclass overrides","type":"text"},{"type":"text","text":" "},{"text":"both of the designated initializers introduced by ","type":"text"},{"code":"Document","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"These overrides ensure that an "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" instance has"},{"type":"text","text":" "},{"type":"text","text":"an initial "},{"type":"codeVoice","code":"name"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"\"[Untitled]\""},{"type":"text","text":" "},{"type":"text","text":"if the instance is initialized without a name,"},{"type":"text","text":" "},{"type":"text","text":"or if an empty string is passed to the "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer:"}]},{"syntax":"swift","code":["class AutomaticallyNamedDocument: Document {","    override init() {","        super.init()","        self.name = \"[Untitled]\"","    }","    override init(name: String) {","        super.init()","        if name.isEmpty {","            self.name = \"[Untitled]\"","        } else {","            self.name = name","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" overrides its superclass’s"},{"type":"text","text":" "},{"text":"failable ","type":"text"},{"type":"codeVoice","code":"init?(name:)"},{"type":"text","text":" initializer with a nonfailable "},{"type":"codeVoice","code":"init(name:)"},{"text":" initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"text":" copes with the empty string case","type":"text"},{"text":" ","type":"text"},{"text":"in a different way than its superclass,","type":"text"},{"type":"text","text":" "},{"text":"its initializer doesn’t need to fail,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so it provides a nonfailable version of the initializer instead."}]},{"inlineContent":[{"type":"text","text":"You can use forced unwrapping in an initializer"},{"type":"text","text":" "},{"type":"text","text":"to call a failable initializer from the superclass"},{"type":"text","text":" "},{"type":"text","text":"as part of the implementation of a subclass’s nonfailable initializer."},{"text":" ","type":"text"},{"text":"For example, the ","type":"text"},{"type":"codeVoice","code":"UntitledDocument"},{"text":" subclass below is always named ","type":"text"},{"code":"\"[Untitled]\"","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it uses the failable "},{"type":"codeVoice","code":"init(name:)"},{"text":" initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from its superclass during initialization."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class UntitledDocument: Document {","    override init() {","        super.init(name: \"[Untitled]\")!","    }","}"]},{"inlineContent":[{"type":"text","text":"In this case, if the "},{"type":"codeVoice","code":"init(name:)"},{"text":" initializer of the superclass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"were ever called with an empty string as the name,"},{"text":" ","type":"text"},{"type":"text","text":"the forced unwrapping operation would result in a runtime error."},{"type":"text","text":" "},{"text":"However, because it’s called with a string constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can see that the initializer won’t fail,"},{"text":" ","type":"text"},{"type":"text","text":"so no runtime error can occur in this case."}],"type":"paragraph"},{"type":"heading","level":3,"text":"The init! Failable Initializer","anchor":"The-init-Failable-Initializer"},{"type":"paragraph","inlineContent":[{"text":"You typically define a failable initializer","type":"text"},{"type":"text","text":" "},{"text":"that creates an optional instance of the appropriate type","type":"text"},{"type":"text","text":" "},{"text":"by placing a question mark after the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword (","type":"text"},{"type":"codeVoice","code":"init?"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, you can define a failable initializer that creates"},{"text":" ","type":"text"},{"type":"text","text":"an implicitly unwrapped optional instance of the appropriate type."},{"text":" ","type":"text"},{"text":"Do this by placing an exclamation point after the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword ("},{"type":"codeVoice","code":"init!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"instead of a question mark."}]},{"inlineContent":[{"type":"text","text":"You can delegate from "},{"code":"init?","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"init!"},{"text":" and vice versa,","type":"text"},{"text":" ","type":"text"},{"text":"and you can override ","type":"text"},{"code":"init?","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" and vice versa."},{"text":" ","type":"text"},{"type":"text","text":"You can also delegate from "},{"code":"init","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"init!"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"although doing so will trigger an assertion"},{"text":" ","type":"text"},{"text":"if the ","type":"text"},{"code":"init!","type":"codeVoice"},{"type":"text","text":" initializer causes initialization to fail."}],"type":"paragraph"},{"type":"heading","anchor":"Required-Initializers","level":2,"text":"Required Initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Write the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier before the definition of a class initializer"},{"text":" ","type":"text"},{"text":"to indicate that every subclass of the class must implement that initializer:","type":"text"}]},{"syntax":"swift","code":["class SomeClass {","    required init() {","        \/\/ initializer implementation goes here","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"You must also write the ","type":"text"},{"code":"required","type":"codeVoice"},{"text":" modifier before","type":"text"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"text":"to indicate that the initializer requirement applies to further subclasses in the chain.","type":"text"},{"type":"text","text":" "},{"text":"You don’t write the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier when overriding a required designated initializer:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeSubclass: SomeClass {","    required init() {","        \/\/ subclass implementation of the required initializer goes here","    }","}"],"type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You don’t have to provide an explicit implementation of a required initializer","type":"text"},{"text":" ","type":"text"},{"text":"if you can satisfy the requirement with an inherited initializer.","type":"text"}]}],"name":"Note","type":"aside"},{"type":"heading","level":2,"text":"Setting a Default Property Value with a Closure or Function","anchor":"Setting-a-Default-Property-Value-with-a-Closure-or-Function"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a stored property’s default value requires some customization or setup,"},{"type":"text","text":" "},{"text":"you can use a closure or global function to provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a customized default value for that property."},{"text":" ","type":"text"},{"text":"Whenever a new instance of the type that the property belongs to is initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the closure or function is called,"},{"text":" ","type":"text"},{"type":"text","text":"and its return value is assigned as the property’s default value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These kinds of closures or functions typically create"},{"type":"text","text":" "},{"type":"text","text":"a temporary value of the same type as the property,"},{"text":" ","type":"text"},{"text":"tailor that value to represent the desired initial state,","type":"text"},{"type":"text","text":" "},{"text":"and then return that temporary value to be used as the property’s default value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a skeleton outline of how a closure can be used"},{"type":"text","text":" "},{"text":"to provide a default property value:","type":"text"}]},{"code":["class SomeClass {","    let someProperty: SomeType = {","        \/\/ create a default value for someProperty inside this closure","        \/\/ someValue must be of the same type as SomeType","        return someValue","    }()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the closure’s end curly brace is followed by an empty pair of parentheses."},{"type":"text","text":" "},{"text":"This tells Swift to execute the closure immediately.","type":"text"},{"text":" ","type":"text"},{"text":"If you omit these parentheses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you are trying to assign the closure itself to the property,"},{"type":"text","text":" "},{"type":"text","text":"and not the return value of the closure."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use a closure to initialize a property,"},{"text":" ","type":"text"},{"text":"remember that the rest of the instance hasn’t yet been initialized","type":"text"},{"type":"text","text":" "},{"text":"at the point that the closure is executed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that you can’t access any other property values from within your closure,"},{"type":"text","text":" "},{"type":"text","text":"even if those properties have default values."},{"type":"text","text":" "},{"text":"You also can’t use the implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"text":"or call any of the instance’s methods.","type":"text"}]}],"name":"Note","style":"note"},{"inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which models a board for the game of chess.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Chess is played on an 8 x 8 board,"},{"type":"text","text":" "},{"text":"with alternating black and white squares.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"chessBoard","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To represent this game board,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" structure has a single property called "},{"type":"codeVoice","code":"boardColors"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is an array of 64 ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A value of "},{"type":"codeVoice","code":"true"},{"text":" in the array represents a black square","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and a value of "},{"type":"codeVoice","code":"false"},{"text":" represents a white square.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The first item in the array represents the top left square on the board"},{"type":"text","text":" "},{"type":"text","text":"and the last item in the array represents the bottom right square on the board."}]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"boardColors","type":"codeVoice"},{"type":"text","text":" array is initialized with a closure to set up its color values:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Chessboard {","    let boardColors: [Bool] = {","        var temporaryBoard: [Bool] = []","        var isBlack = false","        for i in 1...8 {","            for j in 1...8 {","                temporaryBoard.append(isBlack)","                isBlack = !isBlack","            }","            isBlack = !isBlack","        }","        return temporaryBoard","    }()","    func squareIsBlackAt(row: Int, column: Int) -> Bool {","        return boardColors[(row * 8) + column]","    }","}"]},{"inlineContent":[{"type":"text","text":"Whenever a new "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" instance is created, the closure is executed,"},{"type":"text","text":" "},{"text":"and the default value of ","type":"text"},{"type":"codeVoice","code":"boardColors"},{"text":" is calculated and returned.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The closure in the example above calculates and sets"},{"text":" ","type":"text"},{"type":"text","text":"the appropriate color for each square on the board"},{"type":"text","text":" "},{"text":"in a temporary array called ","type":"text"},{"type":"codeVoice","code":"temporaryBoard"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and returns this temporary array as the closure’s return value"},{"text":" ","type":"text"},{"text":"once its setup is complete.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The returned array value is stored in "},{"type":"codeVoice","code":"boardColors"},{"type":"text","text":" "},{"type":"text","text":"and can be queried with the "},{"code":"squareIsBlackAt(row:column:)","type":"codeVoice"},{"text":" utility function:","type":"text"}],"type":"paragraph"},{"code":["let board = Chessboard()","print(board.squareIsBlackAt(row: 0, column: 1))","\/\/ Prints \"true\"","print(board.squareIsBlackAt(row: 7, column: 7))","\/\/ Prints \"false\""],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Two-Phase-Initialization":{"abstract":[],"kind":"section","title":"Two-Phase Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Two-Phase-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Inheritance-and-Overriding":{"abstract":[],"title":"Initializer Inheritance and Overriding","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Inheritance-and-Overriding","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Inheritance-and-Overriding"},"chessBoard":{"type":"image","identifier":"chessBoard","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/chessBoard@2x.png"},{"url":"\/images\/chessBoard~dark@2x.png","traits":["2x","dark"]}]},"initializerDelegation02":{"identifier":"initializerDelegation02","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/initializerDelegation02@2x.png"},{"url":"\/images\/initializerDelegation02~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"initializersExample03":{"type":"image","identifier":"initializersExample03","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/initializersExample03@2x.png"},{"url":"\/images\/initializersExample03~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Class-Types":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Class-Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Class-Types","type":"topic","title":"Initializer Delegation for Class Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Automatic-Initializer-Inheritance":{"title":"Automatic Initializer Inheritance","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Automatic-Initializer-Inheritance","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Automatic-Initializer-Inheritance"},"twoPhaseInitialization01":{"identifier":"twoPhaseInitialization01","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/twoPhaseInitialization01@2x.png"},{"url":"\/images\/twoPhaseInitialization01~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Class-Inheritance-and-Initialization":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Class-Inheritance-and-Initialization","abstract":[],"title":"Class Inheritance and Initialization","url":"\/documentation\/the-swift-programming-language\/initialization#Class-Inheritance-and-Initialization","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","title":"Deinitialization","url":"\/documentation\/the-swift-programming-language\/deinitialization","role":"article","type":"topic","kind":"article"},"initializersExample02":{"identifier":"initializersExample02","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/initializersExample02@2x.png"},{"url":"\/images\/initializersExample02~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"twoPhaseInitialization02":{"type":"image","identifier":"twoPhaseInitialization02","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/twoPhaseInitialization02@2x.png"},{"url":"\/images\/twoPhaseInitialization02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Initializers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers","abstract":[],"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Default-Initializers","title":"Default Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"abstract":[{"type":"text","text":"Add functionality to an existing type."}],"type":"topic","title":"Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","url":"\/documentation\/the-swift-programming-language\/extensions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initialization-Parameters":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initialization-Parameters","url":"\/documentation\/the-swift-programming-language\/initialization#Initialization-Parameters","abstract":[],"kind":"section","title":"Initialization Parameters","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"initializersExample01":{"type":"image","identifier":"initializersExample01","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/initializersExample01@2x.png"},{"url":"\/images\/initializersExample01~dark@2x.png","traits":["2x","dark"]}]},"initializerDelegation01":{"identifier":"initializerDelegation01","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/initializerDelegation01@2x.png"},{"url":"\/images\/initializerDelegation01~dark@2x.png","traits":["2x","dark"]}],"type":"image"}}}