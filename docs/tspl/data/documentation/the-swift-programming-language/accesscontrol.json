{"abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},"metadata":{"title":"Access Control"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"text":" restricts access to parts of your code","type":"text"},{"type":"text","text":" "},{"text":"from code in other source files and modules.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This feature enables you to hide the implementation details of your code,"},{"text":" ","type":"text"},{"type":"text","text":"and to specify a preferred interface through which that code can be accessed and used."}]},{"inlineContent":[{"type":"text","text":"You can assign specific access levels to individual types"},{"text":" ","type":"text"},{"text":"(classes, structures, and enumerations),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as to properties, methods, initializers, and subscripts belonging to those types."},{"text":" ","type":"text"},{"text":"Protocols can be restricted to a certain context,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as can global constants, variables, and functions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition to offering various levels of access control,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift reduces the need to specify explicit access control levels"},{"type":"text","text":" "},{"type":"text","text":"by providing default access levels for typical scenarios."},{"type":"text","text":" "},{"type":"text","text":"Indeed, if you are writing a single-target app,"},{"text":" ","type":"text"},{"type":"text","text":"you may not need to specify explicit access control levels at all."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The various aspects of your code that can have access control applied to them"},{"type":"text","text":" "},{"type":"text","text":"(properties, types, functions, and so on)"},{"text":" ","type":"text"},{"text":"are referred to as “entities” in the sections below, for brevity.","type":"text"}]}],"type":"aside","style":"note"},{"type":"heading","anchor":"Modules-and-Source-Files","level":2,"text":"Modules and Source Files"},{"inlineContent":[{"type":"text","text":"Swift’s access control model is based on the concept of modules and source files."}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"module","type":"text"}],"type":"emphasis"},{"text":" is a single unit of code distribution —","type":"text"},{"text":" ","type":"text"},{"text":"a framework or application that’s built and shipped as a single unit","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and that can be imported by another module with Swift’s "},{"type":"codeVoice","code":"import"},{"type":"text","text":" keyword."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each build target (such as an app bundle or framework) in Xcode"},{"text":" ","type":"text"},{"text":"is treated as a separate module in Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you group together aspects of your app’s code as a stand-alone framework —"},{"type":"text","text":" "},{"type":"text","text":"perhaps to encapsulate and reuse that code across multiple applications —"},{"type":"text","text":" "},{"type":"text","text":"then everything you define within that framework will be part of a separate module"},{"text":" ","type":"text"},{"type":"text","text":"when it’s imported and used within an app,"},{"text":" ","type":"text"},{"type":"text","text":"or when it’s used within another framework."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"source file","type":"text"}]},{"type":"text","text":" is a single Swift source code file within a module"},{"text":" ","type":"text"},{"type":"text","text":"(in effect, a single file within an app or framework)."},{"type":"text","text":" "},{"text":"Although it’s common to define individual types in separate source files,","type":"text"},{"type":"text","text":" "},{"text":"a single source file can contain definitions for multiple types, functions, and so on.","type":"text"}]},{"text":"Access Levels","anchor":"Access-Levels","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides five different "},{"type":"emphasis","inlineContent":[{"text":"access levels","type":"text"}]},{"type":"text","text":" for entities within your code."},{"type":"text","text":" "},{"text":"These access levels are relative to the source file in which an entity is defined,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and also relative to the module that source file belongs to."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Open access","type":"text"}],"type":"emphasis"},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"public access","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"enable entities to be used within any source file from their defining module,"},{"text":" ","type":"text"},{"text":"and also in a source file from another module that imports the defining module.","type":"text"},{"type":"text","text":" "},{"text":"You typically use open or public access when specifying the public interface to a framework.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The difference between open and public access is described below."}]}]},{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Internal access","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"enables entities to be used within any source file from their defining module,"},{"type":"text","text":" "},{"text":"but not in any source file outside of that module.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You typically use internal access when defining"},{"type":"text","text":" "},{"text":"an app’s or a framework’s internal structure.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"File-private access"}]},{"text":" ","type":"text"},{"text":"restricts the use of an entity to its own defining source file.","type":"text"},{"text":" ","type":"text"},{"text":"Use file-private access to hide the implementation details of","type":"text"},{"text":" ","type":"text"},{"text":"a specific piece of functionality","type":"text"},{"type":"text","text":" "},{"text":"when those details are used within an entire file.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Private access","type":"text"}]},{"text":" ","type":"text"},{"text":"restricts the use of an entity to the enclosing declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to extensions of that declaration that are in the same file."},{"text":" ","type":"text"},{"text":"Use private access to hide the implementation details of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a specific piece of functionality"},{"type":"text","text":" "},{"text":"when those details are used only within a single declaration.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access is the highest (least restrictive) access level"},{"type":"text","text":" "},{"type":"text","text":"and private access is the lowest (most restrictive) access level."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access applies only to classes and class members,"},{"type":"text","text":" "},{"type":"text","text":"and it differs from public access"},{"type":"text","text":" "},{"text":"by allowing code outside the module to subclass and override,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as discussed below in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Subclassing"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Marking a class as open explicitly indicates"},{"type":"text","text":" "},{"type":"text","text":"that you’ve considered the impact of code from other modules"},{"text":" ","type":"text"},{"type":"text","text":"using that class as a superclass,"},{"text":" ","type":"text"},{"type":"text","text":"and that you’ve designed your class’s code accordingly."}]},{"text":"Guiding Principle of Access Levels","anchor":"Guiding-Principle-of-Access-Levels","level":3,"type":"heading"},{"inlineContent":[{"text":"Access levels in Swift follow an overall guiding principle:","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"No entity can be defined in terms of another entity that has"},{"type":"text","text":" "},{"type":"text","text":"a lower (more restrictive) access level."}]}],"type":"paragraph"},{"inlineContent":[{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"A public variable can’t be defined as having an internal, file-private, or private type,"},{"type":"text","text":" "},{"text":"because the type might not be available everywhere that the public variable is used.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function can’t have a higher access level than its parameter types and return type,"},{"type":"text","text":" "},{"type":"text","text":"because the function could be used in situations where"},{"text":" ","type":"text"},{"type":"text","text":"its constituent types are unavailable to the surrounding code."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The specific implications of this guiding principle for different aspects of the language","type":"text"},{"type":"text","text":" "},{"text":"are covered in detail below.","type":"text"}]},{"level":3,"type":"heading","text":"Default Access Levels","anchor":"Default-Access-Levels"},{"type":"paragraph","inlineContent":[{"text":"All entities in your code","type":"text"},{"type":"text","text":" "},{"text":"(with a few specific exceptions, as described later in this chapter)","type":"text"},{"type":"text","text":" "},{"text":"have a default access level of internal","type":"text"},{"type":"text","text":" "},{"text":"if you don’t specify an explicit access level yourself.","type":"text"},{"type":"text","text":" "},{"text":"As a result, in many cases you don’t need to specify","type":"text"},{"type":"text","text":" "},{"text":"an explicit access level in your code.","type":"text"}]},{"anchor":"Access-Levels-for-Single-Target-Apps","type":"heading","level":3,"text":"Access Levels for Single-Target Apps"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write a simple single-target app,"},{"text":" ","type":"text"},{"type":"text","text":"the code in your app is typically self-contained within the app"},{"text":" ","type":"text"},{"text":"and doesn’t need to be made available outside of the app’s module.","type":"text"},{"type":"text","text":" "},{"text":"The default access level of internal already matches this requirement.","type":"text"},{"text":" ","type":"text"},{"text":"Therefore, you don’t need to specify a custom access level.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You may, however, want to mark some parts of your code as file private or private"},{"text":" ","type":"text"},{"text":"in order to hide their implementation details from other code within the app’s module.","type":"text"}]},{"text":"Access Levels for Frameworks","type":"heading","level":3,"anchor":"Access-Levels-for-Frameworks"},{"type":"paragraph","inlineContent":[{"text":"When you develop a framework,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mark the public-facing interface to that framework"},{"type":"text","text":" "},{"type":"text","text":"as open or public so that it can be viewed and accessed by other modules,"},{"text":" ","type":"text"},{"type":"text","text":"such as an app that imports the framework."},{"type":"text","text":" "},{"type":"text","text":"This public-facing interface is the application programming interface"},{"text":" ","type":"text"},{"type":"text","text":"(or API) for the framework."}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Any internal implementation details of your framework can still use"},{"text":" ","type":"text"},{"type":"text","text":"the default access level of internal,"},{"type":"text","text":" "},{"type":"text","text":"or can be marked as private or file private if you want to hide them from"},{"type":"text","text":" "},{"text":"other parts of the framework’s internal code.","type":"text"},{"type":"text","text":" "},{"text":"You need to mark an entity as open or public only if you want it to become","type":"text"},{"type":"text","text":" "},{"type":"text","text":"part of your framework’s API."}],"type":"paragraph"}],"style":"note","name":"Note"},{"text":"Access Levels for Unit Test Targets","type":"heading","level":3,"anchor":"Access-Levels-for-Unit-Test-Targets"},{"inlineContent":[{"text":"When you write an app with a unit test target,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the code in your app needs to be made available to that module in order to be tested."},{"text":" ","type":"text"},{"type":"text","text":"By default, only entities marked as open or public"},{"type":"text","text":" "},{"text":"are accessible to other modules.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, a unit test target can access any internal entity,"},{"type":"text","text":" "},{"type":"text","text":"if you mark the import declaration for a product module with the "},{"code":"@testable","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and compile that product module with testing enabled."}],"type":"paragraph"},{"anchor":"Access-Control-Syntax","level":2,"text":"Access Control Syntax","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the access level for an entity by placing"},{"type":"text","text":" "},{"type":"text","text":"one of the "},{"type":"codeVoice","code":"open"},{"text":", ","type":"text"},{"type":"codeVoice","code":"public"},{"text":", ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":", ","type":"text"},{"code":"fileprivate","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"private"},{"type":"text","text":" modifiers"},{"type":"text","text":" "},{"text":"at the beginning of the entity’s declaration.","type":"text"}]},{"code":["open class SomeOpenClass {}","public class SomePublicClass {}","internal class SomeInternalClass {}","fileprivate class SomeFilePrivateClass {}","private class SomePrivateClass {}","","open var someOpenVariable = 0","public var somePublicVariable = 0","internal let someInternalConstant = 0","fileprivate func someFilePrivateFunction() {}","private func somePrivateFunction() {}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified, the default access level is internal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Default-Access-Levels","type":"reference","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that "},{"code":"SomeInternalClass","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"someInternalConstant"},{"type":"text","text":" can be written"},{"type":"text","text":" "},{"type":"text","text":"without an explicit access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"and will still have an access level of internal:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeInternalClass {}              \/\/ implicitly internal","let someInternalConstant = 0            \/\/ implicitly internal"]},{"type":"heading","anchor":"Custom-Types","level":2,"text":"Custom Types"},{"inlineContent":[{"type":"text","text":"If you want to specify an explicit access level for a custom type,"},{"text":" ","type":"text"},{"text":"do so at the point that you define the type.","type":"text"},{"type":"text","text":" "},{"text":"The new type can then be used wherever its access level permits.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, if you define a file-private class,"},{"text":" ","type":"text"},{"type":"text","text":"that class can only be used as the type of a property,"},{"type":"text","text":" "},{"text":"or as a function parameter or return type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the source file in which the file-private class is defined."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access control level of a type also affects"},{"type":"text","text":" "},{"type":"text","text":"the default access level of that type’s "},{"inlineContent":[{"type":"text","text":"members"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"(its properties, methods, initializers, and subscripts).","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you define a type’s access level as private or file private,"},{"type":"text","text":" "},{"type":"text","text":"the default access level of its members will also be private or file private."},{"type":"text","text":" "},{"type":"text","text":"If you define a type’s access level as internal or public"},{"text":" ","type":"text"},{"type":"text","text":"(or use the default access level of internal"},{"type":"text","text":" "},{"type":"text","text":"without specifying an access level explicitly),"},{"text":" ","type":"text"},{"text":"the default access level of the type’s members will be internal.","type":"text"}]},{"name":"Important","content":[{"inlineContent":[{"text":"A public type defaults to having internal members, not public members.","type":"text"},{"text":" ","type":"text"},{"text":"If you want a type member to be public, you must explicitly mark it as such.","type":"text"},{"type":"text","text":" "},{"text":"This requirement ensures that the public-facing API for a type is","type":"text"},{"text":" ","type":"text"},{"text":"something you opt in to publishing,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and avoids presenting the internal workings of a type as public API by mistake."}],"type":"paragraph"}],"style":"important","type":"aside"},{"type":"codeListing","syntax":"swift","code":["public class SomePublicClass {                  \/\/ explicitly public class","    public var somePublicProperty = 0            \/\/ explicitly public class member","    var someInternalProperty = 0                 \/\/ implicitly internal class member","    fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","class SomeInternalClass {                       \/\/ implicitly internal class","    var someInternalProperty = 0                 \/\/ implicitly internal class member","    fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","fileprivate class SomeFilePrivateClass {        \/\/ explicitly file-private class","    func someFilePrivateMethod() {}              \/\/ implicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","private class SomePrivateClass {                \/\/ explicitly private class","    func somePrivateMethod() {}                  \/\/ implicitly private class member","}"]},{"type":"heading","text":"Tuple Types","level":3,"anchor":"Tuple-Types"},{"inlineContent":[{"type":"text","text":"The access level for a tuple type is"},{"type":"text","text":" "},{"text":"the most restrictive access level of all types used in that tuple.","type":"text"},{"text":" ","type":"text"},{"text":"For example, if you compose a tuple from two different types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"one with internal access and one with private access,"},{"text":" ","type":"text"},{"type":"text","text":"the access level for that compound tuple type will be private."}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuple types don’t have a standalone definition in the way that"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, enumerations, and functions do."},{"type":"text","text":" "},{"type":"text","text":"A tuple type’s access level is determined automatically"},{"type":"text","text":" "},{"type":"text","text":"from the types that make up the tuple type,"},{"text":" ","type":"text"},{"text":"and can’t be specified explicitly.","type":"text"}]}]},{"anchor":"Function-Types","type":"heading","text":"Function Types","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level for a function type is calculated as"},{"type":"text","text":" "},{"type":"text","text":"the most restrictive access level of the function’s parameter types and return type."},{"type":"text","text":" "},{"type":"text","text":"You must specify the access level explicitly as part of the function’s definition"},{"text":" ","type":"text"},{"text":"if the function’s calculated access level doesn’t match the contextual default.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a global function called "},{"code":"someFunction()","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"without providing a specific access-level modifier for the function itself."},{"type":"text","text":" "},{"type":"text","text":"You might expect this function to have the default access level of “internal”,"},{"text":" ","type":"text"},{"text":"but this isn’t the case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In fact, "},{"type":"codeVoice","code":"someFunction()"},{"text":" won’t compile as written below:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction() -> (SomeInternalClass, SomePrivateClass) {","    \/\/ function implementation goes here","}"]},{"type":"paragraph","inlineContent":[{"text":"The function’s return type is","type":"text"},{"type":"text","text":" "},{"text":"a tuple type composed from two of the custom classes defined above in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Custom-Types","isActive":true,"type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"One of these classes is defined as internal,"},{"type":"text","text":" "},{"type":"text","text":"and the other is defined as private."},{"type":"text","text":" "},{"type":"text","text":"Therefore, the overall access level of the compound tuple type is private"},{"type":"text","text":" "},{"type":"text","text":"(the minimum access level of the tuple’s constituent types)."}]},{"type":"paragraph","inlineContent":[{"text":"Because the function’s return type is private,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you must mark the function’s overall access level with the "},{"code":"private","type":"codeVoice"},{"text":" modifier","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the function declaration to be valid:"}]},{"syntax":"swift","type":"codeListing","code":["private func someFunction() -> (SomeInternalClass, SomePrivateClass) {","    \/\/ function implementation goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s not valid to mark the definition of "},{"code":"someFunction()","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"public"},{"text":" or ","type":"text"},{"code":"internal","type":"codeVoice"},{"type":"text","text":" modifiers,"},{"type":"text","text":" "},{"text":"or to use the default setting of internal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because public or internal users of the function might not have appropriate access"},{"type":"text","text":" "},{"type":"text","text":"to the private class used in the function’s return type."}]},{"anchor":"Enumeration-Types","type":"heading","level":3,"text":"Enumeration Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The individual cases of an enumeration automatically receive the same access level as"},{"text":" ","type":"text"},{"text":"the enumeration they belong to.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can’t specify a different access level for individual enumeration cases."}]},{"inlineContent":[{"type":"text","text":"In the example below,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" enumeration has an explicit access level of public."},{"text":" ","type":"text"},{"text":"The enumeration cases ","type":"text"},{"type":"codeVoice","code":"north"},{"text":", ","type":"text"},{"type":"codeVoice","code":"south"},{"type":"text","text":", "},{"type":"codeVoice","code":"east"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"west"},{"type":"text","text":" "},{"text":"therefore also have an access level of public:","type":"text"}],"type":"paragraph"},{"code":["public enum CompassPoint {","    case north","    case south","    case east","    case west","}"],"type":"codeListing","syntax":"swift"},{"level":4,"anchor":"Raw-Values-and-Associated-Values","type":"heading","text":"Raw Values and Associated Values"},{"inlineContent":[{"text":"The types used for any raw values or associated values in an enumeration definition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must have an access level at least as high as the enumeration’s access level."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"you can’t use a private type as the raw-value type of","type":"text"},{"type":"text","text":" "},{"text":"an enumeration with an internal access level.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Nested Types","anchor":"Nested-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access level of a nested type is the same as its containing type,"},{"text":" ","type":"text"},{"text":"unless the containing type is public.","type":"text"},{"text":" ","type":"text"},{"text":"Nested types defined within a public type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have an automatic access level of internal."},{"type":"text","text":" "},{"text":"If you want a nested type within a public type to be publicly available,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you must explicitly declare the nested type as public."}]},{"type":"heading","level":2,"anchor":"Subclassing","text":"Subclassing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can subclass any class"},{"type":"text","text":" "},{"type":"text","text":"that can be accessed in the current access context"},{"text":" ","type":"text"},{"text":"and that’s defined in the same module as the subclass.","type":"text"},{"type":"text","text":" "},{"text":"You can also subclass any open class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s defined in a different module."},{"text":" ","type":"text"},{"type":"text","text":"A subclass can’t have a higher access level than its superclass —"},{"type":"text","text":" "},{"text":"for example, you can’t write a public subclass of an internal superclass.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition,"},{"text":" ","type":"text"},{"type":"text","text":"for classes that are defined in the same module,"},{"type":"text","text":" "},{"type":"text","text":"you can override any class member"},{"text":" ","type":"text"},{"text":"(method, property, initializer, or subscript)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s visible in a certain access context."},{"type":"text","text":" "},{"text":"For classes that are defined in another module,","type":"text"},{"text":" ","type":"text"},{"text":"you can override any open class member.","type":"text"}]},{"inlineContent":[{"text":"An override can make an inherited class member more accessible than its superclass version.","type":"text"},{"type":"text","text":" "},{"text":"In the example below, class ","type":"text"},{"code":"A","type":"codeVoice"},{"type":"text","text":" is a public class with a file-private method called "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Class ","type":"text"},{"type":"codeVoice","code":"B"},{"type":"text","text":" is a subclass of "},{"type":"codeVoice","code":"A"},{"type":"text","text":", with a reduced access level of “internal”."},{"type":"text","text":" "},{"type":"text","text":"Nonetheless, class "},{"code":"B","type":"codeVoice"},{"type":"text","text":" provides an override of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"text":"with an access level of “internal”, which is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"higher","type":"text"}]},{"type":"text","text":" than"},{"type":"text","text":" "},{"text":"the original implementation of ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public class A {","    fileprivate func someMethod() {}","}","","internal class B: A {","    override internal func someMethod() {}","}"]},{"type":"paragraph","inlineContent":[{"text":"It’s even valid for a subclass member to call","type":"text"},{"type":"text","text":" "},{"text":"a superclass member that has lower access permissions than the subclass member,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as long as the call to the superclass’s member takes place within"},{"text":" ","type":"text"},{"type":"text","text":"an allowed access level context"},{"text":" ","type":"text"},{"text":"(that is, within the same source file as the superclass for a file-private member call,","type":"text"},{"type":"text","text":" "},{"text":"or within the same module as the superclass for an internal member call):","type":"text"}]},{"type":"codeListing","code":["public class A {","    fileprivate func someMethod() {}","}","","internal class B: A {","    override internal func someMethod() {","        super.someMethod()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because superclass ","type":"text"},{"code":"A","type":"codeVoice"},{"text":" and subclass ","type":"text"},{"type":"codeVoice","code":"B"},{"type":"text","text":" are defined in the same source file,"},{"text":" ","type":"text"},{"text":"it’s valid for the ","type":"text"},{"code":"B","type":"codeVoice"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"someMethod()"},{"text":" to call","type":"text"},{"type":"text","text":" "},{"code":"super.someMethod()","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Constants, Variables, Properties, and Subscripts","anchor":"Constants-Variables-Properties-and-Subscripts"},{"inlineContent":[{"text":"A constant, variable, or property can’t be more public than its type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s not valid to write a public property with a private type, for example."},{"type":"text","text":" "},{"type":"text","text":"Similarly, a subscript can’t be more public than either its index type or return type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If a constant, variable, property, or subscript makes use of a private type,"},{"type":"text","text":" "},{"type":"text","text":"the constant, variable, property, or subscript must also be marked as "},{"code":"private","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["private var privateInstance = SomePrivateClass()"]},{"type":"heading","anchor":"Getters-and-Setters","level":3,"text":"Getters and Setters"},{"type":"paragraph","inlineContent":[{"text":"Getters and setters for constants, variables, properties, and subscripts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically receive the same access level as"},{"type":"text","text":" "},{"text":"the constant, variable, property, or subscript they belong to.","type":"text"}]},{"inlineContent":[{"text":"You can give a setter a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lower"}]},{"text":" access level than its corresponding getter,","type":"text"},{"type":"text","text":" "},{"text":"to restrict the read-write scope of that variable, property, or subscript.","type":"text"},{"type":"text","text":" "},{"text":"You assign a lower access level by writing","type":"text"},{"type":"text","text":" "},{"code":"fileprivate(set)","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"private(set)"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"internal(set)"},{"type":"text","text":" "},{"text":"before the ","type":"text"},{"code":"var","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" introducer."}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"This rule applies to stored properties as well as computed properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Even though you don’t write an explicit getter and setter for a stored property,"},{"text":" ","type":"text"},{"type":"text","text":"Swift still synthesizes an implicit getter and setter for you"},{"text":" ","type":"text"},{"text":"to provide access to the stored property’s backing storage.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Use "},{"type":"codeVoice","code":"fileprivate(set)"},{"text":", ","type":"text"},{"code":"private(set)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"internal(set)","type":"codeVoice"},{"type":"text","text":" to change the access level"},{"text":" ","type":"text"},{"type":"text","text":"of this synthesized setter in exactly the same way as for an explicit setter"},{"text":" ","type":"text"},{"text":"in a computed property.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which keeps track of the number of times a string property is modified:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct TrackedString {","    private(set) var numberOfEdits = 0","    var value: String = \"\" {","        didSet {","            numberOfEdits += 1","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure defines a stored string property called "},{"type":"codeVoice","code":"value"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with an initial value of ","type":"text"},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" (an empty string)."},{"text":" ","type":"text"},{"text":"The structure also defines a stored integer property called ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is used to track the number of times that "},{"code":"value","type":"codeVoice"},{"type":"text","text":" is modified."},{"type":"text","text":" "},{"type":"text","text":"This modification tracking is implemented with"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" property observer on the "},{"code":"value","type":"codeVoice"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"text":"which increments ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" every time the "},{"code":"value","type":"codeVoice"},{"type":"text","text":" property is set to a new value."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" structure and the "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"don’t provide an explicit access-level modifier,"},{"type":"text","text":" "},{"text":"and so they both receive the default access level of internal.","type":"text"},{"type":"text","text":" "},{"text":"However, the access level for the ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"text":"is marked with a ","type":"text"},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":" modifier"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that"},{"text":" ","type":"text"},{"type":"text","text":"the property’s getter still has the default access level of internal,"},{"type":"text","text":" "},{"text":"but the property is settable only from within","type":"text"},{"text":" ","type":"text"},{"text":"code that’s part of the ","type":"text"},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" structure."},{"text":" ","type":"text"},{"type":"text","text":"This enables "},{"type":"codeVoice","code":"TrackedString"},{"text":" to modify the ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"text":" property internally,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but to present the property as a read-only property"},{"type":"text","text":" "},{"text":"when it’s used outside the structure’s definition.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a "},{"type":"codeVoice","code":"TrackedString"},{"text":" instance and modify its string value a few times,","type":"text"},{"text":" ","type":"text"},{"text":"you can see the ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"text":" property value update to match the number of modifications:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var stringToEdit = TrackedString()","stringToEdit.value = \"This string will be tracked.\"","stringToEdit.value += \" This edit will increment numberOfEdits.\"","stringToEdit.value += \" So will this one.\"","print(\"The number of edits is \\(stringToEdit.numberOfEdits)\")","\/\/ Prints \"The number of edits is 3\""]},{"inlineContent":[{"text":"Although you can query the current value of the ","type":"text"},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"from within another source file,"},{"text":" ","type":"text"},{"type":"text","text":"you can’t "},{"type":"emphasis","inlineContent":[{"type":"text","text":"modify"}]},{"text":" the property from another source file.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This restriction protects the implementation details of"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"TrackedString","type":"codeVoice"},{"text":" edit-tracking functionality,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"while still providing convenient access to an aspect of that functionality."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Note that you can assign an explicit access level for both","type":"text"},{"text":" ","type":"text"},{"text":"a getter and a setter if required.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example below shows a version of the "},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" structure"},{"text":" ","type":"text"},{"text":"in which the structure is defined with an explicit access level of public.","type":"text"},{"text":" ","type":"text"},{"text":"The structure’s members (including the ","type":"text"},{"code":"numberOfEdits","type":"codeVoice"},{"type":"text","text":" property)"},{"type":"text","text":" "},{"text":"therefore have an internal access level by default.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can make the structure’s "},{"type":"codeVoice","code":"numberOfEdits"},{"text":" property getter public,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and its property setter private,"},{"type":"text","text":" "},{"text":"by combining the ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":" and "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":" access-level modifiers:"}]},{"code":["public struct TrackedString {","    public private(set) var numberOfEdits = 0","    public var value: String = \"\" {","        didSet {","            numberOfEdits += 1","        }","    }","    public init() {}","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Initializers","text":"Initializers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom initializers can be assigned an access level less than or equal to"},{"type":"text","text":" "},{"type":"text","text":"the type that they initialize."},{"text":" ","type":"text"},{"type":"text","text":"The only exception is for required initializers"},{"text":" ","type":"text"},{"text":"(as defined in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","isActive":true},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"A required initializer must have the same access level as the class it belongs to."}]},{"type":"paragraph","inlineContent":[{"text":"As with function and method parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the types of an initializer’s parameters can’t be more private than"},{"type":"text","text":" "},{"text":"the initializer’s own access level.","type":"text"}]},{"type":"heading","anchor":"Default-Initializers","text":"Default Initializers","level":3},{"inlineContent":[{"type":"text","text":"As described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"Swift automatically provides a ","type":"text"},{"inlineContent":[{"type":"text","text":"default initializer"}],"type":"emphasis"},{"type":"text","text":" without any arguments"},{"type":"text","text":" "},{"text":"for any structure or base class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that provides default values for all of its properties"},{"text":" ","type":"text"},{"text":"and doesn’t provide at least one initializer itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A default initializer has the same access level as the type it initializes,"},{"type":"text","text":" "},{"text":"unless that type is defined as ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For a type that’s defined as "},{"type":"codeVoice","code":"public"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the default initializer is considered internal."},{"type":"text","text":" "},{"type":"text","text":"If you want a public type to be initializable with a no-argument initializer"},{"text":" ","type":"text"},{"type":"text","text":"when used in another module,"},{"text":" ","type":"text"},{"type":"text","text":"you must explicitly provide a public no-argument initializer yourself"},{"type":"text","text":" "},{"type":"text","text":"as part of the type’s definition."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Default Memberwise Initializers for Structure Types","anchor":"Default-Memberwise-Initializers-for-Structure-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default memberwise initializer for a structure type is considered private"},{"text":" ","type":"text"},{"text":"if any of the structure’s stored properties are private.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Likewise, if any of the structure’s stored properties are file private,"},{"text":" ","type":"text"},{"type":"text","text":"the initializer is file private."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the initializer has an access level of internal."}]},{"inlineContent":[{"text":"As with the default initializer above,","type":"text"},{"type":"text","text":" "},{"text":"if you want a public structure type to be initializable with a memberwise initializer","type":"text"},{"text":" ","type":"text"},{"text":"when used in another module,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you must provide a public memberwise initializer yourself as part of the type’s definition."}],"type":"paragraph"},{"type":"heading","anchor":"Protocols","level":2,"text":"Protocols"},{"inlineContent":[{"text":"If you want to assign an explicit access level to a protocol type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"do so at the point that you define the protocol."},{"type":"text","text":" "},{"type":"text","text":"This enables you to create protocols that can only be adopted within"},{"type":"text","text":" "},{"type":"text","text":"a certain access context."}],"type":"paragraph"},{"inlineContent":[{"text":"The access level of each requirement within a protocol definition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is automatically set to the same access level as the protocol."},{"type":"text","text":" "},{"type":"text","text":"You can’t set a protocol requirement to a different access level than"},{"type":"text","text":" "},{"type":"text","text":"the protocol it supports."},{"type":"text","text":" "},{"type":"text","text":"This ensures that all of the protocol’s requirements will be visible"},{"type":"text","text":" "},{"type":"text","text":"on any type that adopts the protocol."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"If you define a public protocol,","type":"text"},{"text":" ","type":"text"},{"text":"the protocol’s requirements require a public access level","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for those requirements when they’re implemented."},{"text":" ","type":"text"},{"text":"This behavior is different from other types,","type":"text"},{"type":"text","text":" "},{"text":"where a public type definition implies","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an access level of internal for the type’s members."}]}],"type":"aside","name":"Note"},{"level":3,"text":"Protocol Inheritance","type":"heading","anchor":"Protocol-Inheritance"},{"type":"paragraph","inlineContent":[{"text":"If you define a new protocol that inherits from an existing protocol,","type":"text"},{"text":" ","type":"text"},{"text":"the new protocol can have at most the same access level as the protocol it inherits from.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can’t write a public protocol that inherits from an internal protocol."}]},{"level":3,"text":"Protocol Conformance","type":"heading","anchor":"Protocol-Conformance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type can conform to a protocol with a lower access level than the type itself."},{"type":"text","text":" "},{"type":"text","text":"For example, you can define a public type that can be used in other modules,"},{"text":" ","type":"text"},{"type":"text","text":"but whose conformance to an internal protocol can only be used"},{"type":"text","text":" "},{"type":"text","text":"within the internal protocol’s defining module."}]},{"inlineContent":[{"text":"The context in which a type conforms to a particular protocol","type":"text"},{"text":" ","type":"text"},{"text":"is the minimum of the type’s access level and the protocol’s access level.","type":"text"},{"text":" ","type":"text"},{"text":"For example, if a type is public, but a protocol it conforms to is internal,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the type’s conformance to that protocol is also internal."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you write or extend a type to conform to a protocol,"},{"type":"text","text":" "},{"text":"you must ensure that the type’s implementation of each protocol requirement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has at least the same access level as the type’s conformance to that protocol."},{"type":"text","text":" "},{"type":"text","text":"For example, if a public type conforms to an internal protocol,"},{"type":"text","text":" "},{"type":"text","text":"the type’s implementation of each protocol requirement must be at least internal."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, as in Objective-C, protocol conformance is global —"},{"text":" ","type":"text"},{"type":"text","text":"it isn’t possible for a type to conform to a protocol in two different ways"},{"type":"text","text":" "},{"type":"text","text":"within the same program."}]}],"style":"note","type":"aside","name":"Note"},{"text":"Extensions","anchor":"Extensions","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"You can extend a class, structure, or enumeration in any access context"},{"type":"text","text":" "},{"type":"text","text":"in which the class, structure, or enumeration is available."},{"type":"text","text":" "},{"text":"Any type members added in an extension have the same default access level as","type":"text"},{"text":" ","type":"text"},{"text":"type members declared in the original type being extended.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you extend a public or internal type, any new type members you add"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of internal."},{"text":" ","type":"text"},{"text":"If you extend a file-private type, any new type members you add","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"have a default access level of file private."},{"text":" ","type":"text"},{"type":"text","text":"If you extend a private type, any new type members you add"},{"type":"text","text":" "},{"type":"text","text":"have a default access level of private."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Alternatively, you can mark an extension with an explicit access-level modifier"},{"type":"text","text":" "},{"type":"text","text":"(for example, "},{"code":"private","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to set a new default access level for all members defined within the extension.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This new default can still be overridden within the extension"},{"text":" ","type":"text"},{"type":"text","text":"for individual type members."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t provide an explicit access-level modifier for an extension"},{"text":" ","type":"text"},{"text":"if you’re using that extension to add protocol conformance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, the protocol’s own access level is used to provide"},{"type":"text","text":" "},{"type":"text","text":"the default access level for each protocol requirement implementation within the extension."}]},{"level":3,"type":"heading","text":"Private Members in Extensions","anchor":"Private-Members-in-Extensions"},{"inlineContent":[{"type":"text","text":"Extensions that are in the same file as"},{"type":"text","text":" "},{"text":"the class, structure, or enumeration that they extend","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behave as if the code in the extension"},{"text":" ","type":"text"},{"type":"text","text":"had been written as part of the original type’s declaration."},{"type":"text","text":" "},{"type":"text","text":"As a result, you can:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a private member in the original declaration,"},{"type":"text","text":" "},{"type":"text","text":"and access that member from extensions in the same file."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Declare a private member in one extension,"},{"type":"text","text":" "},{"text":"and access that member from another extension in the same file.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Declare a private member in an extension,"},{"type":"text","text":" "},{"type":"text","text":"and access that member from the original declaration in the same file."}]}]}]},{"inlineContent":[{"text":"This behavior means you can use extensions in the same way","type":"text"},{"type":"text","text":" "},{"text":"to organize your code,","type":"text"},{"text":" ","type":"text"},{"text":"whether or not your types have private entities.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, given the following simple protocol:"}],"type":"paragraph"},{"code":["protocol SomeProtocol {","    func doSomething()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can use an extension to add protocol conformance, like this:"}],"type":"paragraph"},{"code":["struct SomeStruct {","    private var privateVariable = 12","}","","extension SomeStruct: SomeProtocol {","    func doSomething() {","        print(privateVariable)","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Generics","type":"heading","text":"Generics"},{"inlineContent":[{"type":"text","text":"The access level for a generic type or generic function is"},{"type":"text","text":" "},{"text":"the minimum of the access level of the generic type or function itself","type":"text"},{"text":" ","type":"text"},{"text":"and the access level of any type constraints on its type parameters.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Type-Aliases","level":2,"text":"Type Aliases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type aliases you define are treated as distinct types for the purposes of access control."},{"type":"text","text":" "},{"type":"text","text":"A type alias can have an access level less than or equal to the access level of the type it aliases."},{"type":"text","text":" "},{"type":"text","text":"For example, a private type alias can alias a private, file-private, internal, public, or open type,"},{"text":" ","type":"text"},{"type":"text","text":"but a public type alias can’t alias an internal, file-private, or private type."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This rule also applies to type aliases for associated types used to satisfy protocol conformances.","type":"text"}]}],"name":"Note"}],"kind":"content"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Default-Access-Levels":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Default-Access-Levels","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Default-Access-Levels","abstract":[],"title":"Default Access Levels","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Custom-Types":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Custom-Types","title":"Custom Types","abstract":[],"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Custom-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Subclassing":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Subclassing","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Subclassing","abstract":[],"title":"Subclassing","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Required-Initializers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Required-Initializers","abstract":[],"kind":"section","title":"Required Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Initializers":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers","title":"Default Initializers","url":"\/documentation\/the-swift-programming-language\/initialization#Default-Initializers","type":"topic"}}}