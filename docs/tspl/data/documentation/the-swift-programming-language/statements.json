{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},"abstract":[{"text":"Group expressions and control the flow of execution.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Statements"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements,"},{"type":"text","text":" "},{"text":"and control flow statements.","type":"text"},{"text":" ","type":"text"},{"text":"Simple statements are the most common and consist of either an expression or a declaration.","type":"text"},{"type":"text","text":" "},{"text":"Compiler control statements allow the program to change aspects of the compiler’s behavior","type":"text"},{"text":" ","type":"text"},{"text":"and include a conditional compilation block and a line control statement.","type":"text"}]},{"inlineContent":[{"text":"Control flow statements are used to control the flow of execution in a program.","type":"text"},{"type":"text","text":" "},{"text":"There are several types of control flow statements in Swift, including","type":"text"},{"text":" ","type":"text"},{"text":"loop statements, branch statements, and control transfer statements.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Loop statements allow a block of code to be executed repeatedly,"},{"text":" ","type":"text"},{"type":"text","text":"branch statements allow a certain block of code to be executed"},{"text":" ","type":"text"},{"type":"text","text":"only when certain conditions are met,"},{"text":" ","type":"text"},{"type":"text","text":"and control transfer statements provide a way to alter the order in which code is executed."},{"text":" ","type":"text"},{"text":"In addition, Swift provides a ","type":"text"},{"type":"codeVoice","code":"do"},{"text":" statement to introduce scope,","type":"text"},{"type":"text","text":" "},{"text":"and catch and handle errors,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement for running cleanup actions just before the current scope exits."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A semicolon ("},{"code":";","type":"codeVoice"},{"type":"text","text":") can optionally appear after any statement"},{"text":" ","type":"text"},{"text":"and is used to separate multiple statements if they appear on the same line.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a statement","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"expression","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":";","type":"codeVoice"}],"type":"strong"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"statement"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declaration"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":";","type":"codeVoice"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"loop-statement","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":";"}],"type":"strong"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"branch-statement"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":";"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"statement","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"labeled-statement"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":";"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"control-transfer-statement","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":";"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"defer-statement","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":";"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"do-statement","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":";","type":"codeVoice"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statement"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"compiler-control-statement"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"statement","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"statements","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}],"type":"paragraph"}],"type":"aside"},{"type":"heading","level":2,"text":"Loop Statements","anchor":"Loop-Statements"},{"inlineContent":[{"type":"text","text":"Loop statements allow a block of code to be executed repeatedly,"},{"type":"text","text":" "},{"type":"text","text":"depending on the conditions specified in the loop."},{"type":"text","text":" "},{"type":"text","text":"Swift has three loop statements:"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"while","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."}],"type":"paragraph"},{"inlineContent":[{"text":"Control flow in a loop statement can be changed by a ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement and is discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement","isActive":true},{"text":" below.","type":"text"}],"type":"paragraph"},{"name":"Grammar of a loop statement","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"loop-statement"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"for-in-statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"loop-statement","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"while-statement"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"loop-statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"repeat-while-statement"}]}],"type":"paragraph"}],"style":"note"},{"anchor":"For-In-Statement","level":3,"type":"heading","text":"For-In Statement"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement allows a block of code to be executed"},{"text":" ","type":"text"},{"text":"once for each item in a collection (or any type)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that conforms to the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" statement has the following form:","type":"text"}]},{"code":["for <#item#> in <#collection#> {","   <#statements#>","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"makeIterator()"},{"text":" method is called on the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"collection","type":"text"}]},{"text":" expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to obtain a value of an iterator type — that is,"},{"type":"text","text":" "},{"text":"a type that conforms to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol","type":"reference"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"The program begins executing a loop"},{"text":" ","type":"text"},{"type":"text","text":"by calling the "},{"code":"next()","type":"codeVoice"},{"type":"text","text":" method on the iterator."},{"type":"text","text":" "},{"type":"text","text":"If the value returned isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s assigned to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"item"}]},{"type":"text","text":" pattern,"},{"text":" ","type":"text"},{"type":"text","text":"the program executes the "},{"inlineContent":[{"text":"statements","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and then continues execution at the beginning of the loop."},{"type":"text","text":" "},{"text":"Otherwise, the program doesn’t perform assignment or execute the ","type":"text"},{"inlineContent":[{"text":"statements","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and it’s finished executing the "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"for-in-statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"for"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"case"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"pattern"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":"in","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"code-block"}]}],"type":"paragraph"}],"name":"Grammar of a for-in statement","type":"aside"},{"level":3,"text":"While Statement","type":"heading","anchor":"While-Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement allows a block of code to be executed repeatedly,"},{"text":" ","type":"text"},{"type":"text","text":"as long as a condition remains true."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"text":" statement has the following form:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["while <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statement is executed as follows:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"condition"}],"type":"emphasis"},{"type":"text","text":" is evaluated."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", execution continues to step 2."},{"type":"text","text":" "},{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", the program is finished executing the ","type":"text"},{"type":"codeVoice","code":"while"},{"text":" statement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The program executes the "},{"inlineContent":[{"text":"statements","type":"text"}],"type":"emphasis"},{"type":"text","text":", and execution returns to step 1."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Because the value of the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"type":"text","text":" is evaluated before the "},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"type":"text","text":" are executed,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"text":" in a ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" statement can be executed zero or more times.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The value of the "},{"inlineContent":[{"type":"text","text":"condition"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"must be of type ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The condition can also be an optional binding declaration,","type":"text"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"aside","style":"note","name":"Grammar of a while statement","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"while-statement","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"while"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition-list"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"code-block","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"condition-list"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"condition"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition-list"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"condition"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expression","type":"text"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability-condition"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"case-condition"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"optional-binding-condition"}],"type":"emphasis"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"case-condition"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"case","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"initializer"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"optional-binding-condition"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"let"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"initializer"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"var"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"}],"type":"paragraph"}]},{"text":"Repeat-While Statement","type":"heading","anchor":"Repeat-While-Statement","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"repeat","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement allows a block of code to be executed one or more times,"},{"text":" ","type":"text"},{"type":"text","text":"as long as a condition remains true."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"text":" statement has the following form:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["repeat {","   <#statements#>","} while <#condition#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"repeat","type":"codeVoice"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statement is executed as follows:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The program executes the "},{"type":"emphasis","inlineContent":[{"text":"statements","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and execution continues to step 2."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"condition","type":"text"}]},{"type":"text","text":" is evaluated."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", execution returns to step 1."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"text":", the program is finished executing the ","type":"text"},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"text":" statement.","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Because the value of the ","type":"text"},{"inlineContent":[{"text":"condition","type":"text"}],"type":"emphasis"},{"text":" is evaluated after the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"text":" are executed,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"text":" in a ","type":"text"},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statement are executed at least once."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"text":"condition","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"text":" or a type bridged to ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"}]},{"name":"Grammar of a repeat-while statement","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"repeat-while-statement","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"repeat"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"code-block"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"while"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expression","type":"text"}]}],"type":"paragraph"}]},{"text":"Branch Statements","anchor":"Branch-Statements","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Branch statements allow the program to execute certain parts of code","type":"text"},{"text":" ","type":"text"},{"text":"depending on the value of one or more conditions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The values of the conditions specified in a branch statement"},{"type":"text","text":" "},{"text":"control how the program branches and, therefore, what block of code is executed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift has three branch statements:"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"if"},{"text":" statement, a ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":" statement, and a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Control flow in an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement or a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement can be changed by a "},{"code":"break","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"and is discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true,"type":"reference"},{"text":" below.","type":"text"}]},{"name":"Grammar of a branch statement","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"branch-statement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"if-statement"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"branch-statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"guard-statement"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"branch-statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"switch-statement","type":"text"}]}]}],"type":"aside","style":"note"},{"level":3,"type":"heading","text":"If Statement","anchor":"If-Statement"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"if","type":"codeVoice"},{"text":" statement is used for executing code","type":"text"},{"type":"text","text":" "},{"text":"based on the evaluation of one or more conditions.","type":"text"}]},{"inlineContent":[{"type":"text","text":"There are two basic forms of an "},{"code":"if","type":"codeVoice"},{"text":" statement.","type":"text"},{"text":" ","type":"text"},{"text":"In each form, the opening and closing braces are required.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The first form allows code to be executed only when a condition is true","type":"text"},{"text":" ","type":"text"},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if <#condition#> {","   <#statements#>","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The second form of an "},{"type":"codeVoice","code":"if"},{"text":" statement provides an additional ","type":"text"},{"inlineContent":[{"type":"text","text":"else clause"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"(introduced by the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" keyword)"},{"type":"text","text":" "},{"text":"and is used for executing one part of code when the condition is true","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and another part of code when the same condition is false."},{"text":" ","type":"text"},{"type":"text","text":"When a single else clause is present, an "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if <#condition#> {","   <#statements to execute if condition is true#>","} else {","   <#statements to execute if condition is false#>","}"]},{"inlineContent":[{"type":"text","text":"The else clause of an "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement can contain another "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"to test more than one condition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement chained together in this way has the following form:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if <#condition 1#> {","   <#statements to execute if condition 1 is true#>","} else if <#condition 2#> {","   <#statements to execute if condition 2 is true#>","} else {","   <#statements to execute if both conditions are false#>","}"]},{"inlineContent":[{"type":"text","text":"The value of any condition in an "},{"code":"if","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must be of type "},{"type":"codeVoice","code":"Bool"},{"text":" or a type bridged to ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The condition can also be an optional binding declaration,","type":"text"},{"text":" ","type":"text"},{"text":"as discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Grammar of an if statement","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"if-statement"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"if","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"condition-list","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"code-block","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"else-clause","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"else-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"else"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"code-block"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"else","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"if-statement"}],"type":"emphasis"}]}]},{"anchor":"Guard-Statement","level":3,"type":"heading","text":"Guard Statement"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":" statement is used to transfer program control out of a scope","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if one or more conditions aren’t met."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement has the following form:"}]},{"syntax":"swift","code":["guard <#condition#> else {","   <#statements#>","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The value of any condition in a ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"must be of type ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" or a type bridged to "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The condition can also be an optional binding declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Any constants or variables assigned a value","type":"text"},{"type":"text","text":" "},{"text":"from an optional binding declaration in a ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement condition"},{"type":"text","text":" "},{"text":"can be used for the rest of the guard statement’s enclosing scope.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"else"},{"type":"text","text":" clause of a "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement is required,"},{"text":" ","type":"text"},{"type":"text","text":"and must either call a function with the "},{"code":"Never","type":"codeVoice"},{"type":"text","text":" return type"},{"text":" ","type":"text"},{"type":"text","text":"or transfer program control outside the guard statement’s enclosing scope"},{"text":" ","type":"text"},{"type":"text","text":"using one of the following statements:"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"return"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"break"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"continue","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"throw"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Control transfer statements are discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements","isActive":true},{"text":" below.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information on functions with the "},{"code":"Never","type":"codeVoice"},{"text":" return type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","isActive":true},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"guard-statement"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"guard"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"condition-list"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"else"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"code-block"}],"type":"emphasis"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Grammar of a guard statement"},{"level":3,"type":"heading","anchor":"Switch-Statement","text":"Switch Statement"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement allows certain blocks of code to be executed","type":"text"},{"type":"text","text":" "},{"text":"depending on the value of a control expression.","type":"text"}]},{"inlineContent":[{"text":"A ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement has the following form:"}],"type":"paragraph"},{"code":["switch <#control expression#> {","case <#pattern 1#>:","    <#statements#>","case <#pattern 2#> where <#condition#>:","    <#statements#>","case <#pattern 3#> where <#condition#>,","    <#pattern 4#> where <#condition#>:","    <#statements#>","default:","    <#statements#>","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" of the "},{"code":"switch","type":"codeVoice"},{"text":" statement is evaluated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and then compared with the patterns specified in each case."},{"type":"text","text":" "},{"type":"text","text":"If a match is found,"},{"type":"text","text":" "},{"text":"the program executes the ","type":"text"},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"type":"text","text":" listed within the scope of that case."},{"type":"text","text":" "},{"text":"The scope of each case can’t be empty.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As a result, you must include at least one statement"},{"type":"text","text":" "},{"type":"text","text":"following the colon ("},{"code":":","type":"codeVoice"},{"type":"text","text":") of each case label. Use a single "},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"if you don’t intend to execute any code in the body of a matched case."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values of expressions your code can branch on are very flexible. For example,"},{"text":" ","type":"text"},{"text":"in addition to the values of scalar types, such as integers and characters,","type":"text"},{"text":" ","type":"text"},{"text":"your code can branch on the values of any type, including floating-point numbers, strings,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tuples, instances of custom classes, and optionals."},{"type":"text","text":" "},{"type":"text","text":"The value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" can even be matched to the value of a case in an enumeration"},{"text":" ","type":"text"},{"text":"and checked for inclusion in a specified range of values.","type":"text"},{"type":"text","text":" "},{"text":"For examples of how to use these various types of values in ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch","isActive":true},{"type":"text","text":" in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can optionally contain a "},{"type":"codeVoice","code":"where"},{"text":" clause after each pattern.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A "},{"inlineContent":[{"text":"where clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" is introduced by the "},{"code":"where","type":"codeVoice"},{"text":" keyword followed by an expression,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is used to provide an additional condition"},{"type":"text","text":" "},{"type":"text","text":"before a pattern in a case is considered matched to the "},{"inlineContent":[{"type":"text","text":"control expression"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"If a "},{"type":"codeVoice","code":"where"},{"text":" clause is present, the ","type":"text"},{"inlineContent":[{"text":"statements","type":"text"}],"type":"emphasis"},{"text":" within the relevant case","type":"text"},{"type":"text","text":" "},{"text":"are executed only if the value of the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"control expression"}]},{"type":"text","text":" "},{"type":"text","text":"matches one of the patterns of the case and the expression of the "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"For example, a ","type":"text"},{"inlineContent":[{"text":"control expression","type":"text"}],"type":"emphasis"},{"text":" matches the case in the example below","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only if it’s a tuple that contains two elements of the same value, such as "},{"code":"(1, 1)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["case let (x, y) where x == y:"],"syntax":"swift"},{"inlineContent":[{"text":"As the above example shows, patterns in a case can also bind constants","type":"text"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" keyword (they can also bind variables using the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" keyword)."},{"text":" ","type":"text"},{"text":"These constants (or variables) can then be referenced in a corresponding ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"and throughout the rest of the code within the scope of the case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the case contains multiple patterns that match the control expression,"},{"text":" ","type":"text"},{"type":"text","text":"all of the patterns must contain the same constant or variable bindings,"},{"text":" ","type":"text"},{"type":"text","text":"and each bound variable or constant must have the same type"},{"type":"text","text":" "},{"text":"in all of the case’s patterns.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"switch"},{"text":" statement can also include a default case, introduced by the ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The code within a default case is executed only if no other cases match the control expression."},{"type":"text","text":" "},{"type":"text","text":"A "},{"code":"switch","type":"codeVoice"},{"text":" statement can include only one default case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which must appear at the end of the "},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the actual execution order of pattern-matching operations,"},{"type":"text","text":" "},{"text":"and in particular the evaluation order of patterns in cases, is unspecified,","type":"text"},{"text":" ","type":"text"},{"text":"pattern matching in a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement behaves"},{"text":" ","type":"text"},{"type":"text","text":"as if the evaluation is performed in source order — that is,"},{"type":"text","text":" "},{"text":"the order in which they appear in source code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result, if multiple cases contain patterns that evaluate to the same value,"},{"type":"text","text":" "},{"type":"text","text":"and thus can match the value of the control expression,"},{"type":"text","text":" "},{"type":"text","text":"the program executes only the code within the first matching case in source order."}]},{"anchor":"Switch-Statements-Must-Be-Exhaustive","level":4,"type":"heading","text":"Switch Statements Must Be Exhaustive"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift,"},{"type":"text","text":" "},{"type":"text","text":"every possible value of the control expression’s type"},{"text":" ","type":"text"},{"text":"must match the value of at least one pattern of a case.","type":"text"},{"type":"text","text":" "},{"text":"When this simply isn’t feasible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(for example, when the control expression’s type is "},{"type":"codeVoice","code":"Int"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can include a default case to satisfy the requirement."}]},{"level":4,"anchor":"Switching-Over-Future-Enumeration-Cases","type":"heading","text":"Switching Over Future Enumeration Cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"nonfrozen enumeration","type":"text"}],"type":"emphasis"},{"text":" is a special kind of enumeration","type":"text"},{"type":"text","text":" "},{"text":"that may gain new enumeration cases in the future —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even after you compile and ship an app."},{"type":"text","text":" "},{"type":"text","text":"Switching over a nonfrozen enumeration requires extra consideration."},{"text":" ","type":"text"},{"type":"text","text":"When a library’s authors mark an enumeration as nonfrozen,"},{"type":"text","text":" "},{"text":"they reserve the right to add new enumeration cases,","type":"text"},{"text":" ","type":"text"},{"text":"and any code that interacts with that enumeration","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" be able to handle those future cases without being recompiled."},{"type":"text","text":" "},{"type":"text","text":"Code that’s compiled in library evolution mode,"},{"type":"text","text":" "},{"type":"text","text":"code in the Swift standard library,"},{"type":"text","text":" "},{"type":"text","text":"Swift overlays for Apple frameworks,"},{"text":" ","type":"text"},{"type":"text","text":"and C and Objective-C code can declare nonfrozen enumerations."},{"type":"text","text":" "},{"type":"text","text":"For information about frozen and nonfrozen enumerations,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When switching over a nonfrozen enumeration value,"},{"type":"text","text":" "},{"type":"text","text":"you always need to include a default case,"},{"type":"text","text":" "},{"text":"even if every case of the enumeration already has a corresponding switch case.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can apply the "},{"code":"@unknown","type":"codeVoice"},{"text":" attribute to the default case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which indicates that the default case should match only enumeration cases"},{"type":"text","text":" "},{"type":"text","text":"that are added in the future."},{"text":" ","type":"text"},{"text":"Swift produces a warning","type":"text"},{"type":"text","text":" "},{"text":"if the default case matches","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any enumeration case that’s known at compiler time."},{"text":" ","type":"text"},{"type":"text","text":"This future warning informs you that the library author"},{"type":"text","text":" "},{"type":"text","text":"added a new case to the enumeration"},{"type":"text","text":" "},{"text":"that doesn’t have a corresponding switch case.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following example switches over all three existing cases of"},{"text":" ","type":"text"},{"text":"the Swift standard library’s ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"enumeration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you add additional cases in the future,"},{"type":"text","text":" "},{"type":"text","text":"the compiler generates a warning to indicate"},{"type":"text","text":" "},{"text":"that you need to update the switch statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to take the new cases into account."}],"type":"paragraph"},{"code":["let representation: Mirror.AncestorRepresentation = .generated","switch representation {","case .customized:","    print(\"Use the nearest ancestor’s implementation.\")","case .generated:","    print(\"Generate a default mirror for all ancestor classes.\")","case .suppressed:","    print(\"Suppress the representation of all ancestor classes.\")","@unknown default:","    print(\"Use a representation that was unknown when this code was compiled.\")","}","\/\/ Prints \"Generate a default mirror for all ancestor classes.\""],"syntax":"swift","type":"codeListing"},{"text":"Execution Does Not Fall Through Cases Implicitly","level":4,"type":"heading","anchor":"Execution-Does-Not-Fall-Through-Cases-Implicitly"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the code within a matched case has finished executing,"},{"type":"text","text":" "},{"type":"text","text":"the program exits from the "},{"type":"codeVoice","code":"switch"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"text":"Program execution doesn’t continue or “fall through” to the next case or default case.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"That said, if you want execution to continue from one case to the next,"},{"text":" ","type":"text"},{"type":"text","text":"explicitly include a "},{"code":"fallthrough","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"which simply consists of the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"text":"in the case from which you want execution to continue.","type":"text"},{"type":"text","text":" "},{"text":"For more information about the ","type":"text"},{"type":"codeVoice","code":"fallthrough"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement"},{"type":"text","text":" below."}]},{"name":"Grammar of a switch statement","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"switch-statement","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"switch"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"{"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"switch-cases","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"}"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"switch-cases","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-case"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-cases"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"switch-case","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"case-label"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-case"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"default-label"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"switch-case"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"conditional-switch-case"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"case-label"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"case"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"case-item-list"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"case-item-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-clause"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"case-item-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"default-label"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"default"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"where-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"where","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-expression"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-expression"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"conditional-switch-case"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"switch-if-directive-clause"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"switch-elseif-directive-clauses"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-else-directive-clause"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"endif-directive"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"switch-if-directive-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"if-directive","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"switch-cases","type":"text"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"switch-elseif-directive-clauses"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"elseif-directive-clause"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-elseif-directive-clauses"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"switch-elseif-directive-clause","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"elseif-directive"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-cases"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"switch-else-directive-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"else-directive"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"switch-cases"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"}],"type":"paragraph"}],"type":"aside"},{"text":"Labeled Statement","level":2,"type":"heading","anchor":"Labeled-Statement"},{"type":"paragraph","inlineContent":[{"text":"You can prefix a loop statement, an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement, a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"or a "},{"type":"codeVoice","code":"do"},{"text":" statement with a ","type":"text"},{"inlineContent":[{"type":"text","text":"statement label"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which consists of the name of the label followed immediately by a colon (:)."},{"type":"text","text":" "},{"text":"Use statement labels with ","type":"text"},{"code":"break","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statements to be explicit"},{"type":"text","text":" "},{"type":"text","text":"about how you want to change control flow in a loop statement or a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true,"type":"reference"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement","isActive":true,"type":"reference"},{"text":" below.","type":"text"}]},{"inlineContent":[{"text":"The scope of a labeled statement is the entire statement following the statement label.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can nest labeled statements, but the name of each statement label must be unique."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information and to see examples","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of how to use statement labels,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements"},{"text":" in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"text":".","type":"text"}]},{"name":"Grammar of a labeled statement","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"labeled-statement"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"statement-label"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"loop-statement","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"labeled-statement"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"statement-label"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"if-statement","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"labeled-statement","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"statement-label","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"switch-statement"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"labeled-statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"statement-label","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"do-statement"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"statement-label","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"label-name"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"label-name","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]}]}],"type":"aside","style":"note"},{"anchor":"Control-Transfer-Statements","text":"Control Transfer Statements","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Control transfer statements can change the order in which code in your program is executed"},{"text":" ","type":"text"},{"type":"text","text":"by unconditionally transferring program control from one piece of code to another."},{"type":"text","text":" "},{"type":"text","text":"Swift has five control transfer statements: a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement, a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"fallthrough","type":"codeVoice"},{"type":"text","text":" statement, a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement, and a "},{"code":"throw","type":"codeVoice"},{"type":"text","text":" statement."}],"type":"paragraph"},{"name":"Grammar of a control transfer statement","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"control-transfer-statement","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"break-statement","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"control-transfer-statement","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"continue-statement","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"control-transfer-statement","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"fallthrough-statement"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"control-transfer-statement","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"return-statement"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"control-transfer-statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"throw-statement","type":"text"}],"type":"emphasis"}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Break-Statement","type":"heading","level":3,"text":"Break Statement"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"break"},{"text":" statement ends program execution of a loop,","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement, or a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"break"},{"text":" statement can consist of only the ","type":"text"},{"type":"codeVoice","code":"break"},{"text":" keyword,","type":"text"},{"type":"text","text":" "},{"text":"or it can consist of the ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" keyword followed by the name of a statement label,"},{"type":"text","text":" "},{"text":"as shown below.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["break","break <#label name#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"break"},{"text":" statement is followed by the name of a statement label,","type":"text"},{"type":"text","text":" "},{"text":"it ends program execution of the loop,","type":"text"},{"text":" ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement, or ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement named by that label."}]},{"inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement isn’t followed by the name of a statement label,"},{"type":"text","text":" "},{"text":"it ends program execution of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement or the innermost enclosing loop"},{"text":" ","type":"text"},{"type":"text","text":"statement in which it occurs."},{"type":"text","text":" "},{"text":"You can’t use an unlabeled ","type":"text"},{"type":"codeVoice","code":"break"},{"text":" statement to break out of an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement."}],"type":"paragraph"},{"inlineContent":[{"text":"In both cases, program control is then transferred to the first line","type":"text"},{"type":"text","text":" "},{"text":"of code following the enclosing loop or ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement, if any."}],"type":"paragraph"},{"inlineContent":[{"text":"For examples of how to use a ","type":"text"},{"code":"break","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements","isActive":true},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"break-statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"break"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"label-name","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}],"type":"paragraph"}],"style":"note","name":"Grammar of a break statement","type":"aside"},{"level":3,"anchor":"Continue-Statement","text":"Continue Statement","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"code":"continue","type":"codeVoice"},{"text":" statement ends program execution of the current iteration of a loop","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"statement but doesn’t stop execution of the loop statement."},{"type":"text","text":" "},{"text":"A ","type":"text"},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement can consist of only the "},{"code":"continue","type":"codeVoice"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"text":"or it can consist of the ","type":"text"},{"code":"continue","type":"codeVoice"},{"text":" keyword followed by the name of a statement label,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown below."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["continue","continue <#label name#>"]},{"inlineContent":[{"text":"When a ","type":"text"},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement is followed by the name of a statement label,"},{"text":" ","type":"text"},{"text":"it ends program execution of the current iteration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the loop statement named by that label."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"continue"},{"text":" statement isn’t followed by the name of a statement label,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it ends program execution of the current iteration"},{"type":"text","text":" "},{"text":"of the innermost enclosing loop statement in which it occurs.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In both cases, program control is then transferred to the condition"},{"text":" ","type":"text"},{"type":"text","text":"of the enclosing loop statement."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In a "},{"type":"codeVoice","code":"for"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the increment expression is still evaluated after the "},{"type":"codeVoice","code":"continue"},{"text":" statement is executed,","type":"text"},{"text":" ","type":"text"},{"text":"because the increment expression is evaluated after the execution of the loop’s body.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For examples of how to use a "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue","type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"name":"Grammar of a continue statement","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"continue-statement","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"continue"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"label-name"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}]}],"type":"aside"},{"anchor":"Fallthrough-Statement","level":3,"type":"heading","text":"Fallthrough Statement"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"fallthrough"},{"text":" statement consists of the ","type":"text"},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"and occurs only in a case block of a "},{"type":"codeVoice","code":"switch"},{"text":" statement.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A "},{"code":"fallthrough","type":"codeVoice"},{"text":" statement causes program execution to continue","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from one case in a "},{"type":"codeVoice","code":"switch"},{"text":" statement to the next case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Program execution continues to the next case"},{"type":"text","text":" "},{"text":"even if the patterns of the case label don’t match","type":"text"},{"text":" ","type":"text"},{"text":"the value of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s control expression."}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"fallthrough"},{"text":" statement can appear anywhere inside a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not just as the last statement of a case block,"},{"type":"text","text":" "},{"text":"but it can’t be used in the final case block.","type":"text"},{"text":" ","type":"text"},{"text":"It also can’t transfer control into a case block","type":"text"},{"type":"text","text":" "},{"text":"whose pattern contains value binding patterns.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For an example of how to use a ","type":"text"},{"code":"fallthrough","type":"codeVoice"},{"text":" statement in a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements","isActive":true},{"type":"text","text":" "},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Grammar of a fallthrough statement","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"fallthrough-statement"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"fallthrough"}],"type":"strong"}]}]},{"level":3,"text":"Return Statement","type":"heading","anchor":"Return-Statement"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"return","type":"codeVoice"},{"text":" statement occurs in the body of a function or method definition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and causes program execution to return to the calling function or method."},{"type":"text","text":" "},{"type":"text","text":"Program execution continues at the point immediately following the function or method call."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement can consist of only the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword,"},{"text":" ","type":"text"},{"type":"text","text":"or it can consist of the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword followed by an expression, as shown below."}]},{"syntax":"swift","code":["return","return <#expression#>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"code":"return","type":"codeVoice"},{"text":" statement is followed by an expression,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value of the expression is returned to the calling function or method."},{"type":"text","text":" "},{"text":"If the value of the expression doesn’t match the value of the return type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declared in the function or method declaration,"},{"text":" ","type":"text"},{"type":"text","text":"the expression’s value is converted to the return type"},{"text":" ","type":"text"},{"text":"before it’s returned to the calling function or method.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"As described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","isActive":true},{"text":", a special form of the ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement ("},{"type":"codeVoice","code":"return nil"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"can be used in a failable initializer to indicate initialization failure."}]}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement isn’t followed by an expression,"},{"text":" ","type":"text"},{"type":"text","text":"it can be used only to return from a function or method that doesn’t return a value"},{"text":" ","type":"text"},{"type":"text","text":"(that is, when the return type of the function or method is "},{"type":"codeVoice","code":"Void"},{"text":" or ","type":"text"},{"code":"()","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"return-statement"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"return","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}],"type":"paragraph"}],"style":"note","name":"Grammar of a return statement"},{"anchor":"Throw-Statement","level":3,"text":"Throw Statement","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement occurs in the body of a throwing function or method,"},{"text":" ","type":"text"},{"text":"or in the body of a closure expression whose type is marked with the ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" keyword."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"throw","type":"codeVoice"},{"text":" statement causes a program to end execution of the current scope","type":"text"},{"text":" ","type":"text"},{"text":"and begin error propagation to its enclosing scope.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The error that’s thrown continues to propagate until it’s handled by a "},{"code":"catch","type":"codeVoice"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"text":"of a ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement consists of the ","type":"text"},{"type":"codeVoice","code":"throw"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by an expression, as shown below."}]},{"syntax":"swift","type":"codeListing","code":["throw <#expression#>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of the "},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"type":"text","text":" must have a type that conforms to"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"For an example of how to use a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"throw-statement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"throw"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]}]}],"name":"Grammar of a throw statement","type":"aside","style":"note"},{"level":2,"text":"Defer Statement","type":"heading","anchor":"Defer-Statement"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" statement is used for executing code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just before transferring program control outside of the scope"},{"text":" ","type":"text"},{"type":"text","text":"that the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement appears in."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement has the following form:"}]},{"syntax":"swift","code":["defer {","    <#statements#>","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The statements within the "},{"type":"codeVoice","code":"defer"},{"text":" statement are executed","type":"text"},{"text":" ","type":"text"},{"text":"no matter how program control is transferred.","type":"text"},{"type":"text","text":" "},{"text":"This means that a ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" statement can be used, for example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to perform manual resource management such as closing file descriptors,"},{"text":" ","type":"text"},{"text":"and to perform actions that need to happen even if an error is thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"statements","type":"text"}],"type":"emphasis"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"are executed at the end of the scope that encloses the "},{"code":"defer","type":"codeVoice"},{"text":" statement.","type":"text"}]},{"syntax":"swift","code":["func f(x: Int) {","  defer { print(\"First defer\") }","","  if x < 10 {","    defer { print(\"Second defer\") }","    print(\"End of if\")","  }","","  print(\"End of function\")","}","f(x: 5)","\/\/ Prints \"End of if\"","\/\/ Prints \"Second defer\"","\/\/ Prints \"End of function\"","\/\/ Prints \"First defer\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"executes before the "},{"type":"codeVoice","code":"defer"},{"text":" declared in the function ","type":"text"},{"type":"codeVoice","code":"f"},{"type":"text","text":" "},{"type":"text","text":"because the scope of the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement ends"},{"type":"text","text":" "},{"type":"text","text":"before the scope of the function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If multiple "},{"code":"defer","type":"codeVoice"},{"text":" statements appear in the same scope,","type":"text"},{"type":"text","text":" "},{"text":"the order they appear is the reverse of the order they’re executed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Executing the last "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement in a given scope first"},{"text":" ","type":"text"},{"type":"text","text":"means that statements inside that last "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"can refer to resources that will be cleaned up by other "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statements."}]},{"code":["func f() {","    defer { print(\"First defer\") }","    defer { print(\"Second defer\") }","    print(\"End of function\")","}","f()","\/\/ Prints \"End of function\"","\/\/ Prints \"Second defer\"","\/\/ Prints \"First defer\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The statements in the ","type":"text"},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement can’t"},{"type":"text","text":" "},{"type":"text","text":"transfer program control outside of the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"defer-statement"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"defer"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"code-block"}]}],"type":"paragraph"}],"name":"Grammar of a defer statement","style":"note","type":"aside"},{"anchor":"Do-Statement","type":"heading","text":"Do Statement","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement is used to introduce a new scope"},{"type":"text","text":" "},{"type":"text","text":"and can optionally contain one or more "},{"code":"catch","type":"codeVoice"},{"text":" clauses,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which contain patterns that match against defined error conditions."},{"type":"text","text":" "},{"type":"text","text":"Variables and constants declared in the scope of a "},{"code":"do","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be accessed only within that scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"do","type":"codeVoice"},{"text":" statement in Swift is similar to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"curly braces ("},{"code":"{}","type":"codeVoice"},{"type":"text","text":") in C used to delimit a code block,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t incur a performance cost at runtime."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement has the following form:"}]},{"code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If any statement in the "},{"code":"do","type":"codeVoice"},{"text":" code block throws an error,","type":"text"},{"text":" ","type":"text"},{"text":"program control is transferred","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the first "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause whose pattern matches the error."},{"text":" ","type":"text"},{"type":"text","text":"If none of the clauses match,"},{"type":"text","text":" "},{"text":"the error propagates to the surrounding scope.","type":"text"},{"type":"text","text":" "},{"text":"If an error is unhandled at the top level,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"program execution stops with a runtime error."}]},{"inlineContent":[{"type":"text","text":"Like a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"text":"the compiler attempts to infer whether ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses are exhaustive."},{"type":"text","text":" "},{"type":"text","text":"If such a determination can be made, the error is considered handled."},{"text":" ","type":"text"},{"type":"text","text":"Otherwise, the error can propagate out of the containing scope,"},{"type":"text","text":" "},{"type":"text","text":"which means"},{"type":"text","text":" "},{"type":"text","text":"the error must be handled by an enclosing "},{"type":"codeVoice","code":"catch"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"text":"or the containing function must be declared with ","type":"text"},{"type":"codeVoice","code":"throws"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause that has multiple patterns"},{"text":" ","type":"text"},{"type":"text","text":"matches the error if any of its patterns match the error."},{"type":"text","text":" "},{"text":"If a ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause contains multiple patterns,"},{"type":"text","text":" "},{"text":"all of the patterns must contain the same constant or variable bindings,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and each bound variable or constant must have the same type"},{"text":" ","type":"text"},{"type":"text","text":"in all of the "},{"code":"catch","type":"codeVoice"},{"text":" clause’s patterns.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To ensure that an error is handled,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause with a pattern that matches all errors,"},{"text":" ","type":"text"},{"type":"text","text":"such as a wildcard pattern ("},{"type":"codeVoice","code":"_"},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If a "},{"type":"codeVoice","code":"catch"},{"text":" clause doesn’t specify a pattern,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause matches and binds any error to a local constant named "},{"type":"codeVoice","code":"error"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For more information about the patterns you can use in a ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To see an example of how to use a "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement with several "},{"code":"catch","type":"codeVoice"},{"text":" clauses,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors","isActive":true},{"type":"text","text":"."}]},{"name":"Grammar of a do statement","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"do-statement","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"do"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"code-block"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"catch-clauses"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"catch-clauses","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"catch-clause","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"catch-clauses"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"catch-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"catch"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"catch-pattern-list"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"code-block","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"catch-pattern-list","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"catch-pattern","type":"text"}]},{"text":" | ","type":"text"},{"inlineContent":[{"text":"catch-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"catch-pattern-list"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"catch-pattern"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"where-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]}],"type":"aside"},{"type":"heading","anchor":"Compiler-Control-Statements","level":2,"text":"Compiler Control Statements"},{"inlineContent":[{"text":"Compiler control statements allow the program to change aspects of the compiler’s behavior.","type":"text"},{"type":"text","text":" "},{"text":"Swift has three compiler control statements:","type":"text"},{"type":"text","text":" "},{"text":"a conditional compilation block","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a line control statement,"},{"type":"text","text":" "},{"type":"text","text":"and a compile-time diagnostic statement."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"compiler-control-statement","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"conditional-compilation-block"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"compiler-control-statement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"line-control-statement"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"compiler-control-statement"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"diagnostic-statement"}]}]}],"name":"Grammar of a compiler control statement","style":"note"},{"text":"Conditional Compilation Block","level":3,"type":"heading","anchor":"Conditional-Compilation-Block"},{"inlineContent":[{"text":"A conditional compilation block allows code to be conditionally compiled","type":"text"},{"text":" ","type":"text"},{"text":"depending on the value of one or more compilation conditions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Every conditional compilation block begins with the "},{"type":"codeVoice","code":"#if"},{"text":" compilation directive","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and ends with the "},{"code":"#endif","type":"codeVoice"},{"text":" compilation directive.","type":"text"},{"type":"text","text":" "},{"text":"A simple conditional compilation block has the following form:","type":"text"}],"type":"paragraph"},{"code":["#if <#compilation condition#>","    <#statements#>","#endif"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike the condition of an "},{"code":"if","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"compilation condition","type":"text"}]},{"text":" is evaluated at compile time.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"type":"text","text":" are compiled and executed only if the "},{"inlineContent":[{"type":"text","text":"compilation condition"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" at compile time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"compilation condition"}],"type":"emphasis"},{"text":" can include the ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"text":" Boolean literals,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an identifier used with the "},{"code":"-D","type":"codeVoice"},{"text":" command line flag, or any of the platform","type":"text"},{"type":"text","text":" "},{"text":"conditions listed in the table below.","type":"text"}]},{"rows":[[[{"inlineContent":[{"text":"Platform condition","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Valid arguments"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"os()"}]}],[{"type":"paragraph","inlineContent":[{"code":"macOS","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"iOS"},{"text":", ","type":"text"},{"code":"watchOS","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"tvOS"},{"text":", ","type":"text"},{"type":"codeVoice","code":"visionOS"},{"type":"text","text":", "},{"code":"Linux","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Windows"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"arch()"}]}],[{"type":"paragraph","inlineContent":[{"code":"i386","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"x86_64"},{"text":", ","type":"text"},{"code":"arm","type":"codeVoice"},{"type":"text","text":", "},{"code":"arm64","type":"codeVoice"}]}]],[[{"inlineContent":[{"code":"swift()","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":">="},{"type":"text","text":" or "},{"type":"codeVoice","code":"<"},{"text":" followed by a version number","type":"text"}]}]],[[{"inlineContent":[{"type":"codeVoice","code":"compiler()"}],"type":"paragraph"}],[{"inlineContent":[{"type":"codeVoice","code":">="},{"type":"text","text":" or "},{"code":"<","type":"codeVoice"},{"type":"text","text":" followed by a version number"}],"type":"paragraph"}]],[[{"inlineContent":[{"code":"canImport()","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"A module name","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"targetEnvironment()"}]}],[{"type":"paragraph","inlineContent":[{"code":"simulator","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"macCatalyst"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"type":"text","text":"The version number for the "},{"code":"swift()","type":"codeVoice"},{"type":"text","text":" and "},{"code":"compiler()","type":"codeVoice"},{"text":" platform conditions","type":"text"},{"type":"text","text":" "},{"text":"consists of a major number, optional minor number, optional patch number, and so on,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a dot ("},{"code":".","type":"codeVoice"},{"type":"text","text":") separating each part of the version number."},{"text":" ","type":"text"},{"type":"text","text":"There must not be whitespace between the comparison operator and the version number."},{"type":"text","text":" "},{"text":"The version for ","type":"text"},{"code":"compiler()","type":"codeVoice"},{"type":"text","text":" is the compiler version,"},{"type":"text","text":" "},{"type":"text","text":"regardless of the Swift version setting passed to the compiler."},{"text":" ","type":"text"},{"text":"The version for ","type":"text"},{"type":"codeVoice","code":"swift()"},{"text":" is the language version currently being compiled.","type":"text"},{"type":"text","text":" "},{"text":"For example, if you compile your code using the Swift 5 compiler in Swift 4.2 mode,","type":"text"},{"type":"text","text":" "},{"text":"the compiler version is 5 and the language version is 4.2.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"With those settings,"},{"type":"text","text":" "},{"type":"text","text":"the following code prints all three messages:"}],"type":"paragraph"},{"code":["#if compiler(>=5)","print(\"Compiled with the Swift 5 compiler or later\")","#endif","#if swift(>=4.2)","print(\"Compiled in Swift 4.2 mode or later\")","#endif","#if compiler(>=5) && swift(<5)","print(\"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\")","#endif","\/\/ Prints \"Compiled with the Swift 5 compiler or later\"","\/\/ Prints \"Compiled in Swift 4.2 mode or later\"","\/\/ Prints \"Compiled with the Swift 5 compiler or later in a Swift mode earlier than 5\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The argument for the "},{"type":"codeVoice","code":"canImport()"},{"text":" platform condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is the name of a module that may not be present on all platforms."},{"type":"text","text":" "},{"type":"text","text":"The module can include periods ("},{"type":"codeVoice","code":"."},{"text":") in its name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This condition tests whether it’s possible to import the module,"},{"text":" ","type":"text"},{"type":"text","text":"but doesn’t actually import it."},{"text":" ","type":"text"},{"text":"If the module is present, the platform condition returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":";","type":"text"},{"type":"text","text":" "},{"type":"text","text":"otherwise, it returns "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform condition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returns "},{"type":"codeVoice","code":"true"},{"text":" when code is being compiled for the specified environment;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, it returns "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"arch(arm)","type":"codeVoice"},{"type":"text","text":" platform condition doesn’t return "},{"code":"true","type":"codeVoice"},{"text":" for ARM 64 devices.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"arch(i386)"},{"text":" platform condition returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" ","type":"text"},{"type":"text","text":"when code is compiled for the 32–bit iOS simulator."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"You can combine and negate compilation conditions using the logical operators"},{"type":"text","text":" "},{"code":"&&","type":"codeVoice"},{"type":"text","text":", "},{"code":"||","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"!"},{"type":"text","text":" "},{"type":"text","text":"and use parentheses for grouping."},{"text":" ","type":"text"},{"text":"These operators have the same associativity and precedence as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"logical operators that are used to combine ordinary Boolean expressions."}],"type":"paragraph"},{"inlineContent":[{"text":"Similar to an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"you can add multiple conditional branches to test for different compilation conditions.","type":"text"},{"text":" ","type":"text"},{"text":"You can add any number of additional branches using ","type":"text"},{"type":"codeVoice","code":"#elseif"},{"text":" clauses.","type":"text"},{"text":" ","type":"text"},{"text":"You can also add a final additional branch using an ","type":"text"},{"code":"#else","type":"codeVoice"},{"type":"text","text":" clause."},{"type":"text","text":" "},{"type":"text","text":"Conditional compilation blocks that contain multiple branches"},{"type":"text","text":" "},{"text":"have the following form:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["#if <#compilation condition 1#>","    <#statements to compile if compilation condition 1 is true#>","#elseif <#compilation condition 2#>","    <#statements to compile if compilation condition 2 is true#>","#else","    <#statements to compile if both compilation conditions are false#>","#endif"],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"Each statement in the body of a conditional compilation block is parsed"},{"type":"text","text":" "},{"text":"even if it’s not compiled.","type":"text"},{"type":"text","text":" "},{"text":"However, there’s an exception","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if the compilation condition includes a "},{"code":"swift()","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"compiler()","type":"codeVoice"},{"type":"text","text":" platform condition:"},{"type":"text","text":" "},{"text":"The statements are parsed","type":"text"},{"text":" ","type":"text"},{"text":"only if the language or compiler version matches","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"what is specified in the platform condition."},{"type":"text","text":" "},{"type":"text","text":"This exception ensures that an older compiler doesn’t attempt to parse"},{"type":"text","text":" "},{"type":"text","text":"syntax introduced in a newer version of Swift."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For information about how you can wrap"},{"type":"text","text":" "},{"text":"explicit member expressions in conditional compilation blocks,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"aside","style":"note","name":"Grammar of a conditional compilation block","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"conditional-compilation-block"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"if-directive-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"elseif-directive-clauses"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"else-directive-clause"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"endif-directive","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"if-directive-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"if-directive"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"compilation-condition","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"elseif-directive-clauses"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"elseif-directive-clause","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"elseif-directive-clauses"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"elseif-directive-clause","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"elseif-directive","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"statements","type":"text"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"else-directive-clause"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"else-directive"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"if-directive"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"#if"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"elseif-directive","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"#elseif"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"else-directive"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"#else"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"endif-directive"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"#endif"}]}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-condition"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"compilation-condition"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"compilation-condition","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"boolean-literal","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"compilation-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"type":"text","text":" "},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"compilation-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"!"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"text":"compilation-condition","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"compilation-condition"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"compilation-condition","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"&&","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"compilation-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"compilation-condition","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"compilation-condition"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":"||","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"compilation-condition"}],"type":"emphasis"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-condition"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"os"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"operating-system"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"platform-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"arch","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"architecture"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-condition"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"swift"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":">=","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"swift-version","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"swift"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"code":"<","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"swift-version","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-condition"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"compiler"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":">="}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"swift-version","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"compiler","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"<","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"swift-version","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"platform-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"canImport"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"(","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"import-path"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"platform-condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"targetEnvironment","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"environment"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"operating-system","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"macOS"}],"type":"strong"},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"iOS"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"watchOS"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"tvOS"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"Linux","type":"codeVoice"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"Windows"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"architecture"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"i386"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"x86_64","type":"codeVoice"}]},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"arm"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"arm64"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"swift-version"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digits"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"swift-version-continuation"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"swift-version-continuation","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digits"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"swift-version-continuation","type":"text"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"environment"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"simulator"}],"type":"strong"},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"macCatalyst"}]}],"type":"paragraph"}]},{"type":"heading","anchor":"Line-Control-Statement","text":"Line Control Statement","level":3},{"inlineContent":[{"type":"text","text":"A line control statement is used to specify a line number and filename"},{"text":" ","type":"text"},{"type":"text","text":"that can be different from the line number and filename of the source code being compiled."},{"text":" ","type":"text"},{"type":"text","text":"Use a line control statement to change the source code location"},{"type":"text","text":" "},{"type":"text","text":"used by Swift for diagnostic and debugging purposes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A line control statement has the following forms:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["#sourceLocation(file: <#file path#>, line: <#line number#>)","#sourceLocation()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first form of a line control statement changes the values"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"code":"#line","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#file","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#fileID","type":"codeVoice"},{"type":"text","text":", and "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"literal expressions, beginning with the line of code following the line control statement."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"line number","type":"text"}]},{"text":" changes the value of ","type":"text"},{"type":"codeVoice","code":"#line"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and is any integer literal greater than zero.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"file path"}]},{"text":" changes the value of ","type":"text"},{"code":"#file","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"#fileID"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and is a string literal."},{"text":" ","type":"text"},{"type":"text","text":"The specified string becomes the value of "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the last path component of the string is used by the value of "},{"type":"codeVoice","code":"#fileID"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For information about ","type":"text"},{"type":"codeVoice","code":"#file"},{"text":", ","type":"text"},{"code":"#fileID","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"#filePath"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The second form of a line control statement, ","type":"text"},{"type":"codeVoice","code":"#sourceLocation()"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"resets the source code location back to the default line numbering and file path."}]},{"name":"Grammar of a line control statement","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"line-control-statement"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"#sourceLocation","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"code":"file:","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"file-path"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"line:","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"line-number"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"line-control-statement"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"#sourceLocation"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"line-number"}],"type":"emphasis"},{"text":" → A decimal integer greater than zero ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"file-path","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"static-string-literal","type":"text"}]}]}]},{"text":"Compile-Time Diagnostic Statement","anchor":"Compile-Time-Diagnostic-Statement","level":3,"type":"heading"},{"inlineContent":[{"text":"Prior to Swift 5.9,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"#warning"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"#error"},{"type":"text","text":" statements emit a diagnostic during compilation."},{"type":"text","text":" "},{"type":"text","text":"This behavior is now provided by"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"isActive":true,"type":"reference","identifier":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/warning(_:)"},{"text":" and ","type":"text"},{"identifier":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/error(_:)","type":"reference","isActive":true},{"type":"text","text":" macros in the Swift standard library."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Availability-Condition","text":"Availability Condition"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability condition"}]},{"type":"text","text":" is used as a condition of an "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement to query the availability of APIs at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on specified platforms arguments."}]},{"inlineContent":[{"type":"text","text":"An availability condition has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["if #available(<#platform name#> <#version#>, <#...#>, *) {","    <#statements to execute if the APIs are available#>","} else {","    <#fallback statements to execute if the APIs are unavailable#>","}"],"type":"codeListing"},{"inlineContent":[{"text":"You use an availability condition to execute a block of code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"depending on whether the APIs you want to use are available at runtime."},{"text":" ","type":"text"},{"type":"text","text":"The compiler uses the information from the availability condition"},{"text":" ","type":"text"},{"type":"text","text":"when it verifies that the APIs in that block of code are available."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The availability condition takes a comma-separated list of platform names and versions."},{"type":"text","text":" "},{"text":"Use ","type":"text"},{"type":"codeVoice","code":"iOS"},{"text":", ","type":"text"},{"type":"codeVoice","code":"macOS"},{"type":"text","text":", "},{"type":"codeVoice","code":"watchOS"},{"type":"text","text":", and "},{"code":"tvOS","type":"codeVoice"},{"type":"text","text":" for the platform names,"},{"type":"text","text":" "},{"type":"text","text":"and include the corresponding version numbers."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"*","type":"codeVoice"},{"text":" argument is required and specifies that, on any other platform,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the body of the code block guarded by the availability condition"},{"type":"text","text":" "},{"text":"executes on the minimum deployment target specified by your target.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Unlike Boolean conditions, you can’t combine availability conditions using"},{"text":" ","type":"text"},{"text":"logical operators like ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"||"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Instead of using ","type":"text"},{"code":"!","type":"codeVoice"},{"text":" to negate an availability condition,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use an unavailability condition, which has the following form:"}],"type":"paragraph"},{"code":["if #unavailable(<#platform name#> <#version#>, <#...#>) {","    <#fallback statements to execute if the APIs are unavailable#>","} else {","    <#statements to execute if the APIs are available#>","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" form is syntactic sugar that negates the condition."},{"type":"text","text":" "},{"text":"In an unavailability condition,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"*"},{"text":" argument is implicit and must not be included.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It has the same meaning as the "},{"type":"codeVoice","code":"*"},{"type":"text","text":" argument in an availability condition."}]},{"style":"note","name":"Grammar of an availability condition","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"availability-condition","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"#available","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"availability-arguments","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"availability-condition"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"#unavailable"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"availability-arguments"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"availability-arguments","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"availability-argument","type":"text"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"availability-argument","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability-arguments"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"availability-argument"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"platform-name","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-version"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"availability-argument"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"*"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"platform-name","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"iOS"}],"type":"strong"},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"code":"iOSApplicationExtension","type":"codeVoice"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"platform-name","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"macOS"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"code":"macOSApplicationExtension","type":"codeVoice"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"platform-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"macCatalyst","type":"codeVoice"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"codeVoice","code":"macCatalystApplicationExtension"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-name"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"watchOS"}],"type":"strong"},{"type":"text","text":" | "},{"inlineContent":[{"code":"watchOSApplicationExtension","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-name"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"tvOS"}]},{"text":" | ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"tvOSApplicationExtension"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"platform-name"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"visionOS"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"platform-version","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"decimal-digits"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"platform-version","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal-digits"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":".","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"decimal-digits","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"platform-version"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"decimal-digits","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"decimal-digits","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"."}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"text":"decimal-digits","type":"text"}],"type":"emphasis"}]}]}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Break":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Break","title":"Break","url":"\/documentation\/the-swift-programming-language\/controlflow#Break"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"title":"Control Flow","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Handling-Errors":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors","title":"Handling Errors","url":"\/documentation\/the-swift-programming-language\/errorhandling#Handling-Errors"},"http://developer.apple.com/documentation/swift/documentation/swift/warning(_:)":{"identifier":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/warning(_:)","titleInlineContent":[{"code":"warning(_:)","type":"codeVoice"}],"title":"warning(_:)","type":"link","url":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/warning(_:)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","title":"Failable Initializers","url":"\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","abstract":[],"title":"Explicit Member Expression","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Labeled-Statements":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Labeled-Statements","title":"Labeled Statements","url":"\/documentation\/the-swift-programming-language\/controlflow#Labeled-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Control-Transfer-Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Control-Transfer-Statements","abstract":[],"title":"Control Transfer Statements","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Control-Transfer-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","url":"\/documentation\/the-swift-programming-language\/errorhandling","abstract":[{"text":"Respond to and recover from errors.","type":"text"}],"title":"Error Handling","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic","kind":"article"},"https://developer.apple.com/documentation/swift/sequence":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","titleInlineContent":[{"code":"Sequence","type":"codeVoice"}],"title":"Sequence","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","url":"\/documentation\/the-swift-programming-language\/patterns","abstract":[{"text":"Match and destructure values.","type":"text"}],"title":"Patterns","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Switch":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch","abstract":[],"title":"Switch","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow#Switch"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagating-Errors-Using-Throwing-Functions":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagating-Errors-Using-Throwing-Functions","title":"Propagating Errors Using Throwing Functions","url":"\/documentation\/the-swift-programming-language\/errorhandling#Propagating-Errors-Using-Throwing-Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Continue":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Continue","abstract":[],"title":"Continue","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow#Continue"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"abstract":[],"role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","title":"Functions that Never Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","abstract":[],"title":"Break Statement","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optional-Binding":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","title":"Optional Binding","url":"\/documentation\/the-swift-programming-language\/thebasics#Optional-Binding"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Fallthrough-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Fallthrough-Statement","abstract":[],"title":"Fallthrough Statement","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Fallthrough-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","title":"frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Control-Transfer-Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Control-Transfer-Statements","abstract":[],"title":"Control Transfer Statements","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow#Control-Transfer-Statements"},"http://developer.apple.com/documentation/swift/documentation/swift/error(_:)":{"url":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/error(_:)","type":"link","identifier":"http:\/\/developer.apple.com\/documentation\/swift\/documentation\/swift\/error(_:)","title":"error(_:)","titleInlineContent":[{"code":"error(_:)","type":"codeVoice"}]},"https://developer.apple.com/documentation/swift/iteratorprotocol":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol","titleInlineContent":[{"code":"IteratorProtocol","type":"codeVoice"}],"title":"IteratorProtocol","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/iteratorprotocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Continue-Statement":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Continue-Statement","title":"Continue Statement","url":"\/documentation\/the-swift-programming-language\/statements#Continue-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","abstract":[],"title":"Literal Expression","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression"},"https://developer.apple.com/documentation/swift/mirror/ancestorrepresentation":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/mirror\/ancestorrepresentation","title":"Mirror.AncestorRepresentation","titleInlineContent":[{"code":"Mirror.AncestorRepresentation","type":"codeVoice"}]}}}