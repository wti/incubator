{"metadata":{"title":"Closures"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Group code that executes together, without creating a named function."}],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"text":" are self-contained blocks of functionality","type":"text"},{"text":" ","type":"text"},{"text":"that can be passed around and used in your code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Closures in Swift are similar to blocks in C and Objective-C"},{"text":" ","type":"text"},{"type":"text","text":"and to lambdas in other programming languages."}]},{"type":"paragraph","inlineContent":[{"text":"Closures can capture and store references to any constants and variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the context in which they’re defined."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"inlineContent":[{"text":"closing over","type":"text"}],"type":"emphasis"},{"text":" those constants and variables.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift handles all of the memory management of capturing for you."}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"Don’t worry if you aren’t familiar with the concept of capturing.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It’s explained in detail below in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Global and nested functions, as introduced in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"are actually special cases of closures."},{"type":"text","text":" "},{"type":"text","text":"Closures take one of three forms:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Global functions are closures that have a name"},{"type":"text","text":" "},{"text":"and don’t capture any values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Nested functions are closures that have a name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can capture values from their enclosing function."}]}]},{"content":[{"inlineContent":[{"text":"Closure expressions are unnamed closures written in a lightweight syntax","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can capture values from their surrounding context."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s closure expressions have a clean, clear style,"},{"type":"text","text":" "},{"text":"with optimizations that encourage brief, clutter-free syntax in common scenarios.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These optimizations include:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Inferring parameter and return value types from context","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Implicit returns from single-expression closures"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Shorthand argument names","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Trailing closure syntax"}]}]}]},{"text":"Closure Expressions","anchor":"Closure-Expressions","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Nested functions, as introduced in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Nested-Functions","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"are a convenient means of naming and defining self-contained blocks of code"},{"text":" ","type":"text"},{"type":"text","text":"as part of a larger function."},{"type":"text","text":" "},{"type":"text","text":"However, it’s sometimes useful to write shorter versions of function-like constructs"},{"type":"text","text":" "},{"text":"without a full declaration and name.","type":"text"},{"type":"text","text":" "},{"text":"This is particularly true when you work with functions or methods that take functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as one or more of their arguments."}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Closure expressions"}],"type":"emphasis"},{"type":"text","text":" are a way to write inline closures in a brief, focused syntax."},{"text":" ","type":"text"},{"text":"Closure expressions provide several syntax optimizations","type":"text"},{"type":"text","text":" "},{"text":"for writing closures in a shortened form without loss of clarity or intent.","type":"text"},{"type":"text","text":" "},{"text":"The closure expression examples below illustrate these optimizations","type":"text"},{"type":"text","text":" "},{"text":"by refining a single example of the ","type":"text"},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method over several iterations,"},{"text":" ","type":"text"},{"text":"each of which expresses the same functionality in a more succinct way.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"The-Sorted-Method","text":"The Sorted Method","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s standard library provides a method called "},{"code":"sorted(by:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which sorts an array of values of a known type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the output of a sorting closure that you provide."},{"text":" ","type":"text"},{"type":"text","text":"Once it completes the sorting process,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"sorted(by:)","type":"codeVoice"},{"type":"text","text":" method returns a new array of the same type and size as the old one,"},{"text":" ","type":"text"},{"text":"with its elements in the correct sorted order.","type":"text"},{"type":"text","text":" "},{"text":"The original array isn’t modified by the ","type":"text"},{"type":"codeVoice","code":"sorted(by:)"},{"text":" method.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure expression examples below use the "},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"to sort an array of "},{"code":"String","type":"codeVoice"},{"text":" values in reverse alphabetical order.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s the initial array to be sorted:"}]},{"syntax":"swift","code":["let names = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method accepts a closure that takes two arguments"},{"text":" ","type":"text"},{"type":"text","text":"of the same type as the array’s contents,"},{"type":"text","text":" "},{"type":"text","text":"and returns a "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" value to say whether the first value should appear"},{"type":"text","text":" "},{"type":"text","text":"before or after the second value once the values are sorted."},{"type":"text","text":" "},{"type":"text","text":"The sorting closure needs to return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" "},{"text":"if the first value should appear ","type":"text"},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"text":" the second value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This example is sorting an array of ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"type":"text","text":"and so the sorting closure needs to be a function of type "},{"code":"(String, String) -> Bool","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to provide the sorting closure is to write a normal function of the correct type,"},{"type":"text","text":" "},{"text":"and to pass it in as an argument to the ","type":"text"},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["func backward(_ s1: String, _ s2: String) -> Bool {","    return s1 > s2","}","var reversedNames = names.sorted(by: backward)","\/\/ reversedNames is equal to [\"Ewa\", \"Daniella\", \"Chris\", \"Barry\", \"Alex\"]"]},{"inlineContent":[{"type":"text","text":"If the first string ("},{"type":"codeVoice","code":"s1"},{"type":"text","text":") is greater than the second string ("},{"code":"s2","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"backward(_:_:)","type":"codeVoice"},{"text":" function will return ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"indicating that "},{"type":"codeVoice","code":"s1"},{"text":" should appear before ","type":"text"},{"type":"codeVoice","code":"s2"},{"type":"text","text":" in the sorted array."},{"type":"text","text":" "},{"text":"For characters in strings,","type":"text"},{"text":" ","type":"text"},{"text":"“greater than” means “appears later in the alphabet than”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that the letter "},{"code":"\"B\"","type":"codeVoice"},{"type":"text","text":" is “greater than” the letter "},{"code":"\"A\"","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the string "},{"code":"\"Tom\"","type":"codeVoice"},{"type":"text","text":" is greater than the string "},{"code":"\"Tim\"","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This gives a reverse alphabetical sort,","type":"text"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"code":"\"Barry\"","type":"codeVoice"},{"type":"text","text":" being placed before "},{"code":"\"Alex\"","type":"codeVoice"},{"type":"text","text":", and so on."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, this is a rather long-winded way to write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"what is essentially a single-expression function ("},{"code":"a > b","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this example, it would be preferable to write the sorting closure inline,"},{"type":"text","text":" "},{"type":"text","text":"using closure expression syntax."}]},{"text":"Closure Expression Syntax","type":"heading","anchor":"Closure-Expression-Syntax","level":3},{"inlineContent":[{"text":"Closure expression syntax has the following general form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["{ (<#parameters#>) -> <#return type#> in","   <#statements#>","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameters"}]},{"text":" in closure expression syntax","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t have a default value."},{"text":" ","type":"text"},{"text":"Variadic parameters can be used if you name the variadic parameter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Tuples can also be used as parameter types and return types."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below shows a closure expression version of the "},{"code":"backward(_:_:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from above:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in","    return s1 > s2","})"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the declaration of parameters and return type for this inline closure"},{"type":"text","text":" "},{"text":"is identical to the declaration from the ","type":"text"},{"type":"codeVoice","code":"backward(_:_:)"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In both cases, it’s written as "},{"type":"codeVoice","code":"(s1: String, s2: String) -> Bool"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"However, for the inline closure expression,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the parameters and return type are written "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"text":" the curly braces,","type":"text"},{"type":"text","text":" "},{"text":"not outside of them.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The start of the closure’s body is introduced by the ","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"This keyword indicates that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the definition of the closure’s parameters and return type has finished,"},{"text":" ","type":"text"},{"text":"and the body of the closure is about to begin.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because the body of the closure is so short,"},{"type":"text","text":" "},{"type":"text","text":"it can even be written on a single line:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in return s1 > s2 } )"]},{"inlineContent":[{"text":"This illustrates that the overall call to the ","type":"text"},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method has remained the same."},{"text":" ","type":"text"},{"type":"text","text":"A pair of parentheses still wrap the entire argument for the method."},{"type":"text","text":" "},{"text":"However, that argument is now an inline closure.","type":"text"}],"type":"paragraph"},{"anchor":"Inferring-Type-From-Context","text":"Inferring Type From Context","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the sorting closure is passed as an argument to a method,"},{"text":" ","type":"text"},{"type":"text","text":"Swift can infer the types of its parameters"},{"text":" ","type":"text"},{"type":"text","text":"and the type of the value it returns."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method is being called on an array of strings,"},{"type":"text","text":" "},{"type":"text","text":"so its argument must be a function of type "},{"code":"(String, String) -> Bool","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This means that the ","type":"text"},{"type":"codeVoice","code":"(String, String)"},{"text":" and ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" types don’t need to be written"},{"type":"text","text":" "},{"text":"as part of the closure expression’s definition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because all of the types can be inferred,"},{"text":" ","type":"text"},{"type":"text","text":"the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":") and the parentheses around the names of the parameters"},{"text":" ","type":"text"},{"type":"text","text":"can also be omitted:"}]},{"type":"codeListing","syntax":"swift","code":["reversedNames = names.sorted(by: { s1, s2 in return s1 > s2 } )"]},{"type":"paragraph","inlineContent":[{"text":"It’s always possible to infer the parameter types and return type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when passing a closure to a function or method as an inline closure expression."},{"text":" ","type":"text"},{"type":"text","text":"As a result, you never need to write an inline closure in its fullest form"},{"text":" ","type":"text"},{"type":"text","text":"when the closure is used as a function or method argument."}]},{"type":"paragraph","inlineContent":[{"text":"Nonetheless, you can still make the types explicit if you wish,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and doing so is encouraged if it avoids ambiguity for readers of your code."},{"type":"text","text":" "},{"type":"text","text":"In the case of the "},{"code":"sorted(by:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"the purpose of the closure is clear from the fact that sorting is taking place,"},{"type":"text","text":" "},{"type":"text","text":"and it’s safe for a reader to assume that"},{"text":" ","type":"text"},{"type":"text","text":"the closure is likely to be working with "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values,"},{"text":" ","type":"text"},{"text":"because it’s assisting with the sorting of an array of strings.","type":"text"}]},{"type":"heading","anchor":"Implicit-Returns-from-Single-Expression-Closures","level":3,"text":"Implicit Returns from Single-Expression Closures"},{"type":"paragraph","inlineContent":[{"text":"Single-expression closures can implicitly return the result of their single expression","type":"text"},{"type":"text","text":" "},{"text":"by omitting the ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" keyword from their declaration,"},{"text":" ","type":"text"},{"text":"as in this version of the previous example:","type":"text"}]},{"code":["reversedNames = names.sorted(by: { s1, s2 in s1 > s2 } )"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, the function type of the "},{"type":"codeVoice","code":"sorted(by:)"},{"type":"text","text":" method’s argument"},{"text":" ","type":"text"},{"text":"makes it clear that a ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" value must be returned by the closure."},{"type":"text","text":" "},{"text":"Because the closure’s body contains a single expression (","type":"text"},{"code":"s1 > s2","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that returns a "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"there’s no ambiguity, and the "},{"type":"codeVoice","code":"return"},{"text":" keyword can be omitted.","type":"text"}]},{"anchor":"Shorthand-Argument-Names","type":"heading","level":3,"text":"Shorthand Argument Names"},{"inlineContent":[{"text":"Swift automatically provides shorthand argument names to inline closures,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can be used to refer to the values of the closure’s arguments"},{"type":"text","text":" "},{"type":"text","text":"by the names "},{"type":"codeVoice","code":"$0"},{"type":"text","text":", "},{"code":"$1","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"$2"},{"text":", and so on.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you use these shorthand argument names within your closure expression,"},{"text":" ","type":"text"},{"type":"text","text":"you can omit the closure’s argument list from its definition."},{"text":" ","type":"text"},{"type":"text","text":"The type of the shorthand argument names"},{"type":"text","text":" "},{"type":"text","text":"is inferred from the expected function type,"},{"text":" ","type":"text"},{"text":"and the highest numbered shorthand argument you use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"determines the number of arguments that the closure takes."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" keyword can also be omitted,"},{"type":"text","text":" "},{"type":"text","text":"because the closure expression is made up entirely of its body:"}],"type":"paragraph"},{"code":["reversedNames = names.sorted(by: { $0 > $1 } )"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, "},{"type":"codeVoice","code":"$0"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"$1"},{"type":"text","text":" refer to the closure’s first and second "},{"type":"codeVoice","code":"String"},{"text":" arguments.","type":"text"},{"text":" ","type":"text"},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"$1"},{"type":"text","text":" is the shorthand argument with highest number,"},{"type":"text","text":" "},{"type":"text","text":"the closure is understood to take two arguments."},{"text":" ","type":"text"},{"text":"Because the ","type":"text"},{"code":"sorted(by:)","type":"codeVoice"},{"type":"text","text":" function here expects a closure"},{"text":" ","type":"text"},{"text":"whose arguments are both strings,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the shorthand arguments "},{"type":"codeVoice","code":"$0"},{"text":" and ","type":"text"},{"code":"$1","type":"codeVoice"},{"text":" are both of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]},{"anchor":"Operator-Methods","level":3,"text":"Operator Methods","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s actually an even "},{"inlineContent":[{"text":"shorter","type":"text"}],"type":"emphasis"},{"text":" way to write the closure expression above.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" type defines its string-specific implementation of","type":"text"},{"text":" ","type":"text"},{"text":"the greater-than operator (","type":"text"},{"code":">","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"as a method that has two parameters of type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and returns a value of type ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This exactly matches the method type needed by the ","type":"text"},{"code":"sorted(by:)","type":"codeVoice"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Therefore, you can simply pass in the greater-than operator,"},{"type":"text","text":" "},{"type":"text","text":"and Swift will infer that you want to use its string-specific implementation:"}]},{"syntax":"swift","type":"codeListing","code":["reversedNames = names.sorted(by: >)"]},{"inlineContent":[{"type":"text","text":"For more about operator methods, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Trailing Closures","anchor":"Trailing-Closures","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you need to pass a closure expression to a function as the function’s final argument"},{"type":"text","text":" "},{"type":"text","text":"and the closure expression is long,"},{"text":" ","type":"text"},{"text":"it can be useful to write it as a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"trailing closure","type":"text"}]},{"text":" instead.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write a trailing closure after the function call’s parentheses,"},{"type":"text","text":" "},{"text":"even though the trailing closure is still an argument to the function.","type":"text"},{"type":"text","text":" "},{"text":"When you use the trailing closure syntax,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you don’t write the argument label for the first closure"},{"type":"text","text":" "},{"type":"text","text":"as part of the function call."},{"type":"text","text":" "},{"type":"text","text":"A function call can include multiple trailing closures;"},{"type":"text","text":" "},{"text":"however, the first few examples below use a single trailing closure.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func someFunctionThatTakesAClosure(closure: () -> Void) {","    \/\/ function body goes here","}","","\/\/ Here's how you call this function without using a trailing closure:","","someFunctionThatTakesAClosure(closure: {","    \/\/ closure's body goes here","})","","\/\/ Here's how you call this function with a trailing closure instead:","","someFunctionThatTakesAClosure() {","    \/\/ trailing closure's body goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The string-sorting closure from the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expression-Syntax","isActive":true,"type":"reference"},{"text":" section above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be written outside of the "},{"code":"sorted(by:)","type":"codeVoice"},{"type":"text","text":" method’s parentheses as a trailing closure:"}]},{"type":"codeListing","syntax":"swift","code":["reversedNames = names.sorted() { $0 > $1 }"]},{"inlineContent":[{"text":"If a closure expression is provided as the function’s or method’s only argument","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you provide that expression as a trailing closure,"},{"text":" ","type":"text"},{"text":"you don’t need to write a pair of parentheses ","type":"text"},{"code":"()","type":"codeVoice"},{"type":"text","text":" "},{"text":"after the function or method’s name when you call the function:","type":"text"}],"type":"paragraph"},{"code":["reversedNames = names.sorted { $0 > $1 }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Trailing closures are most useful when the closure is sufficiently long that"},{"text":" ","type":"text"},{"type":"text","text":"it isn’t possible to write it inline on a single line."},{"type":"text","text":" "},{"text":"As an example, Swift’s ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" type has a ","type":"text"},{"code":"map(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"which takes a closure expression as its single argument."},{"text":" ","type":"text"},{"text":"The closure is called once for each item in the array,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns an alternative mapped value (possibly of some other type) for that item."},{"text":" ","type":"text"},{"type":"text","text":"You specify"},{"text":" ","type":"text"},{"type":"text","text":"the nature of the mapping and the type of the returned value"},{"type":"text","text":" "},{"text":"by writing code in the closure that you pass to ","type":"text"},{"type":"codeVoice","code":"map(_:)"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"After applying the provided closure to each array element,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"map(_:)"},{"text":" method returns a new array containing all of the new mapped values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the same order as their corresponding values in the original array."}]},{"inlineContent":[{"text":"Here’s how you can use the ","type":"text"},{"code":"map(_:)","type":"codeVoice"},{"text":" method with a trailing closure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to convert an array of "},{"code":"Int","type":"codeVoice"},{"text":" values into an array of ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"The array ","type":"text"},{"code":"[16, 58, 510]","type":"codeVoice"},{"type":"text","text":" is used to create the new array"},{"type":"text","text":" "},{"code":"[\"OneSix\", \"FiveEight\", \"FiveOneZero\"]","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let digitNames = [","    0: \"Zero\", 1: \"One\", 2: \"Two\",   3: \"Three\", 4: \"Four\",","    5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"","]","let numbers = [16, 58, 510]"],"type":"codeListing"},{"inlineContent":[{"text":"The code above creates a dictionary of mappings between","type":"text"},{"type":"text","text":" "},{"text":"the integer digits and English-language versions of their names.","type":"text"},{"type":"text","text":" "},{"text":"It also defines an array of integers, ready to be converted into strings.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can now use the "},{"type":"codeVoice","code":"numbers"},{"text":" array to create an array of ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"text":"by passing a closure expression to the array’s ","type":"text"},{"type":"codeVoice","code":"map(_:)"},{"type":"text","text":" method as a trailing closure:"}],"type":"paragraph"},{"syntax":"swift","code":["let strings = numbers.map { (number) -> String in","    var number = number","    var output = \"\"","    repeat {","        output = digitNames[number % 10]! + output","        number \/= 10","    } while number > 0","    return output","}","\/\/ strings is inferred to be of type [String]","\/\/ its value is [\"OneSix\", \"FiveEight\", \"FiveOneZero\"]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"map(_:)"},{"text":" method calls the closure expression once for each item in the array.","type":"text"},{"type":"text","text":" "},{"text":"You don’t need to specify the type of the closure’s input parameter, ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because the type can be inferred from the values in the array to be mapped."}]},{"inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the variable "},{"type":"codeVoice","code":"number"},{"text":" is initialized with the value of the closure’s ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":" parameter,"},{"type":"text","text":" "},{"text":"so that the value can be modified within the closure body.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The parameters to functions and closures are always constants.)"},{"text":" ","type":"text"},{"text":"The closure expression also specifies a return type of ","type":"text"},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate the type that will be stored in the mapped output array."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The closure expression builds a string called "},{"type":"codeVoice","code":"output"},{"type":"text","text":" each time it’s called."},{"text":" ","type":"text"},{"text":"It calculates the last digit of ","type":"text"},{"code":"number","type":"codeVoice"},{"text":" by using the remainder operator (","type":"text"},{"type":"codeVoice","code":"number % 10"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and uses this digit to look up an appropriate string in the "},{"type":"codeVoice","code":"digitNames"},{"text":" dictionary.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The closure can be used to create a string representation of any integer greater than zero."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The call to the "},{"code":"digitNames","type":"codeVoice"},{"type":"text","text":" dictionary’s subscript"},{"type":"text","text":" "},{"type":"text","text":"is followed by an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"because dictionary subscripts return an optional value","type":"text"},{"type":"text","text":" "},{"text":"to indicate that the dictionary lookup can fail if the key doesn’t exist.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example above, it’s guaranteed that "},{"type":"codeVoice","code":"number % 10"},{"text":" ","type":"text"},{"type":"text","text":"will always be a valid subscript key for the "},{"type":"codeVoice","code":"digitNames"},{"text":" dictionary,","type":"text"},{"type":"text","text":" "},{"text":"and so an exclamation point is used to force-unwrap the ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"stored in the subscript’s optional return value."}],"type":"paragraph"}],"style":"note"},{"inlineContent":[{"text":"The string retrieved from the ","type":"text"},{"code":"digitNames","type":"codeVoice"},{"text":" dictionary","type":"text"},{"type":"text","text":" "},{"text":"is added to the ","type":"text"},{"inlineContent":[{"text":"front","type":"text"}],"type":"emphasis"},{"type":"text","text":" of "},{"type":"codeVoice","code":"output"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"effectively building a string version of the number in reverse.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The expression "},{"code":"number % 10","type":"codeVoice"},{"type":"text","text":" gives a value of"},{"text":" ","type":"text"},{"code":"6","type":"codeVoice"},{"type":"text","text":" for "},{"code":"16","type":"codeVoice"},{"type":"text","text":", "},{"code":"8","type":"codeVoice"},{"type":"text","text":" for "},{"code":"58","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"0"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"510"},{"text":".)","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"number","type":"codeVoice"},{"type":"text","text":" variable is then divided by "},{"type":"codeVoice","code":"10"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because it’s an integer, it’s rounded down during the division,"},{"type":"text","text":" "},{"type":"text","text":"so "},{"type":"codeVoice","code":"16"},{"text":" becomes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":", ","type":"text"},{"code":"58","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"5","type":"codeVoice"},{"type":"text","text":", and "},{"code":"510","type":"codeVoice"},{"type":"text","text":" becomes "},{"code":"51","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The process is repeated until ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":" is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"at which point the ","type":"text"},{"type":"codeVoice","code":"output"},{"type":"text","text":" string is returned by the closure,"},{"text":" ","type":"text"},{"type":"text","text":"and is added to the output array by the "},{"code":"map(_:)","type":"codeVoice"},{"type":"text","text":" method."}]},{"inlineContent":[{"type":"text","text":"The use of trailing closure syntax in the example above"},{"type":"text","text":" "},{"type":"text","text":"neatly encapsulates the closure’s functionality"},{"type":"text","text":" "},{"text":"immediately after the function that closure supports,","type":"text"},{"text":" ","type":"text"},{"text":"without needing to wrap the entire closure within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"map(_:)","type":"codeVoice"},{"type":"text","text":" method’s outer parentheses."}],"type":"paragraph"},{"inlineContent":[{"text":"If a function takes multiple closures,","type":"text"},{"text":" ","type":"text"},{"text":"you omit the argument label for the first trailing closure","type":"text"},{"text":" ","type":"text"},{"text":"and you label the remaining trailing closures.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the function below loads a picture for a photo gallery:"}],"type":"paragraph"},{"type":"codeListing","code":["func loadPicture(from server: Server, completion: (Picture) -> Void, onFailure: () -> Void) {","    if let picture = download(\"photo.jpg\", from: server) {","        completion(picture)","    } else {","        onFailure()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When you call this function to load a picture,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you provide two closures."},{"type":"text","text":" "},{"type":"text","text":"The first closure is a completion handler"},{"type":"text","text":" "},{"type":"text","text":"that displays a picture after a successful download."},{"type":"text","text":" "},{"type":"text","text":"The second closure is an error handler"},{"type":"text","text":" "},{"text":"that displays an error to the user.","type":"text"}]},{"code":["loadPicture(from: someServer) { picture in","    someView.currentPicture = picture","} onFailure: {","    print(\"Couldn't download the next picture.\")","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"In this example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"loadPicture(from:completion:onFailure:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"dispatches its network task into the background,","type":"text"},{"type":"text","text":" "},{"text":"and calls one of the two completion handlers when the network task finishes.","type":"text"},{"text":" ","type":"text"},{"text":"Writing the function this way lets you cleanly separate the code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s responsible for handling a network failure"},{"type":"text","text":" "},{"type":"text","text":"from the code that updates the user interface after a successful download,"},{"text":" ","type":"text"},{"text":"instead of using just one closure that handles both circumstances.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Completion handlers can become hard to read,"},{"text":" ","type":"text"},{"type":"text","text":"especially when you have to nest multiple handlers."},{"text":" ","type":"text"},{"text":"An alternate approach is to use asynchronous code,","type":"text"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"heading","level":2,"anchor":"Capturing-Values","text":"Capturing Values"},{"inlineContent":[{"type":"text","text":"A closure can "},{"type":"emphasis","inlineContent":[{"text":"capture","type":"text"}]},{"type":"text","text":" constants and variables"},{"text":" ","type":"text"},{"type":"text","text":"from the surrounding context in which it’s defined."},{"type":"text","text":" "},{"type":"text","text":"The closure can then refer to and modify"},{"type":"text","text":" "},{"text":"the values of those constants and variables from within its body,","type":"text"},{"type":"text","text":" "},{"text":"even if the original scope that defined the constants and variables no longer exists.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In Swift, the simplest form of a closure that can capture values is a nested function,"},{"text":" ","type":"text"},{"type":"text","text":"written within the body of another function."},{"text":" ","type":"text"},{"type":"text","text":"A nested function can capture any of its outer function’s arguments"},{"text":" ","type":"text"},{"text":"and can also capture any constants and variables defined within the outer function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a function called "},{"type":"codeVoice","code":"makeIncrementer"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which contains a nested function called ","type":"text"},{"code":"incrementer","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The nested ","type":"text"},{"type":"codeVoice","code":"incrementer()"},{"type":"text","text":" function captures two values,"},{"text":" ","type":"text"},{"code":"runningTotal","type":"codeVoice"},{"type":"text","text":" and "},{"code":"amount","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"from its surrounding context."},{"type":"text","text":" "},{"text":"After capturing these values,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"incrementer"},{"type":"text","text":" is returned by "},{"code":"makeIncrementer","type":"codeVoice"},{"text":" as a closure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that increments "},{"code":"runningTotal","type":"codeVoice"},{"type":"text","text":" by "},{"code":"amount","type":"codeVoice"},{"type":"text","text":" each time it’s called."}]},{"type":"codeListing","code":["func makeIncrementer(forIncrement amount: Int) -> () -> Int {","    var runningTotal = 0","    func incrementer() -> Int {","        runningTotal += amount","        return runningTotal","    }","    return incrementer","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return type of "},{"type":"codeVoice","code":"makeIncrementer"},{"type":"text","text":" is "},{"code":"() -> Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This means that it returns a "},{"inlineContent":[{"type":"text","text":"function"}],"type":"emphasis"},{"text":", rather than a simple value.","type":"text"},{"text":" ","type":"text"},{"text":"The function it returns has no parameters,","type":"text"},{"type":"text","text":" "},{"text":"and returns an ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value each time it’s called.","type":"text"},{"type":"text","text":" "},{"text":"To learn how functions can return other functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Types-as-Return-Types","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"makeIncrementer(forIncrement:)","type":"codeVoice"},{"text":" function defines an integer variable called ","type":"text"},{"code":"runningTotal","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to store the current running total of the incrementer that will be returned."},{"type":"text","text":" "},{"type":"text","text":"This variable is initialized with a value of "},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"makeIncrementer(forIncrement:)"},{"text":" function has a single ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with an argument label of "},{"code":"forIncrement","type":"codeVoice"},{"type":"text","text":", and a parameter name of "},{"type":"codeVoice","code":"amount"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The argument value passed to this parameter specifies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how much "},{"type":"codeVoice","code":"runningTotal"},{"text":" should be incremented by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each time the returned incrementer function is called."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"makeIncrementer"},{"type":"text","text":" function defines a nested function called "},{"type":"codeVoice","code":"incrementer"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which performs the actual incrementing."},{"type":"text","text":" "},{"type":"text","text":"This function simply adds "},{"code":"amount","type":"codeVoice"},{"type":"text","text":" to "},{"code":"runningTotal","type":"codeVoice"},{"text":", and returns the result.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When considered in isolation,"},{"type":"text","text":" "},{"text":"the nested ","type":"text"},{"code":"incrementer()","type":"codeVoice"},{"text":" function might seem unusual:","type":"text"}],"type":"paragraph"},{"code":["func incrementer() -> Int {","    runningTotal += amount","    return runningTotal","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"incrementer()"},{"type":"text","text":" function doesn’t have any parameters,"},{"text":" ","type":"text"},{"text":"and yet it refers to ","type":"text"},{"code":"runningTotal","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"amount","type":"codeVoice"},{"type":"text","text":" from within its function body."},{"type":"text","text":" "},{"type":"text","text":"It does this by capturing a "},{"inlineContent":[{"type":"text","text":"reference"}],"type":"emphasis"},{"type":"text","text":" to "},{"type":"codeVoice","code":"runningTotal"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"amount"},{"text":" ","type":"text"},{"type":"text","text":"from the surrounding function and using them within its own function body."},{"text":" ","type":"text"},{"text":"Capturing by reference ensures that ","type":"text"},{"type":"codeVoice","code":"runningTotal"},{"type":"text","text":" and "},{"type":"codeVoice","code":"amount"},{"text":" don’t disappear","type":"text"},{"type":"text","text":" "},{"text":"when the call to ","type":"text"},{"type":"codeVoice","code":"makeIncrementer"},{"type":"text","text":" ends,"},{"type":"text","text":" "},{"text":"and also ensures that ","type":"text"},{"code":"runningTotal","type":"codeVoice"},{"type":"text","text":" is available"},{"text":" ","type":"text"},{"type":"text","text":"the next time the "},{"type":"codeVoice","code":"incrementer"},{"type":"text","text":" function is called."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"As an optimization,"},{"type":"text","text":" "},{"type":"text","text":"Swift may instead capture and store a "},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"type":"text","text":" of a value"},{"type":"text","text":" "},{"type":"text","text":"if that value isn’t mutated by a closure,"},{"type":"text","text":" "},{"text":"and if the value isn’t mutated after the closure is created.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift also handles all memory management involved in disposing of"},{"type":"text","text":" "},{"type":"text","text":"variables when they’re no longer needed."}]}]},{"inlineContent":[{"type":"text","text":"Here’s an example of "},{"code":"makeIncrementer","type":"codeVoice"},{"text":" in action:","type":"text"}],"type":"paragraph"},{"code":["let incrementByTen = makeIncrementer(forIncrement: 10)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This example sets a constant called ","type":"text"},{"type":"codeVoice","code":"incrementByTen"},{"type":"text","text":" "},{"text":"to refer to an incrementer function that adds ","type":"text"},{"type":"codeVoice","code":"10"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"its ","type":"text"},{"type":"codeVoice","code":"runningTotal"},{"type":"text","text":" variable each time it’s called."},{"type":"text","text":" "},{"type":"text","text":"Calling the function multiple times shows this behavior in action:"}]},{"syntax":"swift","code":["incrementByTen()","\/\/ returns a value of 10","incrementByTen()","\/\/ returns a value of 20","incrementByTen()","\/\/ returns a value of 30"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a second incrementer,"},{"type":"text","text":" "},{"type":"text","text":"it will have its own stored reference to a new, separate "},{"code":"runningTotal","type":"codeVoice"},{"type":"text","text":" variable:"}]},{"type":"codeListing","syntax":"swift","code":["let incrementBySeven = makeIncrementer(forIncrement: 7)","incrementBySeven()","\/\/ returns a value of 7"]},{"inlineContent":[{"type":"text","text":"Calling the original incrementer ("},{"code":"incrementByTen","type":"codeVoice"},{"type":"text","text":") again"},{"type":"text","text":" "},{"type":"text","text":"continues to increment its own "},{"code":"runningTotal","type":"codeVoice"},{"text":" variable,","type":"text"},{"type":"text","text":" "},{"text":"and doesn’t affect the variable captured by ","type":"text"},{"code":"incrementBySeven","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["incrementByTen()","\/\/ returns a value of 40"],"syntax":"swift","type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you assign a closure to a property of a class instance,","type":"text"},{"type":"text","text":" "},{"text":"and the closure captures that instance by referring to the instance or its members,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you will create a strong reference cycle between the closure and the instance."},{"type":"text","text":" "},{"type":"text","text":"Swift uses "},{"inlineContent":[{"type":"text","text":"capture lists"}],"type":"emphasis"},{"type":"text","text":" to break these strong reference cycles."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"style":"note","name":"Note"},{"text":"Closures Are Reference Types","level":2,"anchor":"Closures-Are-Reference-Types","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"incrementBySeven"},{"type":"text","text":" and "},{"type":"codeVoice","code":"incrementByTen"},{"text":" are constants,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but the closures these constants refer to are still able to increment"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"runningTotal"},{"type":"text","text":" variables that they have captured."},{"type":"text","text":" "},{"type":"text","text":"This is because functions and closures are "},{"type":"emphasis","inlineContent":[{"text":"reference types","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Whenever you assign a function or a closure to a constant or a variable,","type":"text"},{"type":"text","text":" "},{"text":"you are actually setting that constant or variable to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference"}]},{"type":"text","text":" to the function or closure."},{"type":"text","text":" "},{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"it’s the choice of closure that "},{"code":"incrementByTen","type":"codeVoice"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"refers to"}]},{"text":" that’s constant,","type":"text"},{"text":" ","type":"text"},{"text":"and not the contents of the closure itself.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also means that if you assign a closure to two different constants or variables,"},{"type":"text","text":" "},{"type":"text","text":"both of those constants or variables refer to the same closure."}]},{"syntax":"swift","code":["let alsoIncrementByTen = incrementByTen","alsoIncrementByTen()","\/\/ returns a value of 50","","incrementByTen()","\/\/ returns a value of 60"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above shows that calling "},{"code":"alsoIncrementByTen","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is the same as calling "},{"type":"codeVoice","code":"incrementByTen"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because both of them refer to the same closure,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they both increment and return the same running total."}]},{"type":"heading","text":"Escaping Closures","anchor":"Escaping-Closures","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure is said to "},{"inlineContent":[{"type":"text","text":"escape"}],"type":"emphasis"},{"type":"text","text":" a function"},{"type":"text","text":" "},{"type":"text","text":"when the closure is passed as an argument to the function,"},{"type":"text","text":" "},{"type":"text","text":"but is called after the function returns."},{"type":"text","text":" "},{"text":"When you declare a function that takes a closure as one of its parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can write "},{"code":"@escaping","type":"codeVoice"},{"text":" before the parameter’s type","type":"text"},{"type":"text","text":" "},{"text":"to indicate that the closure is allowed to escape.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way that a closure can escape"},{"type":"text","text":" "},{"type":"text","text":"is by being stored in a variable that’s defined outside the function."},{"text":" ","type":"text"},{"text":"As an example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"many functions that start an asynchronous operation"},{"text":" ","type":"text"},{"type":"text","text":"take a closure argument as a completion handler."},{"type":"text","text":" "},{"text":"The function returns after it starts the operation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but the closure isn’t called until the operation is completed —"},{"type":"text","text":" "},{"text":"the closure needs to escape, to be called later.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var completionHandlers: [() -> Void] = []","func someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {","    completionHandlers.append(completionHandler)","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"someFunctionWithEscapingClosure(_:)","type":"codeVoice"},{"text":" function takes a closure as its argument","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and adds it to an array that’s declared outside the function."},{"text":" ","type":"text"},{"text":"If you didn’t mark the parameter of this function with ","type":"text"},{"type":"codeVoice","code":"@escaping"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you would get a compile-time error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An escaping closure that refers to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"needs special consideration if "},{"code":"self","type":"codeVoice"},{"type":"text","text":" refers to an instance of a class."},{"type":"text","text":" "},{"text":"Capturing ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" in an escaping closure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"makes it easy to accidentally create a strong reference cycle."},{"type":"text","text":" "},{"text":"For information about reference cycles,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Normally, a closure captures variables implicitly","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by using them in the body of the closure,"},{"type":"text","text":" "},{"text":"but in this case you need to be explicit.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you want to capture "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"write ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" explicitly when you use it,"},{"type":"text","text":" "},{"text":"or include ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" in the closure’s capture list.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Writing "},{"code":"self","type":"codeVoice"},{"text":" explicitly lets you express your intent,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and reminds you to confirm that there isn’t a reference cycle."},{"type":"text","text":" "},{"type":"text","text":"For example, in the code below,"},{"type":"text","text":" "},{"text":"the closure passed to ","type":"text"},{"type":"codeVoice","code":"someFunctionWithEscapingClosure(_:)"},{"text":" ","type":"text"},{"text":"refers to ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" explicitly.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast, the closure passed to "},{"type":"codeVoice","code":"someFunctionWithNonescapingClosure(_:)"},{"type":"text","text":" "},{"type":"text","text":"is a nonescaping closure, which means it can refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func someFunctionWithNonescapingClosure(closure: () -> Void) {","    closure()","}","","class SomeClass {","    var x = 10","    func doSomething() {","        someFunctionWithEscapingClosure { self.x = 100 }","        someFunctionWithNonescapingClosure { x = 200 }","    }","}","","let instance = SomeClass()","instance.doSomething()","print(instance.x)","\/\/ Prints \"200\"","","completionHandlers.first?()","print(instance.x)","\/\/ Prints \"100\""]},{"inlineContent":[{"text":"Here’s a version of ","type":"text"},{"type":"codeVoice","code":"doSomething()"},{"text":" that captures ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"by including it in the closure’s capture list,"},{"text":" ","type":"text"},{"type":"text","text":"and then refers to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeOtherClass {","    var x = 10","    func doSomething() {","        someFunctionWithEscapingClosure { [self] in x = 100 }","        someFunctionWithNonescapingClosure { x = 200 }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"self"},{"text":" is an instance of a structure or an enumeration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can always refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly."},{"type":"text","text":" "},{"text":"However,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an escaping closure can’t capture a mutable reference to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"text":"when ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" is an instance of a structure or an enumeration."},{"text":" ","type":"text"},{"type":"text","text":"Structures and enumerations don’t allow shared mutability,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SomeStruct {","    var x = 10","    mutating func doSomething() {","        someFunctionWithNonescapingClosure { x = 200 }  \/\/ Ok","        someFunctionWithEscapingClosure { x = 100 }     \/\/ Error","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The call to the ","type":"text"},{"code":"someFunctionWithEscapingClosure","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the example above is an error"},{"type":"text","text":" "},{"text":"because it’s inside a mutating method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so "},{"type":"codeVoice","code":"self"},{"type":"text","text":" is mutable."},{"type":"text","text":" "},{"type":"text","text":"That violates the rule that escaping closures can’t capture"},{"type":"text","text":" "},{"type":"text","text":"a mutable reference to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" for structures."}]},{"type":"heading","text":"Autoclosures","level":2,"anchor":"Autoclosures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"autoclosure"}]},{"type":"text","text":" is a closure that’s automatically created"},{"type":"text","text":" "},{"text":"to wrap an expression that’s being passed as an argument to a function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It doesn’t take any arguments,"},{"type":"text","text":" "},{"type":"text","text":"and when it’s called, it returns the value"},{"text":" ","type":"text"},{"text":"of the expression that’s wrapped inside of it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This syntactic convenience lets you omit braces around a function’s parameter"},{"type":"text","text":" "},{"text":"by writing a normal expression instead of an explicit closure.","type":"text"}]},{"inlineContent":[{"text":"It’s common to ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"call"}]},{"text":" functions that take autoclosures,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but it’s not common to "},{"type":"emphasis","inlineContent":[{"text":"implement","type":"text"}]},{"text":" that kind of function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"assert(condition:message:file:line:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"takes an autoclosure for its "},{"type":"codeVoice","code":"condition"},{"type":"text","text":" and "},{"code":"message","type":"codeVoice"},{"text":" parameters;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its "},{"type":"codeVoice","code":"condition"},{"type":"text","text":" parameter is evaluated only in debug builds"},{"type":"text","text":" "},{"type":"text","text":"and its "},{"code":"message","type":"codeVoice"},{"type":"text","text":" parameter is evaluated only if "},{"type":"codeVoice","code":"condition"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An autoclosure lets you delay evaluation,"},{"type":"text","text":" "},{"text":"because the code inside isn’t run until you call the closure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Delaying evaluation is useful for code"},{"type":"text","text":" "},{"type":"text","text":"that has side effects or is computationally expensive,"},{"text":" ","type":"text"},{"type":"text","text":"because it lets you control when that code is evaluated."},{"type":"text","text":" "},{"type":"text","text":"The code below shows how a closure delays evaluation."}]},{"code":["var customersInLine = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]","print(customersInLine.count)","\/\/ Prints \"5\"","","let customerProvider = { customersInLine.remove(at: 0) }","print(customersInLine.count)","\/\/ Prints \"5\"","","print(\"Now serving \\(customerProvider())!\")","\/\/ Prints \"Now serving Chris!\"","print(customersInLine.count)","\/\/ Prints \"4\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the first element of the "},{"type":"codeVoice","code":"customersInLine"},{"text":" array is removed","type":"text"},{"text":" ","type":"text"},{"text":"by the code inside the closure,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the array element isn’t removed until the closure is actually called."},{"type":"text","text":" "},{"text":"If the closure is never called,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the expression inside the closure is never evaluated,"},{"text":" ","type":"text"},{"type":"text","text":"which means the array element is never removed."},{"type":"text","text":" "},{"text":"Note that the type of ","type":"text"},{"code":"customerProvider","type":"codeVoice"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"but "},{"code":"() -> String","type":"codeVoice"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"a function with no parameters that returns a string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You get the same behavior of delayed evaluation"},{"type":"text","text":" "},{"type":"text","text":"when you pass a closure as an argument to a function."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ customersInLine is [\"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]","func serve(customer customerProvider: () -> String) {","    print(\"Now serving \\(customerProvider())!\")","}","serve(customer: { customersInLine.remove(at: 0) } )","\/\/ Prints \"Now serving Alex!\""]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"serve(customer:)"},{"text":" function in the listing above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"takes an explicit closure that returns a customer’s name."},{"type":"text","text":" "},{"type":"text","text":"The version of "},{"code":"serve(customer:)","type":"codeVoice"},{"text":" below","type":"text"},{"type":"text","text":" "},{"text":"performs the same operation but, instead of taking an explicit closure,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it takes an autoclosure"},{"type":"text","text":" "},{"type":"text","text":"by marking its parameter’s type with the "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"Now you can call the function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as if it took a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" argument instead of a closure."},{"text":" ","type":"text"},{"text":"The argument is automatically converted to a closure,","type":"text"},{"text":" ","type":"text"},{"text":"because the ","type":"text"},{"code":"customerProvider","type":"codeVoice"},{"type":"text","text":" parameter’s type is marked"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attribute."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ customersInLine is [\"Ewa\", \"Barry\", \"Daniella\"]","func serve(customer customerProvider: @autoclosure () -> String) {","    print(\"Now serving \\(customerProvider())!\")","}","serve(customer: customersInLine.remove(at: 0))","\/\/ Prints \"Now serving Ewa!\""]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Overusing autoclosures can make your code hard to understand.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The context and function name should make it clear"},{"type":"text","text":" "},{"text":"that evaluation is being deferred.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want an autoclosure that’s allowed to escape,"},{"type":"text","text":" "},{"type":"text","text":"use both the "},{"code":"@autoclosure","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"@escaping","type":"codeVoice"},{"text":" attributes.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"@escaping"},{"text":" attribute is described above in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ customersInLine is [\"Barry\", \"Daniella\"]","var customerProviders: [() -> String] = []","func collectCustomerProviders(_ customerProvider: @autoclosure @escaping () -> String) {","    customerProviders.append(customerProvider)","}","collectCustomerProviders(customersInLine.remove(at: 0))","collectCustomerProviders(customersInLine.remove(at: 0))","","print(\"Collected \\(customerProviders.count) closures.\")","\/\/ Prints \"Collected 2 closures.\"","for customerProvider in customerProviders {","    print(\"Now serving \\(customerProvider())!\")","}","\/\/ Prints \"Now serving Barry!\"","\/\/ Prints \"Now serving Daniella!\""]},{"inlineContent":[{"text":"In the code above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of calling the closure passed to it"},{"text":" ","type":"text"},{"text":"as its ","type":"text"},{"type":"codeVoice","code":"customerProvider"},{"type":"text","text":" argument,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"collectCustomerProviders(_:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"appends the closure to the "},{"code":"customerProviders","type":"codeVoice"},{"type":"text","text":" array."},{"text":" ","type":"text"},{"type":"text","text":"The array is declared outside the scope of the function,"},{"type":"text","text":" "},{"text":"which means the closures in the array can be executed after the function returns.","type":"text"},{"type":"text","text":" "},{"text":"As a result,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the value of the "},{"code":"customerProvider","type":"codeVoice"},{"text":" argument","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must be allowed to escape the function’s scope."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","interfaceLanguage":"swift"},"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","title":"Escaping Closures","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"title":"Functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Nested-Functions":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Nested-Functions","title":"Nested Functions","url":"\/documentation\/the-swift-programming-language\/functions#Nested-Functions","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operator-Methods":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Operator-Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","title":"Operator Methods","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Types-as-Return-Types":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Types-as-Return-Types","title":"Function Types as Return Types","url":"\/documentation\/the-swift-programming-language\/functions#Function-Types-as-Return-Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Strong-Reference-Cycles-for-Closures","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","title":"Strong Reference Cycles for Closures","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Closure-Expression-Syntax":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expression-Syntax","title":"Closure Expression Syntax","url":"\/documentation\/the-swift-programming-language\/closures#Closure-Expression-Syntax","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/classesandstructures#Structures-and-Enumerations-Are-Value-Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","title":"Structures and Enumerations Are Value Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"abstract":[{"type":"text","text":"Perform asynchronous operations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency","title":"Concurrency","role":"article","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Capturing-Values":{"title":"Capturing Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","url":"\/documentation\/the-swift-programming-language\/closures#Capturing-Values","abstract":[],"kind":"section","type":"topic"}}}