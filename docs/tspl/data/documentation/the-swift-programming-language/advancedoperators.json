{"abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"kind":"article","metadata":{"title":"Advanced Operators"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"content":[{"inlineContent":[{"text":"In addition to the operators described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"Swift provides several advanced operators that perform more complex value manipulation.","type":"text"},{"type":"text","text":" "},{"text":"These include all of the bitwise and bit shifting operators you will be familiar with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from C and Objective-C."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Unlike arithmetic operators in C,"},{"text":" ","type":"text"},{"type":"text","text":"arithmetic operators in Swift don’t overflow by default."},{"type":"text","text":" "},{"type":"text","text":"Overflow behavior is trapped and reported as an error."},{"text":" ","type":"text"},{"text":"To opt in to overflow behavior,","type":"text"},{"type":"text","text":" "},{"text":"use Swift’s second set of arithmetic operators that overflow by default,","type":"text"},{"type":"text","text":" "},{"text":"such as the overflow addition operator (","type":"text"},{"code":"&+","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"All of these overflow operators begin with an ampersand ("},{"type":"codeVoice","code":"&"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you define your own structures, classes, and enumerations,"},{"text":" ","type":"text"},{"type":"text","text":"it can be useful to provide your own implementations of"},{"type":"text","text":" "},{"type":"text","text":"the standard Swift operators for these custom types."},{"type":"text","text":" "},{"text":"Swift makes it easy to provide tailored implementations of these operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to determine exactly what their behavior should be for each type you create."}],"type":"paragraph"},{"inlineContent":[{"text":"You’re not limited to the predefined operators.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift gives you the freedom to define your own custom"},{"type":"text","text":" "},{"type":"text","text":"infix, prefix, postfix, and assignment operators,"},{"type":"text","text":" "},{"text":"with custom precedence and associativity values.","type":"text"},{"type":"text","text":" "},{"text":"These operators can be used and adopted in your code like any of the predefined operators,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you can even extend existing types to support the custom operators you define."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Bitwise Operators","anchor":"Bitwise-Operators"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Bitwise operators"}],"type":"emphasis"},{"type":"text","text":" enable you to manipulate"},{"type":"text","text":" "},{"type":"text","text":"the individual raw data bits within a data structure."},{"text":" ","type":"text"},{"text":"They’re often used in low-level programming,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as graphics programming and device driver creation."},{"text":" ","type":"text"},{"type":"text","text":"Bitwise operators can also be useful when you work with raw data from external sources,"},{"type":"text","text":" "},{"text":"such as encoding and decoding data for communication over a custom protocol.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift supports all of the bitwise operators found in C, as described below.","type":"text"}]},{"level":3,"type":"heading","text":"Bitwise NOT Operator","anchor":"Bitwise-NOT-Operator"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"bitwise NOT operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":"~"},{"text":") inverts all bits in a number:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"bitwiseNOT"}]},{"inlineContent":[{"type":"text","text":"The bitwise NOT operator is a prefix operator,"},{"text":" ","type":"text"},{"type":"text","text":"and appears immediately before the value it operates on,"},{"text":" ","type":"text"},{"text":"without any white space:","type":"text"}],"type":"paragraph"},{"code":["let initialBits: UInt8 = 0b00001111","let invertedBits = ~initialBits  \/\/ equals 11110000"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UInt8"},{"text":" integers have eight bits","type":"text"},{"type":"text","text":" "},{"text":"and can store any value between ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"code":"255","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This example initializes a "},{"code":"UInt8","type":"codeVoice"},{"text":" integer with the binary value ","type":"text"},{"code":"00001111","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has its first four bits set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and its second four bits set to "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is equivalent to a decimal value of "},{"type":"codeVoice","code":"15"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The bitwise NOT operator is then used to create a new constant called ","type":"text"},{"code":"invertedBits","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is equal to "},{"type":"codeVoice","code":"initialBits"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"but with all of the bits inverted."},{"type":"text","text":" "},{"type":"text","text":"Zeros become ones, and ones become zeros."},{"type":"text","text":" "},{"type":"text","text":"The value of "},{"code":"invertedBits","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"11110000","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is equal to an unsigned decimal value of "},{"code":"240","type":"codeVoice"},{"type":"text","text":"."}]},{"level":3,"text":"Bitwise AND Operator","type":"heading","anchor":"Bitwise-AND-Operator"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"bitwise AND operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"&","type":"codeVoice"},{"text":") combines the bits of two numbers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It returns a new number whose bits are set to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" "},{"type":"text","text":"only if the bits were equal to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" in "},{"inlineContent":[{"type":"text","text":"both"}],"type":"emphasis"},{"type":"text","text":" input numbers:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"bitwiseAND","type":"image"}]},{"inlineContent":[{"text":"In the example below,","type":"text"},{"type":"text","text":" "},{"text":"the values of ","type":"text"},{"code":"firstSixBits","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"lastSixBits"},{"text":" ","type":"text"},{"text":"both have four middle bits equal to ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The bitwise AND operator combines them to make the number ","type":"text"},{"type":"codeVoice","code":"00111100"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is equal to an unsigned decimal value of ","type":"text"},{"code":"60","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let firstSixBits: UInt8 = 0b11111100","let lastSixBits: UInt8  = 0b00111111","let middleFourBits = firstSixBits & lastSixBits  \/\/ equals 00111100"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Bitwise OR Operator","type":"heading","anchor":"Bitwise-OR-Operator"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"bitwise OR operator"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"|"},{"text":") compares the bits of two numbers.","type":"text"},{"text":" ","type":"text"},{"text":"The operator returns a new number whose bits are set to ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" "},{"type":"text","text":"if the bits are equal to "},{"type":"codeVoice","code":"1"},{"text":" in ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"text":" input number:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitwiseOR","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"text":"the values of ","type":"text"},{"code":"someBits","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"moreBits"},{"text":" have different bits set to ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The bitwise OR operator combines them to make the number ","type":"text"},{"type":"codeVoice","code":"11111110"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which equals an unsigned decimal of ","type":"text"},{"code":"254","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let someBits: UInt8 = 0b10110010","let moreBits: UInt8 = 0b01011110","let combinedbits = someBits | moreBits  \/\/ equals 11111110"],"type":"codeListing"},{"anchor":"Bitwise-XOR-Operator","level":3,"text":"Bitwise XOR Operator","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"bitwise XOR operator"}]},{"text":", or “exclusive OR operator” (","type":"text"},{"type":"codeVoice","code":"^"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"compares the bits of two numbers.","type":"text"},{"text":" ","type":"text"},{"text":"The operator returns a new number whose bits are set to ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"where the input bits are different","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and are set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":" where the input bits are the same:"}]},{"type":"paragraph","inlineContent":[{"identifier":"bitwiseXOR","type":"image"}]},{"inlineContent":[{"text":"In the example below,","type":"text"},{"type":"text","text":" "},{"text":"the values of ","type":"text"},{"type":"codeVoice","code":"firstBits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"otherBits"},{"text":" each have a bit set to ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"in a location that the other does not."},{"text":" ","type":"text"},{"text":"The bitwise XOR operator sets both of these bits to ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" in its output value."},{"type":"text","text":" "},{"text":"All of the other bits in ","type":"text"},{"type":"codeVoice","code":"firstBits"},{"type":"text","text":" and "},{"code":"otherBits","type":"codeVoice"},{"type":"text","text":" match"},{"type":"text","text":" "},{"type":"text","text":"and are set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":" in the output value:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let firstBits: UInt8 = 0b00010100","let otherBits: UInt8 = 0b00000101","let outputBits = firstBits ^ otherBits  \/\/ equals 00010001"]},{"text":"Bitwise Left and Right Shift Operators","type":"heading","level":3,"anchor":"Bitwise-Left-and-Right-Shift-Operators"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"bitwise left shift operator","type":"text"}]},{"type":"text","text":" ("},{"code":"<<","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"inlineContent":[{"text":"bitwise right shift operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":">>"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"move all bits in a number to the left or the right by a certain number of places,","type":"text"},{"text":" ","type":"text"},{"text":"according to the rules defined below.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Bitwise left and right shifts have the effect of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"multiplying or dividing an integer by a factor of two."},{"type":"text","text":" "},{"text":"Shifting an integer’s bits to the left by one position doubles its value,","type":"text"},{"text":" ","type":"text"},{"text":"whereas shifting it to the right by one position halves its value.","type":"text"}]},{"text":"Shifting Behavior for Unsigned Integers","anchor":"Shifting-Behavior-for-Unsigned-Integers","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The bit-shifting behavior for unsigned integers is as follows:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Existing bits are moved to the left or right by the requested number of places."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Any bits that are moved beyond the bounds of the integer’s storage are discarded."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Zeros are inserted in the spaces left behind"},{"type":"text","text":" "},{"type":"text","text":"after the original bits are moved to the left or right."}]}]}]},{"inlineContent":[{"text":"This approach is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"logical shift"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The illustration below shows the results of ","type":"text"},{"type":"codeVoice","code":"11111111 << 1"},{"type":"text","text":" "},{"text":"(which is ","type":"text"},{"type":"codeVoice","code":"11111111"},{"type":"text","text":" shifted to the left by "},{"type":"codeVoice","code":"1"},{"type":"text","text":" place),"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"11111111 >> 1"},{"type":"text","text":" "},{"text":"(which is ","type":"text"},{"type":"codeVoice","code":"11111111"},{"type":"text","text":" shifted to the right by "},{"code":"1","type":"codeVoice"},{"type":"text","text":" place)."},{"type":"text","text":" "},{"text":"Green numbers are shifted,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"gray numbers are discarded,"},{"text":" ","type":"text"},{"text":"and pink zeros are inserted:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"bitshiftUnsigned","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how bit shifting looks in Swift code:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let shiftBits: UInt8 = 4   \/\/ 00000100 in binary","shiftBits << 1             \/\/ 00001000","shiftBits << 2             \/\/ 00010000","shiftBits << 5             \/\/ 10000000","shiftBits << 6             \/\/ 00000000","shiftBits >> 2             \/\/ 00000001"]},{"inlineContent":[{"text":"You can use bit shifting to encode and decode values within other data types:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let pink: UInt32 = 0xCC6699","let redComponent = (pink & 0xFF0000) >> 16    \/\/ redComponent is 0xCC, or 204","let greenComponent = (pink & 0x00FF00) >> 8   \/\/ greenComponent is 0x66, or 102","let blueComponent = pink & 0x0000FF           \/\/ blueComponent is 0x99, or 153"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses a "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":" constant called "},{"code":"pink","type":"codeVoice"},{"text":" to store a","type":"text"},{"type":"text","text":" "},{"text":"Cascading Style Sheets color value for the color pink.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The CSS color value "},{"code":"#CC6699","type":"codeVoice"},{"text":" is written as","type":"text"},{"text":" ","type":"text"},{"code":"0xCC6699","type":"codeVoice"},{"type":"text","text":" in Swift’s hexadecimal number representation."},{"type":"text","text":" "},{"type":"text","text":"This color is then decomposed into its"},{"type":"text","text":" "},{"text":"red (","type":"text"},{"type":"codeVoice","code":"CC"},{"text":"), green (","type":"text"},{"type":"codeVoice","code":"66"},{"type":"text","text":"), and blue ("},{"type":"codeVoice","code":"99"},{"text":") components","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by the bitwise AND operator ("},{"code":"&","type":"codeVoice"},{"type":"text","text":") and the bitwise right shift operator ("},{"type":"codeVoice","code":">>"},{"type":"text","text":")."}]},{"inlineContent":[{"type":"text","text":"The red component is obtained by performing a bitwise AND"},{"text":" ","type":"text"},{"text":"between the numbers ","type":"text"},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" and "},{"type":"codeVoice","code":"0xFF0000"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The zeros in ","type":"text"},{"type":"codeVoice","code":"0xFF0000"},{"type":"text","text":" effectively “mask” the second and third bytes of "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"causing the ","type":"text"},{"type":"codeVoice","code":"6699"},{"type":"text","text":" to be ignored and leaving "},{"type":"codeVoice","code":"0xCC0000"},{"text":" as the result.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This number is then shifted 16 places to the right (","type":"text"},{"code":">> 16","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Each pair of characters in a hexadecimal number uses 8 bits,"},{"text":" ","type":"text"},{"text":"so a move 16 places to the right will convert ","type":"text"},{"type":"codeVoice","code":"0xCC0000"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"0x0000CC"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This is the same as "},{"code":"0xCC","type":"codeVoice"},{"type":"text","text":", which has a decimal value of "},{"code":"204","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, the green component is obtained by performing a bitwise AND"},{"text":" ","type":"text"},{"type":"text","text":"between the numbers "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" and "},{"type":"codeVoice","code":"0x00FF00"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which gives an output value of ","type":"text"},{"type":"codeVoice","code":"0x006600"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This output value is then shifted eight places to the right,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"giving a value of "},{"type":"codeVoice","code":"0x66"},{"text":", which has a decimal value of ","type":"text"},{"code":"102","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Finally, the blue component is obtained by performing a bitwise AND","type":"text"},{"type":"text","text":" "},{"text":"between the numbers ","type":"text"},{"type":"codeVoice","code":"0xCC6699"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"0x0000FF"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which gives an output value of "},{"type":"codeVoice","code":"0x000099"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"0x000099"},{"type":"text","text":" already equals "},{"type":"codeVoice","code":"0x99"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which has a decimal value of "},{"code":"153","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"this value is used without shifting it to the right,"}],"type":"paragraph"},{"level":4,"type":"heading","text":"Shifting Behavior for Signed Integers","anchor":"Shifting-Behavior-for-Signed-Integers"},{"inlineContent":[{"text":"The shifting behavior is more complex for signed integers than for unsigned integers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because of the way signed integers are represented in binary."},{"type":"text","text":" "},{"text":"(The examples below are based on 8-bit signed integers for simplicity,","type":"text"},{"type":"text","text":" "},{"text":"but the same principles apply for signed integers of any size.)","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Signed integers use their first bit (known as the "},{"inlineContent":[{"type":"text","text":"sign bit"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to indicate whether the integer is positive or negative."},{"type":"text","text":" "},{"type":"text","text":"A sign bit of "},{"code":"0","type":"codeVoice"},{"type":"text","text":" means positive, and a sign bit of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" means negative."}]},{"type":"paragraph","inlineContent":[{"text":"The remaining bits (known as the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"value bits"}]},{"text":") store the actual value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Positive numbers are stored in exactly the same way as for unsigned integers,"},{"type":"text","text":" "},{"type":"text","text":"counting upwards from "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s how the bits inside an "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":" look for the number "},{"code":"4","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"bitshiftSignedFour","type":"image"}]},{"inlineContent":[{"type":"text","text":"The sign bit is "},{"code":"0","type":"codeVoice"},{"text":" (meaning “positive”),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the seven value bits are just the number "},{"code":"4","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"written in binary notation."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Negative numbers, however, are stored differently.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They’re stored by subtracting their absolute value from "},{"type":"codeVoice","code":"2"},{"type":"text","text":" to the power of "},{"type":"codeVoice","code":"n"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"codeVoice","code":"n"},{"text":" is the number of value bits.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An eight-bit number has seven value bits,"},{"type":"text","text":" "},{"type":"text","text":"so this means "},{"type":"codeVoice","code":"2"},{"text":" to the power of ","type":"text"},{"type":"codeVoice","code":"7"},{"type":"text","text":", or "},{"code":"128","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how the bits inside an ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" look for the number "},{"type":"codeVoice","code":"-4"},{"text":":","type":"text"}]},{"inlineContent":[{"identifier":"bitshiftSignedMinusFour","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This time, the sign bit is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" (meaning “negative”),"},{"type":"text","text":" "},{"type":"text","text":"and the seven value bits have a binary value of "},{"type":"codeVoice","code":"124"},{"type":"text","text":" (which is "},{"code":"128 - 4","type":"codeVoice"},{"text":"):","type":"text"}]},{"inlineContent":[{"identifier":"bitshiftSignedMinusFourValue","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This encoding for negative numbers is known as a "},{"inlineContent":[{"type":"text","text":"two’s complement"}],"type":"emphasis"},{"text":" representation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It may seem an unusual way to represent negative numbers,"},{"text":" ","type":"text"},{"type":"text","text":"but it has several advantages."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, you can add "},{"code":"-1","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"-4"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"simply by performing a standard binary addition of all eight bits","type":"text"},{"text":" ","type":"text"},{"text":"(including the sign bit),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and discarding anything that doesn’t fit in the eight bits once you’re done:"}]},{"inlineContent":[{"type":"image","identifier":"bitshiftSignedAddition"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Second, the two’s complement representation also lets you"},{"text":" ","type":"text"},{"type":"text","text":"shift the bits of negative numbers to the left and right like positive numbers,"},{"type":"text","text":" "},{"type":"text","text":"and still end up doubling them for every shift you make to the left,"},{"text":" ","type":"text"},{"type":"text","text":"or halving them for every shift you make to the right."},{"text":" ","type":"text"},{"type":"text","text":"To achieve this, an extra rule is used when signed integers are shifted to the right:"},{"type":"text","text":" "},{"text":"When you shift signed integers to the right,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"apply the same rules as for unsigned integers,"},{"type":"text","text":" "},{"type":"text","text":"but fill any empty bits on the left with the "},{"inlineContent":[{"type":"text","text":"sign bit"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than with a zero."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"bitshiftSigned"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This action ensures that signed integers have the same sign after they’re shifted to the right,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is known as an "},{"type":"emphasis","inlineContent":[{"text":"arithmetic shift","type":"text"}]},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of the special way that positive and negative numbers are stored,"},{"text":" ","type":"text"},{"type":"text","text":"shifting either of them to the right moves them closer to zero."},{"text":" ","type":"text"},{"text":"Keeping the sign bit the same during this shift means that","type":"text"},{"text":" ","type":"text"},{"text":"negative integers remain negative as their value moves closer to zero.","type":"text"}]},{"text":"Overflow Operators","level":2,"anchor":"Overflow-Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you try to insert a number into an integer constant or variable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can’t hold that value,"},{"text":" ","type":"text"},{"type":"text","text":"by default Swift reports an error rather than allowing an invalid value to be created."},{"type":"text","text":" "},{"text":"This behavior gives extra safety when you work with numbers that are too large or too small.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Int16"},{"type":"text","text":" integer type can hold"},{"type":"text","text":" "},{"text":"any signed integer between ","type":"text"},{"type":"codeVoice","code":"-32768"},{"type":"text","text":" and "},{"type":"codeVoice","code":"32767"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Trying to set an "},{"type":"codeVoice","code":"Int16"},{"text":" constant or variable to a number outside of this range","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"causes an error:"}]},{"syntax":"swift","type":"codeListing","code":["var potentialOverflow = Int16.max","\/\/ potentialOverflow equals 32767, which is the maximum value an Int16 can hold","potentialOverflow += 1","\/\/ this causes an error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Providing error handling when values get too large or too small"},{"text":" ","type":"text"},{"type":"text","text":"gives you much more flexibility when coding for boundary value conditions."}]},{"inlineContent":[{"text":"However, when you specifically want an overflow condition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to truncate the number of available bits,"},{"type":"text","text":" "},{"type":"text","text":"you can opt in to this behavior rather than triggering an error."},{"text":" ","type":"text"},{"text":"Swift provides three arithmetic ","type":"text"},{"inlineContent":[{"text":"overflow operators","type":"text"}],"type":"emphasis"},{"text":" that opt in to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the overflow behavior for integer calculations."},{"text":" ","type":"text"},{"type":"text","text":"These operators all begin with an ampersand ("},{"type":"codeVoice","code":"&"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Overflow addition ("},{"type":"codeVoice","code":"&+"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Overflow subtraction ("},{"type":"codeVoice","code":"&-"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Overflow multiplication ("},{"code":"&*","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]}]},{"anchor":"Value-Overflow","type":"heading","text":"Value Overflow","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Numbers can overflow in both the positive and negative direction."}]},{"inlineContent":[{"type":"text","text":"Here’s an example of what happens when"},{"text":" ","type":"text"},{"type":"text","text":"an unsigned integer is allowed to overflow in the positive direction,"},{"text":" ","type":"text"},{"text":"using the overflow addition operator (","type":"text"},{"code":"&+","type":"codeVoice"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var unsignedOverflow = UInt8.max","\/\/ unsignedOverflow equals 255, which is the maximum value a UInt8 can hold","unsignedOverflow = unsignedOverflow &+ 1","\/\/ unsignedOverflow is now equal to 0"]},{"inlineContent":[{"text":"The variable ","type":"text"},{"type":"codeVoice","code":"unsignedOverflow"},{"type":"text","text":" is initialized with the maximum value a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" can hold"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"255","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"11111111","type":"codeVoice"},{"type":"text","text":" in binary)."},{"text":" ","type":"text"},{"type":"text","text":"It’s then incremented by "},{"type":"codeVoice","code":"1"},{"text":" using the overflow addition operator (","type":"text"},{"code":"&+","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"This pushes its binary representation just over the size that a ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" can hold,"},{"type":"text","text":" "},{"type":"text","text":"causing it to overflow beyond its bounds,"},{"text":" ","type":"text"},{"text":"as shown in the diagram below.","type":"text"},{"type":"text","text":" "},{"text":"The value that remains within the bounds of the ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" "},{"text":"after the overflow addition is ","type":"text"},{"type":"codeVoice","code":"00000000"},{"text":", or zero.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"overflowAddition","type":"image"}]},{"inlineContent":[{"type":"text","text":"Something similar happens when"},{"text":" ","type":"text"},{"text":"an unsigned integer is allowed to overflow in the negative direction.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s an example using the overflow subtraction operator ("},{"type":"codeVoice","code":"&-"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","code":["var unsignedOverflow = UInt8.min","\/\/ unsignedOverflow equals 0, which is the minimum value a UInt8 can hold","unsignedOverflow = unsignedOverflow &- 1","\/\/ unsignedOverflow is now equal to 255"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The minimum value that a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" can hold is zero,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"00000000"},{"type":"text","text":" in binary."},{"type":"text","text":" "},{"text":"If you subtract ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" from ","type":"text"},{"code":"00000000","type":"codeVoice"},{"type":"text","text":" using the overflow subtraction operator ("},{"type":"codeVoice","code":"&-"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"the number will overflow and wrap around to ","type":"text"},{"code":"11111111","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"255"},{"type":"text","text":" in decimal."}],"type":"paragraph"},{"inlineContent":[{"identifier":"overflowUnsignedSubtraction","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"Overflow also occurs for signed integers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"All addition and subtraction for signed integers is performed in bitwise fashion,"},{"text":" ","type":"text"},{"text":"with the sign bit included as part of the numbers being added or subtracted,","type":"text"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["var signedOverflow = Int8.min","\/\/ signedOverflow equals -128, which is the minimum value an Int8 can hold","signedOverflow = signedOverflow &- 1","\/\/ signedOverflow is now equal to 127"],"syntax":"swift"},{"inlineContent":[{"text":"The minimum value that an ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" can hold is ","type":"text"},{"type":"codeVoice","code":"-128"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"10000000"},{"text":" in binary.","type":"text"},{"type":"text","text":" "},{"text":"Subtracting ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" from this binary number with the overflow operator"},{"type":"text","text":" "},{"text":"gives a binary value of ","type":"text"},{"code":"01111111","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which toggles the sign bit and gives positive ","type":"text"},{"type":"codeVoice","code":"127"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the maximum positive value that an ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" can hold."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"overflowSignedSubtraction"}]},{"type":"paragraph","inlineContent":[{"text":"For both signed and unsigned integers,","type":"text"},{"type":"text","text":" "},{"text":"overflow in the positive direction","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"wraps around from the maximum valid integer value back to the minimum,"},{"text":" ","type":"text"},{"type":"text","text":"and overflow in the negative direction"},{"text":" ","type":"text"},{"type":"text","text":"wraps around from the minimum value to the maximum."}]},{"type":"heading","level":2,"anchor":"Precedence-and-Associativity","text":"Precedence and Associativity"},{"type":"paragraph","inlineContent":[{"text":"Operator ","type":"text"},{"inlineContent":[{"type":"text","text":"precedence"}],"type":"emphasis"},{"type":"text","text":" gives some operators higher priority than others;"},{"type":"text","text":" "},{"type":"text","text":"these operators are applied first."}]},{"type":"paragraph","inlineContent":[{"text":"Operator ","type":"text"},{"inlineContent":[{"text":"associativity","type":"text"}],"type":"emphasis"},{"type":"text","text":" defines how operators of the same precedence"},{"type":"text","text":" "},{"text":"are grouped together —","type":"text"},{"type":"text","text":" "},{"text":"either grouped from the left, or grouped from the right.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Think of it as meaning “they associate with the expression to their left,”"},{"type":"text","text":" "},{"type":"text","text":"or “they associate with the expression to their right.”"}]},{"type":"paragraph","inlineContent":[{"text":"It’s important to consider","type":"text"},{"type":"text","text":" "},{"text":"each operator’s precedence and associativity","type":"text"},{"type":"text","text":" "},{"text":"when working out the order in which a compound expression will be calculated.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"operator precedence explains why the following expression equals "},{"code":"17","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["2 + 3 % 4 * 5","\/\/ this equals 17"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you read strictly from left to right,","type":"text"},{"type":"text","text":" "},{"text":"you might expect the expression to be calculated as follows:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"2","type":"codeVoice"},{"type":"text","text":" plus "},{"code":"3","type":"codeVoice"},{"text":" equals ","type":"text"},{"type":"codeVoice","code":"5"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"5"},{"type":"text","text":" remainder "},{"code":"4","type":"codeVoice"},{"type":"text","text":" equals "},{"code":"1","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1"},{"type":"text","text":" times "},{"type":"codeVoice","code":"5"},{"type":"text","text":" equals "},{"type":"codeVoice","code":"5"}]}]}]},{"inlineContent":[{"type":"text","text":"However, the actual answer is "},{"code":"17","type":"codeVoice"},{"type":"text","text":", not "},{"code":"5","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Higher-precedence operators are evaluated before lower-precedence ones.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In Swift, as in C,"},{"text":" ","type":"text"},{"text":"the remainder operator (","type":"text"},{"code":"%","type":"codeVoice"},{"type":"text","text":") and the multiplication operator ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"have a higher precedence than the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"As a result, they’re both evaluated before the addition is considered."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, remainder and multiplication have the "},{"type":"emphasis","inlineContent":[{"text":"same","type":"text"}]},{"text":" precedence as each other.","type":"text"},{"text":" ","type":"text"},{"text":"To work out the exact evaluation order to use,","type":"text"},{"text":" ","type":"text"},{"text":"you also need to consider their associativity.","type":"text"},{"type":"text","text":" "},{"text":"Remainder and multiplication both associate with the expression to their left.","type":"text"},{"text":" ","type":"text"},{"text":"Think of this as adding implicit parentheses around these parts of the expression,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"starting from their left:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["2 + ((3 % 4) * 5)"]},{"inlineContent":[{"type":"codeVoice","code":"(3 % 4)"},{"type":"text","text":" is "},{"type":"codeVoice","code":"3"},{"type":"text","text":", so this is equivalent to:"}],"type":"paragraph"},{"code":["2 + (3 * 5)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"(3 * 5)"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"15"},{"text":", so this is equivalent to:","type":"text"}],"type":"paragraph"},{"code":["2 + 15"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This calculation yields the final answer of "},{"type":"codeVoice","code":"17"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For information about the operators provided by the Swift standard library,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including a complete list of the operator precedence groups and associativity settings,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Swift’s operator precedences and associativity rules are simpler and more predictable"},{"type":"text","text":" "},{"type":"text","text":"than those found in C and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"However, this means that they aren’t exactly the same as in C-based languages."},{"type":"text","text":" "},{"type":"text","text":"Be careful to ensure that operator interactions still behave in the way you intend"},{"text":" ","type":"text"},{"type":"text","text":"when porting existing code to Swift."}],"type":"paragraph"}],"name":"Note"},{"text":"Operator Methods","level":2,"type":"heading","anchor":"Operator-Methods"},{"type":"paragraph","inlineContent":[{"text":"Classes and structures can provide their own implementations of existing operators.","type":"text"},{"text":" ","type":"text"},{"text":"This is known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"overloading"}]},{"type":"text","text":" the existing operators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below shows how to implement"},{"type":"text","text":" "},{"type":"text","text":"the arithmetic addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") for a custom structure."},{"text":" ","type":"text"},{"text":"The arithmetic addition operator is a binary operator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because it operates on two targets"},{"type":"text","text":" "},{"type":"text","text":"and it’s an infix operator because it appears between those two targets."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example defines a "},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":" structure for"},{"text":" ","type":"text"},{"text":"a two-dimensional position vector ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"followed by a definition of an "},{"inlineContent":[{"type":"text","text":"operator method"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"to add together instances of the "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" structure:"}]},{"syntax":"swift","code":["struct Vector2D {","    var x = 0.0, y = 0.0","}","","extension Vector2D {","    static func + (left: Vector2D, right: Vector2D) -> Vector2D {","       return Vector2D(x: left.x + right.x, y: left.y + right.y)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The operator method is defined as a type method on ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a method name that matches the operator to be overloaded ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"Because addition isn’t part of the essential behavior for a vector,"},{"type":"text","text":" "},{"type":"text","text":"the type method is defined in an extension of "},{"code":"Vector2D","type":"codeVoice"},{"text":" ","type":"text"},{"text":"rather than in the main structure declaration of ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Because the arithmetic addition operator is a binary operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this operator method takes two input parameters of type "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" "},{"type":"text","text":"and returns a single output value, also of type "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"In this implementation, the input parameters are named ","type":"text"},{"type":"codeVoice","code":"left"},{"type":"text","text":" and "},{"type":"codeVoice","code":"right"},{"text":" ","type":"text"},{"type":"text","text":"to represent the "},{"type":"codeVoice","code":"Vector2D"},{"text":" instances that will be on","type":"text"},{"text":" ","type":"text"},{"text":"the left side and right side of the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator."},{"text":" ","type":"text"},{"text":"The method returns a new ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whose "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"code":"y","type":"codeVoice"},{"type":"text","text":" properties are"},{"type":"text","text":" "},{"type":"text","text":"initialized with the sum of the "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" properties from"},{"type":"text","text":" "},{"type":"text","text":"the two "},{"code":"Vector2D","type":"codeVoice"},{"text":" instances that are added together.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The type method","type":"text"},{"text":" ","type":"text"},{"text":"can be used as an infix operator between existing ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances:"}],"type":"paragraph"},{"code":["let vector = Vector2D(x: 3.0, y: 1.0)","let anotherVector = Vector2D(x: 2.0, y: 4.0)","let combinedVector = vector + anotherVector","\/\/ combinedVector is a Vector2D instance with values of (5.0, 5.0)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example adds together the vectors "},{"type":"codeVoice","code":"(3.0, 1.0)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"(2.0, 4.0)"},{"type":"text","text":" "},{"text":"to make the vector ","type":"text"},{"code":"(5.0, 5.0)","type":"codeVoice"},{"type":"text","text":", as illustrated below."}]},{"type":"paragraph","inlineContent":[{"identifier":"vectorAddition","type":"image"}]},{"type":"heading","level":3,"text":"Prefix and Postfix Operators","anchor":"Prefix-and-Postfix-Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example shown above demonstrates a custom implementation of a binary infix operator."},{"text":" ","type":"text"},{"type":"text","text":"Classes and structures can also provide implementations"},{"type":"text","text":" "},{"text":"of the standard ","type":"text"},{"inlineContent":[{"text":"unary operators","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unary operators operate on a single target."},{"type":"text","text":" "},{"type":"text","text":"They’re "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"text":" if they precede their target (such as ","type":"text"},{"type":"codeVoice","code":"-a"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"postfix"}]},{"text":" operators if they follow their target (such as ","type":"text"},{"code":"b!","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You implement a prefix or postfix unary operator by writing"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"postfix"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword when declaring the operator method:"}]},{"type":"codeListing","code":["extension Vector2D {","    static prefix func - (vector: Vector2D) -> Vector2D {","        return Vector2D(x: -vector.x, y: -vector.y)","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The example above implements the unary minus operator"},{"type":"text","text":" "},{"text":"(","type":"text"},{"type":"codeVoice","code":"-a"},{"text":") for ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"The unary minus operator is a prefix operator,"},{"type":"text","text":" "},{"text":"and so this method has to be qualified with the ","type":"text"},{"type":"codeVoice","code":"prefix"},{"type":"text","text":" modifier."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For simple numeric values, the unary minus operator converts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"positive numbers into their negative equivalent and vice versa."},{"type":"text","text":" "},{"type":"text","text":"The corresponding implementation for "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances"},{"type":"text","text":" "},{"text":"performs this operation on both the ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"code":"y","type":"codeVoice"},{"text":" properties:","type":"text"}]},{"code":["let positive = Vector2D(x: 3.0, y: 4.0)","let negative = -positive","\/\/ negative is a Vector2D instance with values of (-3.0, -4.0)","let alsoPositive = -negative","\/\/ alsoPositive is a Vector2D instance with values of (3.0, 4.0)"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Compound Assignment Operators","level":3,"anchor":"Compound-Assignment-Operators"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Compound assignment operators"}]},{"type":"text","text":" combine assignment ("},{"type":"codeVoice","code":"="},{"text":") with another operation.","type":"text"},{"type":"text","text":" "},{"text":"For example, the addition assignment operator (","type":"text"},{"code":"+=","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"combines addition and assignment into a single operation."},{"type":"text","text":" "},{"type":"text","text":"You mark a compound assignment operator’s left input parameter type as "},{"type":"codeVoice","code":"inout"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the parameter’s value will be modified directly from within the operator method."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below implements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an addition assignment operator method for "},{"type":"codeVoice","code":"Vector2D"},{"text":" instances:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Vector2D {","    static func += (left: inout Vector2D, right: Vector2D) {","        left = left + right","    }","}"]},{"inlineContent":[{"type":"text","text":"Because an addition operator was defined earlier,"},{"type":"text","text":" "},{"text":"you don’t need to reimplement the addition process here.","type":"text"},{"type":"text","text":" "},{"text":"Instead, the addition assignment operator method","type":"text"},{"text":" ","type":"text"},{"text":"takes advantage of the existing addition operator method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and uses it to set the left value to be the left value plus the right value:"}],"type":"paragraph"},{"syntax":"swift","code":["var original = Vector2D(x: 1.0, y: 2.0)","let vectorToAdd = Vector2D(x: 3.0, y: 4.0)","original += vectorToAdd","\/\/ original now has values of (4.0, 6.0)"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"It isn’t possible to overload the default"},{"text":" ","type":"text"},{"text":"assignment operator (","type":"text"},{"code":"=","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Only the compound assignment operators can be overloaded.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, the ternary conditional operator"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"a ? b : c","type":"codeVoice"},{"text":") can’t be overloaded.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"level":3,"text":"Equivalence Operators","anchor":"Equivalence-Operators","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"By default, custom classes and structures don’t have an implementation of","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"inlineContent":[{"text":"equivalence operators","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal to"}]},{"type":"text","text":" operator ("},{"code":"==","type":"codeVoice"},{"type":"text","text":") and "},{"inlineContent":[{"text":"not equal to","type":"text"}],"type":"emphasis"},{"text":" operator (","type":"text"},{"type":"codeVoice","code":"!="},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You usually implement the "},{"code":"==","type":"codeVoice"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"type":"text","text":"and use the Swift standard library’s default implementation of the "},{"type":"codeVoice","code":"!="},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that negates the result of the "},{"type":"codeVoice","code":"=="},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"There are two ways to implement the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator:"},{"type":"text","text":" "},{"text":"You can implement it yourself,","type":"text"},{"type":"text","text":" "},{"text":"or for many types, you can ask Swift to synthesize","type":"text"},{"text":" ","type":"text"},{"text":"an implementation for you.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In both cases,"},{"type":"text","text":" "},{"text":"you add conformance to the Swift standard library’s ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"You provide an implementation of the "},{"code":"==","type":"codeVoice"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the same way as you implement other infix operators:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Vector2D: Equatable {","    static func == (left: Vector2D, right: Vector2D) -> Bool {","       return (left.x == right.x) && (left.y == right.y)","    }","}"]},{"inlineContent":[{"type":"text","text":"The example above implements an "},{"type":"codeVoice","code":"=="},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to check whether two "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances have equivalent values."},{"type":"text","text":" "},{"text":"In the context of ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it makes sense to consider “equal” as meaning"},{"type":"text","text":" "},{"type":"text","text":"“both instances have the same "},{"code":"x","type":"codeVoice"},{"text":" values and ","type":"text"},{"code":"y","type":"codeVoice"},{"type":"text","text":" values”,"},{"text":" ","type":"text"},{"type":"text","text":"and so this is the logic used by the operator implementation."}],"type":"paragraph"},{"inlineContent":[{"text":"You can now use this operator to check whether two ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" instances are equivalent:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let twoThree = Vector2D(x: 2.0, y: 3.0)","let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)","if twoThree == anotherTwoThree {","    print(\"These two vectors are equivalent.\")","}","\/\/ Prints \"These two vectors are equivalent.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In many simple cases, you can ask Swift"},{"text":" ","type":"text"},{"type":"text","text":"to provide synthesized implementations of the equivalence operators for you,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","isActive":true},{"type":"text","text":"."}]},{"text":"Custom Operators","level":2,"type":"heading","anchor":"Custom-Operators"},{"inlineContent":[{"type":"text","text":"You can declare and implement your own "},{"type":"emphasis","inlineContent":[{"text":"custom operators","type":"text"}]},{"text":" in addition to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the standard operators provided by Swift."},{"text":" ","type":"text"},{"text":"For a list of characters that can be used to define custom operators,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"New operators are declared at a global level using the ","type":"text"},{"type":"codeVoice","code":"operator"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"text":"and are marked with the ","type":"text"},{"type":"codeVoice","code":"prefix"},{"type":"text","text":", "},{"type":"codeVoice","code":"infix"},{"text":" or ","type":"text"},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" modifiers:"}]},{"syntax":"swift","type":"codeListing","code":["prefix operator +++"]},{"inlineContent":[{"type":"text","text":"The example above defines a new prefix operator called "},{"code":"+++","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This operator doesn’t have an existing meaning in Swift,"},{"type":"text","text":" "},{"type":"text","text":"and so it’s given its own custom meaning below in the specific context of"},{"type":"text","text":" "},{"type":"text","text":"working with "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances. For the purposes of this example,"},{"type":"text","text":" "},{"code":"+++","type":"codeVoice"},{"type":"text","text":" is treated as a new “prefix doubling” operator."},{"type":"text","text":" "},{"text":"It doubles the ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"text":" values of a ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"by adding the vector to itself with the addition assignment operator defined earlier."},{"text":" ","type":"text"},{"type":"text","text":"To implement the "},{"code":"+++","type":"codeVoice"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"type":"text","text":"you add a type method called "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Vector2D"},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Vector2D {","    static prefix func +++ (vector: inout Vector2D) -> Vector2D {","        vector += vector","        return vector","    }","}","","var toBeDoubled = Vector2D(x: 1.0, y: 4.0)","let afterDoubling = +++toBeDoubled","\/\/ toBeDoubled now has values of (2.0, 8.0)","\/\/ afterDoubling also has values of (2.0, 8.0)"]},{"anchor":"Precedence-for-Custom-Infix-Operators","level":3,"type":"heading","text":"Precedence for Custom Infix Operators"},{"inlineContent":[{"type":"text","text":"Custom infix operators each belong to a precedence group."},{"type":"text","text":" "},{"type":"text","text":"A precedence group specifies an operator’s precedence relative"},{"type":"text","text":" "},{"type":"text","text":"to other infix operators, as well as the operator’s associativity."},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Precedence-and-Associativity","isActive":true},{"text":" for an explanation of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how these characteristics affect an infix operator’s interaction"},{"text":" ","type":"text"},{"type":"text","text":"with other infix operators."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A custom infix operator that isn’t explicitly placed into a precedence group is"},{"text":" ","type":"text"},{"text":"given a default precedence group with a precedence immediately higher","type":"text"},{"type":"text","text":" "},{"text":"than the precedence of the ternary conditional operator.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new custom infix operator called "},{"code":"+-","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which belongs to the precedence group "},{"code":"AdditionPrecedence","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["infix operator +-: AdditionPrecedence","extension Vector2D {","    static func +- (left: Vector2D, right: Vector2D) -> Vector2D {","        return Vector2D(x: left.x + right.x, y: left.y - right.y)","    }","}","let firstVector = Vector2D(x: 1.0, y: 2.0)","let secondVector = Vector2D(x: 3.0, y: 4.0)","let plusMinusVector = firstVector +- secondVector","\/\/ plusMinusVector is a Vector2D instance with values of (4.0, -2.0)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator adds together the "},{"type":"codeVoice","code":"x"},{"text":" values of two vectors,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and subtracts the "},{"type":"codeVoice","code":"y"},{"type":"text","text":" value of the second vector from the first."},{"type":"text","text":" "},{"text":"Because it’s in essence an “additive” operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it has been given the same precedence group"},{"type":"text","text":" "},{"type":"text","text":"as additive infix operators such as "},{"code":"+","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"-"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For information about the operators provided by the Swift standard library,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including a complete list of the operator precedence groups and associativity settings,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","overridingTitle":"Operator Declarations","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","overridingTitleInlineContent":[{"type":"text","text":"Operator Declarations"}],"isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information about precedence groups and to see the syntax for"},{"type":"text","text":" "},{"type":"text","text":"defining your own operators and precedence groups,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"You don’t specify a precedence when defining a prefix or postfix operator."},{"text":" ","type":"text"},{"text":"However, if you apply both a prefix and a postfix operator to the same operand,","type":"text"},{"text":" ","type":"text"},{"text":"the postfix operator is applied first.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"level":2,"type":"heading","text":"Result Builders","anchor":"Result-Builders"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"result builder","type":"text"}],"type":"emphasis"},{"text":" is a type you define","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that adds syntax for creating nested data,"},{"type":"text","text":" "},{"type":"text","text":"like a list or tree,"},{"type":"text","text":" "},{"text":"in a natural, declarative way.","type":"text"},{"text":" ","type":"text"},{"text":"The code that uses the result builder","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can include ordinary Swift syntax, like "},{"type":"codeVoice","code":"if"},{"type":"text","text":"  and "},{"type":"codeVoice","code":"for"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to handle conditional or repeated pieces of data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code below defines a few types for drawing on a single line"},{"type":"text","text":" "},{"type":"text","text":"using stars and text."}]},{"type":"codeListing","syntax":"swift","code":["protocol Drawable {","    func draw() -> String","}","struct Line: Drawable {","    var elements: [Drawable]","    func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Space: Drawable {","    func draw() -> String { return \" \" }","}","struct Stars: Drawable {","    var length: Int","    func draw() -> String { return String(repeating: \"*\", count: length) }","}","struct AllCaps: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw().uppercased() }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Drawable","type":"codeVoice"},{"text":" protocol defines the requirement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for something that can be drawn, like a line or shape:"},{"text":" ","type":"text"},{"text":"The type must implement a ","type":"text"},{"code":"draw()","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Line","type":"codeVoice"},{"type":"text","text":" structure represents a single-line drawing,"},{"type":"text","text":" "},{"type":"text","text":"and it serves the top-level container for most drawings."},{"text":" ","type":"text"},{"text":"To draw a ","type":"text"},{"type":"codeVoice","code":"Line"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the structure calls "},{"type":"codeVoice","code":"draw()"},{"type":"text","text":" on each of the line’s components,"},{"text":" ","type":"text"},{"text":"and then concatenates the resulting strings into a single string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Text"},{"type":"text","text":" structure wraps a string to make it part of a drawing."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"AllCaps"},{"type":"text","text":" structure wraps and modifies another drawing,"},{"type":"text","text":" "},{"type":"text","text":"converting any text in the drawing to uppercase."}]},{"inlineContent":[{"text":"It’s possible to make a drawing with these types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by calling their initializers:"}],"type":"paragraph"},{"syntax":"swift","code":["let name: String? = \"Ravi Patel\"","let manualDrawing = Line(elements: [","     Stars(length: 3),","     Text(\"Hello\"),","     Space(),","     AllCaps(content: Text((name ?? \"World\") + \"!\")),","     Stars(length: 2),","])","print(manualDrawing.draw())","\/\/ Prints \"***Hello RAVI PATEL!**\""],"type":"codeListing"},{"inlineContent":[{"text":"This code works, but it’s a little awkward.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The deeply nested parentheses after "},{"code":"AllCaps","type":"codeVoice"},{"text":" are hard to read.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The fallback logic to use “World” when "},{"type":"codeVoice","code":"name"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"text":"has to be done inline using the ","type":"text"},{"type":"codeVoice","code":"??"},{"text":" operator,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which would be difficult with anything more complex."},{"type":"text","text":" "},{"type":"text","text":"If you needed to include switches or "},{"code":"for","type":"codeVoice"},{"type":"text","text":" loops"},{"text":" ","type":"text"},{"type":"text","text":"to build up part of the drawing, there’s no way to do that."},{"text":" ","type":"text"},{"type":"text","text":"A result builder lets you rewrite code like this"},{"type":"text","text":" "},{"text":"so that it looks like normal Swift code.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To define a result builder,"},{"text":" ","type":"text"},{"text":"you write the ","type":"text"},{"type":"codeVoice","code":"@resultBuilder"},{"text":" attribute on a type declaration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, this code defines a result builder called "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which lets you use a declarative syntax to describe a drawing:"}]},{"type":"codeListing","syntax":"swift","code":["@resultBuilder","struct DrawingBuilder {","    static func buildBlock(_ components: Drawable...) -> Drawable {","        return Line(elements: components)","    }","    static func buildEither(first: Drawable) -> Drawable {","        return first","    }","    static func buildEither(second: Drawable) -> Drawable {","        return second","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":" structure defines three methods"},{"text":" ","type":"text"},{"type":"text","text":"that implement parts of the result builder syntax."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":" method adds support for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"writing a series of lines in a block of code."},{"type":"text","text":" "},{"type":"text","text":"It combines the components in that block into a "},{"code":"Line","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"text":"add support for ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"code":"else","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply the "},{"code":"@DrawingBuilder","type":"codeVoice"},{"type":"text","text":" attribute to a function’s parameter,"},{"text":" ","type":"text"},{"type":"text","text":"which turns a closure passed to the function"},{"text":" ","type":"text"},{"type":"text","text":"into the value that the result builder creates from that closure."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func draw(@DrawingBuilder content: () -> Drawable) -> Drawable {","    return content()","}","func caps(@DrawingBuilder content: () -> Drawable) -> Drawable {","    return AllCaps(content: content())","}","","func makeGreeting(for name: String? = nil) -> Drawable {","    let greeting = draw {","        Stars(length: 3)","        Text(\"Hello\")","        Space()","        caps {","            if let name = name {","                Text(name + \"!\")","            } else {","                Text(\"World!\")","            }","        }","        Stars(length: 2)","    }","    return greeting","}","let genericGreeting = makeGreeting()","print(genericGreeting.draw())","\/\/ Prints \"***Hello WORLD!**\"","","let personalGreeting = makeGreeting(for: \"Ravi Patel\")","print(personalGreeting.draw())","\/\/ Prints \"***Hello RAVI PATEL!**\""]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"makeGreeting(for:)"},{"type":"text","text":" function takes a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"and uses it to draw a personalized greeting."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"draw(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"caps(_:)"},{"text":" functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"both take a single closure as their argument,"},{"text":" ","type":"text"},{"text":"which is marked with the ","type":"text"},{"type":"codeVoice","code":"@DrawingBuilder"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you call those functions,"},{"type":"text","text":" "},{"type":"text","text":"you use the special syntax that "},{"type":"codeVoice","code":"DrawingBuilder"},{"text":" defines.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift transforms that declarative description of a drawing"},{"type":"text","text":" "},{"text":"into a series of calls to the methods on ","type":"text"},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":" "},{"type":"text","text":"to build up the value that’s passed as the function argument."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"Swift transforms the call to "},{"type":"codeVoice","code":"caps(_:)"},{"text":" in that example","type":"text"},{"text":" ","type":"text"},{"text":"into code like the following:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let capsDrawing = caps {","    let partialDrawing: Drawable","    if let name = name {","        let text = Text(name + \"!\")","        partialDrawing = DrawingBuilder.buildEither(first: text)","    } else {","        let text = Text(\"World!\")","        partialDrawing = DrawingBuilder.buildEither(second: text)","    }","    return partialDrawing","}"]},{"inlineContent":[{"text":"Swift transforms the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"code":"else","type":"codeVoice"},{"type":"text","text":" block into"},{"type":"text","text":" "},{"text":"calls to the ","type":"text"},{"type":"codeVoice","code":"buildEither(first:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" methods."},{"text":" ","type":"text"},{"text":"Although you don’t call these methods in your own code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"showing the result of the transformation"},{"type":"text","text":" "},{"text":"makes it easier to see how Swift transforms your code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you use the "},{"code":"DrawingBuilder","type":"codeVoice"},{"type":"text","text":" syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To add support for writing "},{"code":"for","type":"codeVoice"},{"text":" loops in the special drawing syntax,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add a "},{"type":"codeVoice","code":"buildArray(_:)"},{"type":"text","text":" method."}],"type":"paragraph"},{"syntax":"swift","code":["extension DrawingBuilder {","    static func buildArray(_ components: [Drawable]) -> Drawable {","        return Line(elements: components)","    }","}","let manyStars = draw {","    Text(\"Stars:\")","    for length in 1...3 {","        Space()","        Stars(length: length)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In the code above, the ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":" loop creates an array of drawings,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"buildArray(_:)"},{"text":" method turns that array into a ","type":"text"},{"type":"codeVoice","code":"Line"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"For a complete list of how Swift transforms builder syntax","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into calls to the builder type’s methods,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","title":"The Swift Programming Language (5.9.2)","url":"\/documentation\/the-swift-programming-language","role":"collection","kind":"article","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Precedence-and-Associativity":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Precedence-and-Associativity","abstract":[],"kind":"section","title":"Precedence and Associativity","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Precedence-and-Associativity"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"title":"resultBuilder","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators","abstract":[],"kind":"section","title":"Bitwise Left and Right Shift Operators","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Bitwise-Left-and-Right-Shift-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation":{"title":"Adopting a Protocol Using a Synthesized Implementation","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"title":"Basic Operators","url":"\/documentation\/the-swift-programming-language\/basicoperators","abstract":[{"text":"Perform operations like assignment, arithmetic, and comparison.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","kind":"article","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Operators":{"title":"Operators","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Operators","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators"},"vectorAddition":{"identifier":"vectorAddition","variants":[{"url":"\/images\/vectorAddition@2x.png","traits":["2x","light"]},{"url":"\/images\/vectorAddition~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"bitwiseXOR":{"alt":null,"type":"image","variants":[{"url":"\/images\/bitwiseXOR@2x.png","traits":["2x","light"]},{"url":"\/images\/bitwiseXOR~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitwiseXOR"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Operator-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Operator-Declaration","abstract":[],"kind":"section","title":"Operator Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Operator-Declaration"},"bitwiseOR":{"variants":[{"url":"\/images\/bitwiseOR@2x.png","traits":["2x","light"]},{"url":"\/images\/bitwiseOR~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitwiseOR","type":"image","alt":null},"overflowSignedSubtraction":{"identifier":"overflowSignedSubtraction","variants":[{"url":"\/images\/overflowSignedSubtraction@2x.png","traits":["2x","light"]},{"url":"\/images\/overflowSignedSubtraction~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"bitshiftSignedMinusFour":{"variants":[{"url":"\/images\/bitshiftSignedMinusFour@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftSignedMinusFour~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftSignedMinusFour","type":"image","alt":null},"bitwiseNOT":{"identifier":"bitwiseNOT","variants":[{"url":"\/images\/bitwiseNOT@2x.png","traits":["2x","light"]},{"url":"\/images\/bitwiseNOT~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"bitshiftSignedFour":{"variants":[{"url":"\/images\/bitshiftSignedFour@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftSignedFour~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftSignedFour","type":"image","alt":null},"https://developer.apple.com/documentation/swift/operator_declarations":{"title":"Operator Declarations","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","titleInlineContent":[{"type":"text","text":"Operator Declarations"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"bitwiseAND":{"variants":[{"url":"\/images\/bitwiseAND@2x.png","traits":["2x","light"]},{"url":"\/images\/bitwiseAND~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitwiseAND","type":"image","alt":null},"overflowAddition":{"alt":null,"type":"image","variants":[{"url":"\/images\/overflowAddition@2x.png","traits":["2x","light"]},{"url":"\/images\/overflowAddition~dark@2x.png","traits":["2x","dark"]}],"identifier":"overflowAddition"},"bitshiftSigned":{"variants":[{"url":"\/images\/bitshiftSigned@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftSigned~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftSigned","type":"image","alt":null},"bitshiftUnsigned":{"alt":null,"type":"image","variants":[{"url":"\/images\/bitshiftUnsigned@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftUnsigned~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftUnsigned"},"overflowUnsignedSubtraction":{"variants":[{"url":"\/images\/overflowUnsignedSubtraction@2x.png","traits":["2x","light"]},{"url":"\/images\/overflowUnsignedSubtraction~dark@2x.png","traits":["2x","dark"]}],"identifier":"overflowUnsignedSubtraction","type":"image","alt":null},"bitshiftSignedAddition":{"alt":null,"type":"image","variants":[{"url":"\/images\/bitshiftSignedAddition@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftSignedAddition~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftSignedAddition"},"bitshiftSignedMinusFourValue":{"variants":[{"url":"\/images\/bitshiftSignedMinusFourValue@2x.png","traits":["2x","light"]},{"url":"\/images\/bitshiftSignedMinusFourValue~dark@2x.png","traits":["2x","dark"]}],"identifier":"bitshiftSignedMinusFourValue","type":"image","alt":null}}}