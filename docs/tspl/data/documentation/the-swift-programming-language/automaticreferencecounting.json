{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Swift uses "},{"inlineContent":[{"type":"text","text":"Automatic Reference Counting"}],"type":"emphasis"},{"text":" (ARC)","type":"text"},{"type":"text","text":" "},{"text":"to track and manage your app’s memory usage.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In most cases, this means that memory management “just works” in Swift,"},{"text":" ","type":"text"},{"type":"text","text":"and you don’t need to think about memory management yourself."},{"type":"text","text":" "},{"type":"text","text":"ARC automatically frees up the memory used by class instances"},{"type":"text","text":" "},{"type":"text","text":"when those instances are no longer needed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, in a few cases ARC requires more information"},{"type":"text","text":" "},{"type":"text","text":"about the relationships between parts of your code"},{"text":" ","type":"text"},{"text":"in order to manage memory for you.","type":"text"},{"type":"text","text":" "},{"text":"This chapter describes those situations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and shows how you enable ARC to manage all of your app’s memory."},{"text":" ","type":"text"},{"type":"text","text":"Using ARC in Swift is very similar to the approach described in"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","type":"reference"},{"type":"text","text":" "},{"text":"for using ARC with Objective-C.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reference counting applies only to instances of classes."},{"text":" ","type":"text"},{"type":"text","text":"Structures and enumerations are value types, not reference types,"},{"type":"text","text":" "},{"text":"and aren’t stored and passed by reference.","type":"text"}]},{"text":"How ARC Works","anchor":"How-ARC-Works","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every time you create a new instance of a class,"},{"type":"text","text":" "},{"text":"ARC allocates a chunk of memory to store information about that instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This memory holds information about the type of the instance,"},{"type":"text","text":" "},{"text":"together with the values of any stored properties associated with that instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, when an instance is no longer needed,"},{"type":"text","text":" "},{"type":"text","text":"ARC frees up the memory used by that instance"},{"type":"text","text":" "},{"type":"text","text":"so that the memory can be used for other purposes instead."},{"type":"text","text":" "},{"type":"text","text":"This ensures that class instances don’t take up space in memory"},{"text":" ","type":"text"},{"text":"when they’re no longer needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if ARC were to deallocate an instance that was still in use,"},{"type":"text","text":" "},{"type":"text","text":"it would no longer be possible to access that instance’s properties,"},{"type":"text","text":" "},{"type":"text","text":"or call that instance’s methods."},{"text":" ","type":"text"},{"text":"Indeed, if you tried to access the instance, your app would most likely crash.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To make sure that instances don’t disappear while they’re still needed,"},{"text":" ","type":"text"},{"type":"text","text":"ARC tracks how many properties, constants, and variables"},{"type":"text","text":" "},{"text":"are currently referring to each class instance.","type":"text"},{"type":"text","text":" "},{"text":"ARC will not deallocate an instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as long as at least one active reference to that instance still exists."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make this possible,"},{"type":"text","text":" "},{"type":"text","text":"whenever you assign a class instance to a property, constant, or variable,"},{"type":"text","text":" "},{"type":"text","text":"that property, constant, or variable makes a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"strong reference"}]},{"text":" to the instance.","type":"text"},{"text":" ","type":"text"},{"text":"The reference is called a “strong” reference because","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it keeps a firm hold on that instance,"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t allow it to be deallocated for as long as that strong reference remains."}]},{"level":2,"type":"heading","text":"ARC in Action","anchor":"ARC-in-Action"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of how Automatic Reference Counting works.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This example starts with a simple class called "},{"code":"Person","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which defines a stored constant property called "},{"type":"codeVoice","code":"name"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Person {","    let name: String","    init(name: String) {","        self.name = name","        print(\"\\(name) is being initialized\")","    }","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Person","type":"codeVoice"},{"text":" class has an initializer that sets the instance’s ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" property","type":"text"},{"type":"text","text":" "},{"text":"and prints a message to indicate that initialization is underway.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class also has a deinitializer"},{"type":"text","text":" "},{"text":"that prints a message when an instance of the class is deallocated.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next code snippet defines three variables of type "},{"type":"codeVoice","code":"Person?"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which are used to set up multiple references to a new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"text":"in subsequent code snippets.","type":"text"},{"text":" ","type":"text"},{"text":"Because these variables are of an optional type (","type":"text"},{"type":"codeVoice","code":"Person?"},{"type":"text","text":", not "},{"type":"codeVoice","code":"Person"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"they’re automatically initialized with a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and don’t currently reference a ","type":"text"},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance."}]},{"code":["var reference1: Person?","var reference2: Person?","var reference3: Person?"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can now create a new "},{"code":"Person","type":"codeVoice"},{"text":" instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and assign it to one of these three variables:"}],"type":"paragraph"},{"code":["reference1 = Person(name: \"John Appleseed\")","\/\/ Prints \"John Appleseed is being initialized\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Note that the message ","type":"text"},{"type":"codeVoice","code":"\"John Appleseed is being initialized\""},{"text":" is printed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at the point that you call the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class’s initializer."},{"text":" ","type":"text"},{"type":"text","text":"This confirms that initialization has taken place."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because the new "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance has been assigned to the "},{"code":"reference1","type":"codeVoice"},{"text":" variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there’s now a strong reference from "},{"type":"codeVoice","code":"reference1"},{"type":"text","text":" to the new "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"text":"Because there’s at least one strong reference,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ARC makes sure that this "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" is kept in memory and isn’t deallocated."}],"type":"paragraph"},{"inlineContent":[{"text":"If you assign the same ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance to two more variables,"},{"type":"text","text":" "},{"type":"text","text":"two more strong references to that instance are established:"}],"type":"paragraph"},{"code":["reference2 = reference1","reference3 = reference1"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There are now ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"three","type":"text"}]},{"text":" strong references to this single ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance.","type":"text"}]},{"inlineContent":[{"text":"If you break two of these strong references (including the original reference)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by assigning "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to two of the variables,"},{"text":" ","type":"text"},{"text":"a single strong reference remains,","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance isn’t deallocated:"}],"type":"paragraph"},{"syntax":"swift","code":["reference1 = nil","reference2 = nil"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ARC doesn’t deallocate the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance until"},{"type":"text","text":" "},{"text":"the third and final strong reference is broken,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at which point it’s clear that you are no longer using the "},{"code":"Person","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"code":["reference3 = nil","\/\/ Prints \"John Appleseed is being deinitialized\""],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Strong Reference Cycles Between Class Instances","anchor":"Strong-Reference-Cycles-Between-Class-Instances","level":2},{"type":"paragraph","inlineContent":[{"text":"In the examples above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ARC is able to track the number of references to the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance you create"},{"text":" ","type":"text"},{"text":"and to deallocate that ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance when it’s no longer needed.","type":"text"}]},{"inlineContent":[{"type":"text","text":"However, it’s possible to write code in which an instance of a class"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"type":"text","text":" gets to a point where it has zero strong references."},{"type":"text","text":" "},{"type":"text","text":"This can happen if two class instances hold a strong reference to each other,"},{"type":"text","text":" "},{"type":"text","text":"such that each instance keeps the other alive."},{"text":" ","type":"text"},{"text":"This is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"strong reference cycle"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You resolve strong reference cycles","type":"text"},{"text":" ","type":"text"},{"text":"by defining some of the relationships between classes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as weak or unowned references instead of as strong references."},{"type":"text","text":" "},{"text":"This process is described in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, before you learn how to resolve a strong reference cycle,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to understand how such a cycle is caused."}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example of how a strong reference cycle can be created by accident.","type":"text"},{"text":" ","type":"text"},{"text":"This example defines two classes called ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which model a block of apartments and its residents:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Person {","    let name: String","    init(name: String) { self.name = name }","    var apartment: Apartment?","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","    let unit: String","    init(unit: String) { self.unit = unit }","    var tenant: Person?","    deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"]},{"type":"paragraph","inlineContent":[{"text":"Every ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance has a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"text":"and an optional ","type":"text"},{"code":"apartment","type":"codeVoice"},{"text":" property that’s initially ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"apartment","type":"codeVoice"},{"type":"text","text":" property is optional, because a person may not always have an apartment."}]},{"type":"paragraph","inlineContent":[{"text":"Similarly, every ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance has a "},{"code":"unit","type":"codeVoice"},{"text":" property of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"text":"and has an optional ","type":"text"},{"type":"codeVoice","code":"tenant"},{"type":"text","text":" property that’s initially "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The tenant property is optional because an apartment may not always have a tenant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these classes also define a deinitializer,"},{"type":"text","text":" "},{"type":"text","text":"which prints the fact that an instance of that class is being deinitialized."},{"type":"text","text":" "},{"text":"This enables you to see whether","type":"text"},{"type":"text","text":" "},{"text":"instances of ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" are being deallocated as expected."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This next code snippet defines two variables of optional type"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"john"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which will be set to a specific "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Person"},{"text":" instance below.","type":"text"},{"type":"text","text":" "},{"text":"Both of these variables have an initial value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", by virtue of being optional:"}]},{"type":"codeListing","syntax":"swift","code":["var john: Person?","var unit4A: Apartment?"]},{"type":"paragraph","inlineContent":[{"text":"You can now create a specific ","type":"text"},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance and "},{"type":"codeVoice","code":"Apartment"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"text":"and assign these new instances to the ","type":"text"},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"text":" variables:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")"]},{"inlineContent":[{"type":"text","text":"Here’s how the strong references look after creating and assigning these two instances."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"john","type":"codeVoice"},{"type":"text","text":" variable now has a strong reference to the new "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" variable has a strong reference to the new "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"referenceCycle01","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can now link the two instances together","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that the person has an apartment, and the apartment has a tenant."},{"type":"text","text":" "},{"text":"Note that an exclamation point (","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":") is used to unwrap and access"},{"text":" ","type":"text"},{"type":"text","text":"the instances stored inside the "},{"code":"john","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"text":" optional variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that the properties of those instances can be set:"}]},{"syntax":"swift","type":"codeListing","code":["john!.apartment = unit4A","unit4A!.tenant = john"]},{"type":"paragraph","inlineContent":[{"text":"Here’s how the strong references look after you link the two instances together:","type":"text"}]},{"inlineContent":[{"identifier":"referenceCycle02","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"Unfortunately, linking these two instances creates","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a strong reference cycle between them."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance now has a strong reference to the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance has a strong reference to the "},{"code":"Person","type":"codeVoice"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"text":"Therefore, when you break the strong references held by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"john","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unit4A"},{"text":" variables,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the reference counts don’t drop to zero,"},{"text":" ","type":"text"},{"type":"text","text":"and the instances aren’t deallocated by ARC:"}],"type":"paragraph"},{"code":["john = nil","unit4A = nil"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that neither deinitializer was called"},{"text":" ","type":"text"},{"type":"text","text":"when you set these two variables to "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The strong reference cycle prevents the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instances"},{"text":" ","type":"text"},{"type":"text","text":"from ever being deallocated, causing a memory leak in your app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the strong references look after you set"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"john","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"text":" variables to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"paragraph","inlineContent":[{"identifier":"referenceCycle03","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The strong references between the ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"Apartment"},{"text":" instance remain and can’t be broken.","type":"text"}]},{"level":2,"type":"heading","text":"Resolving Strong Reference Cycles Between Class Instances","anchor":"Resolving-Strong-Reference-Cycles-Between-Class-Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two ways to resolve strong reference cycles"},{"text":" ","type":"text"},{"type":"text","text":"when you work with properties of class type:"},{"text":" ","type":"text"},{"text":"weak references and unowned references.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Weak and unowned references enable one instance in a reference cycle","type":"text"},{"type":"text","text":" "},{"text":"to refer to the other instance ","type":"text"},{"inlineContent":[{"type":"text","text":"without"}],"type":"emphasis"},{"type":"text","text":" keeping a strong hold on it."},{"type":"text","text":" "},{"text":"The instances can then refer to each other without creating a strong reference cycle.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a weak reference when the other instance has a shorter lifetime —"},{"type":"text","text":" "},{"type":"text","text":"that is, when the other instance can be deallocated first."},{"type":"text","text":" "},{"text":"In the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"type":"text","text":"it’s appropriate for an apartment to be able to have"},{"type":"text","text":" "},{"type":"text","text":"no tenant at some point in its lifetime,"},{"type":"text","text":" "},{"text":"and so a weak reference is an appropriate way to break the reference cycle in this case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In contrast, use an unowned reference when the other instance"},{"type":"text","text":" "},{"type":"text","text":"has the same lifetime or a longer lifetime."}]},{"type":"heading","anchor":"Weak-References","text":"Weak References","level":3},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"weak reference"}],"type":"emphasis"},{"type":"text","text":" is a reference that doesn’t keep a strong hold"},{"type":"text","text":" "},{"type":"text","text":"on the instance it refers to,"},{"text":" ","type":"text"},{"text":"and so doesn’t stop ARC from disposing of the referenced instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This behavior prevents the reference from becoming part of a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"You indicate a weak reference by placing the "},{"type":"codeVoice","code":"weak"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before a property or variable declaration."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because a weak reference doesn’t keep a strong hold on the instance it refers to,"},{"type":"text","text":" "},{"text":"it’s possible for that instance to be deallocated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while the weak reference is still referring to it."},{"text":" ","type":"text"},{"type":"text","text":"Therefore, ARC automatically sets a weak reference to "},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"text":"when the instance that it refers to is deallocated.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"And, because weak references need to allow"},{"type":"text","text":" "},{"text":"their value to be changed to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at runtime,"},{"text":" ","type":"text"},{"type":"text","text":"they’re always declared as variables, rather than constants, of an optional type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can check for the existence of a value in the weak reference,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"just like any other optional value,"},{"type":"text","text":" "},{"text":"and you will never end up with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a reference to an invalid instance that no longer exists."}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Property observers aren’t called","type":"text"},{"text":" ","type":"text"},{"text":"when ARC sets a weak reference to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is identical to the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" example from above,"},{"text":" ","type":"text"},{"text":"with one important difference.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This time around, the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" type’s "},{"code":"tenant","type":"codeVoice"},{"type":"text","text":" property"},{"type":"text","text":" "},{"text":"is declared as a weak reference:","type":"text"}]},{"syntax":"swift","code":["class Person {","    let name: String","    init(name: String) { self.name = name }","    var apartment: Apartment?","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","    let unit: String","    init(unit: String) { self.unit = unit }","    weak var tenant: Person?","    deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The strong references from the two variables ("},{"type":"codeVoice","code":"john"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unit4A"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the links between the two instances are created as before:"}]},{"code":["var john: Person?","var unit4A: Apartment?","","john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")","","john!.apartment = unit4A","unit4A!.tenant = john"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Here’s how the references look now that you’ve linked the two instances together:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"weakReference01","type":"image"}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance still has a strong reference to the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"type":"text","text":"but the "},{"type":"codeVoice","code":"Apartment"},{"text":" instance now has a ","type":"text"},{"inlineContent":[{"text":"weak","type":"text"}],"type":"emphasis"},{"type":"text","text":" reference to the "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"This means that when you break the strong reference held by"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable by setting it to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"syntax":"swift","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\""],"type":"codeListing"},{"inlineContent":[{"text":"Because there are no more strong references to the ","type":"text"},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"text":"it’s deallocated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"code":"tenant","type":"codeVoice"},{"text":" property is set to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"weakReference02"}]},{"inlineContent":[{"text":"The only remaining strong reference to the ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is from the "},{"code":"unit4A","type":"codeVoice"},{"type":"text","text":" variable."},{"type":"text","text":" "},{"text":"If you break ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"text":" strong reference,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"Apartment"},{"text":" instance:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["unit4A = nil","\/\/ Prints \"Apartment 4A is being deinitialized\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"it too is deallocated:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"weakReference03","type":"image"}]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"In systems that use garbage collection,"},{"type":"text","text":" "},{"type":"text","text":"weak pointers are sometimes used to implement a simple caching mechanism"},{"text":" ","type":"text"},{"type":"text","text":"because objects with no strong references are deallocated"},{"text":" ","type":"text"},{"text":"only when memory pressure triggers garbage collection.","type":"text"},{"type":"text","text":" "},{"text":"However, with ARC, values are deallocated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as soon as their last strong reference is removed,"},{"text":" ","type":"text"},{"text":"making weak references unsuitable for such a purpose.","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"heading","anchor":"Unowned-References","text":"Unowned References","level":3},{"type":"paragraph","inlineContent":[{"text":"Like a weak reference,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"inlineContent":[{"type":"text","text":"unowned reference"}],"type":"emphasis"},{"type":"text","text":" doesn’t keep"},{"text":" ","type":"text"},{"type":"text","text":"a strong hold on the instance it refers to."},{"text":" ","type":"text"},{"type":"text","text":"Unlike a weak reference, however,"},{"text":" ","type":"text"},{"text":"an unowned reference is used when the other instance","type":"text"},{"type":"text","text":" "},{"text":"has the same lifetime or a longer lifetime.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You indicate an unowned reference by placing the "},{"type":"codeVoice","code":"unowned"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before a property or variable declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a weak reference,"},{"text":" ","type":"text"},{"type":"text","text":"an unowned reference is expected to always have a value."},{"text":" ","type":"text"},{"type":"text","text":"As a result,"},{"type":"text","text":" "},{"text":"marking a value as unowned doesn’t make it optional,","type":"text"},{"type":"text","text":" "},{"text":"and ARC never sets an unowned reference’s value to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"name":"Important","type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use an unowned reference only when you are sure that"},{"text":" ","type":"text"},{"type":"text","text":"the reference "},{"inlineContent":[{"text":"always","type":"text"}],"type":"emphasis"},{"text":" refers to an instance that hasn’t been deallocated.","type":"text"}]},{"inlineContent":[{"text":"If you try to access the value of an unowned reference","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after that instance has been deallocated,"},{"type":"text","text":" "},{"text":"you’ll get a runtime error.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines two classes, "},{"type":"codeVoice","code":"Customer"},{"text":" and ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which model a bank customer and a possible credit card for that customer."},{"type":"text","text":" "},{"text":"These two classes each store an instance of the other class as a property.","type":"text"},{"type":"text","text":" "},{"text":"This relationship has the potential to create a strong reference cycle.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The relationship between "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" is slightly different from"},{"text":" ","type":"text"},{"text":"the relationship between ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" and "},{"code":"Person","type":"codeVoice"},{"text":" ","type":"text"},{"text":"seen in the weak reference example above.","type":"text"},{"type":"text","text":" "},{"text":"In this data model, a customer may or may not have a credit card,","type":"text"},{"type":"text","text":" "},{"text":"but a credit card will ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"always","type":"text"}]},{"type":"text","text":" be associated with a customer."},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance never outlives the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" that it refers to."},{"text":" ","type":"text"},{"text":"To represent this, the ","type":"text"},{"type":"codeVoice","code":"Customer"},{"text":" class has an optional ","type":"text"},{"type":"codeVoice","code":"card"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"but the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" class has an unowned (and non-optional) "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"text":"Furthermore, a new ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" instance can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" be created"},{"text":" ","type":"text"},{"type":"text","text":"by passing a "},{"type":"codeVoice","code":"number"},{"type":"text","text":" value and a "},{"code":"customer","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"to a custom ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"text":" initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This ensures that a "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance always has"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"customer","type":"codeVoice"},{"type":"text","text":" instance associated with it when the "},{"type":"codeVoice","code":"CreditCard"},{"text":" instance is created.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Because a credit card will always have a customer,","type":"text"},{"type":"text","text":" "},{"text":"you define its ","type":"text"},{"type":"codeVoice","code":"customer"},{"type":"text","text":" property as an unowned reference,"},{"type":"text","text":" "},{"text":"to avoid a strong reference cycle:","type":"text"}]},{"type":"codeListing","code":["class Customer {","    let name: String","    var card: CreditCard?","    init(name: String) {","        self.name = name","    }","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class CreditCard {","    let number: UInt64","    unowned let customer: Customer","    init(number: UInt64, customer: Customer) {","        self.number = number","        self.customer = customer","    }","    deinit { print(\"Card #\\(number) is being deinitialized\") }","}"],"syntax":"swift"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"number","type":"codeVoice"},{"text":" property of the ","type":"text"},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" class is defined with"},{"text":" ","type":"text"},{"type":"text","text":"a type of "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"to ensure that the ","type":"text"},{"type":"codeVoice","code":"number"},{"type":"text","text":" property’s capacity is large enough to store"},{"type":"text","text":" "},{"type":"text","text":"a 16-digit card number on both 32-bit and 64-bit systems."}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"This next code snippet defines an optional ","type":"text"},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"john"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which will be used to store a reference to a specific customer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This variable has an initial value of nil, by virtue of being optional:"}]},{"type":"codeListing","syntax":"swift","code":["var john: Customer?"]},{"type":"paragraph","inlineContent":[{"text":"You can now create a ","type":"text"},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and use it to initialize and assign a new "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"as that customer’s ","type":"text"},{"code":"card","type":"codeVoice"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["john = Customer(name: \"John Appleseed\")","john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)"]},{"inlineContent":[{"text":"Here’s how the references look, now that you’ve linked the two instances:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"unownedReference01"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Customer","type":"codeVoice"},{"text":" instance now has a strong reference to the ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance has an unowned reference to the "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" instance."}]},{"inlineContent":[{"text":"Because of the unowned ","type":"text"},{"type":"codeVoice","code":"customer"},{"text":" reference,","type":"text"},{"type":"text","text":" "},{"text":"when you break the strong reference held by the ","type":"text"},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable,"},{"text":" ","type":"text"},{"type":"text","text":"there are no more strong references to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"unownedReference02","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"it’s deallocated.","type":"text"},{"type":"text","text":" "},{"text":"After this happens,","type":"text"},{"type":"text","text":" "},{"text":"there are no more strong references to the ","type":"text"},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and it too is deallocated:"}]},{"type":"codeListing","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\"","\/\/ Prints \"Card #1234567890123456 is being deinitialized\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final code snippet above shows that"},{"type":"text","text":" "},{"text":"the deinitializers for the ","type":"text"},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"both print their “deinitialized” messages","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" variable is set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples above show how to use "},{"inlineContent":[{"type":"text","text":"safe"}],"type":"emphasis"},{"type":"text","text":" unowned references."},{"type":"text","text":" "},{"type":"text","text":"Swift also provides "},{"inlineContent":[{"text":"unsafe","type":"text"}],"type":"emphasis"},{"text":" unowned references for cases where","type":"text"},{"type":"text","text":" "},{"text":"you need to disable runtime safety checks —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for example, for performance reasons."},{"type":"text","text":" "},{"type":"text","text":"As with all unsafe operations,"},{"type":"text","text":" "},{"text":"you take on the responsibility for checking that code for safety.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You indicate an unsafe unowned reference by writing "},{"code":"unowned(unsafe)","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"If you try to access an unsafe unowned reference","type":"text"},{"text":" ","type":"text"},{"text":"after the instance that it refers to is deallocated,","type":"text"},{"text":" ","type":"text"},{"text":"your program will try to access the memory location","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where the instance used to be,"},{"type":"text","text":" "},{"text":"which is an unsafe operation.","type":"text"}],"type":"paragraph"}],"style":"note"},{"text":"Unowned Optional References","level":3,"anchor":"Unowned-Optional-References","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can mark an optional reference to a class as unowned."},{"type":"text","text":" "},{"type":"text","text":"In terms of the ARC ownership model,"},{"type":"text","text":" "},{"type":"text","text":"an unowned optional reference and a weak reference"},{"text":" ","type":"text"},{"type":"text","text":"can both be used in the same contexts."},{"type":"text","text":" "},{"text":"The difference is that when you use an unowned optional reference,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you’re responsible for making sure it always"},{"text":" ","type":"text"},{"type":"text","text":"refers to a valid object or is set to "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"Here’s an example that keeps track of the courses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"offered by a particular department at a school:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Department {","    var name: String","    var courses: [Course]","    init(name: String) {","        self.name = name","        self.courses = []","    }","}","","class Course {","    var name: String","    unowned var department: Department","    unowned var nextCourse: Course?","    init(name: String, in department: Department) {","        self.name = name","        self.department = department","        self.nextCourse = nil","    }","}"]},{"inlineContent":[{"code":"Department","type":"codeVoice"},{"type":"text","text":" maintains a strong reference"},{"type":"text","text":" "},{"text":"to each course that the department offers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the ARC ownership model, a department owns its courses."},{"text":" ","type":"text"},{"code":"Course","type":"codeVoice"},{"type":"text","text":" has two unowned references,"},{"text":" ","type":"text"},{"text":"one to the department","type":"text"},{"type":"text","text":" "},{"text":"and one to the next course a student should take;","type":"text"},{"type":"text","text":" "},{"text":"a course doesn’t own either of these objects.","type":"text"},{"text":" ","type":"text"},{"text":"Every course is part of some department","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"type":"codeVoice","code":"department"},{"type":"text","text":" property isn’t an optional."},{"text":" ","type":"text"},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"because some courses don’t have a recommended follow-on course,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"nextCourse"},{"type":"text","text":" property is an optional."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of using these classes:"}]},{"code":["let department = Department(name: \"Horticulture\")","","let intro = Course(name: \"Survey of Plants\", in: department)","let intermediate = Course(name: \"Growing Common Herbs\", in: department)","let advanced = Course(name: \"Caring for Tropical Plants\", in: department)","","intro.nextCourse = intermediate","intermediate.nextCourse = advanced","department.courses = [intro, intermediate, advanced]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above creates a department and its three courses.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The intro and intermediate courses both have a suggested next course"},{"type":"text","text":" "},{"text":"stored in their ","type":"text"},{"type":"codeVoice","code":"nextCourse"},{"text":" property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which maintains an unowned optional reference to"},{"type":"text","text":" "},{"type":"text","text":"the course a student should take after completing this one."}]},{"type":"paragraph","inlineContent":[{"identifier":"unownedOptionalReference","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"An unowned optional reference doesn’t keep a strong hold","type":"text"},{"text":" ","type":"text"},{"text":"on the instance of the class that it wraps,","type":"text"},{"type":"text","text":" "},{"text":"and so it doesn’t prevent ARC from deallocating the instance.","type":"text"},{"type":"text","text":" "},{"text":"It behaves the same as an unowned reference does under ARC,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"except that an unowned optional reference can be "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Like non-optional unowned references,"},{"type":"text","text":" "},{"type":"text","text":"you’re responsible for ensuring that "},{"code":"nextCourse","type":"codeVoice"},{"type":"text","text":" "},{"text":"always refers to a course that hasn’t been deallocated.","type":"text"},{"type":"text","text":" "},{"text":"In this case, for example,","type":"text"},{"type":"text","text":" "},{"text":"when you delete a course from ","type":"text"},{"type":"codeVoice","code":"department.courses"},{"type":"text","text":" "},{"text":"you also need to remove any references to it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that other courses might have."}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The underlying type of an optional value is "},{"type":"codeVoice","code":"Optional"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is an enumeration in the Swift standard library.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, optionals are an exception to the rule that"},{"text":" ","type":"text"},{"type":"text","text":"value types can’t be marked with "},{"type":"codeVoice","code":"unowned"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The optional that wraps the class"},{"type":"text","text":" "},{"type":"text","text":"doesn’t use reference counting,"},{"text":" ","type":"text"},{"text":"so you don’t need to maintain a strong reference to the optional.","type":"text"}],"type":"paragraph"}]},{"anchor":"Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","text":"Unowned References and Implicitly Unwrapped Optional Properties","type":"heading","level":3},{"inlineContent":[{"text":"The examples for weak and unowned references above","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"cover two of the more common scenarios"},{"text":" ","type":"text"},{"type":"text","text":"in which it’s necessary to break a strong reference cycle."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" example shows","type":"text"},{"type":"text","text":" "},{"text":"a situation where two properties, both of which are allowed to be ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have the potential to cause a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"This scenario is best resolved with a weak reference."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" example"},{"type":"text","text":" "},{"type":"text","text":"shows a situation where one property that’s allowed to be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"and another property that can’t be "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"have the potential to cause a strong reference cycle."},{"type":"text","text":" "},{"type":"text","text":"This scenario is best resolved with an unowned reference."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, there’s a third scenario,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in which "},{"type":"emphasis","inlineContent":[{"type":"text","text":"both"}]},{"text":" properties should always have a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and neither property should ever be "},{"code":"nil","type":"codeVoice"},{"text":" once initialization is complete.","type":"text"},{"type":"text","text":" "},{"text":"In this scenario, it’s useful to combine an unowned property on one class","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with an implicitly unwrapped optional property on the other class."}]},{"type":"paragraph","inlineContent":[{"text":"This enables both properties to be accessed directly","type":"text"},{"text":" ","type":"text"},{"text":"(without optional unwrapping) once initialization is complete,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while still avoiding a reference cycle."},{"text":" ","type":"text"},{"type":"text","text":"This section shows you how to set up such a relationship."}]},{"inlineContent":[{"text":"The example below defines two classes, ","type":"text"},{"type":"codeVoice","code":"Country"},{"type":"text","text":" and "},{"code":"City","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"each of which stores an instance of the other class as a property."},{"text":" ","type":"text"},{"type":"text","text":"In this data model, every country must always have a capital city,"},{"text":" ","type":"text"},{"text":"and every city must always belong to a country.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To represent this, the "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" class has a "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"City","type":"codeVoice"},{"text":" class has a ","type":"text"},{"type":"codeVoice","code":"country"},{"text":" property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Country {","    let name: String","    var capitalCity: City!","    init(name: String, capitalName: String) {","        self.name = name","        self.capitalCity = City(name: capitalName, country: self)","    }","}","","class City {","    let name: String","    unowned let country: Country","    init(name: String, country: Country) {","        self.name = name","        self.country = country","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To set up the interdependency between the two classes,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the initializer for "},{"code":"City","type":"codeVoice"},{"text":" takes a ","type":"text"},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"type":"text","text":"and stores this instance in its "},{"code":"country","type":"codeVoice"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"text":"The initializer for ","type":"text"},{"code":"City","type":"codeVoice"},{"text":" is called from within the initializer for ","type":"text"},{"type":"codeVoice","code":"Country"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, the initializer for "},{"code":"Country","type":"codeVoice"},{"text":" can’t pass ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" to the "},{"code":"City","type":"codeVoice"},{"type":"text","text":" initializer"},{"type":"text","text":" "},{"type":"text","text":"until a new "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance is fully initialized,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To cope with this requirement,","type":"text"},{"text":" ","type":"text"},{"text":"you declare the ","type":"text"},{"type":"codeVoice","code":"capitalCity"},{"text":" property of ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an implicitly unwrapped optional property,"},{"text":" ","type":"text"},{"type":"text","text":"indicated by the exclamation point at the end of its type annotation ("},{"type":"codeVoice","code":"City!"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This means that the "},{"code":"capitalCity","type":"codeVoice"},{"type":"text","text":" property has a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"like any other optional,"},{"type":"text","text":" "},{"type":"text","text":"but can be accessed without the need to unwrap its value"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" has a default "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"type":"text","text":"a new "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" instance is considered fully initialized"},{"text":" ","type":"text"},{"type":"text","text":"as soon as the "},{"code":"Country","type":"codeVoice"},{"text":" instance sets its ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" property within its initializer.","type":"text"},{"text":" ","type":"text"},{"text":"This means that the ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" initializer can start to reference and pass around","type":"text"},{"text":" ","type":"text"},{"text":"the implicit ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" property as soon as the "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property is set."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Country"},{"text":" initializer can therefore pass ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" as one of the parameters for"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"City"},{"text":" initializer when the ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" initializer is setting","type":"text"},{"type":"text","text":" "},{"text":"its own ","type":"text"},{"code":"capitalCity","type":"codeVoice"},{"type":"text","text":" property."}]},{"inlineContent":[{"type":"text","text":"All of this means that you can create the "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" and "},{"code":"City","type":"codeVoice"},{"type":"text","text":" instances"},{"text":" ","type":"text"},{"type":"text","text":"in a single statement, without creating a strong reference cycle,"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property can be accessed directly,"},{"type":"text","text":" "},{"text":"without needing to use an exclamation point to unwrap its optional value:","type":"text"}],"type":"paragraph"},{"code":["var country = Country(name: \"Canada\", capitalName: \"Ottawa\")","print(\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\")","\/\/ Prints \"Canada's capital city is called Ottawa\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above, the use of an implicitly unwrapped optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"means that all of the two-phase class initializer requirements are satisfied."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"capitalCity"},{"text":" property can be used and accessed like a non-optional value","type":"text"},{"text":" ","type":"text"},{"text":"once initialization is complete,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"while still avoiding a strong reference cycle."}]},{"level":2,"text":"Strong Reference Cycles for Closures","anchor":"Strong-Reference-Cycles-for-Closures","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You saw above how a strong reference cycle can be created"},{"type":"text","text":" "},{"text":"when two class instance properties hold a strong reference to each other.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You also saw how to use weak and unowned references to break these strong reference cycles."}]},{"type":"paragraph","inlineContent":[{"text":"A strong reference cycle can also occur","type":"text"},{"text":" ","type":"text"},{"text":"if you assign a closure to a property of a class instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the body of that closure captures the instance."},{"type":"text","text":" "},{"type":"text","text":"This capture might occur because the closure’s body accesses a property of the instance,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"self.someProperty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or because the closure calls a method on the instance,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"code":"self.someMethod()","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In either case, these accesses cause the closure to “capture” "},{"code":"self","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"creating a strong reference cycle.","type":"text"}]},{"inlineContent":[{"text":"This strong reference cycle occurs because closures, like classes, are ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"When you assign a closure to a property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you are assigning a "},{"type":"emphasis","inlineContent":[{"text":"reference","type":"text"}]},{"text":" to that closure.","type":"text"},{"type":"text","text":" "},{"text":"In essence, it’s the same problem as above —","type":"text"},{"type":"text","text":" "},{"text":"two strong references are keeping each other alive.","type":"text"},{"text":" ","type":"text"},{"text":"However, rather than two class instances,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this time it’s a class instance and a closure that are keeping each other alive."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift provides an elegant solution to this problem,","type":"text"},{"type":"text","text":" "},{"text":"known as a ","type":"text"},{"inlineContent":[{"text":"closure capture list","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"However, before you learn how to break a strong reference cycle with a closure capture list,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s useful to understand how such a cycle can be caused."}]},{"inlineContent":[{"text":"The example below shows how you can create a strong reference cycle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when using a closure that references "},{"type":"codeVoice","code":"self"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This example defines a class called "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which provides a simple model for an individual element within an HTML document:"}],"type":"paragraph"},{"code":["class HTMLElement {","","    let name: String","    let text: String?","","    lazy var asHTML: () -> String = {","        if let text = self.text {","            return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","        } else {","            return \"<\\(self.name) \/>\"","        }","    }","","    init(name: String, text: String? = nil) {","        self.name = name","        self.text = text","    }","","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" class defines a ","type":"text"},{"type":"codeVoice","code":"name"},{"text":" property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which indicates the name of the element,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"h1\""},{"type":"text","text":" for a heading element,"},{"type":"text","text":" "},{"code":"\"p\"","type":"codeVoice"},{"type":"text","text":" for a paragraph element,"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"\"br\""},{"type":"text","text":" for a line break element."},{"text":" ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" also defines an optional ","type":"text"},{"code":"text","type":"codeVoice"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which you can set to a string that represents"},{"text":" ","type":"text"},{"type":"text","text":"the text to be rendered within that HTML element."}]},{"inlineContent":[{"type":"text","text":"In addition to these two simple properties,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" class defines a lazy property called "},{"type":"codeVoice","code":"asHTML"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This property references a closure that combines ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" and "},{"code":"text","type":"codeVoice"},{"type":"text","text":" "},{"text":"into an HTML string fragment.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"text":" property is of type ","type":"text"},{"code":"() -> String","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or “a function that takes no parameters, and returns a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By default, the ","type":"text"},{"code":"asHTML","type":"codeVoice"},{"text":" property is assigned a closure that returns","type":"text"},{"type":"text","text":" "},{"text":"a string representation of an HTML tag.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This tag contains the optional "},{"type":"codeVoice","code":"text"},{"type":"text","text":" value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or no text content if "},{"type":"codeVoice","code":"text"},{"type":"text","text":" doesn’t exist."},{"type":"text","text":" "},{"type":"text","text":"For a paragraph element, the closure would return "},{"code":"\"<p>some text<\/p>\"","type":"codeVoice"},{"type":"text","text":" or "},{"code":"\"<p \/>\"","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"depending on whether the ","type":"text"},{"type":"codeVoice","code":"text"},{"text":" property equals ","type":"text"},{"type":"codeVoice","code":"\"some text\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property is named and used somewhat like an instance method."},{"type":"text","text":" "},{"text":"However, because ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"text":" is a closure property rather than an instance method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can replace the default value of the "},{"code":"asHTML","type":"codeVoice"},{"text":" property with a custom closure,","type":"text"},{"type":"text","text":" "},{"text":"if you want to change the HTML rendering for a particular HTML element.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, the ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property could be set to a closure"},{"type":"text","text":" "},{"type":"text","text":"that defaults to some text if the "},{"type":"codeVoice","code":"text"},{"text":" property is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"in order to prevent the representation from returning an empty HTML tag:"}]},{"syntax":"swift","type":"codeListing","code":["let heading = HTMLElement(name: \"h1\")","let defaultText = \"some default text\"","heading.asHTML = {","    return \"<\\(heading.name)>\\(heading.text ?? defaultText)<\/\\(heading.name)>\"","}","print(heading.asHTML())","\/\/ Prints \"<h1>some default text<\/h1>\""]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"text":" property is declared as a lazy property,","type":"text"},{"type":"text","text":" "},{"text":"because it’s only needed if and when the element actually needs to be rendered","type":"text"},{"type":"text","text":" "},{"text":"as a string value for some HTML output target.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The fact that "},{"code":"asHTML","type":"codeVoice"},{"text":" is a lazy property means that you can refer to ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" "},{"type":"text","text":"within the default closure,"},{"text":" ","type":"text"},{"text":"because the lazy property will not be accessed until","type":"text"},{"type":"text","text":" "},{"text":"after initialization has been completed and ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" is known to exist."}]}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" class provides a single initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which takes a "},{"type":"codeVoice","code":"name"},{"text":" argument and (if desired) a ","type":"text"},{"code":"text","type":"codeVoice"},{"type":"text","text":" argument"},{"text":" ","type":"text"},{"text":"to initialize a new element.","type":"text"},{"type":"text","text":" "},{"text":"The class also defines a deinitializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which prints a message to show when an "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance is deallocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you use the "},{"type":"codeVoice","code":"HTMLElement"},{"text":" class to create and print a new instance:","type":"text"}]},{"code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"paragraph","type":"codeVoice"},{"type":"text","text":" variable above is defined as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so that it can be set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" below to demonstrate"},{"type":"text","text":" "},{"type":"text","text":"the presence of a strong reference cycle."}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"Unfortunately, the "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" class, as written above,"},{"type":"text","text":" "},{"type":"text","text":"creates a strong reference cycle between"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance and the closure used for its default ","type":"text"},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"Here’s how the cycle looks:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"closureReferenceCycle01","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The instance’s ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property holds a strong reference to its closure."},{"type":"text","text":" "},{"text":"However, because the closure refers to ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" within its body"},{"text":" ","type":"text"},{"type":"text","text":"(as a way to reference "},{"type":"codeVoice","code":"self.name"},{"type":"text","text":" and "},{"type":"codeVoice","code":"self.text"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"the closure "},{"type":"emphasis","inlineContent":[{"type":"text","text":"captures"}]},{"text":" self,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which means that it holds a strong reference back to the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"type":"text","text":"A strong reference cycle is created between the two."},{"text":" ","type":"text"},{"text":"(For more information about capturing values in a closure,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","type":"reference","isActive":true},{"text":".)","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the closure refers to "},{"type":"codeVoice","code":"self"},{"text":" multiple times,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it only captures one strong reference to the "},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance.","type":"text"}]}],"style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"If you set the "},{"type":"codeVoice","code":"paragraph"},{"text":" variable to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"and break its strong reference to the "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"type":"text","text":"the strong reference cycle prevents deallocating"},{"type":"text","text":" "},{"text":"both the ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" instance and its closure:"}],"type":"paragraph"},{"code":["paragraph = nil"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Note that the message in the ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" deinitializer isn’t printed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which shows that the "},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance isn’t deallocated.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Resolving-Strong-Reference-Cycles-for-Closures","text":"Resolving Strong Reference Cycles for Closures"},{"type":"paragraph","inlineContent":[{"text":"You resolve a strong reference cycle between a closure and a class instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by defining a "},{"inlineContent":[{"type":"text","text":"capture list"}],"type":"emphasis"},{"type":"text","text":" as part of the closure’s definition."},{"text":" ","type":"text"},{"type":"text","text":"A capture list defines the rules to use when capturing one or more reference types"},{"type":"text","text":" "},{"type":"text","text":"within the closure’s body."},{"type":"text","text":" "},{"text":"As with strong reference cycles between two class instances,","type":"text"},{"type":"text","text":" "},{"text":"you declare each captured reference to be a weak or unowned reference","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than a strong reference."},{"type":"text","text":" "},{"type":"text","text":"The appropriate choice of weak or unowned depends on"},{"type":"text","text":" "},{"type":"text","text":"the relationships between the different parts of your code."}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"Swift requires you to write ","type":"text"},{"type":"codeVoice","code":"self.someProperty"},{"type":"text","text":" or "},{"type":"codeVoice","code":"self.someMethod()"},{"type":"text","text":" "},{"text":"(rather than just ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"someMethod()"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whenever you refer to a member of "},{"type":"codeVoice","code":"self"},{"text":" within a closure.","type":"text"},{"type":"text","text":" "},{"text":"This helps you remember that it’s possible to capture ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" by accident."}],"type":"paragraph"}]},{"anchor":"Defining-a-Capture-List","level":3,"text":"Defining a Capture List","type":"heading"},{"inlineContent":[{"text":"Each item in a capture list is a pairing of the ","type":"text"},{"code":"weak","type":"codeVoice"},{"type":"text","text":" or "},{"code":"unowned","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a reference to a class instance (such as "},{"type":"codeVoice","code":"self"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"or a variable initialized with some value (such as ","type":"text"},{"code":"delegate = self.delegate","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"These pairings are written within a pair of square braces, separated by commas.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Place the capture list before a closure’s parameter list and return type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if they’re provided:"}]},{"type":"codeListing","syntax":"swift","code":["lazy var someClosure = {","        [unowned self, weak delegate = self.delegate]","        (index: Int, stringToProcess: String) -> String in","    \/\/ closure body goes here","}"]},{"inlineContent":[{"type":"text","text":"If a closure doesn’t specify a parameter list or return type"},{"text":" ","type":"text"},{"type":"text","text":"because they can be inferred from context,"},{"text":" ","type":"text"},{"type":"text","text":"place the capture list at the very start of the closure,"},{"type":"text","text":" "},{"type":"text","text":"followed by the "},{"code":"in","type":"codeVoice"},{"text":" keyword:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["lazy var someClosure = {","        [unowned self, weak delegate = self.delegate] in","    \/\/ closure body goes here","}"],"type":"codeListing"},{"type":"heading","anchor":"Weak-and-Unowned-References","level":3,"text":"Weak and Unowned References"},{"type":"paragraph","inlineContent":[{"text":"Define a capture in a closure as an unowned reference","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the closure and the instance it captures will always refer to each other,"},{"text":" ","type":"text"},{"type":"text","text":"and will always be deallocated at the same time."}]},{"type":"paragraph","inlineContent":[{"text":"Conversely, define a capture as a weak reference when the captured reference","type":"text"},{"type":"text","text":" "},{"type":"text","text":"may become "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at some point in the future."},{"text":" ","type":"text"},{"type":"text","text":"Weak references are always of an optional type,"},{"type":"text","text":" "},{"type":"text","text":"and automatically become "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when the instance they reference is deallocated."},{"text":" ","type":"text"},{"type":"text","text":"This enables you to check for their existence within the closure’s body."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"If the captured reference will never become ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"it should always be captured as an unowned reference,","type":"text"},{"type":"text","text":" "},{"text":"rather than a weak reference.","type":"text"}]}],"name":"Note"},{"inlineContent":[{"type":"text","text":"An unowned reference is the appropriate capture method to use to resolve"},{"type":"text","text":" "},{"type":"text","text":"the strong reference cycle in the "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" example"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","isActive":true,"type":"reference"},{"text":" above.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s how you write the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class to avoid the cycle:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class HTMLElement {","","    let name: String","    let text: String?","","    lazy var asHTML: () -> String = {","            [unowned self] in","        if let text = self.text {","            return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","        } else {","            return \"<\\(self.name) \/>\"","        }","    }","","    init(name: String, text: String? = nil) {","        self.name = name","        self.text = text","    }","","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","","}"]},{"type":"paragraph","inlineContent":[{"text":"This implementation of ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" is identical to the previous implementation,"},{"text":" ","type":"text"},{"text":"apart from the addition of a capture list within the ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" closure."},{"type":"text","text":" "},{"text":"In this case, the capture list is ","type":"text"},{"code":"[unowned self]","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which means “capture self as an unowned reference rather than a strong reference”.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can create and print an "},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance as before:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look with the capture list in place:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"closureReferenceCycle02"}]},{"inlineContent":[{"text":"This time, the capture of ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" by the closure is an unowned reference,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t keep a strong hold on the "},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance it has captured.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you set the strong reference from the "},{"type":"codeVoice","code":"paragraph"},{"text":" variable to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"HTMLElement","type":"codeVoice"},{"text":" instance is deallocated,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as can be seen from the printing of its deinitializer message in the example below:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["paragraph = nil","\/\/ Prints \"p is being deinitialized\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about capture lists,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Capture-Lists"},{"text":".","type":"text"}]}]}],"metadata":{"title":"Automatic Reference Counting"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","interfaceLanguage":"swift"},"sections":[],"references":{"unownedReference02":{"alt":null,"identifier":"unownedReference02","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/unownedReference02@2x.png"},{"url":"\/images\/unownedReference02~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","role":"collection","abstract":[],"type":"topic","title":"The Swift Programming Language (5.9.2)"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","abstract":[],"title":"Resolving Strong Reference Cycles Between Class Instances","kind":"section"},"weakReference01":{"alt":null,"identifier":"weakReference01","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/weakReference01@2x.png"},{"url":"\/images\/weakReference01~dark@2x.png","traits":["2x","dark"]}]},"weakReference03":{"identifier":"weakReference03","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/weakReference03@2x.png"},{"url":"\/images\/weakReference03~dark@2x.png","traits":["2x","dark"]}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Capturing-Values":{"abstract":[],"kind":"section","title":"Capturing Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures#Capturing-Values"},"referenceCycle03":{"identifier":"referenceCycle03","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/referenceCycle03@2x.png"},{"url":"\/images\/referenceCycle03~dark@2x.png","traits":["2x","dark"]}],"alt":null},"referenceCycle01":{"alt":null,"identifier":"referenceCycle01","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/referenceCycle01@2x.png"},{"url":"\/images\/referenceCycle01~dark@2x.png","traits":["2x","dark"]}]},"closureReferenceCycle01":{"identifier":"closureReferenceCycle01","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/closureReferenceCycle01@2x.png"},{"url":"\/images\/closureReferenceCycle01~dark@2x.png","traits":["2x","dark"]}],"alt":null},"referenceCycle02":{"alt":null,"identifier":"referenceCycle02","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/referenceCycle02@2x.png"},{"url":"\/images\/referenceCycle02~dark@2x.png","traits":["2x","dark"]}]},"unownedReference01":{"identifier":"unownedReference01","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/unownedReference01@2x.png"},{"url":"\/images\/unownedReference01~dark@2x.png","traits":["2x","dark"]}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Capture-Lists":{"abstract":[],"kind":"section","title":"Capture Lists","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Capture-Lists","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Capture-Lists"},"unownedOptionalReference":{"identifier":"unownedOptionalReference","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/unownedOptionalReference@2x.png"},{"url":"\/images\/unownedOptionalReference~dark@2x.png","traits":["2x","dark"]}],"alt":null},"weakReference02":{"alt":null,"identifier":"weakReference02","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/weakReference02@2x.png"},{"url":"\/images\/weakReference02~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html":{"identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","type":"link","titleInlineContent":[{"type":"text","text":"Transitioning to ARC Release Notes"}],"url":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","title":"Transitioning to ARC Release Notes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Two-Phase-Initialization":{"abstract":[],"kind":"section","title":"Two-Phase Initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Two-Phase-Initialization","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Two-Phase-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Strong-Reference-Cycles-for-Closures","abstract":[],"title":"Strong Reference Cycles for Closures","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"abstract":[],"kind":"section","title":"Implicitly Unwrapped Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals"},"closureReferenceCycle02":{"identifier":"closureReferenceCycle02","type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/closureReferenceCycle02@2x.png"},{"url":"\/images\/closureReferenceCycle02~dark@2x.png","traits":["2x","dark"]}],"alt":null}}}